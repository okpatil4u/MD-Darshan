/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.1
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#define SWIGPYTHON
#define SWIG_PYTHON_DIRECTOR_NO_VTABLE


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__)) 
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__)) 
# else
#   define SWIGUNUSED 
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif 
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif



/* Python.h has to appear first */
#include <Python.h>

/* -----------------------------------------------------------------------------
 * swigrun.swg
 *
 * This file contains generic C API SWIG runtime support for pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

/* This should only be incremented when either the layout of swig_type_info changes,
   or for whatever reason, the runtime changes incompatibly */
#define SWIG_RUNTIME_VERSION "4"

/* define SWIG_TYPE_TABLE_NAME as "SWIG_TYPE_TABLE" */
#ifdef SWIG_TYPE_TABLE
# define SWIG_QUOTE_STRING(x) #x
# define SWIG_EXPAND_AND_QUOTE_STRING(x) SWIG_QUOTE_STRING(x)
# define SWIG_TYPE_TABLE_NAME SWIG_EXPAND_AND_QUOTE_STRING(SWIG_TYPE_TABLE)
#else
# define SWIG_TYPE_TABLE_NAME
#endif

/*
  You can use the SWIGRUNTIME and SWIGRUNTIMEINLINE macros for
  creating a static or dynamic library from the SWIG runtime code.
  In 99.9% of the cases, SWIG just needs to declare them as 'static'.
  
  But only do this if strictly necessary, ie, if you have problems
  with your compiler or suchlike.
*/

#ifndef SWIGRUNTIME
# define SWIGRUNTIME SWIGINTERN
#endif

#ifndef SWIGRUNTIMEINLINE
# define SWIGRUNTIMEINLINE SWIGRUNTIME SWIGINLINE
#endif

/*  Generic buffer size */
#ifndef SWIG_BUFFER_SIZE
# define SWIG_BUFFER_SIZE 1024
#endif

/* Flags for pointer conversions */
#define SWIG_POINTER_DISOWN        0x1
#define SWIG_CAST_NEW_MEMORY       0x2

/* Flags for new pointer objects */
#define SWIG_POINTER_OWN           0x1


/* 
   Flags/methods for returning states.
   
   The SWIG conversion methods, as ConvertPtr, return an integer 
   that tells if the conversion was successful or not. And if not,
   an error code can be returned (see swigerrors.swg for the codes).
   
   Use the following macros/flags to set or process the returning
   states.
   
   In old versions of SWIG, code such as the following was usually written:

     if (SWIG_ConvertPtr(obj,vptr,ty.flags) != -1) {
       // success code
     } else {
       //fail code
     }

   Now you can be more explicit:

    int res = SWIG_ConvertPtr(obj,vptr,ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
    } else {
      // fail code
    }

   which is the same really, but now you can also do

    Type *ptr;
    int res = SWIG_ConvertPtr(obj,(void **)(&ptr),ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
      if (SWIG_IsNewObj(res) {
        ...
	delete *ptr;
      } else {
        ...
      }
    } else {
      // fail code
    }
    
   I.e., now SWIG_ConvertPtr can return new objects and you can
   identify the case and take care of the deallocation. Of course that
   also requires SWIG_ConvertPtr to return new result values, such as

      int SWIG_ConvertPtr(obj, ptr,...) {         
        if (<obj is ok>) {			       
          if (<need new object>) {		       
            *ptr = <ptr to new allocated object>; 
            return SWIG_NEWOBJ;		       
          } else {				       
            *ptr = <ptr to old object>;	       
            return SWIG_OLDOBJ;		       
          } 				       
        } else {				       
          return SWIG_BADOBJ;		       
        }					       
      }

   Of course, returning the plain '0(success)/-1(fail)' still works, but you can be
   more explicit by returning SWIG_BADOBJ, SWIG_ERROR or any of the
   SWIG errors code.

   Finally, if the SWIG_CASTRANK_MODE is enabled, the result code
   allows to return the 'cast rank', for example, if you have this

       int food(double)
       int fooi(int);

   and you call
 
      food(1)   // cast rank '1'  (1 -> 1.0)
      fooi(1)   // cast rank '0'

   just use the SWIG_AddCast()/SWIG_CheckState()
*/

#define SWIG_OK                    (0) 
#define SWIG_ERROR                 (-1)
#define SWIG_IsOK(r)               (r >= 0)
#define SWIG_ArgError(r)           ((r != SWIG_ERROR) ? r : SWIG_TypeError)  

/* The CastRankLimit says how many bits are used for the cast rank */
#define SWIG_CASTRANKLIMIT         (1 << 8)
/* The NewMask denotes the object was created (using new/malloc) */
#define SWIG_NEWOBJMASK            (SWIG_CASTRANKLIMIT  << 1)
/* The TmpMask is for in/out typemaps that use temporal objects */
#define SWIG_TMPOBJMASK            (SWIG_NEWOBJMASK << 1)
/* Simple returning values */
#define SWIG_BADOBJ                (SWIG_ERROR)
#define SWIG_OLDOBJ                (SWIG_OK)
#define SWIG_NEWOBJ                (SWIG_OK | SWIG_NEWOBJMASK)
#define SWIG_TMPOBJ                (SWIG_OK | SWIG_TMPOBJMASK)
/* Check, add and del mask methods */
#define SWIG_AddNewMask(r)         (SWIG_IsOK(r) ? (r | SWIG_NEWOBJMASK) : r)
#define SWIG_DelNewMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_NEWOBJMASK) : r)
#define SWIG_IsNewObj(r)           (SWIG_IsOK(r) && (r & SWIG_NEWOBJMASK))
#define SWIG_AddTmpMask(r)         (SWIG_IsOK(r) ? (r | SWIG_TMPOBJMASK) : r)
#define SWIG_DelTmpMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_TMPOBJMASK) : r)
#define SWIG_IsTmpObj(r)           (SWIG_IsOK(r) && (r & SWIG_TMPOBJMASK))

/* Cast-Rank Mode */
#if defined(SWIG_CASTRANK_MODE)
#  ifndef SWIG_TypeRank
#    define SWIG_TypeRank             unsigned long
#  endif
#  ifndef SWIG_MAXCASTRANK            /* Default cast allowed */
#    define SWIG_MAXCASTRANK          (2)
#  endif
#  define SWIG_CASTRANKMASK          ((SWIG_CASTRANKLIMIT) -1)
#  define SWIG_CastRank(r)           (r & SWIG_CASTRANKMASK)
SWIGINTERNINLINE int SWIG_AddCast(int r) { 
  return SWIG_IsOK(r) ? ((SWIG_CastRank(r) < SWIG_MAXCASTRANK) ? (r + 1) : SWIG_ERROR) : r;
}
SWIGINTERNINLINE int SWIG_CheckState(int r) { 
  return SWIG_IsOK(r) ? SWIG_CastRank(r) + 1 : 0; 
}
#else /* no cast-rank mode */
#  define SWIG_AddCast
#  define SWIG_CheckState(r) (SWIG_IsOK(r) ? 1 : 0)
#endif


#include <string.h>

#ifdef __cplusplus
extern "C" {
#endif

typedef void *(*swig_converter_func)(void *, int *);
typedef struct swig_type_info *(*swig_dycast_func)(void **);

/* Structure to store information on one type */
typedef struct swig_type_info {
  const char             *name;			/* mangled name of this type */
  const char             *str;			/* human readable name of this type */
  swig_dycast_func        dcast;		/* dynamic cast function down a hierarchy */
  struct swig_cast_info  *cast;			/* linked list of types that can cast into this type */
  void                   *clientdata;		/* language specific type data */
  int                    owndata;		/* flag if the structure owns the clientdata */
} swig_type_info;

/* Structure to store a type and conversion function used for casting */
typedef struct swig_cast_info {
  swig_type_info         *type;			/* pointer to type that is equivalent to this type */
  swig_converter_func     converter;		/* function to cast the void pointers */
  struct swig_cast_info  *next;			/* pointer to next cast in linked list */
  struct swig_cast_info  *prev;			/* pointer to the previous cast */
} swig_cast_info;

/* Structure used to store module information
 * Each module generates one structure like this, and the runtime collects
 * all of these structures and stores them in a circularly linked list.*/
typedef struct swig_module_info {
  swig_type_info         **types;		/* Array of pointers to swig_type_info structures that are in this module */
  size_t                 size;		        /* Number of types in this module */
  struct swig_module_info *next;		/* Pointer to next element in circularly linked list */
  swig_type_info         **type_initial;	/* Array of initially generated type structures */
  swig_cast_info         **cast_initial;	/* Array of initially generated casting structures */
  void                    *clientdata;		/* Language specific module data */
} swig_module_info;

/* 
  Compare two type names skipping the space characters, therefore
  "char*" == "char *" and "Class<int>" == "Class<int >", etc.

  Return 0 when the two name types are equivalent, as in
  strncmp, but skipping ' '.
*/
SWIGRUNTIME int
SWIG_TypeNameComp(const char *f1, const char *l1,
		  const char *f2, const char *l2) {
  for (;(f1 != l1) && (f2 != l2); ++f1, ++f2) {
    while ((*f1 == ' ') && (f1 != l1)) ++f1;
    while ((*f2 == ' ') && (f2 != l2)) ++f2;
    if (*f1 != *f2) return (*f1 > *f2) ? 1 : -1;
  }
  return (int)((l1 - f1) - (l2 - f2));
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if not equal, 1 if equal
*/
SWIGRUNTIME int
SWIG_TypeEquiv(const char *nb, const char *tb) {
  int equiv = 0;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (!equiv && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = (SWIG_TypeNameComp(nb, ne, tb, te) == 0) ? 1 : 0;
    if (*ne) ++ne;
  }
  return equiv;
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if equal, -1 if nb < tb, 1 if nb > tb
*/
SWIGRUNTIME int
SWIG_TypeCompare(const char *nb, const char *tb) {
  int equiv = 0;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (!equiv && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = (SWIG_TypeNameComp(nb, ne, tb, te) == 0) ? 1 : 0;
    if (*ne) ++ne;
  }
  return equiv;
}


/*
  Check the typename
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheck(const char *c, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (strcmp(iter->type->name, c) == 0) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/* 
  Identical to SWIG_TypeCheck, except strcmp is replaced with a pointer comparison
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheckStruct(swig_type_info *from, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (iter->type == from) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Cast a pointer up an inheritance hierarchy
*/
SWIGRUNTIMEINLINE void *
SWIG_TypeCast(swig_cast_info *ty, void *ptr, int *newmemory) {
  return ((!ty) || (!ty->converter)) ? ptr : (*ty->converter)(ptr, newmemory);
}

/* 
   Dynamic pointer casting. Down an inheritance hierarchy
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) {
  swig_type_info *lastty = ty;
  if (!ty || !ty->dcast) return ty;
  while (ty && (ty->dcast)) {
    ty = (*ty->dcast)(ptr);
    if (ty) lastty = ty;
  }
  return lastty;
}

/*
  Return the name associated with this type
*/
SWIGRUNTIMEINLINE const char *
SWIG_TypeName(const swig_type_info *ty) {
  return ty->name;
}

/*
  Return the pretty name associated with this type,
  that is an unmangled type name in a form presentable to the user.
*/
SWIGRUNTIME const char *
SWIG_TypePrettyName(const swig_type_info *type) {
  /* The "str" field contains the equivalent pretty names of the
     type, separated by vertical-bar characters.  We choose
     to print the last name, as it is often (?) the most
     specific. */
  if (!type) return NULL;
  if (type->str != NULL) {
    const char *last_name = type->str;
    const char *s;
    for (s = type->str; *s; s++)
      if (*s == '|') last_name = s+1;
    return last_name;
  }
  else
    return type->name;
}

/* 
   Set the clientdata field for a type
*/
SWIGRUNTIME void
SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {
  swig_cast_info *cast = ti->cast;
  /* if (ti->clientdata == clientdata) return; */
  ti->clientdata = clientdata;
  
  while (cast) {
    if (!cast->converter) {
      swig_type_info *tc = cast->type;
      if (!tc->clientdata) {
	SWIG_TypeClientData(tc, clientdata);
      }
    }    
    cast = cast->next;
  }
}
SWIGRUNTIME void
SWIG_TypeNewClientData(swig_type_info *ti, void *clientdata) {
  SWIG_TypeClientData(ti, clientdata);
  ti->owndata = 1;
}
  
/*
  Search for a swig_type_info structure only by mangled name
  Search is a O(log #types)
  
  We start searching at module start, and finish searching when start == end.  
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_MangledTypeQueryModule(swig_module_info *start, 
                            swig_module_info *end, 
		            const char *name) {
  swig_module_info *iter = start;
  do {
    if (iter->size) {
      register size_t l = 0;
      register size_t r = iter->size - 1;
      do {
	/* since l+r >= 0, we can (>> 1) instead (/ 2) */
	register size_t i = (l + r) >> 1; 
	const char *iname = iter->types[i]->name;
	if (iname) {
	  register int compare = strcmp(name, iname);
	  if (compare == 0) {	    
	    return iter->types[i];
	  } else if (compare < 0) {
	    if (i) {
	      r = i - 1;
	    } else {
	      break;
	    }
	  } else if (compare > 0) {
	    l = i + 1;
	  }
	} else {
	  break; /* should never happen */
	}
      } while (l <= r);
    }
    iter = iter->next;
  } while (iter != end);
  return 0;
}

/*
  Search for a swig_type_info structure for either a mangled name or a human readable name.
  It first searches the mangled names of the types, which is a O(log #types)
  If a type is not found it then searches the human readable names, which is O(#types).
  
  We start searching at module start, and finish searching when start == end.  
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeQueryModule(swig_module_info *start, 
                     swig_module_info *end, 
		     const char *name) {
  /* STEP 1: Search the name field using binary search */
  swig_type_info *ret = SWIG_MangledTypeQueryModule(start, end, name);
  if (ret) {
    return ret;
  } else {
    /* STEP 2: If the type hasn't been found, do a complete search
       of the str field (the human readable name) */
    swig_module_info *iter = start;
    do {
      register size_t i = 0;
      for (; i < iter->size; ++i) {
	if (iter->types[i]->str && (SWIG_TypeEquiv(iter->types[i]->str, name)))
	  return iter->types[i];
      }
      iter = iter->next;
    } while (iter != end);
  }
  
  /* neither found a match */
  return 0;
}

/* 
   Pack binary data into a string
*/
SWIGRUNTIME char *
SWIG_PackData(char *c, void *ptr, size_t sz) {
  static const char hex[17] = "0123456789abcdef";
  register const unsigned char *u = (unsigned char *) ptr;
  register const unsigned char *eu =  u + sz;
  for (; u != eu; ++u) {
    register unsigned char uu = *u;
    *(c++) = hex[(uu & 0xf0) >> 4];
    *(c++) = hex[uu & 0xf];
  }
  return c;
}

/* 
   Unpack binary data from a string
*/
SWIGRUNTIME const char *
SWIG_UnpackData(const char *c, void *ptr, size_t sz) {
  register unsigned char *u = (unsigned char *) ptr;
  register const unsigned char *eu = u + sz;
  for (; u != eu; ++u) {
    register char d = *(c++);
    register unsigned char uu;
    if ((d >= '0') && (d <= '9'))
      uu = ((d - '0') << 4);
    else if ((d >= 'a') && (d <= 'f'))
      uu = ((d - ('a'-10)) << 4);
    else 
      return (char *) 0;
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu |= (d - '0');
    else if ((d >= 'a') && (d <= 'f'))
      uu |= (d - ('a'-10));
    else 
      return (char *) 0;
    *u = uu;
  }
  return c;
}

/* 
   Pack 'void *' into a string buffer.
*/
SWIGRUNTIME char *
SWIG_PackVoidPtr(char *buff, void *ptr, const char *name, size_t bsz) {
  char *r = buff;
  if ((2*sizeof(void *) + 2) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,&ptr,sizeof(void *));
  if (strlen(name) + 1 > (bsz - (r - buff))) return 0;
  strcpy(r,name);
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackVoidPtr(const char *c, void **ptr, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      *ptr = (void *) 0;
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sizeof(void *));
}

SWIGRUNTIME char *
SWIG_PackDataName(char *buff, void *ptr, size_t sz, const char *name, size_t bsz) {
  char *r = buff;
  size_t lname = (name ? strlen(name) : 0);
  if ((2*sz + 2 + lname) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  if (lname) {
    strncpy(r,name,lname+1);
  } else {
    *r = 0;
  }
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackDataName(const char *c, void *ptr, size_t sz, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      memset(ptr,0,sz);
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sz);
}

#ifdef __cplusplus
}
#endif

/*  Errors in SWIG */
#define  SWIG_UnknownError    	   -1 
#define  SWIG_IOError        	   -2 
#define  SWIG_RuntimeError   	   -3 
#define  SWIG_IndexError     	   -4 
#define  SWIG_TypeError      	   -5 
#define  SWIG_DivisionByZero 	   -6 
#define  SWIG_OverflowError  	   -7 
#define  SWIG_SyntaxError    	   -8 
#define  SWIG_ValueError     	   -9 
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12 
#define  SWIG_NullReferenceError   -13



/* Compatibility macros for Python 3 */
#if PY_VERSION_HEX >= 0x03000000

#define PyClass_Check(obj) PyObject_IsInstance(obj, (PyObject *)&PyType_Type)
#define PyInt_Check(x) PyLong_Check(x)
#define PyInt_AsLong(x) PyLong_AsLong(x)
#define PyInt_FromLong(x) PyLong_FromLong(x)
#define PyString_Format(fmt, args)  PyUnicode_Format(fmt, args)

#endif

#ifndef Py_TYPE
#  define Py_TYPE(op) ((op)->ob_type)
#endif

/* SWIG APIs for compatibility of both Python 2 & 3 */

#if PY_VERSION_HEX >= 0x03000000
#  define SWIG_Python_str_FromFormat PyUnicode_FromFormat
#else
#  define SWIG_Python_str_FromFormat PyString_FromFormat
#endif


/* Warning: This function will allocate a new string in Python 3,
 * so please call SWIG_Python_str_DelForPy3(x) to free the space.
 */
SWIGINTERN char*
SWIG_Python_str_AsChar(PyObject *str)
{
#if PY_VERSION_HEX >= 0x03000000
  char *cstr;
  char *newstr;
  Py_ssize_t len;
  str = PyUnicode_AsUTF8String(str);
  PyBytes_AsStringAndSize(str, &cstr, &len);
  newstr = (char *) malloc(len+1);
  memcpy(newstr, cstr, len+1);
  Py_XDECREF(str);
  return newstr;
#else
  return PyString_AsString(str);
#endif
}

#if PY_VERSION_HEX >= 0x03000000
#  define SWIG_Python_str_DelForPy3(x) free( (void*) (x) )
#else
#  define SWIG_Python_str_DelForPy3(x) 
#endif


SWIGINTERN PyObject*
SWIG_Python_str_FromChar(const char *c)
{
#if PY_VERSION_HEX >= 0x03000000
  return PyUnicode_FromString(c); 
#else
  return PyString_FromString(c);
#endif
}

/* Add PyOS_snprintf for old Pythons */
#if PY_VERSION_HEX < 0x02020000
# if defined(_MSC_VER) || defined(__BORLANDC__) || defined(_WATCOM)
#  define PyOS_snprintf _snprintf
# else
#  define PyOS_snprintf snprintf
# endif
#endif

/* A crude PyString_FromFormat implementation for old Pythons */
#if PY_VERSION_HEX < 0x02020000

#ifndef SWIG_PYBUFFER_SIZE
# define SWIG_PYBUFFER_SIZE 1024
#endif

static PyObject *
PyString_FromFormat(const char *fmt, ...) {
  va_list ap;
  char buf[SWIG_PYBUFFER_SIZE * 2];
  int res;
  va_start(ap, fmt);
  res = vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return (res < 0 || res >= (int)sizeof(buf)) ? 0 : PyString_FromString(buf);
}
#endif

/* Add PyObject_Del for old Pythons */
#if PY_VERSION_HEX < 0x01060000
# define PyObject_Del(op) PyMem_DEL((op))
#endif
#ifndef PyObject_DEL
# define PyObject_DEL PyObject_Del
#endif

/* A crude PyExc_StopIteration exception for old Pythons */
#if PY_VERSION_HEX < 0x02020000
# ifndef PyExc_StopIteration
#  define PyExc_StopIteration PyExc_RuntimeError
# endif
# ifndef PyObject_GenericGetAttr
#  define PyObject_GenericGetAttr 0
# endif
#endif

/* Py_NotImplemented is defined in 2.1 and up. */
#if PY_VERSION_HEX < 0x02010000
# ifndef Py_NotImplemented
#  define Py_NotImplemented PyExc_RuntimeError
# endif
#endif

/* A crude PyString_AsStringAndSize implementation for old Pythons */
#if PY_VERSION_HEX < 0x02010000
# ifndef PyString_AsStringAndSize
#  define PyString_AsStringAndSize(obj, s, len) {*s = PyString_AsString(obj); *len = *s ? strlen(*s) : 0;}
# endif
#endif

/* PySequence_Size for old Pythons */
#if PY_VERSION_HEX < 0x02000000
# ifndef PySequence_Size
#  define PySequence_Size PySequence_Length
# endif
#endif

/* PyBool_FromLong for old Pythons */
#if PY_VERSION_HEX < 0x02030000
static
PyObject *PyBool_FromLong(long ok)
{
  PyObject *result = ok ? Py_True : Py_False;
  Py_INCREF(result);
  return result;
}
#endif

/* Py_ssize_t for old Pythons */
/* This code is as recommended by: */
/* http://www.python.org/dev/peps/pep-0353/#conversion-guidelines */
#if PY_VERSION_HEX < 0x02050000 && !defined(PY_SSIZE_T_MIN)
typedef int Py_ssize_t;
# define PY_SSIZE_T_MAX INT_MAX
# define PY_SSIZE_T_MIN INT_MIN
#endif

/* -----------------------------------------------------------------------------
 * error manipulation
 * ----------------------------------------------------------------------------- */

SWIGRUNTIME PyObject*
SWIG_Python_ErrorType(int code) {
  PyObject* type = 0;
  switch(code) {
  case SWIG_MemoryError:
    type = PyExc_MemoryError;
    break;
  case SWIG_IOError:
    type = PyExc_IOError;
    break;
  case SWIG_RuntimeError:
    type = PyExc_RuntimeError;
    break;
  case SWIG_IndexError:
    type = PyExc_IndexError;
    break;
  case SWIG_TypeError:
    type = PyExc_TypeError;
    break;
  case SWIG_DivisionByZero:
    type = PyExc_ZeroDivisionError;
    break;
  case SWIG_OverflowError:
    type = PyExc_OverflowError;
    break;
  case SWIG_SyntaxError:
    type = PyExc_SyntaxError;
    break;
  case SWIG_ValueError:
    type = PyExc_ValueError;
    break;
  case SWIG_SystemError:
    type = PyExc_SystemError;
    break;
  case SWIG_AttributeError:
    type = PyExc_AttributeError;
    break;
  default:
    type = PyExc_RuntimeError;
  }
  return type;
}


SWIGRUNTIME void
SWIG_Python_AddErrorMsg(const char* mesg)
{
  PyObject *type = 0;
  PyObject *value = 0;
  PyObject *traceback = 0;

  if (PyErr_Occurred()) PyErr_Fetch(&type, &value, &traceback);
  if (value) {
    char *tmp;
    PyObject *old_str = PyObject_Str(value);
    PyErr_Clear();
    Py_XINCREF(type);

    PyErr_Format(type, "%s %s", tmp = SWIG_Python_str_AsChar(old_str), mesg);
    SWIG_Python_str_DelForPy3(tmp);
    Py_DECREF(old_str);
    Py_DECREF(value);
  } else {
    PyErr_SetString(PyExc_RuntimeError, mesg);
  }
}

#if defined(SWIG_PYTHON_NO_THREADS)
#  if defined(SWIG_PYTHON_THREADS)
#    undef SWIG_PYTHON_THREADS
#  endif
#endif
#if defined(SWIG_PYTHON_THREADS) /* Threading support is enabled */
#  if !defined(SWIG_PYTHON_USE_GIL) && !defined(SWIG_PYTHON_NO_USE_GIL)
#    if (PY_VERSION_HEX >= 0x02030000) /* For 2.3 or later, use the PyGILState calls */
#      define SWIG_PYTHON_USE_GIL
#    endif
#  endif
#  if defined(SWIG_PYTHON_USE_GIL) /* Use PyGILState threads calls */
#    ifndef SWIG_PYTHON_INITIALIZE_THREADS
#     define SWIG_PYTHON_INITIALIZE_THREADS  PyEval_InitThreads() 
#    endif
#    ifdef __cplusplus /* C++ code */
       class SWIG_Python_Thread_Block {
         bool status;
         PyGILState_STATE state;
       public:
         void end() { if (status) { PyGILState_Release(state); status = false;} }
         SWIG_Python_Thread_Block() : status(true), state(PyGILState_Ensure()) {}
         ~SWIG_Python_Thread_Block() { end(); }
       };
       class SWIG_Python_Thread_Allow {
         bool status;
         PyThreadState *save;
       public:
         void end() { if (status) { PyEval_RestoreThread(save); status = false; }}
         SWIG_Python_Thread_Allow() : status(true), save(PyEval_SaveThread()) {}
         ~SWIG_Python_Thread_Allow() { end(); }
       };
#      define SWIG_PYTHON_THREAD_BEGIN_BLOCK   SWIG_Python_Thread_Block _swig_thread_block
#      define SWIG_PYTHON_THREAD_END_BLOCK     _swig_thread_block.end()
#      define SWIG_PYTHON_THREAD_BEGIN_ALLOW   SWIG_Python_Thread_Allow _swig_thread_allow
#      define SWIG_PYTHON_THREAD_END_ALLOW     _swig_thread_allow.end()
#    else /* C code */
#      define SWIG_PYTHON_THREAD_BEGIN_BLOCK   PyGILState_STATE _swig_thread_block = PyGILState_Ensure()
#      define SWIG_PYTHON_THREAD_END_BLOCK     PyGILState_Release(_swig_thread_block)
#      define SWIG_PYTHON_THREAD_BEGIN_ALLOW   PyThreadState *_swig_thread_allow = PyEval_SaveThread()
#      define SWIG_PYTHON_THREAD_END_ALLOW     PyEval_RestoreThread(_swig_thread_allow)
#    endif
#  else /* Old thread way, not implemented, user must provide it */
#    if !defined(SWIG_PYTHON_INITIALIZE_THREADS)
#      define SWIG_PYTHON_INITIALIZE_THREADS
#    endif
#    if !defined(SWIG_PYTHON_THREAD_BEGIN_BLOCK)
#      define SWIG_PYTHON_THREAD_BEGIN_BLOCK
#    endif
#    if !defined(SWIG_PYTHON_THREAD_END_BLOCK)
#      define SWIG_PYTHON_THREAD_END_BLOCK
#    endif
#    if !defined(SWIG_PYTHON_THREAD_BEGIN_ALLOW)
#      define SWIG_PYTHON_THREAD_BEGIN_ALLOW
#    endif
#    if !defined(SWIG_PYTHON_THREAD_END_ALLOW)
#      define SWIG_PYTHON_THREAD_END_ALLOW
#    endif
#  endif
#else /* No thread support */
#  define SWIG_PYTHON_INITIALIZE_THREADS
#  define SWIG_PYTHON_THREAD_BEGIN_BLOCK
#  define SWIG_PYTHON_THREAD_END_BLOCK
#  define SWIG_PYTHON_THREAD_BEGIN_ALLOW
#  define SWIG_PYTHON_THREAD_END_ALLOW
#endif

/* -----------------------------------------------------------------------------
 * Python API portion that goes into the runtime
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#if 0
} /* cc-mode */
#endif
#endif

/* -----------------------------------------------------------------------------
 * Constant declarations
 * ----------------------------------------------------------------------------- */

/* Constant Types */
#define SWIG_PY_POINTER 4
#define SWIG_PY_BINARY  5

/* Constant information structure */
typedef struct swig_const_info {
  int type;
  char *name;
  long lvalue;
  double dvalue;
  void   *pvalue;
  swig_type_info **ptype;
} swig_const_info;


/* -----------------------------------------------------------------------------
 * Wrapper of PyInstanceMethod_New() used in Python 3
 * It is exported to the generated module, used for -fastproxy
 * ----------------------------------------------------------------------------- */
SWIGRUNTIME PyObject* SWIG_PyInstanceMethod_New(PyObject *self, PyObject *func)
{
#if PY_VERSION_HEX >= 0x03000000
  return PyInstanceMethod_New(func);
#else
  return NULL;
#endif
}

#ifdef __cplusplus
#if 0
{ /* cc-mode */
#endif
}
#endif


/* -----------------------------------------------------------------------------
 * pyrun.swg
 *
 * This file contains the runtime support for Python modules
 * and includes code for managing global variables and pointer
 * type checking.
 *
 * ----------------------------------------------------------------------------- */

/* Common SWIG API */

/* for raw pointers */
#define SWIG_Python_ConvertPtr(obj, pptr, type, flags)  SWIG_Python_ConvertPtrAndOwn(obj, pptr, type, flags, 0)
#define SWIG_ConvertPtr(obj, pptr, type, flags)         SWIG_Python_ConvertPtr(obj, pptr, type, flags)
#define SWIG_ConvertPtrAndOwn(obj,pptr,type,flags,own)  SWIG_Python_ConvertPtrAndOwn(obj, pptr, type, flags, own)
#define SWIG_NewPointerObj(ptr, type, flags)            SWIG_Python_NewPointerObj(ptr, type, flags)
#define SWIG_CheckImplicit(ty)                          SWIG_Python_CheckImplicit(ty) 
#define SWIG_AcquirePtr(ptr, src)                       SWIG_Python_AcquirePtr(ptr, src)
#define swig_owntype                                    int

/* for raw packed data */
#define SWIG_ConvertPacked(obj, ptr, sz, ty)            SWIG_Python_ConvertPacked(obj, ptr, sz, ty)
#define SWIG_NewPackedObj(ptr, sz, type)                SWIG_Python_NewPackedObj(ptr, sz, type)

/* for class or struct pointers */
#define SWIG_ConvertInstance(obj, pptr, type, flags)    SWIG_ConvertPtr(obj, pptr, type, flags)
#define SWIG_NewInstanceObj(ptr, type, flags)           SWIG_NewPointerObj(ptr, type, flags)

/* for C or C++ function pointers */
#define SWIG_ConvertFunctionPtr(obj, pptr, type)        SWIG_Python_ConvertFunctionPtr(obj, pptr, type)
#define SWIG_NewFunctionPtrObj(ptr, type)               SWIG_Python_NewPointerObj(ptr, type, 0)

/* for C++ member pointers, ie, member methods */
#define SWIG_ConvertMember(obj, ptr, sz, ty)            SWIG_Python_ConvertPacked(obj, ptr, sz, ty)
#define SWIG_NewMemberObj(ptr, sz, type)                SWIG_Python_NewPackedObj(ptr, sz, type)


/* Runtime API */

#define SWIG_GetModule(clientdata)                      SWIG_Python_GetModule()
#define SWIG_SetModule(clientdata, pointer)             SWIG_Python_SetModule(pointer)
#define SWIG_NewClientData(obj)                         SwigPyClientData_New(obj)

#define SWIG_SetErrorObj                                SWIG_Python_SetErrorObj                            
#define SWIG_SetErrorMsg                        	SWIG_Python_SetErrorMsg				   
#define SWIG_ErrorType(code)                    	SWIG_Python_ErrorType(code)                        
#define SWIG_Error(code, msg)            		SWIG_Python_SetErrorMsg(SWIG_ErrorType(code), msg) 
#define SWIG_fail                        		goto fail					   


/* Runtime API implementation */

/* Error manipulation */

SWIGINTERN void 
SWIG_Python_SetErrorObj(PyObject *errtype, PyObject *obj) {
  SWIG_PYTHON_THREAD_BEGIN_BLOCK; 
  PyErr_SetObject(errtype, obj);
  Py_DECREF(obj);
  SWIG_PYTHON_THREAD_END_BLOCK;
}

SWIGINTERN void 
SWIG_Python_SetErrorMsg(PyObject *errtype, const char *msg) {
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  PyErr_SetString(errtype, (char *) msg);
  SWIG_PYTHON_THREAD_END_BLOCK;
}

#define SWIG_Python_Raise(obj, type, desc)  SWIG_Python_SetErrorObj(SWIG_Python_ExceptionType(desc), obj)

/* Set a constant value */

SWIGINTERN void
SWIG_Python_SetConstant(PyObject *d, const char *name, PyObject *obj) {   
  PyDict_SetItemString(d, (char*) name, obj);
  Py_DECREF(obj);                            
}

/* Append a value to the result obj */

SWIGINTERN PyObject*
SWIG_Python_AppendOutput(PyObject* result, PyObject* obj) {
#if !defined(SWIG_PYTHON_OUTPUT_TUPLE)
  if (!result) {
    result = obj;
  } else if (result == Py_None) {
    Py_DECREF(result);
    result = obj;
  } else {
    if (!PyList_Check(result)) {
      PyObject *o2 = result;
      result = PyList_New(1);
      PyList_SetItem(result, 0, o2);
    }
    PyList_Append(result,obj);
    Py_DECREF(obj);
  }
  return result;
#else
  PyObject*   o2;
  PyObject*   o3;
  if (!result) {
    result = obj;
  } else if (result == Py_None) {
    Py_DECREF(result);
    result = obj;
  } else {
    if (!PyTuple_Check(result)) {
      o2 = result;
      result = PyTuple_New(1);
      PyTuple_SET_ITEM(result, 0, o2);
    }
    o3 = PyTuple_New(1);
    PyTuple_SET_ITEM(o3, 0, obj);
    o2 = result;
    result = PySequence_Concat(o2, o3);
    Py_DECREF(o2);
    Py_DECREF(o3);
  }
  return result;
#endif
}

/* Unpack the argument tuple */

SWIGINTERN int
SWIG_Python_UnpackTuple(PyObject *args, const char *name, Py_ssize_t min, Py_ssize_t max, PyObject **objs)
{
  if (!args) {
    if (!min && !max) {
      return 1;
    } else {
      PyErr_Format(PyExc_TypeError, "%s expected %s%d arguments, got none", 
		   name, (min == max ? "" : "at least "), (int)min);
      return 0;
    }
  }  
  if (!PyTuple_Check(args)) {
    PyErr_SetString(PyExc_SystemError, "UnpackTuple() argument list is not a tuple");
    return 0;
  } else {
    register Py_ssize_t l = PyTuple_GET_SIZE(args);
    if (l < min) {
      PyErr_Format(PyExc_TypeError, "%s expected %s%d arguments, got %d", 
		   name, (min == max ? "" : "at least "), (int)min, (int)l);
      return 0;
    } else if (l > max) {
      PyErr_Format(PyExc_TypeError, "%s expected %s%d arguments, got %d", 
		   name, (min == max ? "" : "at most "), (int)max, (int)l);
      return 0;
    } else {
      register int i;
      for (i = 0; i < l; ++i) {
	objs[i] = PyTuple_GET_ITEM(args, i);
      }
      for (; l < max; ++l) {
	objs[l] = 0;
      }
      return i + 1;
    }    
  }
}

/* A functor is a function object with one single object argument */
#if PY_VERSION_HEX >= 0x02020000
#define SWIG_Python_CallFunctor(functor, obj)	        PyObject_CallFunctionObjArgs(functor, obj, NULL);
#else
#define SWIG_Python_CallFunctor(functor, obj)	        PyObject_CallFunction(functor, "O", obj);
#endif

/*
  Helper for static pointer initialization for both C and C++ code, for example
  static PyObject *SWIG_STATIC_POINTER(MyVar) = NewSomething(...);
*/
#ifdef __cplusplus
#define SWIG_STATIC_POINTER(var)  var
#else
#define SWIG_STATIC_POINTER(var)  var = 0; if (!var) var
#endif

/* -----------------------------------------------------------------------------
 * Pointer declarations
 * ----------------------------------------------------------------------------- */

/* Flags for new pointer objects */
#define SWIG_POINTER_NOSHADOW       (SWIG_POINTER_OWN      << 1)
#define SWIG_POINTER_NEW            (SWIG_POINTER_NOSHADOW | SWIG_POINTER_OWN)

#define SWIG_POINTER_IMPLICIT_CONV  (SWIG_POINTER_DISOWN   << 1)

#ifdef __cplusplus
extern "C" {
#if 0
} /* cc-mode */
#endif
#endif

/*  How to access Py_None */
#if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#  ifndef SWIG_PYTHON_NO_BUILD_NONE
#    ifndef SWIG_PYTHON_BUILD_NONE
#      define SWIG_PYTHON_BUILD_NONE
#    endif
#  endif
#endif

#ifdef SWIG_PYTHON_BUILD_NONE
#  ifdef Py_None
#   undef Py_None
#   define Py_None SWIG_Py_None()
#  endif
SWIGRUNTIMEINLINE PyObject * 
_SWIG_Py_None(void)
{
  PyObject *none = Py_BuildValue((char*)"");
  Py_DECREF(none);
  return none;
}
SWIGRUNTIME PyObject * 
SWIG_Py_None(void)
{
  static PyObject *SWIG_STATIC_POINTER(none) = _SWIG_Py_None();
  return none;
}
#endif

/* The python void return value */

SWIGRUNTIMEINLINE PyObject * 
SWIG_Py_Void(void)
{
  PyObject *none = Py_None;
  Py_INCREF(none);
  return none;
}

/* SwigPyClientData */

typedef struct {
  PyObject *klass;
  PyObject *newraw;
  PyObject *newargs;
  PyObject *destroy;
  int delargs;
  int implicitconv;
} SwigPyClientData;

SWIGRUNTIMEINLINE int 
SWIG_Python_CheckImplicit(swig_type_info *ty)
{
  SwigPyClientData *data = (SwigPyClientData *)ty->clientdata;
  return data ? data->implicitconv : 0;
}

SWIGRUNTIMEINLINE PyObject *
SWIG_Python_ExceptionType(swig_type_info *desc) {
  SwigPyClientData *data = desc ? (SwigPyClientData *) desc->clientdata : 0;
  PyObject *klass = data ? data->klass : 0;
  return (klass ? klass : PyExc_RuntimeError);
}


SWIGRUNTIME SwigPyClientData * 
SwigPyClientData_New(PyObject* obj)
{
  if (!obj) {
    return 0;
  } else {
    SwigPyClientData *data = (SwigPyClientData *)malloc(sizeof(SwigPyClientData));
    /* the klass element */
    data->klass = obj;
    Py_INCREF(data->klass);
    /* the newraw method and newargs arguments used to create a new raw instance */
    if (PyClass_Check(obj)) {
      data->newraw = 0;
      data->newargs = obj;
      Py_INCREF(obj);
    } else {
#if (PY_VERSION_HEX < 0x02020000)
      data->newraw = 0;
#else
      data->newraw = PyObject_GetAttrString(data->klass, (char *)"__new__");
#endif
      if (data->newraw) {
	Py_INCREF(data->newraw);
	data->newargs = PyTuple_New(1);
	PyTuple_SetItem(data->newargs, 0, obj);
      } else {
	data->newargs = obj;
      }
      Py_INCREF(data->newargs);
    }
    /* the destroy method, aka as the C++ delete method */
    data->destroy = PyObject_GetAttrString(data->klass, (char *)"__swig_destroy__");
    if (PyErr_Occurred()) {
      PyErr_Clear();
      data->destroy = 0;
    }
    if (data->destroy) {
      int flags;
      Py_INCREF(data->destroy);
      flags = PyCFunction_GET_FLAGS(data->destroy);
#ifdef METH_O
      data->delargs = !(flags & (METH_O));
#else
      data->delargs = 0;
#endif
    } else {
      data->delargs = 0;
    }
    data->implicitconv = 0;
    return data;
  }
}

SWIGRUNTIME void 
SwigPyClientData_Del(SwigPyClientData* data)
{
  Py_XDECREF(data->newraw);
  Py_XDECREF(data->newargs);
  Py_XDECREF(data->destroy);
}

/* =============== SwigPyObject =====================*/

typedef struct {
  PyObject_HEAD
  void *ptr;
  swig_type_info *ty;
  int own;
  PyObject *next;
} SwigPyObject;

SWIGRUNTIME PyObject *
SwigPyObject_long(SwigPyObject *v)
{
  return PyLong_FromVoidPtr(v->ptr);
}

SWIGRUNTIME PyObject *
SwigPyObject_format(const char* fmt, SwigPyObject *v)
{
  PyObject *res = NULL;
  PyObject *args = PyTuple_New(1);
  if (args) {
    if (PyTuple_SetItem(args, 0, SwigPyObject_long(v)) == 0) {
      PyObject *ofmt = SWIG_Python_str_FromChar(fmt);
      if (ofmt) {
#if PY_VERSION_HEX >= 0x03000000
	res = PyUnicode_Format(ofmt,args);
#else
	res = PyString_Format(ofmt,args);
#endif
	Py_DECREF(ofmt);
      }
      Py_DECREF(args);
    }
  }
  return res;
}

SWIGRUNTIME PyObject *
SwigPyObject_oct(SwigPyObject *v)
{
  return SwigPyObject_format("%o",v);
}

SWIGRUNTIME PyObject *
SwigPyObject_hex(SwigPyObject *v)
{
  return SwigPyObject_format("%x",v);
}

SWIGRUNTIME PyObject *
#ifdef METH_NOARGS
SwigPyObject_repr(SwigPyObject *v)
#else
SwigPyObject_repr(SwigPyObject *v, PyObject *args)
#endif
{
  const char *name = SWIG_TypePrettyName(v->ty);
  PyObject *repr = SWIG_Python_str_FromFormat("<Swig Object of type '%s' at %p>", name, v);
  if (v->next) {
#ifdef METH_NOARGS
    PyObject *nrep = SwigPyObject_repr((SwigPyObject *)v->next);
#else
    PyObject *nrep = SwigPyObject_repr((SwigPyObject *)v->next, args);
#endif
#if PY_VERSION_HEX >= 0x03000000
    PyObject *joined = PyUnicode_Concat(repr, nrep);
    Py_DecRef(repr);
    Py_DecRef(nrep);
    repr = joined;
#else
    PyString_ConcatAndDel(&repr,nrep);
#endif
  }
  return repr;  
}

SWIGRUNTIME int
SwigPyObject_print(SwigPyObject *v, FILE *fp, int SWIGUNUSEDPARM(flags))
{
  char *str;
#ifdef METH_NOARGS
  PyObject *repr = SwigPyObject_repr(v);
#else
  PyObject *repr = SwigPyObject_repr(v, NULL);
#endif
  if (repr) {
    str = SWIG_Python_str_AsChar(repr); 
    fputs(str, fp);
    SWIG_Python_str_DelForPy3(str);
    Py_DECREF(repr);
    return 0; 
  } else {
    return 1; 
  }
}

SWIGRUNTIME PyObject *
SwigPyObject_str(SwigPyObject *v)
{
  char result[SWIG_BUFFER_SIZE];
  return SWIG_PackVoidPtr(result, v->ptr, v->ty->name, sizeof(result)) ?
    SWIG_Python_str_FromChar(result) : 0;
}

SWIGRUNTIME int
SwigPyObject_compare(SwigPyObject *v, SwigPyObject *w)
{
  void *i = v->ptr;
  void *j = w->ptr;
  return (i < j) ? -1 : ((i > j) ? 1 : 0);
}

/* Added for Python 3.x, would it also be useful for Python 2.x? */
SWIGRUNTIME PyObject*
SwigPyObject_richcompare(SwigPyObject *v, SwigPyObject *w, int op)
{
  PyObject* res;
  if( op != Py_EQ && op != Py_NE ) {
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
  }
  if( (SwigPyObject_compare(v, w)==0) == (op == Py_EQ) )
    res = Py_True;
  else
    res = Py_False;
  Py_INCREF(res);
  return res;  
}


SWIGRUNTIME PyTypeObject* _PySwigObject_type(void);

SWIGRUNTIME PyTypeObject*
SwigPyObject_type(void) {
  static PyTypeObject *SWIG_STATIC_POINTER(type) = _PySwigObject_type();
  return type;
}

SWIGRUNTIMEINLINE int
SwigPyObject_Check(PyObject *op) {
  return (Py_TYPE(op) == SwigPyObject_type())
    || (strcmp(Py_TYPE(op)->tp_name,"SwigPyObject") == 0);
}

SWIGRUNTIME PyObject *
SwigPyObject_New(void *ptr, swig_type_info *ty, int own);

SWIGRUNTIME void
SwigPyObject_dealloc(PyObject *v)
{
  SwigPyObject *sobj = (SwigPyObject *) v;
  PyObject *next = sobj->next;
  if (sobj->own == SWIG_POINTER_OWN) {
    swig_type_info *ty = sobj->ty;
    SwigPyClientData *data = ty ? (SwigPyClientData *) ty->clientdata : 0;
    PyObject *destroy = data ? data->destroy : 0;
    if (destroy) {
      /* destroy is always a VARARGS method */
      PyObject *res;
      if (data->delargs) {
	/* we need to create a temporary object to carry the destroy operation */
	PyObject *tmp = SwigPyObject_New(sobj->ptr, ty, 0);
	res = SWIG_Python_CallFunctor(destroy, tmp);
	Py_DECREF(tmp);
      } else {
	PyCFunction meth = PyCFunction_GET_FUNCTION(destroy);
	PyObject *mself = PyCFunction_GET_SELF(destroy);
	res = ((*meth)(mself, v));
      }
      Py_XDECREF(res);
    } 
#if !defined(SWIG_PYTHON_SILENT_MEMLEAK)
    else {
      const char *name = SWIG_TypePrettyName(ty);
      printf("swig/python detected a memory leak of type '%s', no destructor found.\n", (name ? name : "unknown"));
    }
#endif
  } 
  Py_XDECREF(next);
  PyObject_DEL(v);
}

SWIGRUNTIME PyObject* 
SwigPyObject_append(PyObject* v, PyObject* next)
{
  SwigPyObject *sobj = (SwigPyObject *) v;
#ifndef METH_O
  PyObject *tmp = 0;
  if (!PyArg_ParseTuple(next,(char *)"O:append", &tmp)) return NULL;
  next = tmp;
#endif
  if (!SwigPyObject_Check(next)) {
    return NULL;
  }
  sobj->next = next;
  Py_INCREF(next);
  return SWIG_Py_Void();
}

SWIGRUNTIME PyObject* 
#ifdef METH_NOARGS
SwigPyObject_next(PyObject* v)
#else
SwigPyObject_next(PyObject* v, PyObject *SWIGUNUSEDPARM(args))
#endif
{
  SwigPyObject *sobj = (SwigPyObject *) v;
  if (sobj->next) {    
    Py_INCREF(sobj->next);
    return sobj->next;
  } else {
    return SWIG_Py_Void();
  }
}

SWIGINTERN PyObject*
#ifdef METH_NOARGS
SwigPyObject_disown(PyObject *v)
#else
SwigPyObject_disown(PyObject* v, PyObject *SWIGUNUSEDPARM(args))
#endif
{
  SwigPyObject *sobj = (SwigPyObject *)v;
  sobj->own = 0;
  return SWIG_Py_Void();
}

SWIGINTERN PyObject*
#ifdef METH_NOARGS
SwigPyObject_acquire(PyObject *v)
#else
SwigPyObject_acquire(PyObject* v, PyObject *SWIGUNUSEDPARM(args))
#endif
{
  SwigPyObject *sobj = (SwigPyObject *)v;
  sobj->own = SWIG_POINTER_OWN;
  return SWIG_Py_Void();
}

SWIGINTERN PyObject*
SwigPyObject_own(PyObject *v, PyObject *args)
{
  PyObject *val = 0;
#if (PY_VERSION_HEX < 0x02020000)
  if (!PyArg_ParseTuple(args,(char *)"|O:own",&val))
#else
  if (!PyArg_UnpackTuple(args, (char *)"own", 0, 1, &val)) 
#endif
    {
      return NULL;
    } 
  else
    {
      SwigPyObject *sobj = (SwigPyObject *)v;
      PyObject *obj = PyBool_FromLong(sobj->own);
      if (val) {
#ifdef METH_NOARGS
	if (PyObject_IsTrue(val)) {
	  SwigPyObject_acquire(v);
	} else {
	  SwigPyObject_disown(v);
	}
#else
	if (PyObject_IsTrue(val)) {
	  SwigPyObject_acquire(v,args);
	} else {
	  SwigPyObject_disown(v,args);
	}
#endif
      } 
      return obj;
    }
}

#ifdef METH_O
static PyMethodDef
swigobject_methods[] = {
  {(char *)"disown",  (PyCFunction)SwigPyObject_disown,  METH_NOARGS,  (char *)"releases ownership of the pointer"},
  {(char *)"acquire", (PyCFunction)SwigPyObject_acquire, METH_NOARGS,  (char *)"aquires ownership of the pointer"},
  {(char *)"own",     (PyCFunction)SwigPyObject_own,     METH_VARARGS, (char *)"returns/sets ownership of the pointer"},
  {(char *)"append",  (PyCFunction)SwigPyObject_append,  METH_O,       (char *)"appends another 'this' object"},
  {(char *)"next",    (PyCFunction)SwigPyObject_next,    METH_NOARGS,  (char *)"returns the next 'this' object"},
  {(char *)"__repr__",(PyCFunction)SwigPyObject_repr,    METH_NOARGS,  (char *)"returns object representation"},
  {0, 0, 0, 0}  
};
#else
static PyMethodDef
swigobject_methods[] = {
  {(char *)"disown",  (PyCFunction)SwigPyObject_disown,  METH_VARARGS,  (char *)"releases ownership of the pointer"},
  {(char *)"acquire", (PyCFunction)SwigPyObject_acquire, METH_VARARGS,  (char *)"aquires ownership of the pointer"},
  {(char *)"own",     (PyCFunction)SwigPyObject_own,     METH_VARARGS,  (char *)"returns/sets ownership of the pointer"},
  {(char *)"append",  (PyCFunction)SwigPyObject_append,  METH_VARARGS,  (char *)"appends another 'this' object"},
  {(char *)"next",    (PyCFunction)SwigPyObject_next,    METH_VARARGS,  (char *)"returns the next 'this' object"},
  {(char *)"__repr__",(PyCFunction)SwigPyObject_repr,   METH_VARARGS,  (char *)"returns object representation"},
  {0, 0, 0, 0}  
};
#endif

#if PY_VERSION_HEX < 0x02020000
SWIGINTERN PyObject *
SwigPyObject_getattr(SwigPyObject *sobj,char *name)
{
  return Py_FindMethod(swigobject_methods, (PyObject *)sobj, name);
}
#endif

SWIGRUNTIME PyTypeObject*
_PySwigObject_type(void) {
  static char swigobject_doc[] = "Swig object carries a C/C++ instance pointer";
  
  static PyNumberMethods SwigPyObject_as_number = {
    (binaryfunc)0, /*nb_add*/
    (binaryfunc)0, /*nb_subtract*/
    (binaryfunc)0, /*nb_multiply*/
    /* nb_divide removed in Python 3 */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc)0, /*nb_divide*/
#endif
    (binaryfunc)0, /*nb_remainder*/
    (binaryfunc)0, /*nb_divmod*/
    (ternaryfunc)0,/*nb_power*/
    (unaryfunc)0,  /*nb_negative*/
    (unaryfunc)0,  /*nb_positive*/
    (unaryfunc)0,  /*nb_absolute*/
    (inquiry)0,    /*nb_nonzero*/
    0,		   /*nb_invert*/
    0,		   /*nb_lshift*/
    0,		   /*nb_rshift*/
    0,		   /*nb_and*/
    0,		   /*nb_xor*/
    0,		   /*nb_or*/
#if PY_VERSION_HEX < 0x03000000
    0,   /*nb_coerce*/
#endif
    (unaryfunc)SwigPyObject_long, /*nb_int*/
#if PY_VERSION_HEX < 0x03000000
    (unaryfunc)SwigPyObject_long, /*nb_long*/
#else
    0, /*nb_reserved*/
#endif
    (unaryfunc)0,                 /*nb_float*/
#if PY_VERSION_HEX < 0x03000000
    (unaryfunc)SwigPyObject_oct,  /*nb_oct*/
    (unaryfunc)SwigPyObject_hex,  /*nb_hex*/
#endif
#if PY_VERSION_HEX >= 0x03000000 /* 3.0 */
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_index, nb_inplace_divide removed */
#elif PY_VERSION_HEX >= 0x02050000 /* 2.5.0 */
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_index */
#elif PY_VERSION_HEX >= 0x02020000 /* 2.2.0 */
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_inplace_true_divide */
#elif PY_VERSION_HEX >= 0x02000000 /* 2.0.0 */
    0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_inplace_or */
#endif
  };

  static PyTypeObject swigpyobject_type;  
  static int type_init = 0;
  if (!type_init) {
    const PyTypeObject tmp
      = {
	/* PyObject header changed in Python 3 */
#if PY_VERSION_HEX >= 0x03000000
	PyVarObject_HEAD_INIT(&PyType_Type, 0)
#else    
	PyObject_HEAD_INIT(NULL)
	0,				    /* ob_size */
#endif
	(char *)"SwigPyObject",		    /* tp_name */
	sizeof(SwigPyObject),		    /* tp_basicsize */
	0,			            /* tp_itemsize */
	(destructor)SwigPyObject_dealloc,   /* tp_dealloc */
	(printfunc)SwigPyObject_print,	    /* tp_print */
#if PY_VERSION_HEX < 0x02020000
	(getattrfunc)SwigPyObject_getattr,  /* tp_getattr */ 
#else
	(getattrfunc)0,			    /* tp_getattr */ 
#endif
	(setattrfunc)0,			    /* tp_setattr */ 
#if PY_VERSION_HEX >= 0x03000000
    0, /* tp_reserved in 3.0.1, tp_compare in 3.0.0 but not used */
#else
	(cmpfunc)SwigPyObject_compare,	    /* tp_compare */
#endif
	(reprfunc)SwigPyObject_repr,	    /* tp_repr */    
	&SwigPyObject_as_number,	    /* tp_as_number */
	0,				    /* tp_as_sequence */
	0,				    /* tp_as_mapping */
	(hashfunc)0,			    /* tp_hash */
	(ternaryfunc)0,			    /* tp_call */
	(reprfunc)SwigPyObject_str,	    /* tp_str */
	PyObject_GenericGetAttr,            /* tp_getattro */
	0,				    /* tp_setattro */
	0,		                    /* tp_as_buffer */
	Py_TPFLAGS_DEFAULT,	            /* tp_flags */
	swigobject_doc, 	            /* tp_doc */        
	0,                                  /* tp_traverse */
	0,                                  /* tp_clear */
	(richcmpfunc)SwigPyObject_richcompare,           /* tp_richcompare */
	0,                                  /* tp_weaklistoffset */
#if PY_VERSION_HEX >= 0x02020000
	0,                                  /* tp_iter */
	0,                                  /* tp_iternext */
	swigobject_methods,		    /* tp_methods */ 
	0,			            /* tp_members */
	0,				    /* tp_getset */	    	
	0,			            /* tp_base */	        
	0,				    /* tp_dict */	    	
	0,				    /* tp_descr_get */  	
	0,				    /* tp_descr_set */  	
	0,				    /* tp_dictoffset */ 	
	0,				    /* tp_init */	    	
	0,				    /* tp_alloc */	    	
	0,			            /* tp_new */	    	
	0,	                            /* tp_free */	   
	0,                                  /* tp_is_gc */  
	0,				    /* tp_bases */   
	0,				    /* tp_mro */
	0,				    /* tp_cache */   
	0,				    /* tp_subclasses */
	0,				    /* tp_weaklist */
#endif
#if PY_VERSION_HEX >= 0x02030000
	0,                                  /* tp_del */
#endif
#ifdef COUNT_ALLOCS
	0,0,0,0                             /* tp_alloc -> tp_next */
#endif
      };
    swigpyobject_type = tmp;
    /* for Python 3 we already assigned ob_type in PyVarObject_HEAD_INIT() */
#if PY_VERSION_HEX < 0x03000000
    swigpyobject_type.ob_type = &PyType_Type;
#endif
    type_init = 1;
  }
  return &swigpyobject_type;
}

SWIGRUNTIME PyObject *
SwigPyObject_New(void *ptr, swig_type_info *ty, int own)
{
  SwigPyObject *sobj = PyObject_NEW(SwigPyObject, SwigPyObject_type());
  if (sobj) {
    sobj->ptr  = ptr;
    sobj->ty   = ty;
    sobj->own  = own;
    sobj->next = 0;
  }
  return (PyObject *)sobj;
}

/* -----------------------------------------------------------------------------
 * Implements a simple Swig Packed type, and use it instead of string
 * ----------------------------------------------------------------------------- */

typedef struct {
  PyObject_HEAD
  void *pack;
  swig_type_info *ty;
  size_t size;
} SwigPyPacked;

SWIGRUNTIME int
SwigPyPacked_print(SwigPyPacked *v, FILE *fp, int SWIGUNUSEDPARM(flags))
{
  char result[SWIG_BUFFER_SIZE];
  fputs("<Swig Packed ", fp); 
  if (SWIG_PackDataName(result, v->pack, v->size, 0, sizeof(result))) {
    fputs("at ", fp); 
    fputs(result, fp); 
  }
  fputs(v->ty->name,fp); 
  fputs(">", fp);
  return 0; 
}
  
SWIGRUNTIME PyObject *
SwigPyPacked_repr(SwigPyPacked *v)
{
  char result[SWIG_BUFFER_SIZE];
  if (SWIG_PackDataName(result, v->pack, v->size, 0, sizeof(result))) {
    return SWIG_Python_str_FromFormat("<Swig Packed at %s%s>", result, v->ty->name);
  } else {
    return SWIG_Python_str_FromFormat("<Swig Packed %s>", v->ty->name);
  }  
}

SWIGRUNTIME PyObject *
SwigPyPacked_str(SwigPyPacked *v)
{
  char result[SWIG_BUFFER_SIZE];
  if (SWIG_PackDataName(result, v->pack, v->size, 0, sizeof(result))){
    return SWIG_Python_str_FromFormat("%s%s", result, v->ty->name);
  } else {
    return SWIG_Python_str_FromChar(v->ty->name);
  }  
}

SWIGRUNTIME int
SwigPyPacked_compare(SwigPyPacked *v, SwigPyPacked *w)
{
  size_t i = v->size;
  size_t j = w->size;
  int s = (i < j) ? -1 : ((i > j) ? 1 : 0);
  return s ? s : strncmp((char *)v->pack, (char *)w->pack, 2*v->size);
}

SWIGRUNTIME PyTypeObject* _PySwigPacked_type(void);

SWIGRUNTIME PyTypeObject*
SwigPyPacked_type(void) {
  static PyTypeObject *SWIG_STATIC_POINTER(type) = _PySwigPacked_type();
  return type;
}

SWIGRUNTIMEINLINE int
SwigPyPacked_Check(PyObject *op) {
  return ((op)->ob_type == _PySwigPacked_type()) 
    || (strcmp((op)->ob_type->tp_name,"SwigPyPacked") == 0);
}

SWIGRUNTIME void
SwigPyPacked_dealloc(PyObject *v)
{
  if (SwigPyPacked_Check(v)) {
    SwigPyPacked *sobj = (SwigPyPacked *) v;
    free(sobj->pack);
  }
  PyObject_DEL(v);
}

SWIGRUNTIME PyTypeObject*
_PySwigPacked_type(void) {
  static char swigpacked_doc[] = "Swig object carries a C/C++ instance pointer";
  static PyTypeObject swigpypacked_type;
  static int type_init = 0;  
  if (!type_init) {
    const PyTypeObject tmp
      = {
    /* PyObject header changed in Python 3 */
#if PY_VERSION_HEX>=0x03000000
    PyVarObject_HEAD_INIT(&PyType_Type, 0)
#else
	PyObject_HEAD_INIT(NULL)
    0,				    /* ob_size */	
#endif
	(char *)"SwigPyPacked",		    /* tp_name */	
	sizeof(SwigPyPacked),		    /* tp_basicsize */	
	0,				    /* tp_itemsize */	
	(destructor)SwigPyPacked_dealloc,   /* tp_dealloc */	
	(printfunc)SwigPyPacked_print,	    /* tp_print */   	
	(getattrfunc)0,			    /* tp_getattr */ 	
	(setattrfunc)0,			    /* tp_setattr */ 	
#if PY_VERSION_HEX>=0x03000000
    0, /* tp_reserved in 3.0.1 */
#else
    (cmpfunc)SwigPyPacked_compare,	    /* tp_compare */
#endif
	(reprfunc)SwigPyPacked_repr,	    /* tp_repr */
	0,	                            /* tp_as_number */
	0,				    /* tp_as_sequence */
	0,				    /* tp_as_mapping */
	(hashfunc)0,			    /* tp_hash */
	(ternaryfunc)0,			    /* tp_call */
	(reprfunc)SwigPyPacked_str,	    /* tp_str */
	PyObject_GenericGetAttr,            /* tp_getattro */
	0,				    /* tp_setattro */
	0,		                    /* tp_as_buffer */
	Py_TPFLAGS_DEFAULT,	            /* tp_flags */
	swigpacked_doc, 	            /* tp_doc */
	0,                                  /* tp_traverse */
	0,                                  /* tp_clear */
	0,                                  /* tp_richcompare */
	0,                                  /* tp_weaklistoffset */
#if PY_VERSION_HEX >= 0x02020000
	0,                                  /* tp_iter */
	0,                                  /* tp_iternext */
	0,		                    /* tp_methods */ 
	0,			            /* tp_members */
	0,				    /* tp_getset */	    	
	0,			            /* tp_base */	        
	0,				    /* tp_dict */	    	
	0,				    /* tp_descr_get */  	
	0,				    /* tp_descr_set */  	
	0,				    /* tp_dictoffset */ 	
	0,				    /* tp_init */	    	
	0,				    /* tp_alloc */	    	
	0,			            /* tp_new */	    	
	0, 	                            /* tp_free */	   
        0,                                  /* tp_is_gc */  
	0,				    /* tp_bases */   
	0,				    /* tp_mro */
	0,				    /* tp_cache */   
 	0,				    /* tp_subclasses */
	0,				    /* tp_weaklist */
#endif
#if PY_VERSION_HEX >= 0x02030000
	0,                                  /* tp_del */
#endif
#ifdef COUNT_ALLOCS
	0,0,0,0                             /* tp_alloc -> tp_next */
#endif
      };
    swigpypacked_type = tmp;
    /* for Python 3 the ob_type already assigned in PyVarObject_HEAD_INIT() */
#if PY_VERSION_HEX < 0x03000000
    swigpypacked_type.ob_type = &PyType_Type;
#endif
    type_init = 1;
  }
  return &swigpypacked_type;
}

SWIGRUNTIME PyObject *
SwigPyPacked_New(void *ptr, size_t size, swig_type_info *ty)
{
  SwigPyPacked *sobj = PyObject_NEW(SwigPyPacked, SwigPyPacked_type());
  if (sobj) {
    void *pack = malloc(size);
    if (pack) {
      memcpy(pack, ptr, size);
      sobj->pack = pack;
      sobj->ty   = ty;
      sobj->size = size;
    } else {
      PyObject_DEL((PyObject *) sobj);
      sobj = 0;
    }
  }
  return (PyObject *) sobj;
}

SWIGRUNTIME swig_type_info *
SwigPyPacked_UnpackData(PyObject *obj, void *ptr, size_t size)
{
  if (SwigPyPacked_Check(obj)) {
    SwigPyPacked *sobj = (SwigPyPacked *)obj;
    if (sobj->size != size) return 0;
    memcpy(ptr, sobj->pack, size);
    return sobj->ty;
  } else {
    return 0;
  }
}

/* -----------------------------------------------------------------------------
 * pointers/data manipulation
 * ----------------------------------------------------------------------------- */

SWIGRUNTIMEINLINE PyObject *
_SWIG_This(void)
{
    return SWIG_Python_str_FromChar("this");
}

static PyObject *swig_this = NULL;

SWIGRUNTIME PyObject *
SWIG_This(void)
{
  if (swig_this == NULL)
    swig_this = _SWIG_This();
  return swig_this;
}

/* #define SWIG_PYTHON_SLOW_GETSET_THIS */

/* TODO: I don't know how to implement the fast getset in Python 3 right now */
#if PY_VERSION_HEX>=0x03000000
#define SWIG_PYTHON_SLOW_GETSET_THIS 
#endif

SWIGRUNTIME SwigPyObject *
SWIG_Python_GetSwigThis(PyObject *pyobj) 
{
  if (SwigPyObject_Check(pyobj)) {
    return (SwigPyObject *) pyobj;
  } else {
    PyObject *obj = 0;
#if (!defined(SWIG_PYTHON_SLOW_GETSET_THIS) && (PY_VERSION_HEX >= 0x02030000))
    if (PyInstance_Check(pyobj)) {
      obj = _PyInstance_Lookup(pyobj, SWIG_This());      
    } else {
      PyObject **dictptr = _PyObject_GetDictPtr(pyobj);
      if (dictptr != NULL) {
	PyObject *dict = *dictptr;
	obj = dict ? PyDict_GetItem(dict, SWIG_This()) : 0;
      } else {
#ifdef PyWeakref_CheckProxy
	if (PyWeakref_CheckProxy(pyobj)) {
	  PyObject *wobj = PyWeakref_GET_OBJECT(pyobj);
	  return wobj ? SWIG_Python_GetSwigThis(wobj) : 0;
	}
#endif
	obj = PyObject_GetAttr(pyobj,SWIG_This());
	if (obj) {
	  Py_DECREF(obj);
	} else {
	  if (PyErr_Occurred()) PyErr_Clear();
	  return 0;
	}
      }
    }
#else
    obj = PyObject_GetAttr(pyobj,SWIG_This());
    if (obj) {
      Py_DECREF(obj);
    } else {
      if (PyErr_Occurred()) PyErr_Clear();
      return 0;
    }
#endif
    if (obj && !SwigPyObject_Check(obj)) {
      /* a PyObject is called 'this', try to get the 'real this'
	 SwigPyObject from it */ 
      return SWIG_Python_GetSwigThis(obj);
    }
    return (SwigPyObject *)obj;
  }
}

/* Acquire a pointer value */

SWIGRUNTIME int
SWIG_Python_AcquirePtr(PyObject *obj, int own) {
  if (own == SWIG_POINTER_OWN) {
    SwigPyObject *sobj = SWIG_Python_GetSwigThis(obj);
    if (sobj) {
      int oldown = sobj->own;
      sobj->own = own;
      return oldown;
    }
  }
  return 0;
}

/* Convert a pointer value */

SWIGRUNTIME int
SWIG_Python_ConvertPtrAndOwn(PyObject *obj, void **ptr, swig_type_info *ty, int flags, int *own) {
  if (!obj) return SWIG_ERROR;
  if (obj == Py_None) {
    if (ptr) *ptr = 0;
    return SWIG_OK;
  } else {
    SwigPyObject *sobj = SWIG_Python_GetSwigThis(obj);
    if (own)
      *own = 0;
    while (sobj) {
      void *vptr = sobj->ptr;
      if (ty) {
	swig_type_info *to = sobj->ty;
	if (to == ty) {
	  /* no type cast needed */
	  if (ptr) *ptr = vptr;
	  break;
	} else {
	  swig_cast_info *tc = SWIG_TypeCheck(to->name,ty);
	  if (!tc) {
	    sobj = (SwigPyObject *)sobj->next;
	  } else {
	    if (ptr) {
              int newmemory = 0;
              *ptr = SWIG_TypeCast(tc,vptr,&newmemory);
              if (newmemory == SWIG_CAST_NEW_MEMORY) {
                assert(own); /* badly formed typemap which will lead to a memory leak - it must set and use own to delete *ptr */
                if (own)
                  *own = *own | SWIG_CAST_NEW_MEMORY;
              }
            }
	    break;
	  }
	}
      } else {
	if (ptr) *ptr = vptr;
	break;
      }
    }
    if (sobj) {
      if (own)
        *own = *own | sobj->own;
      if (flags & SWIG_POINTER_DISOWN) {
	sobj->own = 0;
      }
      return SWIG_OK;
    } else {
      int res = SWIG_ERROR;
      if (flags & SWIG_POINTER_IMPLICIT_CONV) {
	SwigPyClientData *data = ty ? (SwigPyClientData *) ty->clientdata : 0;
	if (data && !data->implicitconv) {
	  PyObject *klass = data->klass;
	  if (klass) {
	    PyObject *impconv;
	    data->implicitconv = 1; /* avoid recursion and call 'explicit' constructors*/
	    impconv = SWIG_Python_CallFunctor(klass, obj);
	    data->implicitconv = 0;
	    if (PyErr_Occurred()) {
	      PyErr_Clear();
	      impconv = 0;
	    }
	    if (impconv) {
	      SwigPyObject *iobj = SWIG_Python_GetSwigThis(impconv);
	      if (iobj) {
		void *vptr;
		res = SWIG_Python_ConvertPtrAndOwn((PyObject*)iobj, &vptr, ty, 0, 0);
		if (SWIG_IsOK(res)) {
		  if (ptr) {
		    *ptr = vptr;
		    /* transfer the ownership to 'ptr' */
		    iobj->own = 0;
		    res = SWIG_AddCast(res);
		    res = SWIG_AddNewMask(res);
		  } else {
		    res = SWIG_AddCast(res);		    
		  }
		}
	      }
	      Py_DECREF(impconv);
	    }
	  }
	}
      }
      return res;
    }
  }
}

/* Convert a function ptr value */

SWIGRUNTIME int
SWIG_Python_ConvertFunctionPtr(PyObject *obj, void **ptr, swig_type_info *ty) {
  if (!PyCFunction_Check(obj)) {
    return SWIG_ConvertPtr(obj, ptr, ty, 0);
  } else {
    void *vptr = 0;
    
    /* here we get the method pointer for callbacks */
    const char *doc = (((PyCFunctionObject *)obj) -> m_ml -> ml_doc);
    const char *desc = doc ? strstr(doc, "swig_ptr: ") : 0;
    if (desc)
      desc = ty ? SWIG_UnpackVoidPtr(desc + 10, &vptr, ty->name) : 0;
    if (!desc) 
      return SWIG_ERROR;
    if (ty) {
      swig_cast_info *tc = SWIG_TypeCheck(desc,ty);
      if (tc) {
        int newmemory = 0;
        *ptr = SWIG_TypeCast(tc,vptr,&newmemory);
        assert(!newmemory); /* newmemory handling not yet implemented */
      } else {
        return SWIG_ERROR;
      }
    } else {
      *ptr = vptr;
    }
    return SWIG_OK;
  }
}

/* Convert a packed value value */

SWIGRUNTIME int
SWIG_Python_ConvertPacked(PyObject *obj, void *ptr, size_t sz, swig_type_info *ty) {
  swig_type_info *to = SwigPyPacked_UnpackData(obj, ptr, sz);
  if (!to) return SWIG_ERROR;
  if (ty) {
    if (to != ty) {
      /* check type cast? */
      swig_cast_info *tc = SWIG_TypeCheck(to->name,ty);
      if (!tc) return SWIG_ERROR;
    }
  }
  return SWIG_OK;
}  

/* -----------------------------------------------------------------------------
 * Create a new pointer object
 * ----------------------------------------------------------------------------- */

/*
  Create a new instance object, without calling __init__, and set the
  'this' attribute.
*/

SWIGRUNTIME PyObject* 
SWIG_Python_NewShadowInstance(SwigPyClientData *data, PyObject *swig_this)
{
#if (PY_VERSION_HEX >= 0x02020000)
  PyObject *inst = 0;
  PyObject *newraw = data->newraw;
  if (newraw) {
    inst = PyObject_Call(newraw, data->newargs, NULL);
    if (inst) {
#if !defined(SWIG_PYTHON_SLOW_GETSET_THIS)
      PyObject **dictptr = _PyObject_GetDictPtr(inst);
      if (dictptr != NULL) {
	PyObject *dict = *dictptr;
	if (dict == NULL) {
	  dict = PyDict_New();
	  *dictptr = dict;
	  PyDict_SetItem(dict, SWIG_This(), swig_this);
	}
      }
#else
      PyObject *key = SWIG_This();
      PyObject_SetAttr(inst, key, swig_this);
#endif
    }
  } else {
#if PY_VERSION_HEX >= 0x03000000
    inst = PyBaseObject_Type.tp_new((PyTypeObject*) data->newargs, Py_None, Py_None);
    PyObject_SetAttr(inst, SWIG_This(), swig_this);
    Py_TYPE(inst)->tp_flags &= ~Py_TPFLAGS_VALID_VERSION_TAG;
#else
    PyObject *dict = PyDict_New();
    PyDict_SetItem(dict, SWIG_This(), swig_this);
    inst = PyInstance_NewRaw(data->newargs, dict);
    Py_DECREF(dict);
#endif
  }
  return inst;
#else
#if (PY_VERSION_HEX >= 0x02010000)
  PyObject *inst;
  PyObject *dict = PyDict_New();
  PyDict_SetItem(dict, SWIG_This(), swig_this);
  inst = PyInstance_NewRaw(data->newargs, dict);
  Py_DECREF(dict);
  return (PyObject *) inst;
#else
  PyInstanceObject *inst = PyObject_NEW(PyInstanceObject, &PyInstance_Type);
  if (inst == NULL) {
    return NULL;
  }
  inst->in_class = (PyClassObject *)data->newargs;
  Py_INCREF(inst->in_class);
  inst->in_dict = PyDict_New();
  if (inst->in_dict == NULL) {
    Py_DECREF(inst);
    return NULL;
  }
#ifdef Py_TPFLAGS_HAVE_WEAKREFS
  inst->in_weakreflist = NULL;
#endif
#ifdef Py_TPFLAGS_GC
  PyObject_GC_Init(inst);
#endif
  PyDict_SetItem(inst->in_dict, SWIG_This(), swig_this);
  return (PyObject *) inst;
#endif
#endif
}

SWIGRUNTIME void
SWIG_Python_SetSwigThis(PyObject *inst, PyObject *swig_this)
{
 PyObject *dict;
#if (PY_VERSION_HEX >= 0x02020000) && !defined(SWIG_PYTHON_SLOW_GETSET_THIS)
 PyObject **dictptr = _PyObject_GetDictPtr(inst);
 if (dictptr != NULL) {
   dict = *dictptr;
   if (dict == NULL) {
     dict = PyDict_New();
     *dictptr = dict;
   }
   PyDict_SetItem(dict, SWIG_This(), swig_this);
   return;
 }
#endif
 dict = PyObject_GetAttrString(inst, (char*)"__dict__");
 PyDict_SetItem(dict, SWIG_This(), swig_this);
 Py_DECREF(dict);
} 


SWIGINTERN PyObject *
SWIG_Python_InitShadowInstance(PyObject *args) {
  PyObject *obj[2];
  if (!SWIG_Python_UnpackTuple(args,(char*)"swiginit", 2, 2, obj)) {
    return NULL;
  } else {
    SwigPyObject *sthis = SWIG_Python_GetSwigThis(obj[0]);
    if (sthis) {
      SwigPyObject_append((PyObject*) sthis, obj[1]);
    } else {
      SWIG_Python_SetSwigThis(obj[0], obj[1]);
    }
    return SWIG_Py_Void();
  }
}

/* Create a new pointer object */

SWIGRUNTIME PyObject *
SWIG_Python_NewPointerObj(void *ptr, swig_type_info *type, int flags) {
  if (!ptr) {
    return SWIG_Py_Void();
  } else {
    int own = (flags & SWIG_POINTER_OWN) ? SWIG_POINTER_OWN : 0;
    PyObject *robj = SwigPyObject_New(ptr, type, own);
    SwigPyClientData *clientdata = type ? (SwigPyClientData *)(type->clientdata) : 0;
    if (clientdata && !(flags & SWIG_POINTER_NOSHADOW)) {
      PyObject *inst = SWIG_Python_NewShadowInstance(clientdata, robj);
      if (inst) {
	Py_DECREF(robj);
	robj = inst;
      }
    }
    return robj;
  }
}

/* Create a new packed object */

SWIGRUNTIMEINLINE PyObject *
SWIG_Python_NewPackedObj(void *ptr, size_t sz, swig_type_info *type) {
  return ptr ? SwigPyPacked_New((void *) ptr, sz, type) : SWIG_Py_Void();
}

/* -----------------------------------------------------------------------------*
 *  Get type list 
 * -----------------------------------------------------------------------------*/

#ifdef SWIG_LINK_RUNTIME
void *SWIG_ReturnGlobalTypeList(void *);
#endif

SWIGRUNTIME swig_module_info *
SWIG_Python_GetModule(void) {
  static void *type_pointer = (void *)0;
  /* first check if module already created */
  if (!type_pointer) {
#ifdef SWIG_LINK_RUNTIME
    type_pointer = SWIG_ReturnGlobalTypeList((void *)0);
#else
    type_pointer = PyCObject_Import((char*)"swig_runtime_data" SWIG_RUNTIME_VERSION,
				    (char*)"type_pointer" SWIG_TYPE_TABLE_NAME);
    if (PyErr_Occurred()) {
      PyErr_Clear();
      type_pointer = (void *)0;
    }
#endif
  }
  return (swig_module_info *) type_pointer;
}

#if PY_MAJOR_VERSION < 2
/* PyModule_AddObject function was introduced in Python 2.0.  The following function
   is copied out of Python/modsupport.c in python version 2.3.4 */
SWIGINTERN int
PyModule_AddObject(PyObject *m, char *name, PyObject *o)
{
  PyObject *dict;
  if (!PyModule_Check(m)) {
    PyErr_SetString(PyExc_TypeError,
		    "PyModule_AddObject() needs module as first arg");
    return SWIG_ERROR;
  }
  if (!o) {
    PyErr_SetString(PyExc_TypeError,
		    "PyModule_AddObject() needs non-NULL value");
    return SWIG_ERROR;
  }
  
  dict = PyModule_GetDict(m);
  if (dict == NULL) {
    /* Internal error -- modules must have a dict! */
    PyErr_Format(PyExc_SystemError, "module '%s' has no __dict__",
		 PyModule_GetName(m));
    return SWIG_ERROR;
  }
  if (PyDict_SetItemString(dict, name, o))
    return SWIG_ERROR;
  Py_DECREF(o);
  return SWIG_OK;
}
#endif

SWIGRUNTIME void
SWIG_Python_DestroyModule(void *vptr)
{
  swig_module_info *swig_module = (swig_module_info *) vptr;
  swig_type_info **types = swig_module->types;
  size_t i;
  for (i =0; i < swig_module->size; ++i) {
    swig_type_info *ty = types[i];
    if (ty->owndata) {
      SwigPyClientData *data = (SwigPyClientData *) ty->clientdata;
      if (data) SwigPyClientData_Del(data);
    }
  }
  Py_DECREF(SWIG_This());
  swig_this = NULL;
}

SWIGRUNTIME void
SWIG_Python_SetModule(swig_module_info *swig_module) {
  static PyMethodDef swig_empty_runtime_method_table[] = { {NULL, NULL, 0, NULL} };/* Sentinel */

#if PY_VERSION_HEX >= 0x03000000
 /* Add a dummy module object into sys.modules */
  PyObject *module = PyImport_AddModule((char*)"swig_runtime_data" SWIG_RUNTIME_VERSION);
#else
  PyObject *module = Py_InitModule((char*)"swig_runtime_data" SWIG_RUNTIME_VERSION,
				   swig_empty_runtime_method_table);
#endif
  PyObject *pointer = PyCObject_FromVoidPtr((void *) swig_module, SWIG_Python_DestroyModule);
  if (pointer && module) {
    PyModule_AddObject(module, (char*)"type_pointer" SWIG_TYPE_TABLE_NAME, pointer);
  } else {
    Py_XDECREF(pointer);
  }
}

/* The python cached type query */
SWIGRUNTIME PyObject *
SWIG_Python_TypeCache(void) {
  static PyObject *SWIG_STATIC_POINTER(cache) = PyDict_New();
  return cache;
}

SWIGRUNTIME swig_type_info *
SWIG_Python_TypeQuery(const char *type)
{
  PyObject *cache = SWIG_Python_TypeCache();
  PyObject *key = SWIG_Python_str_FromChar(type); 
  PyObject *obj = PyDict_GetItem(cache, key);
  swig_type_info *descriptor;
  if (obj) {
    descriptor = (swig_type_info *) PyCObject_AsVoidPtr(obj);
  } else {
    swig_module_info *swig_module = SWIG_Python_GetModule();
    descriptor = SWIG_TypeQueryModule(swig_module, swig_module, type);
    if (descriptor) {
      obj = PyCObject_FromVoidPtr(descriptor, NULL);
      PyDict_SetItem(cache, key, obj);
      Py_DECREF(obj);
    }
  }
  Py_DECREF(key);
  return descriptor;
}

/* 
   For backward compatibility only
*/
#define SWIG_POINTER_EXCEPTION  0
#define SWIG_arg_fail(arg)      SWIG_Python_ArgFail(arg)
#define SWIG_MustGetPtr(p, type, argnum, flags)  SWIG_Python_MustGetPtr(p, type, argnum, flags)

SWIGRUNTIME int
SWIG_Python_AddErrMesg(const char* mesg, int infront)
{  
  if (PyErr_Occurred()) {
    PyObject *type = 0;
    PyObject *value = 0;
    PyObject *traceback = 0;
    PyErr_Fetch(&type, &value, &traceback);
    if (value) {
      char *tmp;
      PyObject *old_str = PyObject_Str(value);
      Py_XINCREF(type);
      PyErr_Clear();
      if (infront) {
	PyErr_Format(type, "%s %s", mesg, tmp = SWIG_Python_str_AsChar(old_str));
      } else {
	PyErr_Format(type, "%s %s", tmp = SWIG_Python_str_AsChar(old_str), mesg);
      }
      SWIG_Python_str_DelForPy3(tmp);
      Py_DECREF(old_str);
    }
    return 1;
  } else {
    return 0;
  }
}
  
SWIGRUNTIME int
SWIG_Python_ArgFail(int argnum)
{
  if (PyErr_Occurred()) {
    /* add information about failing argument */
    char mesg[256];
    PyOS_snprintf(mesg, sizeof(mesg), "argument number %d:", argnum);
    return SWIG_Python_AddErrMesg(mesg, 1);
  } else {
    return 0;
  }
}

SWIGRUNTIMEINLINE const char *
SwigPyObject_GetDesc(PyObject *self)
{
  SwigPyObject *v = (SwigPyObject *)self;
  swig_type_info *ty = v ? v->ty : 0;
  return ty ? ty->str : (char*)"";
}

SWIGRUNTIME void
SWIG_Python_TypeError(const char *type, PyObject *obj)
{
  if (type) {
#if defined(SWIG_COBJECT_TYPES)
    if (obj && SwigPyObject_Check(obj)) {
      const char *otype = (const char *) SwigPyObject_GetDesc(obj);
      if (otype) {
	PyErr_Format(PyExc_TypeError, "a '%s' is expected, 'SwigPyObject(%s)' is received",
		     type, otype);
	return;
      }
    } else 
#endif      
    {
      const char *otype = (obj ? obj->ob_type->tp_name : 0); 
      if (otype) {
	PyObject *str = PyObject_Str(obj);
	const char *cstr = str ? SWIG_Python_str_AsChar(str) : 0;
	if (cstr) {
	  PyErr_Format(PyExc_TypeError, "a '%s' is expected, '%s(%s)' is received",
		       type, otype, cstr);
          SWIG_Python_str_DelForPy3(cstr);
	} else {
	  PyErr_Format(PyExc_TypeError, "a '%s' is expected, '%s' is received",
		       type, otype);
	}
	Py_XDECREF(str);
	return;
      }
    }   
    PyErr_Format(PyExc_TypeError, "a '%s' is expected", type);
  } else {
    PyErr_Format(PyExc_TypeError, "unexpected type is received");
  }
}


/* Convert a pointer value, signal an exception on a type mismatch */
SWIGRUNTIME void *
SWIG_Python_MustGetPtr(PyObject *obj, swig_type_info *ty, int argnum, int flags) {
  void *result;
  if (SWIG_Python_ConvertPtr(obj, &result, ty, flags) == -1) {
    PyErr_Clear();
#if SWIG_POINTER_EXCEPTION
    if (flags) {
      SWIG_Python_TypeError(SWIG_TypePrettyName(ty), obj);
      SWIG_Python_ArgFail(argnum);
    }
#endif
  }
  return result;
}


#ifdef __cplusplus
#if 0
{ /* cc-mode */
#endif
}
#endif



#define SWIG_exception_fail(code, msg) do { SWIG_Error(code, msg); SWIG_fail; } while(0) 

#define SWIG_contract_assert(expr, msg) if (!(expr)) { SWIG_Error(SWIG_RuntimeError, msg); SWIG_fail; } else 



  #define SWIG_exception(code, msg) do { SWIG_Error(code, msg); SWIG_fail;; } while(0) 


/* -------- TYPES TABLE (BEGIN) -------- */

#define SWIGTYPE_p_OpenMM__AmoebaGeneralizedKirkwoodForce swig_types[0]
#define SWIGTYPE_p_OpenMM__AmoebaHarmonicAngleForce swig_types[1]
#define SWIGTYPE_p_OpenMM__AmoebaHarmonicBondForce swig_types[2]
#define SWIGTYPE_p_OpenMM__AmoebaHarmonicInPlaneAngleForce swig_types[3]
#define SWIGTYPE_p_OpenMM__AmoebaMultipoleForce swig_types[4]
#define SWIGTYPE_p_OpenMM__AmoebaOutOfPlaneBendForce swig_types[5]
#define SWIGTYPE_p_OpenMM__AmoebaPiTorsionForce swig_types[6]
#define SWIGTYPE_p_OpenMM__AmoebaStretchBendForce swig_types[7]
#define SWIGTYPE_p_OpenMM__AmoebaTorsionForce swig_types[8]
#define SWIGTYPE_p_OpenMM__AmoebaTorsionTorsionForce swig_types[9]
#define SWIGTYPE_p_OpenMM__AmoebaUreyBradleyForce swig_types[10]
#define SWIGTYPE_p_OpenMM__AmoebaVdwForce swig_types[11]
#define SWIGTYPE_p_OpenMM__AmoebaWcaDispersionForce swig_types[12]
#define SWIGTYPE_p_OpenMM__AndersenThermostat swig_types[13]
#define SWIGTYPE_p_OpenMM__BrownianIntegrator swig_types[14]
#define SWIGTYPE_p_OpenMM__CMAPTorsionForce swig_types[15]
#define SWIGTYPE_p_OpenMM__CMMotionRemover swig_types[16]
#define SWIGTYPE_p_OpenMM__Context swig_types[17]
#define SWIGTYPE_p_OpenMM__CustomAngleForce swig_types[18]
#define SWIGTYPE_p_OpenMM__CustomBondForce swig_types[19]
#define SWIGTYPE_p_OpenMM__CustomExternalForce swig_types[20]
#define SWIGTYPE_p_OpenMM__CustomGBForce swig_types[21]
#define SWIGTYPE_p_OpenMM__CustomGBForce__ComputationType swig_types[22]
#define SWIGTYPE_p_OpenMM__CustomHbondForce swig_types[23]
#define SWIGTYPE_p_OpenMM__CustomIntegrator swig_types[24]
#define SWIGTYPE_p_OpenMM__CustomIntegrator__ComputationType swig_types[25]
#define SWIGTYPE_p_OpenMM__CustomNonbondedForce swig_types[26]
#define SWIGTYPE_p_OpenMM__CustomTorsionForce swig_types[27]
#define SWIGTYPE_p_OpenMM__Force swig_types[28]
#define SWIGTYPE_p_OpenMM__GBSAOBCForce swig_types[29]
#define SWIGTYPE_p_OpenMM__GBSAOBCSoftcoreForce swig_types[30]
#define SWIGTYPE_p_OpenMM__GBVIForce swig_types[31]
#define SWIGTYPE_p_OpenMM__GBVISoftcoreForce swig_types[32]
#define SWIGTYPE_p_OpenMM__HarmonicAngleForce swig_types[33]
#define SWIGTYPE_p_OpenMM__HarmonicBondForce swig_types[34]
#define SWIGTYPE_p_OpenMM__Integrator swig_types[35]
#define SWIGTYPE_p_OpenMM__LangevinIntegrator swig_types[36]
#define SWIGTYPE_p_OpenMM__LocalEnergyMinimizer swig_types[37]
#define SWIGTYPE_p_OpenMM__MonteCarloBarostat swig_types[38]
#define SWIGTYPE_p_OpenMM__NonbondedForce swig_types[39]
#define SWIGTYPE_p_OpenMM__NonbondedSoftcoreForce swig_types[40]
#define SWIGTYPE_p_OpenMM__OpenMMException swig_types[41]
#define SWIGTYPE_p_OpenMM__OutOfPlaneSite swig_types[42]
#define SWIGTYPE_p_OpenMM__PeriodicTorsionForce swig_types[43]
#define SWIGTYPE_p_OpenMM__Platform swig_types[44]
#define SWIGTYPE_p_OpenMM__RBTorsionForce swig_types[45]
#define SWIGTYPE_p_OpenMM__RPMDIntegrator swig_types[46]
#define SWIGTYPE_p_OpenMM__SerializationNode swig_types[47]
#define SWIGTYPE_p_OpenMM__SerializationProxy swig_types[48]
#define SWIGTYPE_p_OpenMM__System swig_types[49]
#define SWIGTYPE_p_OpenMM__ThreeParticleAverageSite swig_types[50]
#define SWIGTYPE_p_OpenMM__TwoParticleAverageSite swig_types[51]
#define SWIGTYPE_p_OpenMM__VariableLangevinIntegrator swig_types[52]
#define SWIGTYPE_p_OpenMM__VariableVerletIntegrator swig_types[53]
#define SWIGTYPE_p_OpenMM__VerletIntegrator swig_types[54]
#define SWIGTYPE_p_OpenMM__VirtualSite swig_types[55]
#define SWIGTYPE_p_OpenMM__XmlSerializer swig_types[56]
#define SWIGTYPE_p_Vec3 swig_types[57]
#define SWIGTYPE_p___int64 swig_types[58]
#define SWIGTYPE_p_allocator_type swig_types[59]
#define SWIGTYPE_p_bool swig_types[60]
#define SWIGTYPE_p_char swig_types[61]
#define SWIGTYPE_p_char_type swig_types[62]
#define SWIGTYPE_p_difference_type swig_types[63]
#define SWIGTYPE_p_double swig_types[64]
#define SWIGTYPE_p_f_enum_std__ios_base__event_r_std__ios_base_int__void swig_types[65]
#define SWIGTYPE_p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_iosT_char_std__char_traitsT_char_t_t swig_types[66]
#define SWIGTYPE_p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_iostreamT_char_std__char_traitsT_char_t_t swig_types[67]
#define SWIGTYPE_p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_istreamT_char_std__char_traitsT_char_t_t swig_types[68]
#define SWIGTYPE_p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_ostreamT_char_std__char_traitsT_char_t_t swig_types[69]
#define SWIGTYPE_p_f_r_std__basic_istream__char_std__char_traits__char______r_std__basic_iostreamT_char_std__char_traitsT_char_t_t swig_types[70]
#define SWIGTYPE_p_f_r_std__basic_istream__char_std__char_traits__char______r_std__basic_istreamT_char_std__char_traitsT_char_t_t swig_types[71]
#define SWIGTYPE_p_f_r_std__basic_ostream__char_std__char_traits__char______r_std__basic_iostreamT_char_std__char_traitsT_char_t_t swig_types[72]
#define SWIGTYPE_p_f_r_std__basic_ostream__char_std__char_traits__char______r_std__basic_ostreamT_char_std__char_traitsT_char_t_t swig_types[73]
#define SWIGTYPE_p_f_r_std__ios_base__r_std__basic_iosT_char_std__char_traitsT_char_t_t swig_types[74]
#define SWIGTYPE_p_f_r_std__ios_base__r_std__basic_iostreamT_char_std__char_traitsT_char_t_t swig_types[75]
#define SWIGTYPE_p_f_r_std__ios_base__r_std__basic_istreamT_char_std__char_traitsT_char_t_t swig_types[76]
#define SWIGTYPE_p_f_r_std__ios_base__r_std__basic_ostreamT_char_std__char_traitsT_char_t_t swig_types[77]
#define SWIGTYPE_p_f_r_std__ios_base__r_std__ios_base swig_types[78]
#define SWIGTYPE_p_first_type swig_types[79]
#define SWIGTYPE_p_float swig_types[80]
#define SWIGTYPE_p_fmtflags swig_types[81]
#define SWIGTYPE_p_int swig_types[82]
#define SWIGTYPE_p_int_type swig_types[83]
#define SWIGTYPE_p_iostate swig_types[84]
#define SWIGTYPE_p_key_type swig_types[85]
#define SWIGTYPE_p_long swig_types[86]
#define SWIGTYPE_p_long_double swig_types[87]
#define SWIGTYPE_p_long_long swig_types[88]
#define SWIGTYPE_p_mapped_type swig_types[89]
#define SWIGTYPE_p_off_type swig_types[90]
#define SWIGTYPE_p_openmode swig_types[91]
#define SWIGTYPE_p_p_PyObject swig_types[92]
#define SWIGTYPE_p_p_char swig_types[93]
#define SWIGTYPE_p_p_unsigned_long swig_types[94]
#define SWIGTYPE_p_p_void swig_types[95]
#define SWIGTYPE_p_pos_type swig_types[96]
#define SWIGTYPE_p_second_type swig_types[97]
#define SWIGTYPE_p_seekdir swig_types[98]
#define SWIGTYPE_p_short swig_types[99]
#define SWIGTYPE_p_signed___int64 swig_types[100]
#define SWIGTYPE_p_signed_char swig_types[101]
#define SWIGTYPE_p_size_t swig_types[102]
#define SWIGTYPE_p_size_type swig_types[103]
#define SWIGTYPE_p_state_type swig_types[104]
#define SWIGTYPE_p_std__basic_iosT_char_std__char_traitsT_char_t_t swig_types[105]
#define SWIGTYPE_p_std__basic_iostreamT_char_std__char_traitsT_char_t_t swig_types[106]
#define SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t swig_types[107]
#define SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t__char_type swig_types[108]
#define SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t__off_type swig_types[109]
#define SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t__pos_type swig_types[110]
#define SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t swig_types[111]
#define SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t__off_type swig_types[112]
#define SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t__pos_type swig_types[113]
#define SWIGTYPE_p_std__basic_streambufT_char_std__char_traitsT_char_t_t swig_types[114]
#define SWIGTYPE_p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t swig_types[115]
#define SWIGTYPE_p_std__exception swig_types[116]
#define SWIGTYPE_p_std__ios_base swig_types[117]
#define SWIGTYPE_p_std__lessT_std__string_t swig_types[118]
#define SWIGTYPE_p_std__locale swig_types[119]
#define SWIGTYPE_p_std__mapT_std__string_std__string_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_std__string_t_t_t swig_types[120]
#define SWIGTYPE_p_std__mapT_std__string_std__string_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_std__string_t_t_t__allocator_type swig_types[121]
#define SWIGTYPE_p_std__pairT_int_int_t swig_types[122]
#define SWIGTYPE_p_std__string swig_types[123]
#define SWIGTYPE_p_std__type_info swig_types[124]
#define SWIGTYPE_p_std__vectorT_OpenMM__SerializationNode_std__allocatorT_OpenMM__SerializationNode_t_t swig_types[125]
#define SWIGTYPE_p_std__vectorT_Vec3_std__allocatorT_Vec3_t_t swig_types[126]
#define SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t swig_types[127]
#define SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t__allocator_type swig_types[128]
#define SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t swig_types[129]
#define SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t__allocator_type swig_types[130]
#define SWIGTYPE_p_std__vectorT_std__pairT_int_int_t_std__allocatorT_std__pairT_int_int_t_t_t swig_types[131]
#define SWIGTYPE_p_std__vectorT_std__pairT_int_int_t_std__allocatorT_std__pairT_int_int_t_t_t__allocator_type swig_types[132]
#define SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t swig_types[133]
#define SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t__allocator_type swig_types[134]
#define SWIGTYPE_p_std__vectorT_std__vectorT_int_std__allocatorT_int_t_t_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t_t swig_types[135]
#define SWIGTYPE_p_std__vectorT_std__vectorT_int_std__allocatorT_int_t_t_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t_t__allocator_type swig_types[136]
#define SWIGTYPE_p_std__vectorT_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t_std__allocatorT_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t_t_t swig_types[137]
#define SWIGTYPE_p_std__vectorT_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t_std__allocatorT_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t_t_t__allocator_type swig_types[138]
#define SWIGTYPE_p_std__vectorT_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t_std__allocatorT_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t_t_t__value_type swig_types[139]
#define SWIGTYPE_p_streamsize swig_types[140]
#define SWIGTYPE_p_swig__SwigPyIterator swig_types[141]
#define SWIGTYPE_p_traits_type swig_types[142]
#define SWIGTYPE_p_unsigned___int64 swig_types[143]
#define SWIGTYPE_p_unsigned_char swig_types[144]
#define SWIGTYPE_p_unsigned_int swig_types[145]
#define SWIGTYPE_p_unsigned_long swig_types[146]
#define SWIGTYPE_p_unsigned_long_long swig_types[147]
#define SWIGTYPE_p_unsigned_short swig_types[148]
#define SWIGTYPE_p_value_type swig_types[149]
#define SWIGTYPE_p_void swig_types[150]
static swig_type_info *swig_types[152];
static swig_module_info swig_module = {swig_types, 151, 0, 0, 0, 0};
#define SWIG_TypeQuery(name) SWIG_TypeQueryModule(&swig_module, &swig_module, name)
#define SWIG_MangledTypeQuery(name) SWIG_MangledTypeQueryModule(&swig_module, &swig_module, name)

/* -------- TYPES TABLE (END) -------- */

#if (PY_VERSION_HEX <= 0x02000000)
# if !defined(SWIG_PYTHON_CLASSIC)
#  error "This python version requires swig to be run with the '-classic' option"
# endif
#endif

/*-----------------------------------------------
              @(target):= _openmm.so
  ------------------------------------------------*/
#if PY_VERSION_HEX >= 0x03000000
#  define SWIG_init    PyInit__openmm

#else
#  define SWIG_init    init_openmm

#endif
#define SWIG_name    "_openmm"

#define SWIGVERSION 0x020001 
#define SWIG_VERSION SWIGVERSION


#define SWIG_as_voidptr(a) const_cast< void * >(static_cast< const void * >(a)) 
#define SWIG_as_voidptrptr(a) ((void)SWIG_as_voidptr(*a),reinterpret_cast< void** >(a)) 


#include <stdexcept>


namespace swig {
  class SwigPtr_PyObject {
  protected:
    PyObject *_obj;

  public:
    SwigPtr_PyObject() :_obj(0)
    {
    }

    SwigPtr_PyObject(const SwigPtr_PyObject& item) : _obj(item._obj)
    {
      Py_XINCREF(_obj);      
    }
    
    SwigPtr_PyObject(PyObject *obj, bool initial_ref = true) :_obj(obj)
    {
      if (initial_ref) {
        Py_XINCREF(_obj);
      }
    }
    
    SwigPtr_PyObject & operator=(const SwigPtr_PyObject& item) 
    {
      Py_XINCREF(item._obj);
      Py_XDECREF(_obj);
      _obj = item._obj;
      return *this;      
    }
    
    ~SwigPtr_PyObject() 
    {
      Py_XDECREF(_obj);
    }
    
    operator PyObject *() const
    {
      return _obj;
    }

    PyObject *operator->() const
    {
      return _obj;
    }
  };
}


namespace swig {
  struct SwigVar_PyObject : SwigPtr_PyObject {
    SwigVar_PyObject(PyObject* obj = 0) : SwigPtr_PyObject(obj, false) { }
    
    SwigVar_PyObject & operator = (PyObject* obj)
    {
      Py_XDECREF(_obj);
      _obj = obj;
      return *this;      
    }
  };
}


#include <string>


#include <stdexcept>


#if defined(__GNUC__)
#  if __GNUC__ == 2 && __GNUC_MINOR <= 96
#     define SWIG_STD_NOMODERN_STL
#  endif
#endif


#include <string>
#include <stdexcept>


#ifndef SWIG_STD_NOMODERN_STL
# include <ios>
#else
# include <streambuf.h>
#endif


  #define SWIG_From_long   PyInt_FromLong 


SWIGINTERNINLINE PyObject *
SWIG_From_int  (int value)
{    
  return SWIG_From_long  (value);
}


#include <limits.h>
#if !defined(SWIG_NO_LLONG_MAX)
# if !defined(LLONG_MAX) && defined(__GNUC__) && defined (__LONG_LONG_MAX__)
#   define LLONG_MAX __LONG_LONG_MAX__
#   define LLONG_MIN (-LLONG_MAX - 1LL)
#   define ULLONG_MAX (LLONG_MAX * 2ULL + 1ULL)
# endif
#endif


SWIGINTERN int
SWIG_AsVal_double (PyObject *obj, double *val)
{
  int res = SWIG_TypeError;
  if (PyFloat_Check(obj)) {
    if (val) *val = PyFloat_AsDouble(obj);
    return SWIG_OK;
  } else if (PyInt_Check(obj)) {
    if (val) *val = PyInt_AsLong(obj);
    return SWIG_OK;
  } else if (PyLong_Check(obj)) {
    double v = PyLong_AsDouble(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      PyErr_Clear();
    }
  }
#ifdef SWIG_PYTHON_CAST_MODE
  {
    int dispatch = 0;
    double d = PyFloat_AsDouble(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = d;
      return SWIG_AddCast(SWIG_OK);
    } else {
      PyErr_Clear();
    }
    if (!dispatch) {
      long v = PyLong_AsLong(obj);
      if (!PyErr_Occurred()) {
	if (val) *val = v;
	return SWIG_AddCast(SWIG_AddCast(SWIG_OK));
      } else {
	PyErr_Clear();
      }
    }
  }
#endif
  return res;
}


#include <float.h>


#include <math.h>


SWIGINTERNINLINE int
SWIG_CanCastAsInteger(double *d, double min, double max) {
  double x = *d;
  if ((min <= x && x <= max)) {
   double fx = floor(x);
   double cx = ceil(x);
   double rd =  ((x - fx) < 0.5) ? fx : cx; /* simple rint */
   if ((errno == EDOM) || (errno == ERANGE)) {
     errno = 0;
   } else {
     double summ, reps, diff;
     if (rd < x) {
       diff = x - rd;
     } else if (rd > x) {
       diff = rd - x;
     } else {
       return 1;
     }
     summ = rd + x;
     reps = diff/summ;
     if (reps < 8*DBL_EPSILON) {
       *d = rd;
       return 1;
     }
   }
  }
  return 0;
}


SWIGINTERN int
SWIG_AsVal_long (PyObject *obj, long* val)
{
  if (PyInt_Check(obj)) {
    if (val) *val = PyInt_AsLong(obj);
    return SWIG_OK;
  } else if (PyLong_Check(obj)) {
    long v = PyLong_AsLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      PyErr_Clear();
    }
  }
#ifdef SWIG_PYTHON_CAST_MODE
  {
    int dispatch = 0;
    long v = PyInt_AsLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_AddCast(SWIG_OK);
    } else {
      PyErr_Clear();
    }
    if (!dispatch) {
      double d;
      int res = SWIG_AddCast(SWIG_AsVal_double (obj,&d));
      if (SWIG_IsOK(res) && SWIG_CanCastAsInteger(&d, LONG_MIN, LONG_MAX)) {
	if (val) *val = (long)(d);
	return res;
      }
    }
  }
#endif
  return SWIG_TypeError;
}


SWIGINTERN int
SWIG_AsVal_int (PyObject * obj, int *val)
{
  long v;
  int res = SWIG_AsVal_long (obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v < INT_MIN || v > INT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< int >(v);
    }
  }  
  return res;
}


SWIGINTERNINLINE PyObject* 
SWIG_From_unsigned_SS_long  (unsigned long value)
{
  return (value > LONG_MAX) ?
    PyLong_FromUnsignedLong(value) : PyInt_FromLong(static_cast< long >(value)); 
}


SWIGINTERNINLINE PyObject *
SWIG_From_size_t  (size_t value)
{    
  return SWIG_From_unsigned_SS_long  (static_cast< unsigned long >(value));
}


SWIGINTERN int
SWIG_AsVal_unsigned_SS_long (PyObject *obj, unsigned long *val) 
{
  if (PyInt_Check(obj)) {
    long v = PyInt_AsLong(obj);
    if (v >= 0) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      return SWIG_OverflowError;
    }
  } else if (PyLong_Check(obj)) {
    unsigned long v = PyLong_AsUnsignedLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      PyErr_Clear();
    }
  }
#ifdef SWIG_PYTHON_CAST_MODE
  {
    int dispatch = 0;
    unsigned long v = PyLong_AsUnsignedLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_AddCast(SWIG_OK);
    } else {
      PyErr_Clear();
    }
    if (!dispatch) {
      double d;
      int res = SWIG_AddCast(SWIG_AsVal_double (obj,&d));
      if (SWIG_IsOK(res) && SWIG_CanCastAsInteger(&d, 0, ULONG_MAX)) {
	if (val) *val = (unsigned long)(d);
	return res;
      }
    }
  }
#endif
  return SWIG_TypeError;
}


SWIGINTERNINLINE int
SWIG_AsVal_size_t (PyObject * obj, size_t *val)
{
  unsigned long v;
  int res = SWIG_AsVal_unsigned_SS_long (obj, val ? &v : 0);
  if (SWIG_IsOK(res) && val) *val = static_cast< size_t >(v);
  return res;
}


SWIGINTERN int
SWIG_AsVal_bool (PyObject *obj, bool *val)
{
  int r = PyObject_IsTrue(obj);
  if (r == -1)
    return SWIG_ERROR;
  if (val) *val = r ? true : false;
  return SWIG_OK;
}


SWIGINTERNINLINE PyObject*
  SWIG_From_bool  (bool value)
{
  return PyBool_FromLong(value ? 1 : 0);
}


SWIGINTERN swig_type_info*
SWIG_pchar_descriptor(void)
{
  static int init = 0;
  static swig_type_info* info = 0;
  if (!init) {
    info = SWIG_TypeQuery("_p_char");
    init = 1;
  }
  return info;
}


SWIGINTERNINLINE PyObject *
SWIG_FromCharPtrAndSize(const char* carray, size_t size)
{
  if (carray) {
    if (size > INT_MAX) {
      swig_type_info* pchar_descriptor = SWIG_pchar_descriptor();
      return pchar_descriptor ? 
	SWIG_NewPointerObj(const_cast< char * >(carray), pchar_descriptor, 0) : SWIG_Py_Void();
    } else {
#if PY_VERSION_HEX >= 0x03000000
      return PyUnicode_FromStringAndSize(carray, static_cast< int >(size));
#else
      return PyString_FromStringAndSize(carray, static_cast< int >(size));
#endif
    }
  } else {
    return SWIG_Py_Void();
  }
}


SWIGINTERNINLINE PyObject *
SWIG_From_char  (char c) 
{ 
  return SWIG_FromCharPtrAndSize(&c,1);
}


SWIGINTERN int
SWIG_AsCharPtrAndSize(PyObject *obj, char** cptr, size_t* psize, int *alloc)
{
#if PY_VERSION_HEX>=0x03000000
  if (PyUnicode_Check(obj))
#else  
  if (PyString_Check(obj))
#endif
  {
    char *cstr; Py_ssize_t len;
#if PY_VERSION_HEX>=0x03000000
    if (!alloc && cptr) {
        /* We can't allow converting without allocation, since the internal
           representation of string in Python 3 is UCS-2/UCS-4 but we require
           a UTF-8 representation.
           TODO(bhy) More detailed explanation */
        return SWIG_RuntimeError;
    }
    obj = PyUnicode_AsUTF8String(obj);
    PyBytes_AsStringAndSize(obj, &cstr, &len);
    if(alloc) *alloc = SWIG_NEWOBJ;
#else
    PyString_AsStringAndSize(obj, &cstr, &len);
#endif
    if (cptr) {
      if (alloc) {
	/* 
	   In python the user should not be able to modify the inner
	   string representation. To warranty that, if you define
	   SWIG_PYTHON_SAFE_CSTRINGS, a new/copy of the python string
	   buffer is always returned.

	   The default behavior is just to return the pointer value,
	   so, be careful.
	*/ 
#if defined(SWIG_PYTHON_SAFE_CSTRINGS)
	if (*alloc != SWIG_OLDOBJ) 
#else
	if (*alloc == SWIG_NEWOBJ) 
#endif
	  {
	    *cptr = reinterpret_cast< char* >(memcpy((new char[len + 1]), cstr, sizeof(char)*(len + 1)));
	    *alloc = SWIG_NEWOBJ;
	  }
	else {
	  *cptr = cstr;
	  *alloc = SWIG_OLDOBJ;
	}
      } else {
        #if PY_VERSION_HEX>=0x03000000
        assert(0); /* Should never reach here in Python 3 */
        #endif
	*cptr = SWIG_Python_str_AsChar(obj);
      }
    }
    if (psize) *psize = len + 1;
#if PY_VERSION_HEX>=0x03000000
    Py_XDECREF(obj);
#endif
    return SWIG_OK;
  } else {
    swig_type_info* pchar_descriptor = SWIG_pchar_descriptor();
    if (pchar_descriptor) {
      void* vptr = 0;
      if (SWIG_ConvertPtr(obj, &vptr, pchar_descriptor, 0) == SWIG_OK) {
	if (cptr) *cptr = (char *) vptr;
	if (psize) *psize = vptr ? (strlen((char *)vptr) + 1) : 0;
	if (alloc) *alloc = SWIG_OLDOBJ;
	return SWIG_OK;
      }
    }
  }
  return SWIG_TypeError;
}


SWIGINTERN int
SWIG_AsCharArray(PyObject * obj, char *val, size_t size)
{ 
  char* cptr = 0; size_t csize = 0; int alloc = SWIG_OLDOBJ;
  int res = SWIG_AsCharPtrAndSize(obj, &cptr, &csize, &alloc);
  if (SWIG_IsOK(res)) {
    if ((csize == size + 1) && cptr && !(cptr[csize-1])) --csize;
    if (csize <= size) {
      if (val) {
	if (csize) memcpy(val, cptr, csize*sizeof(char));
	if (csize < size) memset(val + csize, 0, (size - csize)*sizeof(char));
      }
      if (alloc == SWIG_NEWOBJ) {
	delete[] cptr;
	res = SWIG_DelNewMask(res);
      }      
      return res;
    }
    if (alloc == SWIG_NEWOBJ) delete[] cptr;
  }
  return SWIG_TypeError;
}


SWIGINTERN int
SWIG_AsVal_char (PyObject * obj, char *val)
{    
  int res = SWIG_AsCharArray(obj, val, 1);
  if (!SWIG_IsOK(res)) {
    long v;
    res = SWIG_AddCast(SWIG_AsVal_long (obj, &v));
    if (SWIG_IsOK(res)) {
      if ((CHAR_MIN <= v) && (v <= CHAR_MAX)) {
	if (val) *val = static_cast< char >(v);
      } else {
	res = SWIG_OverflowError;
      }
    }
  }
  return res;
}


#include <iostream>


SWIGINTERN int
SWIG_AsVal_short (PyObject * obj, short *val)
{
  long v;
  int res = SWIG_AsVal_long (obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v < SHRT_MIN || v > SHRT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< short >(v);
    }
  }  
  return res;
}


SWIGINTERN int
SWIG_AsVal_unsigned_SS_short (PyObject * obj, unsigned short *val)
{
  unsigned long v;
  int res = SWIG_AsVal_unsigned_SS_long (obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v > USHRT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< unsigned short >(v);
    }
  }  
  return res;
}


SWIGINTERN int
SWIG_AsVal_unsigned_SS_int (PyObject * obj, unsigned int *val)
{
  unsigned long v;
  int res = SWIG_AsVal_unsigned_SS_long (obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v > UINT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< unsigned int >(v);
    }
  }  
  return res;
}


SWIGINTERN int
SWIG_AsVal_long_SS_long (PyObject *obj, long long *val)
{
  int res = SWIG_TypeError;
  if (PyLong_Check(obj)) {
    long long v = PyLong_AsLongLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      PyErr_Clear();
    }
  } else {
    long v;
    res = SWIG_AsVal_long (obj,&v);
    if (SWIG_IsOK(res)) {
      if (val) *val = v;
      return res;
    }
  }
#ifdef SWIG_PYTHON_CAST_MODE
  {
    const double mant_max = 1LL << DBL_MANT_DIG;
    const double mant_min = -mant_max;
    double d;
    res = SWIG_AsVal_double (obj,&d);
    if (SWIG_IsOK(res) && SWIG_CanCastAsInteger(&d, mant_min, mant_max)) {
      if (val) *val = (long long)(d);
      return SWIG_AddCast(res);
    }
    res = SWIG_TypeError;
  }
#endif
  return res;
}


SWIGINTERN int
SWIG_AsVal_unsigned_SS_long_SS_long (PyObject *obj, unsigned long long *val)
{
  int res = SWIG_TypeError;
  if (PyLong_Check(obj)) {
    unsigned long long v = PyLong_AsUnsignedLongLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      PyErr_Clear();
    }
  } else {
    unsigned long v;
    res = SWIG_AsVal_unsigned_SS_long (obj,&v);
    if (SWIG_IsOK(res)) {
      if (val) *val = v;
      return res;
    }
  }
#ifdef SWIG_PYTHON_CAST_MODE
  {
    const double mant_max = 1LL << DBL_MANT_DIG;
    double d;
    res = SWIG_AsVal_double (obj,&d);
    if (SWIG_IsOK(res) && SWIG_CanCastAsInteger(&d, 0, mant_max)) {
      if (val) *val = (unsigned long long)(d);
      return SWIG_AddCast(res);
    }
    res = SWIG_TypeError;
  }
#endif
  return res;
}


SWIGINTERN int
SWIG_AsVal_float (PyObject * obj, float *val)
{
  double v;
  int res = SWIG_AsVal_double (obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v < -FLT_MAX || v > FLT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< float >(v);
    }
  }  
  return res;
}

SWIGINTERN std::basic_ostream< char,std::char_traits< char > > &std_basic_ostream_Sl_char_Sg__operator_Sl__Sl___SWIG_17(std::basic_ostream< char > *self,std::basic_string< char,std::char_traits< char >,std::allocator< char > > const &s){
	  *self << s;
	  return *self;
	}




#include <utility>


#include <iostream>

  
namespace swig {
  struct stop_iteration {
  };

  struct SwigPyIterator {
  private:
    SwigPtr_PyObject _seq;

  protected:
    SwigPyIterator(PyObject *seq) : _seq(seq)
    {
    }
      
  public:
    virtual ~SwigPyIterator() {}

    // Access iterator method, required by Python
    virtual PyObject *value() const = 0;

    // Forward iterator method, required by Python
    virtual SwigPyIterator *incr(size_t n = 1) = 0;
    
    // Backward iterator method, very common in C++, but not required in Python
    virtual SwigPyIterator *decr(size_t /*n*/ = 1)
    {
      throw stop_iteration();
    }

    // Random access iterator methods, but not required in Python
    virtual ptrdiff_t distance(const SwigPyIterator &/*x*/) const
    {
      throw std::invalid_argument("operation not supported");
    }

    virtual bool equal (const SwigPyIterator &/*x*/) const
    {
      throw std::invalid_argument("operation not supported");
    }
    
    // C++ common/needed methods
    virtual SwigPyIterator *copy() const = 0;

    PyObject *next()     
    {
      SWIG_PYTHON_THREAD_BEGIN_BLOCK; // disable threads       
      PyObject *obj = value();
      incr();       
      SWIG_PYTHON_THREAD_END_BLOCK; // re-enable threads
      return obj;     
    }

    /* Make an alias for Python 3.x */
    PyObject *__next__()
    {
      return next();
    }

    PyObject *previous()
    {
      SWIG_PYTHON_THREAD_BEGIN_BLOCK; // disable threads       
      decr();
      PyObject *obj = value();
      SWIG_PYTHON_THREAD_END_BLOCK; // re-enable threads       
      return obj;
    }

    SwigPyIterator *advance(ptrdiff_t n)
    {
      return  (n > 0) ?  incr(n) : decr(-n);
    }
      
    bool operator == (const SwigPyIterator& x)  const
    {
      return equal(x);
    }
      
    bool operator != (const SwigPyIterator& x) const
    {
      return ! operator==(x);
    }
      
    SwigPyIterator& operator += (ptrdiff_t n)
    {
      return *advance(n);
    }

    SwigPyIterator& operator -= (ptrdiff_t n)
    {
      return *advance(-n);
    }
      
    SwigPyIterator* operator + (ptrdiff_t n) const
    {
      return copy()->advance(n);
    }

    SwigPyIterator* operator - (ptrdiff_t n) const
    {
      return copy()->advance(-n);
    }
      
    ptrdiff_t operator - (const SwigPyIterator& x) const
    {
      return x.distance(*this);
    }
      
    static swig_type_info* descriptor() {
      static int init = 0;
      static swig_type_info* desc = 0;
      if (!init) {
	desc = SWIG_TypeQuery("swig::SwigPyIterator *");
	init = 1;
      }	
      return desc;
    }    
  };
}


SWIGINTERNINLINE PyObject *
SWIG_From_ptrdiff_t  (ptrdiff_t value)
{    
  return SWIG_From_long  (static_cast< long >(value));
}


SWIGINTERNINLINE int
SWIG_AsVal_ptrdiff_t (PyObject * obj, ptrdiff_t *val)
{
  long v;
  int res = SWIG_AsVal_long (obj, val ? &v : 0);
  if (SWIG_IsOK(res) && val) *val = static_cast< ptrdiff_t >(v);
  return res;
}


#include <stdexcept>


#include <algorithm>


#include <map>
#include <algorithm>
#include <stdexcept>


#include <vector>


namespace swig {  
  template <class Type>
  struct noconst_traits {
    typedef Type noconst_type;
  };

  template <class Type>
  struct noconst_traits<const Type> {
    typedef Type noconst_type;
  };

  /*
    type categories
  */
  struct pointer_category { };  
  struct value_category { };

  /*
    General traits that provides type_name and type_info
  */
  template <class Type> struct traits { };

  template <class Type>
  inline const char* type_name() {
    return traits<typename noconst_traits<Type >::noconst_type >::type_name();
  }

  template <class Type> 
  struct traits_info {
    static swig_type_info *type_query(std::string name) {
      name += " *";
      return SWIG_TypeQuery(name.c_str());
    }    
    static swig_type_info *type_info() {
      static swig_type_info *info = type_query(type_name<Type>());
      return info;
    }
  };

  template <class Type>
  inline swig_type_info *type_info() {
    return traits_info<Type>::type_info();
  }

  /*
    Partial specialization for pointers
  */
  template <class Type> struct traits <Type *> {
    typedef pointer_category category;
    static std::string make_ptr_name(const char* name) {
      std::string ptrname = name;
      ptrname += " *";
      return ptrname;
    }    
    static const char* type_name() {
      static std::string name = make_ptr_name(swig::type_name<Type>());
      return name.c_str();
    }
  };

  template <class Type, class Category> 
  struct traits_as { };
 
  template <class Type, class Category> 
  struct traits_check { };

}


namespace swig {  
  /*
    Traits that provides the from method
  */
  template <class Type> struct traits_from_ptr {
    static PyObject *from(Type *val, int owner = 0) {
      return SWIG_NewPointerObj(val, type_info<Type>(), owner);
    }
  };

  template <class Type> struct traits_from {
    static PyObject *from(const Type& val) {
      return traits_from_ptr<Type>::from(new Type(val), 1);
    }
  };

  template <class Type> struct traits_from<Type *> {
    static PyObject *from(Type* val) {
      return traits_from_ptr<Type>::from(val, 0);
    }
  };

  template <class Type> struct traits_from<const Type *> {
    static PyObject *from(const Type* val) {
      return traits_from_ptr<Type>::from(const_cast<Type*>(val), 0);
    }
  };


  template <class Type>
  inline PyObject *from(const Type& val) {
    return traits_from<Type>::from(val);
  }

  template <class Type>
  inline PyObject *from_ptr(Type* val, int owner) {
    return traits_from_ptr<Type>::from(val, owner);
  }

  /*
    Traits that provides the asval/as/check method
  */
  template <class Type>
  struct traits_asptr {   
    static int asptr(PyObject *obj, Type **val) {
      Type *p;
      int res = SWIG_ConvertPtr(obj, (void**)&p, type_info<Type>(), 0);
      if (SWIG_IsOK(res)) {
	if (val) *val = p;
      }
      return res;
    }
  }; 

  template <class Type>
  inline int asptr(PyObject *obj, Type **vptr) {
    return traits_asptr<Type>::asptr(obj, vptr);
  }

  template <class Type> 
  struct traits_asval {
    static int asval(PyObject *obj, Type *val) {
      if (val) {
	Type *p = 0;
	int res = traits_asptr<Type>::asptr(obj, &p);
	if (!SWIG_IsOK(res)) return res;	
	if (p) {
	  typedef typename noconst_traits<Type>::noconst_type noconst_type;
	  *(const_cast<noconst_type*>(val)) = *p;
	  if (SWIG_IsNewObj(res)){
	    delete p;
	    res = SWIG_DelNewMask(res);
	  }
	  return res;
	} else {
	  return SWIG_ERROR;
	}
      } else {
	return traits_asptr<Type>::asptr(obj, (Type **)(0));
      }
    }
  };

  template <class Type> struct traits_asval<Type*> {
    static int asval(PyObject *obj, Type **val) {
      if (val) {
        typedef typename noconst_traits<Type>::noconst_type noconst_type;
        noconst_type *p = 0;
        int res = traits_asptr<noconst_type>::asptr(obj,  &p);
        if (SWIG_IsOK(res)) {
          *(const_cast<noconst_type**>(val)) = p;
	}
	return res;
      } else {
	return traits_asptr<Type>::asptr(obj, (Type **)(0));
      }
    }
  };
  
  template <class Type>
  inline int asval(PyObject *obj, Type *val) {
    return traits_asval<Type>::asval(obj, val);
  }

  template <class Type> 
  struct traits_as<Type, value_category> {
    static Type as(PyObject *obj, bool throw_error) {
      Type v;
      int res = asval(obj, &v);
      if (!obj || !SWIG_IsOK(res)) {
	if (!PyErr_Occurred()) {
	  ::SWIG_Error(SWIG_TypeError,  swig::type_name<Type>());
	}
	if (throw_error) throw std::invalid_argument("bad type");
      }
      return v;
    }
  };

  template <class Type> 
  struct traits_as<Type, pointer_category> {
    static Type as(PyObject *obj, bool throw_error) {
      Type *v = 0;      
      int res = (obj ? traits_asptr<Type>::asptr(obj, &v) : SWIG_ERROR);
      if (SWIG_IsOK(res) && v) {
	if (SWIG_IsNewObj(res)) {
	  Type r(*v);
	  delete v;
	  return r;
	} else {
	  return *v;
	}
      } else {
	// Uninitialized return value, no Type() constructor required.
	static Type *v_def = (Type*) malloc(sizeof(Type));
	if (!PyErr_Occurred()) {
	  SWIG_Error(SWIG_TypeError,  swig::type_name<Type>());
	}
	if (throw_error) throw std::invalid_argument("bad type");
	memset(v_def,0,sizeof(Type));
	return *v_def;
      }
    }
  };

  template <class Type> 
  struct traits_as<Type*, pointer_category> {
    static Type* as(PyObject *obj, bool throw_error) {
      Type *v = 0;      
      int res = (obj ? traits_asptr<Type>::asptr(obj, &v) : SWIG_ERROR);
      if (SWIG_IsOK(res)) {
	return v;
      } else {
	if (!PyErr_Occurred()) {
	  SWIG_Error(SWIG_TypeError,  swig::type_name<Type>());
	}
	if (throw_error) throw std::invalid_argument("bad type");
	return 0;
      }
    }
  };
    
  template <class Type>
  inline Type as(PyObject *obj, bool te = false) {
    return traits_as<Type, typename traits<Type>::category>::as(obj, te);
  }

  template <class Type> 
  struct traits_check<Type, value_category> {
    static bool check(PyObject *obj) {
      int res = obj ? asval(obj, (Type *)(0)) : SWIG_ERROR;
      return SWIG_IsOK(res) ? true : false;
    }
  };

  template <class Type> 
  struct traits_check<Type, pointer_category> {
    static bool check(PyObject *obj) {
      int res = obj ? asptr(obj, (Type **)(0)) : SWIG_ERROR;
      return SWIG_IsOK(res) ? true : false;
    }
  };

  template <class Type>
  inline bool check(PyObject *obj) {
    return traits_check<Type, typename traits<Type>::category>::check(obj);
  }
}


namespace swig {
  template <> struct traits<int > {
    typedef value_category category;
    static const char* type_name() { return"int"; }
  };  
  template <>  struct traits_asval<int > {   
    typedef int value_type;
    static int asval(PyObject *obj, value_type *val) { 
      return SWIG_AsVal_int (obj, val);
    }
  };
  template <>  struct traits_from<int > {
    typedef int value_type;
    static PyObject *from(const value_type& val) {
      return SWIG_From_int  (val);
    }
  };
}


  namespace swig {

















































    template <class T, class U >
    struct traits_asptr<std::pair<T,U> >  {
      typedef std::pair<T,U> value_type;

      static int get_pair(PyObject* first, PyObject* second,
			  std::pair<T,U> **val) 
      {
	if (val) {
	  value_type *vp = (new std::pair<T,U>);
	  T *pfirst = &(vp->first);
	  int res1 = swig::asval((PyObject*)first, pfirst);
	  if (!SWIG_IsOK(res1)) return res1;
	  U *psecond = &(vp->second);
	  int res2 = swig::asval((PyObject*)second, psecond);
	  if (!SWIG_IsOK(res2)) return res2;
	  *val = vp;
	  return SWIG_AddNewMask(res1 > res2 ? res1 : res2);
	} else {
	  T *pfirst = 0;
	  int res1 = swig::asval((PyObject*)first, pfirst);
	  if (!SWIG_IsOK(res1)) return res1;
	  U *psecond = 0;
	  int res2 = swig::asval((PyObject*)second, psecond);
	  if (!SWIG_IsOK(res2)) return res2;
	  return res1 > res2 ? res1 : res2;
	}	
      }

      static int asptr(PyObject *obj, std::pair<T,U> **val) {
	int res = SWIG_ERROR;
	if (PyTuple_Check(obj)) {
	  if (PyTuple_GET_SIZE(obj) == 2) {
	    res = get_pair(PyTuple_GET_ITEM(obj,0),PyTuple_GET_ITEM(obj,1), val);
	  }
	} else if (PySequence_Check(obj)) {
	  if (PySequence_Size(obj) == 2) {
	    swig::SwigVar_PyObject first = PySequence_GetItem(obj,0);
	    swig::SwigVar_PyObject second = PySequence_GetItem(obj,1);
	    res = get_pair(first, second, val);
	  }
	} else {
	  value_type *p;
	  res = SWIG_ConvertPtr(obj,(void**)&p,swig::type_info<value_type>(),0);
	  if (SWIG_IsOK(res) && val)  *val = p;
	}
	return res;
      }
    };


    template <class T, class U >
    struct traits_from<std::pair<T,U> >   {
      static PyObject *from(const std::pair<T,U>& val) {
	PyObject* obj = PyTuple_New(2);
	PyTuple_SetItem(obj,0,swig::from(val.first));
	PyTuple_SetItem(obj,1,swig::from(val.second));
	return obj;
      }
    };
  }


      namespace swig {
	template <>  struct traits<std::pair<int,int > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::pair<" "int" "," "int" " >";
	  }
	};
      }
    

#include <functional>

namespace std {
  template <>
  struct less <PyObject *>: public binary_function<PyObject *, PyObject *, bool>
  {
    bool
    operator()(PyObject * v, PyObject *w) const
    { 
      bool res;
      SWIG_PYTHON_THREAD_BEGIN_BLOCK;
      res = PyObject_RichCompareBool(v, w, Py_LT) ? true : false;
      /* This may fall into a case of inconsistent
               eg. ObjA > ObjX > ObjB
               but ObjA < ObjB
      */
      if( PyErr_Occurred() && PyErr_ExceptionMatches(PyExc_TypeError) )
      {
        /* Objects can't be compared, this mostly occurred in Python 3.0 */
        /* Compare their ptr directly for a workaround */
        res = (v < w);
        PyErr_Clear();
      }
      SWIG_PYTHON_THREAD_END_BLOCK;
      return res;
    }
  };

  template <>
  struct less <swig::SwigPtr_PyObject>: public binary_function<swig::SwigPtr_PyObject, swig::SwigPtr_PyObject, bool>
  {
    bool
    operator()(const swig::SwigPtr_PyObject& v, const swig::SwigPtr_PyObject& w) const
    {
      return std::less<PyObject *>()(v, w);
    }
  };

  template <>
  struct less <swig::SwigVar_PyObject>: public binary_function<swig::SwigVar_PyObject, swig::SwigVar_PyObject, bool>
  {
    bool
    operator()(const swig::SwigVar_PyObject& v, const swig::SwigVar_PyObject& w) const
    {
      return std::less<PyObject *>()(v, w);
    }
  };

}

namespace swig {
  template <> struct traits<PyObject *> {
    typedef value_category category;
    static const char* type_name() { return "PyObject *"; }
  };  

  template <>  struct traits_asval<PyObject * > {   
    typedef PyObject * value_type;
    static int asval(PyObject *obj, value_type *val) {
      if (val) *val = obj;
      return SWIG_OK;
    }
  };

  template <> 
  struct traits_check<PyObject *, value_category> {
    static bool check(PyObject *) {
      return true;
    }
  };

  template <>  struct traits_from<PyObject *> {
    typedef PyObject * value_type;
    static PyObject *from(const value_type& val) {
      Py_XINCREF(val);
      return val;
    }
  };
  
}

namespace swig {
  inline size_t
  check_index(ptrdiff_t i, size_t size, bool insert = false) {
    if ( i < 0 ) {
      if ((size_t) (-i) <= size)
	return (size_t) (i + size);
    } else if ( (size_t) i < size ) {
      return (size_t) i;
    } else if (insert && ((size_t) i == size)) {
      return size;
    }
    
    throw std::out_of_range("index out of range");
  }

  inline size_t
  slice_index(ptrdiff_t i, size_t size) {
    if ( i < 0 ) {
      if ((size_t) (-i) <= size) {
	return (size_t) (i + size);
      } else {
	throw std::out_of_range("index out of range");
      }
    } else {
      return ( (size_t) i < size ) ? ((size_t) i) : size;
    }
  }

  template <class Sequence, class Difference>
  inline typename Sequence::iterator
  getpos(Sequence* self, Difference i)  {
    typename Sequence::iterator pos = self->begin();
    std::advance(pos, check_index(i,self->size()));
    return pos;
  }

  template <class Sequence, class Difference>
  inline typename Sequence::const_iterator
  cgetpos(const Sequence* self, Difference i)  {
    typename Sequence::const_iterator pos = self->begin();
    std::advance(pos, check_index(i,self->size()));
    return pos;
  }

  template <class Sequence, class Difference>
  inline Sequence*
  getslice(const Sequence* self, Difference i, Difference j) {
    typename Sequence::size_type size = self->size();
    typename Sequence::size_type ii = swig::check_index(i, size);
    typename Sequence::size_type jj = swig::slice_index(j, size);

    if (jj > ii) {
      typename Sequence::const_iterator vb = self->begin();
      typename Sequence::const_iterator ve = self->begin();
      std::advance(vb,ii);
      std::advance(ve,jj);
      return new Sequence(vb, ve);
    } else {
      return new Sequence();
    }
  }

  template <class Sequence, class Difference, class InputSeq>
  inline void
  setslice(Sequence* self, Difference i, Difference j, const InputSeq& v) {
    typename Sequence::size_type size = self->size();
    typename Sequence::size_type ii = swig::check_index(i, size, true);
    typename Sequence::size_type jj = swig::slice_index(j, size);
    if (jj < ii) jj = ii;
    size_t ssize = jj - ii;
    if (ssize <= v.size()) {
      typename Sequence::iterator sb = self->begin();
      typename InputSeq::const_iterator vmid = v.begin();
      std::advance(sb,ii);
      std::advance(vmid, jj - ii);
      self->insert(std::copy(v.begin(), vmid, sb), vmid, v.end());
    } else {
      typename Sequence::iterator sb = self->begin();
      typename Sequence::iterator se = self->begin();
      std::advance(sb,ii);
      std::advance(se,jj);
      self->erase(sb,se);
      self->insert(sb, v.begin(), v.end());
    }
  }

  template <class Sequence, class Difference>
  inline void
  delslice(Sequence* self, Difference i, Difference j) {
    typename Sequence::size_type size = self->size();
    typename Sequence::size_type ii = swig::check_index(i, size, true);
    typename Sequence::size_type jj = swig::slice_index(j, size);
    if (jj > ii) {
      typename Sequence::iterator sb = self->begin();
      typename Sequence::iterator se = self->begin();
      std::advance(sb,ii);
      std::advance(se,jj);
      self->erase(sb,se);
    }
  }
}


#if defined(__SUNPRO_CC) && defined(_RWSTD_VER)
#  if !defined(SWIG_NO_STD_NOITERATOR_TRAITS_STL)
#    define SWIG_STD_NOITERATOR_TRAITS_STL
#  endif
#endif

#if !defined(SWIG_STD_NOITERATOR_TRAITS_STL)
#include <iterator>
#else
namespace std {
  template <class Iterator>
  struct iterator_traits {
    typedef ptrdiff_t difference_type;
    typedef typename Iterator::value_type value_type;
  };

  template <class Iterator, class Category,class T, class Reference, class Pointer, class Distance>
  struct iterator_traits<__reverse_bi_iterator<Iterator,Category,T,Reference,Pointer,Distance> > {
    typedef Distance difference_type;
    typedef T value_type;
  };

  template <class T>
  struct iterator_traits<T*> {
    typedef T value_type;
    typedef ptrdiff_t difference_type;
  };

  template<typename _InputIterator>
  inline typename iterator_traits<_InputIterator>::difference_type
  distance(_InputIterator __first, _InputIterator __last)
  {
    typename iterator_traits<_InputIterator>::difference_type __n = 0;
    while (__first != __last) {
      ++__first; ++__n;
    }
    return __n;
  }
}
#endif


namespace swig {
  template<typename OutIterator>
  class SwigPyIterator_T :  public SwigPyIterator
  {
  public:
    typedef OutIterator out_iterator;
    typedef typename std::iterator_traits<out_iterator>::value_type value_type;    
    typedef SwigPyIterator_T<out_iterator> self_type;

    SwigPyIterator_T(out_iterator curr, PyObject *seq)
      : SwigPyIterator(seq), current(curr)
    {
    }

    const out_iterator& get_current() const
    {
      return current;
    }

    
    bool equal (const SwigPyIterator &iter) const
    {
      const self_type *iters = dynamic_cast<const self_type *>(&iter);
      if (iters) {
	return (current == iters->get_current());
      } else {
	throw std::invalid_argument("bad iterator type");
      }
    }
    
    ptrdiff_t distance(const SwigPyIterator &iter) const
    {
      const self_type *iters = dynamic_cast<const self_type *>(&iter);
      if (iters) {
	return std::distance(current, iters->get_current());
      } else {
	throw std::invalid_argument("bad iterator type");
      }
    }    
    
  protected:
    out_iterator current;
  };
  
  template <class ValueType>
  struct from_oper 
  {
    typedef const ValueType& argument_type;
    typedef PyObject *result_type;
    result_type operator()(argument_type v) const
    {
      return swig::from(v);
    }
  };

  template<typename OutIterator, 
	   typename ValueType = typename std::iterator_traits<OutIterator>::value_type,
	   typename FromOper = from_oper<ValueType> >
  class SwigPyIteratorOpen_T :  public SwigPyIterator_T<OutIterator>
  {
  public:
    FromOper from;
    typedef OutIterator out_iterator;
    typedef ValueType value_type;
    typedef SwigPyIterator_T<out_iterator>  base;
    typedef SwigPyIteratorOpen_T<OutIterator, ValueType, FromOper> self_type;
    
    SwigPyIteratorOpen_T(out_iterator curr, PyObject *seq)
      : SwigPyIterator_T<OutIterator>(curr, seq)
    {
    }
    
    PyObject *value() const {
      return from(static_cast<const value_type&>(*(base::current)));
    }
    
    SwigPyIterator *copy() const
    {
      return new self_type(*this);
    }

    SwigPyIterator *incr(size_t n = 1)
    {
      while (n--) {
	++base::current;
      }
      return this;
    }

    SwigPyIterator *decr(size_t n = 1)
    {
      while (n--) {
	--base::current;
      }
      return this;
    }
  };

  template<typename OutIterator, 
	   typename ValueType = typename std::iterator_traits<OutIterator>::value_type,
	   typename FromOper = from_oper<ValueType> >
  class SwigPyIteratorClosed_T :  public SwigPyIterator_T<OutIterator>
  {
  public:
    FromOper from;
    typedef OutIterator out_iterator;
    typedef ValueType value_type;
    typedef SwigPyIterator_T<out_iterator>  base;    
    typedef SwigPyIteratorClosed_T<OutIterator, ValueType, FromOper> self_type;
    
    SwigPyIteratorClosed_T(out_iterator curr, out_iterator first, out_iterator last, PyObject *seq)
      : SwigPyIterator_T<OutIterator>(curr, seq), begin(first), end(last)
    {
    }
    
    PyObject *value() const {
      if (base::current == end) {
	throw stop_iteration();
      } else {
	return from(static_cast<const value_type&>(*(base::current)));
      }
    }
    
    SwigPyIterator *copy() const
    {
      return new self_type(*this);
    }

    SwigPyIterator *incr(size_t n = 1)
    {
      while (n--) {
	if (base::current == end) {
	  throw stop_iteration();
	} else {
	  ++base::current;
	}
      }
      return this;
    }

    SwigPyIterator *decr(size_t n = 1)
    {
      while (n--) {
	if (base::current == begin) {
	  throw stop_iteration();
	} else {
	  --base::current;
	}
      }
      return this;
    }

  private:
    out_iterator begin;
    out_iterator end;
  };

  template<typename OutIter>
  inline SwigPyIterator*
  make_output_iterator(const OutIter& current, const OutIter& begin,const OutIter& end, PyObject *seq = 0)
  {
    return new SwigPyIteratorClosed_T<OutIter>(current, begin, end, seq);
  }

  template<typename OutIter>
  inline SwigPyIterator*
  make_output_iterator(const OutIter& current, PyObject *seq = 0)
  {
    return new SwigPyIteratorOpen_T<OutIter>(current, seq);
  }
}


namespace swig
{
  template <class T>
  struct SwigPySequence_Ref
  {
    SwigPySequence_Ref(PyObject* seq, int index)
      : _seq(seq), _index(index)
    {
    }
    
    operator T () const
    {
      swig::SwigVar_PyObject item = PySequence_GetItem(_seq, _index);
      try {
	return swig::as<T>(item, true);
      } catch (std::exception& e) {
	char msg[1024];
	sprintf(msg, "in sequence element %d ", _index);
	if (!PyErr_Occurred()) {
	  ::SWIG_Error(SWIG_TypeError,  swig::type_name<T>());
	}
	SWIG_Python_AddErrorMsg(msg);
	SWIG_Python_AddErrorMsg(e.what());
	throw;
      }
    }

    SwigPySequence_Ref& operator=(const T& v)
    {
      PySequence_SetItem(_seq, _index, swig::from<T>(v));
      return *this;
    }

  private:
    PyObject* _seq;
    int _index;
  };

  template <class T>
  struct SwigPySequence_ArrowProxy
  {
    SwigPySequence_ArrowProxy(const T& x): m_value(x) {}
    const T* operator->() const { return &m_value; }
    operator const T*() const { return &m_value; }
    T m_value;
  };

  template <class T, class Reference >
  struct SwigPySequence_InputIterator
  {
    typedef SwigPySequence_InputIterator<T, Reference > self;

    typedef std::random_access_iterator_tag iterator_category;
    typedef Reference reference;
    typedef T value_type;
    typedef T* pointer;
    typedef int difference_type;

    SwigPySequence_InputIterator()
    {
    }

    SwigPySequence_InputIterator(PyObject* seq, int index)
      : _seq(seq), _index(index)
    {
    }

    reference operator*() const
    {
      return reference(_seq, _index);
    }

    SwigPySequence_ArrowProxy<T>
    operator->() const {
      return SwigPySequence_ArrowProxy<T>(operator*());
    }

    bool operator==(const self& ri) const
    {
      return (_index == ri._index) && (_seq == ri._seq);
    }

    bool operator!=(const self& ri) const
    {
      return !(operator==(ri));
    }

    self& operator ++ ()
    {
      ++_index;
      return *this;
    }

    self& operator -- ()
    {
      --_index;
      return *this;
    }

    self& operator += (difference_type n)
    {
      _index += n;
      return *this;
    }

    self operator +(difference_type n) const
    {
      return self(_seq, _index + n);
    }

    self& operator -= (difference_type n)
    {
      _index -= n;
      return *this;
    }

    self operator -(difference_type n) const
    {
      return self(_seq, _index - n);
    }

    difference_type operator - (const self& ri) const
    {
      return _index - ri._index;
    }

    bool operator < (const self& ri) const
    {
      return _index < ri._index;
    }

    reference
    operator[](difference_type n) const
    {
      return reference(_seq, _index + n);
    }

  private:
    PyObject* _seq;
    difference_type _index;
  };

  template <class T>
  struct SwigPySequence_Cont
  {
    typedef SwigPySequence_Ref<T> reference;
    typedef const SwigPySequence_Ref<T> const_reference;
    typedef T value_type;
    typedef T* pointer;
    typedef int difference_type;
    typedef int size_type;
    typedef const pointer const_pointer;
    typedef SwigPySequence_InputIterator<T, reference> iterator;
    typedef SwigPySequence_InputIterator<T, const_reference> const_iterator;

    SwigPySequence_Cont(PyObject* seq) : _seq(0)
    {
      if (!PySequence_Check(seq)) {
	throw std::invalid_argument("a sequence is expected");
      }
      _seq = seq;
      Py_INCREF(_seq);
    }

    ~SwigPySequence_Cont()
    {
      Py_XDECREF(_seq);
    }

    size_type size() const
    {
      return static_cast<size_type>(PySequence_Size(_seq));
    }

    bool empty() const
    {
      return size() == 0;
    }

    iterator begin()
    {
      return iterator(_seq, 0);
    }

    const_iterator begin() const
    {
      return const_iterator(_seq, 0);
    }

    iterator end()
    {
      return iterator(_seq, size());
    }

    const_iterator end() const
    {
      return const_iterator(_seq, size());
    }

    reference operator[](difference_type n)
    {
      return reference(_seq, n);
    }

    const_reference operator[](difference_type n)  const
    {
      return const_reference(_seq, n);
    }

    bool check(bool set_err = true) const
    {
      int s = size();
      for (int i = 0; i < s; ++i) {
	swig::SwigVar_PyObject item = PySequence_GetItem(_seq, i);
	if (!swig::check<value_type>(item)) {
	  if (set_err) {
	    char msg[1024];
	    sprintf(msg, "in sequence element %d", i);
	    SWIG_Error(SWIG_RuntimeError, msg);
	  }
	  return false;
	}
      }
      return true;
    }

  private:
    PyObject* _seq;
  };

}


  #define SWIG_From_double   PyFloat_FromDouble 


namespace swig {
  template <> struct traits<double > {
    typedef value_category category;
    static const char* type_name() { return"double"; }
  };  
  template <>  struct traits_asval<double > {   
    typedef double value_type;
    static int asval(PyObject *obj, value_type *val) { 
      return SWIG_AsVal_double (obj, val);
    }
  };
  template <>  struct traits_from<double > {
    typedef double value_type;
    static PyObject *from(const value_type& val) {
      return SWIG_From_double  (val);
    }
  };
}


namespace swig {
  template <class SwigPySeq, class Seq>
  inline void
  assign(const SwigPySeq& swigpyseq, Seq* seq) {
    // seq->assign(swigpyseq.begin(), swigpyseq.end()); // not used as not always implemented
    typedef typename SwigPySeq::value_type value_type;
    typename SwigPySeq::const_iterator it = swigpyseq.begin();
    for (;it != swigpyseq.end(); ++it) {
      seq->insert(seq->end(),(value_type)(*it));
    }
  }

  template <class Seq, class T = typename Seq::value_type >
  struct traits_asptr_stdseq {
    typedef Seq sequence;
    typedef T value_type;

    static int asptr(PyObject *obj, sequence **seq) {
      if (obj == Py_None || SWIG_Python_GetSwigThis(obj)) {
	sequence *p;
	if (::SWIG_ConvertPtr(obj,(void**)&p,
			      swig::type_info<sequence>(),0) == SWIG_OK) {
	  if (seq) *seq = p;
	  return SWIG_OLDOBJ;
	}
      } else if (PySequence_Check(obj)) {
	try {
	  SwigPySequence_Cont<value_type> swigpyseq(obj);
	  if (seq) {
	    sequence *pseq = new sequence();
	    assign(swigpyseq, pseq);
	    *seq = pseq;
	    return SWIG_NEWOBJ;
	  } else {
	    return swigpyseq.check() ? SWIG_OK : SWIG_ERROR;
	  }
	} catch (std::exception& e) {
	  if (seq) {
	    if (!PyErr_Occurred()) {
	      PyErr_SetString(PyExc_TypeError, e.what());
	    }
	  }
	  return SWIG_ERROR;
	}
      }
      return SWIG_ERROR;
    }
  };

  template <class Seq, class T = typename Seq::value_type >
  struct traits_from_stdseq {
    typedef Seq sequence;
    typedef T value_type;
    typedef typename Seq::size_type size_type;
    typedef typename sequence::const_iterator const_iterator;

    static PyObject *from(const sequence& seq) {
#ifdef SWIG_PYTHON_EXTRA_NATIVE_CONTAINERS
      swig_type_info *desc = swig::type_info<sequence>();
      if (desc && desc->clientdata) {
	return SWIG_NewPointerObj(new sequence(seq), desc, SWIG_POINTER_OWN);
      }
#endif
      size_type size = seq.size();
      if (size <= (size_type)INT_MAX) {
	PyObject *obj = PyTuple_New((int)size);
	int i = 0;
	for (const_iterator it = seq.begin();
	     it != seq.end(); ++it, ++i) {
	  PyTuple_SetItem(obj,i,swig::from<value_type>(*it));
	}
	return obj;
      } else {
	PyErr_SetString(PyExc_OverflowError,"sequence size not valid in python");
	return NULL;
      }
    }
  };
}


  namespace swig {
    template <class T>
    struct traits_asptr<std::vector<T> >  {
      static int asptr(PyObject *obj, std::vector<T> **vec) {
	return traits_asptr_stdseq<std::vector<T> >::asptr(obj, vec);
      }
    };
    
    template <class T>
    struct traits_from<std::vector<T> > {
      static PyObject *from(const std::vector<T>& vec) {
	return traits_from_stdseq<std::vector<T> >::from(vec);
      }
    };
  }


      namespace swig {
	template <>  struct traits<std::vector<double, std::allocator< double > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::vector<" "double" "," "std::allocator< double >" " >";
	  }
	};
      }
    
SWIGINTERN swig::SwigPyIterator *std_vector_Sl_double_Sg__iterator(std::vector< double > *self,PyObject **PYTHON_SELF){
      return swig::make_output_iterator(self->begin(), self->begin(), self->end(), *PYTHON_SELF);
    }
SWIGINTERN bool std_vector_Sl_double_Sg____nonzero__(std::vector< double > const *self){
      return !(self->empty());
    }
SWIGINTERN bool std_vector_Sl_double_Sg____bool__(std::vector< double > const *self){
      return !(self->empty());
    }
SWIGINTERN std::vector< double >::size_type std_vector_Sl_double_Sg____len__(std::vector< double > const *self){
      return self->size();
    }
SWIGINTERN std::vector< double >::value_type std_vector_Sl_double_Sg__pop(std::vector< double > *self){
      if (self->size() == 0)
	throw std::out_of_range("pop from empty container");
      std::vector<double,std::allocator< double > >::value_type x = self->back();
      self->pop_back();
      return x;
    }
SWIGINTERN std::vector< double,std::allocator< double > > *std_vector_Sl_double_Sg____getslice__(std::vector< double > *self,std::vector< double >::difference_type i,std::vector< double >::difference_type j){
      return swig::getslice(self, i, j);
    }
SWIGINTERN void std_vector_Sl_double_Sg____setslice__(std::vector< double > *self,std::vector< double >::difference_type i,std::vector< double >::difference_type j,std::vector< double,std::allocator< double > > const &v){
      swig::setslice(self, i, j, v);
    }
SWIGINTERN void std_vector_Sl_double_Sg____delslice__(std::vector< double > *self,std::vector< double >::difference_type i,std::vector< double >::difference_type j){
      swig::delslice(self, i, j);
    }
SWIGINTERN void std_vector_Sl_double_Sg____delitem____SWIG_0(std::vector< double > *self,std::vector< double >::difference_type i){
      self->erase(swig::getpos(self,i));
    }
SWIGINTERN std::vector< double,std::allocator< double > > *std_vector_Sl_double_Sg____getitem____SWIG_0(std::vector< double > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return NULL;
      }
      PySlice_GetIndices(slice, self->size(), &i, &j, &step);
      return swig::getslice(self, i, j);
    }
SWIGINTERN void std_vector_Sl_double_Sg____setitem____SWIG_0(std::vector< double > *self,PySliceObject *slice,std::vector< double,std::allocator< double > > const &v){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(slice, self->size(), &i, &j, &step);
      swig::setslice(self, i, j, v);
    }
SWIGINTERN void std_vector_Sl_double_Sg____delitem____SWIG_1(std::vector< double > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(slice, self->size(), &i, &j, &step);
      swig::delslice(self, i,j);
    }
SWIGINTERN std::vector< double >::value_type const &std_vector_Sl_double_Sg____getitem____SWIG_1(std::vector< double > const *self,std::vector< double >::difference_type i){
      return *(swig::cgetpos(self, i));
    }
SWIGINTERN void std_vector_Sl_double_Sg____setitem____SWIG_1(std::vector< double > *self,std::vector< double >::difference_type i,std::vector< double >::value_type const &x){
      *(swig::getpos(self,i)) = x;
    }
SWIGINTERN void std_vector_Sl_double_Sg__append(std::vector< double > *self,std::vector< double >::value_type const &x){
      self->push_back(x);
    }

  namespace swig {
    template <>  struct traits<std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > > {
      typedef pointer_category category;
      static const char* type_name() { return"std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > >"; }
    };
  }


      namespace swig {
	template <>  struct traits<std::vector<std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > >, std::allocator< std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::vector<" "std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > >" "," "std::allocator< std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > >" " >";
	  }
	};
      }
    
SWIGINTERN swig::SwigPyIterator *std_vector_Sl_std_vector_Sl_std_vector_Sl_double_Sg__Sg__Sg__iterator(std::vector< std::vector< std::vector< double > > > *self,PyObject **PYTHON_SELF){
      return swig::make_output_iterator(self->begin(), self->begin(), self->end(), *PYTHON_SELF);
    }
SWIGINTERN bool std_vector_Sl_std_vector_Sl_std_vector_Sl_double_Sg__Sg__Sg____nonzero__(std::vector< std::vector< std::vector< double > > > const *self){
      return !(self->empty());
    }
SWIGINTERN bool std_vector_Sl_std_vector_Sl_std_vector_Sl_double_Sg__Sg__Sg____bool__(std::vector< std::vector< std::vector< double > > > const *self){
      return !(self->empty());
    }
SWIGINTERN std::vector< std::vector< std::vector< double > > >::size_type std_vector_Sl_std_vector_Sl_std_vector_Sl_double_Sg__Sg__Sg____len__(std::vector< std::vector< std::vector< double > > > const *self){
      return self->size();
    }
SWIGINTERN std::vector< std::vector< std::vector< double > > >::value_type std_vector_Sl_std_vector_Sl_std_vector_Sl_double_Sg__Sg__Sg__pop(std::vector< std::vector< std::vector< double > > > *self){
      if (self->size() == 0)
	throw std::out_of_range("pop from empty container");
      std::vector<std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > >,std::allocator< std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > > >::value_type x = self->back();
      self->pop_back();
      return x;
    }
SWIGINTERN std::vector< std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > >,std::allocator< std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > > > *std_vector_Sl_std_vector_Sl_std_vector_Sl_double_Sg__Sg__Sg____getslice__(std::vector< std::vector< std::vector< double > > > *self,std::vector< std::vector< std::vector< double > > >::difference_type i,std::vector< std::vector< std::vector< double > > >::difference_type j){
      return swig::getslice(self, i, j);
    }
SWIGINTERN void std_vector_Sl_std_vector_Sl_std_vector_Sl_double_Sg__Sg__Sg____setslice__(std::vector< std::vector< std::vector< double > > > *self,std::vector< std::vector< std::vector< double > > >::difference_type i,std::vector< std::vector< std::vector< double > > >::difference_type j,std::vector< std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > >,std::allocator< std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > > > const &v){
      swig::setslice(self, i, j, v);
    }
SWIGINTERN void std_vector_Sl_std_vector_Sl_std_vector_Sl_double_Sg__Sg__Sg____delslice__(std::vector< std::vector< std::vector< double > > > *self,std::vector< std::vector< std::vector< double > > >::difference_type i,std::vector< std::vector< std::vector< double > > >::difference_type j){
      swig::delslice(self, i, j);
    }
SWIGINTERN void std_vector_Sl_std_vector_Sl_std_vector_Sl_double_Sg__Sg__Sg____delitem____SWIG_0(std::vector< std::vector< std::vector< double > > > *self,std::vector< std::vector< std::vector< double > > >::difference_type i){
      self->erase(swig::getpos(self,i));
    }
SWIGINTERN std::vector< std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > >,std::allocator< std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > > > *std_vector_Sl_std_vector_Sl_std_vector_Sl_double_Sg__Sg__Sg____getitem____SWIG_0(std::vector< std::vector< std::vector< double > > > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return NULL;
      }
      PySlice_GetIndices(slice, self->size(), &i, &j, &step);
      return swig::getslice(self, i, j);
    }
SWIGINTERN void std_vector_Sl_std_vector_Sl_std_vector_Sl_double_Sg__Sg__Sg____setitem____SWIG_0(std::vector< std::vector< std::vector< double > > > *self,PySliceObject *slice,std::vector< std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > >,std::allocator< std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > > > const &v){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(slice, self->size(), &i, &j, &step);
      swig::setslice(self, i, j, v);
    }
SWIGINTERN void std_vector_Sl_std_vector_Sl_std_vector_Sl_double_Sg__Sg__Sg____delitem____SWIG_1(std::vector< std::vector< std::vector< double > > > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(slice, self->size(), &i, &j, &step);
      swig::delslice(self, i,j);
    }
SWIGINTERN std::vector< std::vector< std::vector< double > > >::value_type const &std_vector_Sl_std_vector_Sl_std_vector_Sl_double_Sg__Sg__Sg____getitem____SWIG_1(std::vector< std::vector< std::vector< double > > > const *self,std::vector< std::vector< std::vector< double > > >::difference_type i){
      return *(swig::cgetpos(self, i));
    }
SWIGINTERN void std_vector_Sl_std_vector_Sl_std_vector_Sl_double_Sg__Sg__Sg____setitem____SWIG_1(std::vector< std::vector< std::vector< double > > > *self,std::vector< std::vector< std::vector< double > > >::difference_type i,std::vector< std::vector< std::vector< double > > >::value_type const &x){
      *(swig::getpos(self,i)) = x;
    }
SWIGINTERN void std_vector_Sl_std_vector_Sl_std_vector_Sl_double_Sg__Sg__Sg__append(std::vector< std::vector< std::vector< double > > > *self,std::vector< std::vector< std::vector< double > > >::value_type const &x){
      self->push_back(x);
    }

      namespace swig {
	template <>  struct traits<std::vector<int, std::allocator< int > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::vector<" "int" "," "std::allocator< int >" " >";
	  }
	};
      }
    
SWIGINTERN swig::SwigPyIterator *std_vector_Sl_int_Sg__iterator(std::vector< int > *self,PyObject **PYTHON_SELF){
      return swig::make_output_iterator(self->begin(), self->begin(), self->end(), *PYTHON_SELF);
    }
SWIGINTERN bool std_vector_Sl_int_Sg____nonzero__(std::vector< int > const *self){
      return !(self->empty());
    }
SWIGINTERN bool std_vector_Sl_int_Sg____bool__(std::vector< int > const *self){
      return !(self->empty());
    }
SWIGINTERN std::vector< int >::size_type std_vector_Sl_int_Sg____len__(std::vector< int > const *self){
      return self->size();
    }
SWIGINTERN std::vector< int >::value_type std_vector_Sl_int_Sg__pop(std::vector< int > *self){
      if (self->size() == 0)
	throw std::out_of_range("pop from empty container");
      std::vector<int,std::allocator< int > >::value_type x = self->back();
      self->pop_back();
      return x;
    }
SWIGINTERN std::vector< int,std::allocator< int > > *std_vector_Sl_int_Sg____getslice__(std::vector< int > *self,std::vector< int >::difference_type i,std::vector< int >::difference_type j){
      return swig::getslice(self, i, j);
    }
SWIGINTERN void std_vector_Sl_int_Sg____setslice__(std::vector< int > *self,std::vector< int >::difference_type i,std::vector< int >::difference_type j,std::vector< int,std::allocator< int > > const &v){
      swig::setslice(self, i, j, v);
    }
SWIGINTERN void std_vector_Sl_int_Sg____delslice__(std::vector< int > *self,std::vector< int >::difference_type i,std::vector< int >::difference_type j){
      swig::delslice(self, i, j);
    }
SWIGINTERN void std_vector_Sl_int_Sg____delitem____SWIG_0(std::vector< int > *self,std::vector< int >::difference_type i){
      self->erase(swig::getpos(self,i));
    }
SWIGINTERN std::vector< int,std::allocator< int > > *std_vector_Sl_int_Sg____getitem____SWIG_0(std::vector< int > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return NULL;
      }
      PySlice_GetIndices(slice, self->size(), &i, &j, &step);
      return swig::getslice(self, i, j);
    }
SWIGINTERN void std_vector_Sl_int_Sg____setitem____SWIG_0(std::vector< int > *self,PySliceObject *slice,std::vector< int,std::allocator< int > > const &v){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(slice, self->size(), &i, &j, &step);
      swig::setslice(self, i, j, v);
    }
SWIGINTERN void std_vector_Sl_int_Sg____delitem____SWIG_1(std::vector< int > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(slice, self->size(), &i, &j, &step);
      swig::delslice(self, i,j);
    }
SWIGINTERN std::vector< int >::value_type const &std_vector_Sl_int_Sg____getitem____SWIG_1(std::vector< int > const *self,std::vector< int >::difference_type i){
      return *(swig::cgetpos(self, i));
    }
SWIGINTERN void std_vector_Sl_int_Sg____setitem____SWIG_1(std::vector< int > *self,std::vector< int >::difference_type i,std::vector< int >::value_type const &x){
      *(swig::getpos(self,i)) = x;
    }
SWIGINTERN void std_vector_Sl_int_Sg__append(std::vector< int > *self,std::vector< int >::value_type const &x){
      self->push_back(x);
    }

      namespace swig {
	template <>  struct traits<std::vector<std::vector< int,std::allocator< int > >, std::allocator< std::vector< int,std::allocator< int > > > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::vector<" "std::vector< int,std::allocator< int > >" "," "std::allocator< std::vector< int,std::allocator< int > > >" " >";
	  }
	};
      }
    
SWIGINTERN swig::SwigPyIterator *std_vector_Sl_std_vector_Sl_int_Sg__Sg__iterator(std::vector< std::vector< int > > *self,PyObject **PYTHON_SELF){
      return swig::make_output_iterator(self->begin(), self->begin(), self->end(), *PYTHON_SELF);
    }
SWIGINTERN bool std_vector_Sl_std_vector_Sl_int_Sg__Sg____nonzero__(std::vector< std::vector< int > > const *self){
      return !(self->empty());
    }
SWIGINTERN bool std_vector_Sl_std_vector_Sl_int_Sg__Sg____bool__(std::vector< std::vector< int > > const *self){
      return !(self->empty());
    }
SWIGINTERN std::vector< std::vector< int > >::size_type std_vector_Sl_std_vector_Sl_int_Sg__Sg____len__(std::vector< std::vector< int > > const *self){
      return self->size();
    }
SWIGINTERN std::vector< std::vector< int > >::value_type std_vector_Sl_std_vector_Sl_int_Sg__Sg__pop(std::vector< std::vector< int > > *self){
      if (self->size() == 0)
	throw std::out_of_range("pop from empty container");
      std::vector<std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > >::value_type x = self->back();
      self->pop_back();
      return x;
    }
SWIGINTERN std::vector< std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > > *std_vector_Sl_std_vector_Sl_int_Sg__Sg____getslice__(std::vector< std::vector< int > > *self,std::vector< std::vector< int > >::difference_type i,std::vector< std::vector< int > >::difference_type j){
      return swig::getslice(self, i, j);
    }
SWIGINTERN void std_vector_Sl_std_vector_Sl_int_Sg__Sg____setslice__(std::vector< std::vector< int > > *self,std::vector< std::vector< int > >::difference_type i,std::vector< std::vector< int > >::difference_type j,std::vector< std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > > const &v){
      swig::setslice(self, i, j, v);
    }
SWIGINTERN void std_vector_Sl_std_vector_Sl_int_Sg__Sg____delslice__(std::vector< std::vector< int > > *self,std::vector< std::vector< int > >::difference_type i,std::vector< std::vector< int > >::difference_type j){
      swig::delslice(self, i, j);
    }
SWIGINTERN void std_vector_Sl_std_vector_Sl_int_Sg__Sg____delitem____SWIG_0(std::vector< std::vector< int > > *self,std::vector< std::vector< int > >::difference_type i){
      self->erase(swig::getpos(self,i));
    }
SWIGINTERN std::vector< std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > > *std_vector_Sl_std_vector_Sl_int_Sg__Sg____getitem____SWIG_0(std::vector< std::vector< int > > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return NULL;
      }
      PySlice_GetIndices(slice, self->size(), &i, &j, &step);
      return swig::getslice(self, i, j);
    }
SWIGINTERN void std_vector_Sl_std_vector_Sl_int_Sg__Sg____setitem____SWIG_0(std::vector< std::vector< int > > *self,PySliceObject *slice,std::vector< std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > > const &v){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(slice, self->size(), &i, &j, &step);
      swig::setslice(self, i, j, v);
    }
SWIGINTERN void std_vector_Sl_std_vector_Sl_int_Sg__Sg____delitem____SWIG_1(std::vector< std::vector< int > > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(slice, self->size(), &i, &j, &step);
      swig::delslice(self, i,j);
    }
SWIGINTERN std::vector< std::vector< int > >::value_type const &std_vector_Sl_std_vector_Sl_int_Sg__Sg____getitem____SWIG_1(std::vector< std::vector< int > > const *self,std::vector< std::vector< int > >::difference_type i){
      return *(swig::cgetpos(self, i));
    }
SWIGINTERN void std_vector_Sl_std_vector_Sl_int_Sg__Sg____setitem____SWIG_1(std::vector< std::vector< int > > *self,std::vector< std::vector< int > >::difference_type i,std::vector< std::vector< int > >::value_type const &x){
      *(swig::getpos(self,i)) = x;
    }
SWIGINTERN void std_vector_Sl_std_vector_Sl_int_Sg__Sg__append(std::vector< std::vector< int > > *self,std::vector< std::vector< int > >::value_type const &x){
      self->push_back(x);
    }

      namespace swig {
	template <>  struct traits<std::vector<std::pair< int,int >, std::allocator< std::pair< int,int > > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::vector<" "std::pair< int,int >" "," "std::allocator< std::pair< int,int > >" " >";
	  }
	};
      }
    
SWIGINTERN swig::SwigPyIterator *std_vector_Sl_std_pair_Sl_int_Sc_int_Sg__Sg__iterator(std::vector< std::pair< int,int > > *self,PyObject **PYTHON_SELF){
      return swig::make_output_iterator(self->begin(), self->begin(), self->end(), *PYTHON_SELF);
    }
SWIGINTERN bool std_vector_Sl_std_pair_Sl_int_Sc_int_Sg__Sg____nonzero__(std::vector< std::pair< int,int > > const *self){
      return !(self->empty());
    }
SWIGINTERN bool std_vector_Sl_std_pair_Sl_int_Sc_int_Sg__Sg____bool__(std::vector< std::pair< int,int > > const *self){
      return !(self->empty());
    }
SWIGINTERN std::vector< std::pair< int,int > >::size_type std_vector_Sl_std_pair_Sl_int_Sc_int_Sg__Sg____len__(std::vector< std::pair< int,int > > const *self){
      return self->size();
    }
SWIGINTERN std::vector< std::pair< int,int > >::value_type std_vector_Sl_std_pair_Sl_int_Sc_int_Sg__Sg__pop(std::vector< std::pair< int,int > > *self){
      if (self->size() == 0)
	throw std::out_of_range("pop from empty container");
      std::vector<std::pair< int,int >,std::allocator< std::pair< int,int > > >::value_type x = self->back();
      self->pop_back();
      return x;
    }
SWIGINTERN std::vector< std::pair< int,int >,std::allocator< std::pair< int,int > > > *std_vector_Sl_std_pair_Sl_int_Sc_int_Sg__Sg____getslice__(std::vector< std::pair< int,int > > *self,std::vector< std::pair< int,int > >::difference_type i,std::vector< std::pair< int,int > >::difference_type j){
      return swig::getslice(self, i, j);
    }
SWIGINTERN void std_vector_Sl_std_pair_Sl_int_Sc_int_Sg__Sg____setslice__(std::vector< std::pair< int,int > > *self,std::vector< std::pair< int,int > >::difference_type i,std::vector< std::pair< int,int > >::difference_type j,std::vector< std::pair< int,int >,std::allocator< std::pair< int,int > > > const &v){
      swig::setslice(self, i, j, v);
    }
SWIGINTERN void std_vector_Sl_std_pair_Sl_int_Sc_int_Sg__Sg____delslice__(std::vector< std::pair< int,int > > *self,std::vector< std::pair< int,int > >::difference_type i,std::vector< std::pair< int,int > >::difference_type j){
      swig::delslice(self, i, j);
    }
SWIGINTERN void std_vector_Sl_std_pair_Sl_int_Sc_int_Sg__Sg____delitem____SWIG_0(std::vector< std::pair< int,int > > *self,std::vector< std::pair< int,int > >::difference_type i){
      self->erase(swig::getpos(self,i));
    }
SWIGINTERN std::vector< std::pair< int,int >,std::allocator< std::pair< int,int > > > *std_vector_Sl_std_pair_Sl_int_Sc_int_Sg__Sg____getitem____SWIG_0(std::vector< std::pair< int,int > > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return NULL;
      }
      PySlice_GetIndices(slice, self->size(), &i, &j, &step);
      return swig::getslice(self, i, j);
    }
SWIGINTERN void std_vector_Sl_std_pair_Sl_int_Sc_int_Sg__Sg____setitem____SWIG_0(std::vector< std::pair< int,int > > *self,PySliceObject *slice,std::vector< std::pair< int,int >,std::allocator< std::pair< int,int > > > const &v){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(slice, self->size(), &i, &j, &step);
      swig::setslice(self, i, j, v);
    }
SWIGINTERN void std_vector_Sl_std_pair_Sl_int_Sc_int_Sg__Sg____delitem____SWIG_1(std::vector< std::pair< int,int > > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(slice, self->size(), &i, &j, &step);
      swig::delslice(self, i,j);
    }
SWIGINTERN std::vector< std::pair< int,int > >::value_type const &std_vector_Sl_std_pair_Sl_int_Sc_int_Sg__Sg____getitem____SWIG_1(std::vector< std::pair< int,int > > const *self,std::vector< std::pair< int,int > >::difference_type i){
      return *(swig::cgetpos(self, i));
    }
SWIGINTERN void std_vector_Sl_std_pair_Sl_int_Sc_int_Sg__Sg____setitem____SWIG_1(std::vector< std::pair< int,int > > *self,std::vector< std::pair< int,int > >::difference_type i,std::vector< std::pair< int,int > >::value_type const &x){
      *(swig::getpos(self,i)) = x;
    }
SWIGINTERN void std_vector_Sl_std_pair_Sl_int_Sc_int_Sg__Sg__append(std::vector< std::pair< int,int > > *self,std::vector< std::pair< int,int > >::value_type const &x){
      self->push_back(x);
    }

SWIGINTERN int
SWIG_AsPtr_std_string (PyObject * obj, std::string **val) 
{
  char* buf = 0 ; size_t size = 0; int alloc = SWIG_OLDOBJ;
  if (SWIG_IsOK((SWIG_AsCharPtrAndSize(obj, &buf, &size, &alloc)))) {
    if (buf) {
      if (val) *val = new std::string(buf, size - 1);
      if (alloc == SWIG_NEWOBJ) delete[] buf;
      return SWIG_NEWOBJ;
    } else {
      if (val) *val = 0;
      return SWIG_OLDOBJ;
    }
  } else {
    static int init = 0;
    static swig_type_info* descriptor = 0;
    if (!init) {
      descriptor = SWIG_TypeQuery("std::string" " *");
      init = 1;
    }
    if (descriptor) {
      std::string *vptr;
      int res = SWIG_ConvertPtr(obj, (void**)&vptr, descriptor, 0);
      if (SWIG_IsOK(res) && val) *val = vptr;
      return res;
    }
  }
  return SWIG_ERROR;
}


SWIGINTERN int
SWIG_AsVal_std_string (PyObject * obj, std::string *val)
{
  std::string* v = (std::string *) 0;
  int res = SWIG_AsPtr_std_string (obj, &v);
  if (!SWIG_IsOK(res)) return res;
  if (v) {
    if (val) *val = *v;
    if (SWIG_IsNewObj(res)) {
      delete v;
      res = SWIG_DelNewMask(res);
    }
    return res;
  }
  return SWIG_ERROR;
}


SWIGINTERNINLINE PyObject *
SWIG_From_std_string  (const std::string& s)
{
  if (s.size()) {
    return SWIG_FromCharPtrAndSize(s.data(), s.size());
  } else {
    return SWIG_FromCharPtrAndSize(s.c_str(), 0);
  }
}


namespace swig {
  template <> struct traits<std::string > {
    typedef value_category category;
    static const char* type_name() { return"std::string"; }
  };  
  template <>  struct traits_asval<std::string > {   
    typedef std::string value_type;
    static int asval(PyObject *obj, value_type *val) { 
      return SWIG_AsVal_std_string (obj, val);
    }
  };
  template <>  struct traits_from<std::string > {
    typedef std::string value_type;
    static PyObject *from(const value_type& val) {
      return SWIG_From_std_string  (val);
    }
  };
}


      namespace swig {
	template <>  struct traits<std::vector<std::string, std::allocator< std::string > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::vector<" "std::string" "," "std::allocator< std::string >" " >";
	  }
	};
      }
    
SWIGINTERN swig::SwigPyIterator *std_vector_Sl_std_string_Sg__iterator(std::vector< std::string > *self,PyObject **PYTHON_SELF){
      return swig::make_output_iterator(self->begin(), self->begin(), self->end(), *PYTHON_SELF);
    }
SWIGINTERN bool std_vector_Sl_std_string_Sg____nonzero__(std::vector< std::string > const *self){
      return !(self->empty());
    }
SWIGINTERN bool std_vector_Sl_std_string_Sg____bool__(std::vector< std::string > const *self){
      return !(self->empty());
    }
SWIGINTERN std::vector< std::string >::size_type std_vector_Sl_std_string_Sg____len__(std::vector< std::string > const *self){
      return self->size();
    }
SWIGINTERN std::vector< std::string >::value_type std_vector_Sl_std_string_Sg__pop(std::vector< std::string > *self){
      if (self->size() == 0)
	throw std::out_of_range("pop from empty container");
      std::vector<std::string,std::allocator< std::string > >::value_type x = self->back();
      self->pop_back();
      return x;
    }
SWIGINTERN std::vector< std::string,std::allocator< std::string > > *std_vector_Sl_std_string_Sg____getslice__(std::vector< std::string > *self,std::vector< std::string >::difference_type i,std::vector< std::string >::difference_type j){
      return swig::getslice(self, i, j);
    }
SWIGINTERN void std_vector_Sl_std_string_Sg____setslice__(std::vector< std::string > *self,std::vector< std::string >::difference_type i,std::vector< std::string >::difference_type j,std::vector< std::string,std::allocator< std::string > > const &v){
      swig::setslice(self, i, j, v);
    }
SWIGINTERN void std_vector_Sl_std_string_Sg____delslice__(std::vector< std::string > *self,std::vector< std::string >::difference_type i,std::vector< std::string >::difference_type j){
      swig::delslice(self, i, j);
    }
SWIGINTERN void std_vector_Sl_std_string_Sg____delitem____SWIG_0(std::vector< std::string > *self,std::vector< std::string >::difference_type i){
      self->erase(swig::getpos(self,i));
    }
SWIGINTERN std::vector< std::string,std::allocator< std::string > > *std_vector_Sl_std_string_Sg____getitem____SWIG_0(std::vector< std::string > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return NULL;
      }
      PySlice_GetIndices(slice, self->size(), &i, &j, &step);
      return swig::getslice(self, i, j);
    }
SWIGINTERN void std_vector_Sl_std_string_Sg____setitem____SWIG_0(std::vector< std::string > *self,PySliceObject *slice,std::vector< std::string,std::allocator< std::string > > const &v){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(slice, self->size(), &i, &j, &step);
      swig::setslice(self, i, j, v);
    }
SWIGINTERN void std_vector_Sl_std_string_Sg____delitem____SWIG_1(std::vector< std::string > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(slice, self->size(), &i, &j, &step);
      swig::delslice(self, i,j);
    }
SWIGINTERN std::vector< std::string >::value_type const &std_vector_Sl_std_string_Sg____getitem____SWIG_1(std::vector< std::string > const *self,std::vector< std::string >::difference_type i){
      return *(swig::cgetpos(self, i));
    }
SWIGINTERN void std_vector_Sl_std_string_Sg____setitem____SWIG_1(std::vector< std::string > *self,std::vector< std::string >::difference_type i,std::vector< std::string >::value_type const &x){
      *(swig::getpos(self,i)) = x;
    }
SWIGINTERN void std_vector_Sl_std_string_Sg__append(std::vector< std::string > *self,std::vector< std::string >::value_type const &x){
      self->push_back(x);
    }

      namespace swig {
	template <>  struct traits<std::pair< std::string, std::string > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::pair<" "std::string" "," "std::string" " >";
	  }
	};
      }
    

  namespace swig {
    template <class SwigPySeq, class K, class T >
    inline void
    assign(const SwigPySeq& swigpyseq, std::map<K,T > *map) {
      typedef typename std::map<K,T>::value_type value_type;
      typename SwigPySeq::const_iterator it = swigpyseq.begin();
      for (;it != swigpyseq.end(); ++it) {
	map->insert(value_type(it->first, it->second));
      }
    }

    template <class K, class T>
    struct traits_asptr<std::map<K,T> >  {
      typedef std::map<K,T> map_type;
      static int asptr(PyObject *obj, map_type **val) {
	int res = SWIG_ERROR;
	SWIG_PYTHON_THREAD_BEGIN_BLOCK;
	if (PyDict_Check(obj)) {
	  SwigVar_PyObject items = PyObject_CallMethod(obj,(char *)"items",NULL);
#if PY_VERSION_HEX >= 0x03000000
          /* In Python 3.x the ".items()" method returns a dict_items object */
          items = PySequence_Fast(items, ".items() didn't return a sequence!");
#endif
	  res = traits_asptr_stdseq<std::map<K,T>, std::pair<K, T> >::asptr(items, val);
	} else {
	  map_type *p;
	  res = SWIG_ConvertPtr(obj,(void**)&p,swig::type_info<map_type>(),0);
	  if (SWIG_IsOK(res) && val)  *val = p;
	}
	SWIG_PYTHON_THREAD_END_BLOCK;
	return res;
      }      
    };
      
    template <class K, class T >
    struct traits_from<std::map<K,T> >  {
      typedef std::map<K,T> map_type;
      typedef typename map_type::const_iterator const_iterator;
      typedef typename map_type::size_type size_type;
            
      static PyObject *from(const map_type& map) {
	swig_type_info *desc = swig::type_info<map_type>();
	if (desc && desc->clientdata) {
	  return SWIG_NewPointerObj(new map_type(map), desc, SWIG_POINTER_OWN);
	} else {
	  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
	  size_type size = map.size();
	  int pysize = (size <= (size_type) INT_MAX) ? (int) size : -1;
	  if (pysize < 0) {
	    PyErr_SetString(PyExc_OverflowError,
			    "map size not valid in python");
	    SWIG_PYTHON_THREAD_END_BLOCK;
	    return NULL;
	  }
	  PyObject *obj = PyDict_New();
	  for (const_iterator i= map.begin(); i!= map.end(); ++i) {
	    swig::SwigVar_PyObject key = swig::from(i->first);
	    swig::SwigVar_PyObject val = swig::from(i->second);
	    PyDict_SetItem(obj, key, val);
	  }
	  SWIG_PYTHON_THREAD_END_BLOCK;
	  return obj;
	}
      }
    };

    template <class ValueType>
    struct from_key_oper 
    {
      typedef const ValueType& argument_type;
      typedef  PyObject *result_type;
      result_type operator()(argument_type v) const
      {
	return swig::from(v.first);
      }
    };

    template <class ValueType>
    struct from_value_oper 
    {
      typedef const ValueType& argument_type;
      typedef  PyObject *result_type;
      result_type operator()(argument_type v) const
      {
	return swig::from(v.second);
      }
    };

    template<class OutIterator, class FromOper, class ValueType = typename OutIterator::value_type>
    struct SwigPyMapIterator_T : SwigPyIteratorClosed_T<OutIterator, ValueType, FromOper>
    {
      SwigPyMapIterator_T(OutIterator curr, OutIterator first, OutIterator last, PyObject *seq)
	: SwigPyIteratorClosed_T<OutIterator,ValueType,FromOper>(curr, first, last, seq)
      {
      }
    };


    template<class OutIterator,
	     class FromOper = from_key_oper<typename OutIterator::value_type> >
    struct SwigPyMapKeyIterator_T : SwigPyMapIterator_T<OutIterator, FromOper>
    {
      SwigPyMapKeyIterator_T(OutIterator curr, OutIterator first, OutIterator last, PyObject *seq)
	: SwigPyMapIterator_T<OutIterator, FromOper>(curr, first, last, seq)
      {
      }
    };

    template<typename OutIter>
    inline SwigPyIterator*
    make_output_key_iterator(const OutIter& current, const OutIter& begin, const OutIter& end, PyObject *seq = 0)
    {
      return new SwigPyMapKeyIterator_T<OutIter>(current, begin, end, seq);
    }

    template<class OutIterator,
	     class FromOper = from_value_oper<typename OutIterator::value_type> >
    struct SwigPyMapValueITerator_T : SwigPyMapIterator_T<OutIterator, FromOper>
    {
      SwigPyMapValueITerator_T(OutIterator curr, OutIterator first, OutIterator last, PyObject *seq)
	: SwigPyMapIterator_T<OutIterator, FromOper>(curr, first, last, seq)
      {
      }
    };
    

    template<typename OutIter>
    inline SwigPyIterator*
    make_output_value_iterator(const OutIter& current, const OutIter& begin, const OutIter& end, PyObject *seq = 0)
    {
      return new SwigPyMapValueITerator_T<OutIter>(current, begin, end, seq);
    }
  }


      namespace swig {
	template <>  struct traits<std::map<std::string, std::string, std::less< std::string >, std::allocator< std::pair< std::string const,std::string > > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::map<" "std::string" "," "std::string" "," "std::less< std::string >" "," "std::allocator< std::pair< std::string const,std::string > >" " >";
	  }
	};
      }
    
SWIGINTERN swig::SwigPyIterator *std_map_Sl_std_string_Sc_std_string_Sg__iterator(std::map< std::string,std::string > *self,PyObject **PYTHON_SELF){
      return swig::make_output_iterator(self->begin(), self->begin(), self->end(), *PYTHON_SELF);
    }
SWIGINTERN bool std_map_Sl_std_string_Sc_std_string_Sg____nonzero__(std::map< std::string,std::string > const *self){
      return !(self->empty());
    }
SWIGINTERN bool std_map_Sl_std_string_Sc_std_string_Sg____bool__(std::map< std::string,std::string > const *self){
      return !(self->empty());
    }
SWIGINTERN std::map< std::string,std::string >::size_type std_map_Sl_std_string_Sc_std_string_Sg____len__(std::map< std::string,std::string > const *self){
      return self->size();
    }
SWIGINTERN std::map< std::string,std::string >::mapped_type std_map_Sl_std_string_Sc_std_string_Sg____getitem__(std::map< std::string,std::string > const *self,std::map< std::string,std::string >::key_type const &key){
      std::map<std::string,std::string,std::less< std::string >,std::allocator< std::pair< std::string const,std::string > > >::const_iterator i = self->find(key);
      if (i != self->end())
	return i->second;
      else
	throw std::out_of_range("key not found");
    }
SWIGINTERN void std_map_Sl_std_string_Sc_std_string_Sg____delitem__(std::map< std::string,std::string > *self,std::map< std::string,std::string >::key_type const &key){
      std::map<std::string,std::string,std::less< std::string >,std::allocator< std::pair< std::string const,std::string > > >::iterator i = self->find(key);
      if (i != self->end())
	self->erase(i);
      else
	throw std::out_of_range("key not found");
    }
SWIGINTERN bool std_map_Sl_std_string_Sc_std_string_Sg__has_key(std::map< std::string,std::string > const *self,std::map< std::string,std::string >::key_type const &key){
      std::map<std::string,std::string,std::less< std::string >,std::allocator< std::pair< std::string const,std::string > > >::const_iterator i = self->find(key);
      return i != self->end();
    }
SWIGINTERN PyObject *std_map_Sl_std_string_Sc_std_string_Sg__keys(std::map< std::string,std::string > *self){
      std::map<std::string,std::string,std::less< std::string >,std::allocator< std::pair< std::string const,std::string > > >::size_type size = self->size();
      int pysize = (size <= (std::map<std::string,std::string,std::less< std::string >,std::allocator< std::pair< std::string const,std::string > > >::size_type) INT_MAX) ? (int) size : -1;
      SWIG_PYTHON_THREAD_BEGIN_BLOCK;
      if (pysize < 0) {
	PyErr_SetString(PyExc_OverflowError,
			"map size not valid in python");
	SWIG_PYTHON_THREAD_END_BLOCK;
	return NULL;
      }
      PyObject* keyList = PyList_New(pysize);
      std::map<std::string,std::string,std::less< std::string >,std::allocator< std::pair< std::string const,std::string > > >::const_iterator i = self->begin();
      for (int j = 0; j < pysize; ++i, ++j) {
	PyList_SET_ITEM(keyList, j, swig::from(i->first));
      }
      SWIG_PYTHON_THREAD_END_BLOCK;
      return keyList;
    }
SWIGINTERN PyObject *std_map_Sl_std_string_Sc_std_string_Sg__values(std::map< std::string,std::string > *self){
      std::map<std::string,std::string,std::less< std::string >,std::allocator< std::pair< std::string const,std::string > > >::size_type size = self->size();
      int pysize = (size <= (std::map<std::string,std::string,std::less< std::string >,std::allocator< std::pair< std::string const,std::string > > >::size_type) INT_MAX) ? (int) size : -1;
      SWIG_PYTHON_THREAD_BEGIN_BLOCK;
      if (pysize < 0) {
	PyErr_SetString(PyExc_OverflowError,
			"map size not valid in python");
	SWIG_PYTHON_THREAD_END_BLOCK;
	return NULL;
      }
      PyObject* valList = PyList_New(pysize);
      std::map<std::string,std::string,std::less< std::string >,std::allocator< std::pair< std::string const,std::string > > >::const_iterator i = self->begin();
      for (int j = 0; j < pysize; ++i, ++j) {
	PyList_SET_ITEM(valList, j, swig::from(i->second));
      }
      SWIG_PYTHON_THREAD_END_BLOCK;
      return valList;
    }
SWIGINTERN PyObject *std_map_Sl_std_string_Sc_std_string_Sg__items(std::map< std::string,std::string > *self){
      std::map<std::string,std::string,std::less< std::string >,std::allocator< std::pair< std::string const,std::string > > >::size_type size = self->size();
      int pysize = (size <= (std::map<std::string,std::string,std::less< std::string >,std::allocator< std::pair< std::string const,std::string > > >::size_type) INT_MAX) ? (int) size : -1;
      SWIG_PYTHON_THREAD_BEGIN_BLOCK;
      if (pysize < 0) {
	PyErr_SetString(PyExc_OverflowError,
			"map size not valid in python");
	SWIG_PYTHON_THREAD_END_BLOCK;
	return NULL;
      }    
      PyObject* itemList = PyList_New(pysize);
      std::map<std::string,std::string,std::less< std::string >,std::allocator< std::pair< std::string const,std::string > > >::const_iterator i = self->begin();
      for (int j = 0; j < pysize; ++i, ++j) {
	PyList_SET_ITEM(itemList, j, swig::from(*i));
      }
      SWIG_PYTHON_THREAD_END_BLOCK;
      return itemList;
    }
SWIGINTERN bool std_map_Sl_std_string_Sc_std_string_Sg____contains__(std::map< std::string,std::string > *self,std::map< std::string,std::string >::key_type const &key){
      return self->find(key) != self->end();
    }
SWIGINTERN swig::SwigPyIterator *std_map_Sl_std_string_Sc_std_string_Sg__key_iterator(std::map< std::string,std::string > *self,PyObject **PYTHON_SELF){
      return swig::make_output_key_iterator(self->begin(), self->begin(), self->end(), *PYTHON_SELF);
    }
SWIGINTERN swig::SwigPyIterator *std_map_Sl_std_string_Sc_std_string_Sg__value_iterator(std::map< std::string,std::string > *self,PyObject **PYTHON_SELF){
      return swig::make_output_value_iterator(self->begin(), self->begin(), self->end(), *PYTHON_SELF);
    }
SWIGINTERN void std_map_Sl_std_string_Sc_std_string_Sg____setitem__(std::map< std::string,std::string > *self,std::map< std::string,std::string >::key_type const &key,std::map< std::string,std::string >::mapped_type const &x){
      (*self)[key] = x;
    }

#define SWIG_FILE_WITH_INIT

#include <sstream>

#include <exception>
#include "OpenMM.h"
#include "OpenMMFreeEnergy.h"
#include "OpenMMAmoeba.h"
#include "openmm/RPMDIntegrator.h"
#include "openmm/serialization/SerializationNode.h"
#include "openmm/serialization/SerializationProxy.h"
#include "openmm/serialization/XmlSerializer.h"

using namespace OpenMM;



namespace OpenMM {

PyObject *copyVVec3ToList(std::vector<Vec3> vVec3) {
  int i, n;
  PyObject *pyList;

  n=vVec3.size(); 
  pyList=PyList_New(n);
  PyObject* mm = PyImport_AddModule("simtk.openmm");
  PyObject* vec3 = PyObject_GetAttrString(mm, "Vec3");
  for (i=0; i<n; i++) {
    OpenMM::Vec3& v = vVec3.at(i);
    PyObject* args = Py_BuildValue("(d,d,d)", v[0], v[1], v[2]);
    PyObject* pyVec = PyObject_CallObject(vec3, args);
    Py_DECREF(args);
    PyList_SET_ITEM(pyList, i, pyVec);
  }
  return pyList;
}

PyObject *_convertStateToLists(const State& state) {
    double simTime;
    PyObject *pPeriodicBoxVectorsList;
    PyObject *pEnergy;
    PyObject *pPositions;
    PyObject *pVelocities;
    PyObject *pForces;
    PyObject *pyTuple;
    PyObject *pParameters;
    simTime=state.getTime();

    OpenMM::Vec3 myVecA;
    OpenMM::Vec3 myVecB;
    OpenMM::Vec3 myVecC;
    state.getPeriodicBoxVectors(myVecA, myVecB, myVecC);
    PyObject* mm = PyImport_AddModule("simtk.openmm");
    PyObject* vec3 = PyObject_GetAttrString(mm, "Vec3");
    PyObject* args1 = Py_BuildValue("(d,d,d)", myVecA[0], myVecA[1], myVecA[2]);
    PyObject* args2 = Py_BuildValue("(d,d,d)", myVecB[0], myVecB[1], myVecB[2]);
    PyObject* args3 = Py_BuildValue("(d,d,d)", myVecC[0], myVecC[1], myVecC[2]);
    PyObject* pyVec1 = PyObject_CallObject(vec3, args1);
    PyObject* pyVec2 = PyObject_CallObject(vec3, args2);
    PyObject* pyVec3 = PyObject_CallObject(vec3, args3);
    Py_DECREF(args1);
    Py_DECREF(args2);
    Py_DECREF(args3);
    pPeriodicBoxVectorsList = Py_BuildValue("N,N,N", pyVec1, pyVec2, pyVec3);

    try {
      pPositions = copyVVec3ToList(state.getPositions());
    }
    catch (std::exception& ex) {
      pPositions = Py_None;
      Py_INCREF(Py_None);
    }
    try {
      pVelocities = copyVVec3ToList(state.getVelocities());
    }
    catch (std::exception& ex) {
      pVelocities = Py_None;
      Py_INCREF(Py_None);
    }
    try {
      pForces = copyVVec3ToList(state.getForces());
    }
    catch (std::exception& ex) {
      pForces = Py_None;
      Py_INCREF(Py_None);
    }
    try {
      pEnergy = Py_BuildValue("(d,d)",
                             state.getKineticEnergy(),
                             state.getPotentialEnergy());
    }
    catch (std::exception& ex) {
      pEnergy = Py_None;
      Py_INCREF(Py_None);
    }
    try {
      pParameters = PyDict_New();
      const std::map<std::string, double>& params = state.getParameters();
      for (std::map<std::string, double>::const_iterator iter = params.begin(); iter != params.end(); ++iter)
          PyDict_SetItemString(pParameters, iter->first.c_str(), Py_BuildValue("d", iter->second));
    }
    catch (std::exception& ex) {
      pParameters = Py_None;
      Py_INCREF(Py_None);
    }
  
    pyTuple=Py_BuildValue("(d,N,N,N,N,N,N)",
                          simTime, pPeriodicBoxVectorsList, pEnergy,
                          pPositions, pVelocities,
                          pForces, pParameters);
  
    return pyTuple;
}

} // namespace OpenMM

SWIGINTERN PyObject *OpenMM_Context__getStateAsLists(OpenMM::Context *self,int getPositions,int getVelocities,int getForces,int getEnergy,int getParameters,int enforcePeriodic,int groups){
    int types = 0;
    if (getPositions) types |= State::Positions;
    if (getVelocities) types |= State::Velocities;
    if (getForces) types |= State::Forces;
    if (getEnergy) types |= State::Energy;
    if (getParameters) types |= State::Parameters;
    State state = self->getState(types, enforcePeriodic, groups);
    return _convertStateToLists(state);
  }
SWIGINTERN PyObject *OpenMM_CustomIntegrator_getPerDofVariable__SWIG_1(OpenMM::CustomIntegrator const *self,int index){
        std::vector<Vec3> values;
        self->getPerDofVariable(index, values);
        return copyVVec3ToList(values);
    }

SWIGINTERNINLINE PyObject * 
SWIG_FromCharPtr(const char *cptr)
{ 
  return SWIG_FromCharPtrAndSize(cptr, (cptr ? strlen(cptr) : 0));
}

SWIGINTERN PyObject *OpenMM_RPMDIntegrator__getStateAsLists(OpenMM::RPMDIntegrator *self,int copy,int getPositions,int getVelocities,int getForces,int getEnergy,int getParameters,int enforcePeriodic,int groups){
    int types = 0;
    if (getPositions) types |= State::Positions;
    if (getVelocities) types |= State::Velocities;
    if (getForces) types |= State::Forces;
    if (getEnergy) types |= State::Energy;
    if (getParameters) types |= State::Parameters;
    State state = self->getState(copy, types, enforcePeriodic, groups);
    return _convertStateToLists(state);
  }
SWIGINTERN std::string OpenMM_XmlSerializer_serializeSystem(OpenMM::System const *object){
           std::stringstream ss;
           XmlSerializer::serialize<OpenMM::System>( object, "System", ss );
           return ss.str();
       }
SWIGINTERN OpenMM::System *OpenMM_XmlSerializer_deserializeSystem(char const *inputString){
           std::stringstream ss;
           ss << inputString;
           return XmlSerializer::deserialize<OpenMM::System>( ss );
       }
#ifdef __cplusplus
extern "C" {
#endif
SWIGINTERN int Swig_var_ios_base_boolalpha_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ios_base_boolalpha is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_ios_base_boolalpha_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(std::ios_base::boolalpha));
  return pyobj;
}


SWIGINTERN int Swig_var_ios_base_dec_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ios_base_dec is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_ios_base_dec_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(std::ios_base::dec));
  return pyobj;
}


SWIGINTERN int Swig_var_ios_base_fixed_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ios_base_fixed is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_ios_base_fixed_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(std::ios_base::fixed));
  return pyobj;
}


SWIGINTERN int Swig_var_ios_base_hex_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ios_base_hex is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_ios_base_hex_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(std::ios_base::hex));
  return pyobj;
}


SWIGINTERN int Swig_var_ios_base_internal_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ios_base_internal is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_ios_base_internal_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(std::ios_base::internal));
  return pyobj;
}


SWIGINTERN int Swig_var_ios_base_left_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ios_base_left is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_ios_base_left_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(std::ios_base::left));
  return pyobj;
}


SWIGINTERN int Swig_var_ios_base_oct_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ios_base_oct is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_ios_base_oct_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(std::ios_base::oct));
  return pyobj;
}


SWIGINTERN int Swig_var_ios_base_right_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ios_base_right is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_ios_base_right_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(std::ios_base::right));
  return pyobj;
}


SWIGINTERN int Swig_var_ios_base_scientific_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ios_base_scientific is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_ios_base_scientific_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(std::ios_base::scientific));
  return pyobj;
}


SWIGINTERN int Swig_var_ios_base_showbase_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ios_base_showbase is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_ios_base_showbase_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(std::ios_base::showbase));
  return pyobj;
}


SWIGINTERN int Swig_var_ios_base_showpoint_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ios_base_showpoint is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_ios_base_showpoint_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(std::ios_base::showpoint));
  return pyobj;
}


SWIGINTERN int Swig_var_ios_base_showpos_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ios_base_showpos is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_ios_base_showpos_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(std::ios_base::showpos));
  return pyobj;
}


SWIGINTERN int Swig_var_ios_base_skipws_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ios_base_skipws is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_ios_base_skipws_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(std::ios_base::skipws));
  return pyobj;
}


SWIGINTERN int Swig_var_ios_base_unitbuf_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ios_base_unitbuf is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_ios_base_unitbuf_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(std::ios_base::unitbuf));
  return pyobj;
}


SWIGINTERN int Swig_var_ios_base_uppercase_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ios_base_uppercase is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_ios_base_uppercase_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(std::ios_base::uppercase));
  return pyobj;
}


SWIGINTERN int Swig_var_ios_base_adjustfield_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ios_base_adjustfield is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_ios_base_adjustfield_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(std::ios_base::adjustfield));
  return pyobj;
}


SWIGINTERN int Swig_var_ios_base_basefield_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ios_base_basefield is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_ios_base_basefield_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(std::ios_base::basefield));
  return pyobj;
}


SWIGINTERN int Swig_var_ios_base_floatfield_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ios_base_floatfield is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_ios_base_floatfield_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(std::ios_base::floatfield));
  return pyobj;
}


SWIGINTERN int Swig_var_ios_base_badbit_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ios_base_badbit is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_ios_base_badbit_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(std::ios_base::badbit));
  return pyobj;
}


SWIGINTERN int Swig_var_ios_base_eofbit_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ios_base_eofbit is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_ios_base_eofbit_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(std::ios_base::eofbit));
  return pyobj;
}


SWIGINTERN int Swig_var_ios_base_failbit_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ios_base_failbit is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_ios_base_failbit_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(std::ios_base::failbit));
  return pyobj;
}


SWIGINTERN int Swig_var_ios_base_goodbit_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ios_base_goodbit is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_ios_base_goodbit_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(std::ios_base::goodbit));
  return pyobj;
}


SWIGINTERN int Swig_var_ios_base_app_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ios_base_app is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_ios_base_app_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(std::ios_base::app));
  return pyobj;
}


SWIGINTERN int Swig_var_ios_base_ate_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ios_base_ate is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_ios_base_ate_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(std::ios_base::ate));
  return pyobj;
}


SWIGINTERN int Swig_var_ios_base_binary_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ios_base_binary is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_ios_base_binary_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(std::ios_base::binary));
  return pyobj;
}


SWIGINTERN int Swig_var_ios_base_ios_base_in_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ios_base_ios_base_in is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_ios_base_ios_base_in_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(std::ios_base::in));
  return pyobj;
}


SWIGINTERN int Swig_var_ios_base_out_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ios_base_out is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_ios_base_out_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(std::ios_base::out));
  return pyobj;
}


SWIGINTERN int Swig_var_ios_base_trunc_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ios_base_trunc is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_ios_base_trunc_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(std::ios_base::trunc));
  return pyobj;
}


SWIGINTERN int Swig_var_ios_base_beg_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ios_base_beg is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_ios_base_beg_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(std::ios_base::beg));
  return pyobj;
}


SWIGINTERN int Swig_var_ios_base_cur_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ios_base_cur is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_ios_base_cur_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(std::ios_base::cur));
  return pyobj;
}


SWIGINTERN int Swig_var_ios_base_end_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ios_base_end is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_ios_base_end_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(std::ios_base::end));
  return pyobj;
}


SWIGINTERN PyObject *_wrap_ios_base_register_callback(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::ios_base *arg1 = (std::ios_base *) 0 ;
  std::ios_base::event_callback arg2 = (std::ios_base::event_callback) 0 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ios_base_register_callback",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__ios_base, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ios_base_register_callback" "', argument " "1"" of type '" "std::ios_base *""'"); 
  }
  arg1 = reinterpret_cast< std::ios_base * >(argp1);
  {
    int res = SWIG_ConvertFunctionPtr(obj1, (void**)(&arg2), SWIGTYPE_p_f_enum_std__ios_base__event_r_std__ios_base_int__void);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "ios_base_register_callback" "', argument " "2"" of type '" "std::ios_base::event_callback""'"); 
    }
  }
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ios_base_register_callback" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  (arg1)->register_callback(arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ios_base_flags__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::ios_base *arg1 = (std::ios_base *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::ios_base::fmtflags result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ios_base_flags",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__ios_base, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ios_base_flags" "', argument " "1"" of type '" "std::ios_base const *""'"); 
  }
  arg1 = reinterpret_cast< std::ios_base * >(argp1);
  result = (std::ios_base::fmtflags)((std::ios_base const *)arg1)->flags();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ios_base_flags__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::ios_base *arg1 = (std::ios_base *) 0 ;
  std::ios_base::fmtflags arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::ios_base::fmtflags result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ios_base_flags",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__ios_base, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ios_base_flags" "', argument " "1"" of type '" "std::ios_base *""'"); 
  }
  arg1 = reinterpret_cast< std::ios_base * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ios_base_flags" "', argument " "2"" of type '" "std::ios_base::fmtflags""'");
  } 
  arg2 = static_cast< std::ios_base::fmtflags >(val2);
  result = (std::ios_base::fmtflags)(arg1)->flags(arg2);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ios_base_flags(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__ios_base, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_ios_base_flags__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__ios_base, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ios_base_flags__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ios_base_flags'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    flags(std::ios_base const *)\n"
    "    flags(std::ios_base *,std::ios_base::fmtflags)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_ios_base_setf__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::ios_base *arg1 = (std::ios_base *) 0 ;
  std::ios_base::fmtflags arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::ios_base::fmtflags result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ios_base_setf",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__ios_base, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ios_base_setf" "', argument " "1"" of type '" "std::ios_base *""'"); 
  }
  arg1 = reinterpret_cast< std::ios_base * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ios_base_setf" "', argument " "2"" of type '" "std::ios_base::fmtflags""'");
  } 
  arg2 = static_cast< std::ios_base::fmtflags >(val2);
  result = (std::ios_base::fmtflags)(arg1)->setf(arg2);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ios_base_setf__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::ios_base *arg1 = (std::ios_base *) 0 ;
  std::ios_base::fmtflags arg2 ;
  std::ios_base::fmtflags arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::ios_base::fmtflags result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ios_base_setf",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__ios_base, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ios_base_setf" "', argument " "1"" of type '" "std::ios_base *""'"); 
  }
  arg1 = reinterpret_cast< std::ios_base * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ios_base_setf" "', argument " "2"" of type '" "std::ios_base::fmtflags""'");
  } 
  arg2 = static_cast< std::ios_base::fmtflags >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ios_base_setf" "', argument " "3"" of type '" "std::ios_base::fmtflags""'");
  } 
  arg3 = static_cast< std::ios_base::fmtflags >(val3);
  result = (std::ios_base::fmtflags)(arg1)->setf(arg2,arg3);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ios_base_setf(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__ios_base, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ios_base_setf__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__ios_base, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_ios_base_setf__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ios_base_setf'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    setf(std::ios_base *,std::ios_base::fmtflags)\n"
    "    setf(std::ios_base *,std::ios_base::fmtflags,std::ios_base::fmtflags)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_ios_base_unsetf(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::ios_base *arg1 = (std::ios_base *) 0 ;
  std::ios_base::fmtflags arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ios_base_unsetf",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__ios_base, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ios_base_unsetf" "', argument " "1"" of type '" "std::ios_base *""'"); 
  }
  arg1 = reinterpret_cast< std::ios_base * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ios_base_unsetf" "', argument " "2"" of type '" "std::ios_base::fmtflags""'");
  } 
  arg2 = static_cast< std::ios_base::fmtflags >(val2);
  (arg1)->unsetf(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ios_base_precision__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::ios_base *arg1 = (std::ios_base *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::streamsize result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ios_base_precision",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__ios_base, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ios_base_precision" "', argument " "1"" of type '" "std::ios_base const *""'"); 
  }
  arg1 = reinterpret_cast< std::ios_base * >(argp1);
  result = ((std::ios_base const *)arg1)->precision();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ios_base_precision__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::ios_base *arg1 = (std::ios_base *) 0 ;
  std::streamsize arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::streamsize result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ios_base_precision",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__ios_base, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ios_base_precision" "', argument " "1"" of type '" "std::ios_base *""'"); 
  }
  arg1 = reinterpret_cast< std::ios_base * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ios_base_precision" "', argument " "2"" of type '" "std::streamsize""'");
  } 
  arg2 = static_cast< std::streamsize >(val2);
  result = (arg1)->precision(arg2);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ios_base_precision(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__ios_base, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_ios_base_precision__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__ios_base, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ios_base_precision__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ios_base_precision'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    precision(std::ios_base const *)\n"
    "    precision(std::ios_base *,std::streamsize)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_ios_base_width__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::ios_base *arg1 = (std::ios_base *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::streamsize result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ios_base_width",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__ios_base, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ios_base_width" "', argument " "1"" of type '" "std::ios_base const *""'"); 
  }
  arg1 = reinterpret_cast< std::ios_base * >(argp1);
  result = ((std::ios_base const *)arg1)->width();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ios_base_width__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::ios_base *arg1 = (std::ios_base *) 0 ;
  std::streamsize arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::streamsize result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ios_base_width",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__ios_base, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ios_base_width" "', argument " "1"" of type '" "std::ios_base *""'"); 
  }
  arg1 = reinterpret_cast< std::ios_base * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ios_base_width" "', argument " "2"" of type '" "std::streamsize""'");
  } 
  arg2 = static_cast< std::streamsize >(val2);
  result = (arg1)->width(arg2);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ios_base_width(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__ios_base, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_ios_base_width__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__ios_base, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ios_base_width__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ios_base_width'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    width(std::ios_base const *)\n"
    "    width(std::ios_base *,std::streamsize)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_ios_base_sync_with_stdio__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bool arg1 ;
  bool val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ios_base_sync_with_stdio",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_bool(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "ios_base_sync_with_stdio" "', argument " "1"" of type '" "bool""'");
  } 
  arg1 = static_cast< bool >(val1);
  result = (bool)std::ios_base::sync_with_stdio(arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ios_base_sync_with_stdio__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)":ios_base_sync_with_stdio")) SWIG_fail;
  result = (bool)std::ios_base::sync_with_stdio();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ios_base_sync_with_stdio(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 1); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_ios_base_sync_with_stdio__SWIG_1(self, args);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_bool(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_ios_base_sync_with_stdio__SWIG_0(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ios_base_sync_with_stdio'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    sync_with_stdio(bool)\n"
    "    std::ios_base::sync_with_stdio()\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_ios_base_imbue(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::ios_base *arg1 = (std::ios_base *) 0 ;
  std::locale *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::locale result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ios_base_imbue",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__ios_base, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ios_base_imbue" "', argument " "1"" of type '" "std::ios_base *""'"); 
  }
  arg1 = reinterpret_cast< std::ios_base * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__locale,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ios_base_imbue" "', argument " "2"" of type '" "std::locale const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ios_base_imbue" "', argument " "2"" of type '" "std::locale const &""'"); 
  }
  arg2 = reinterpret_cast< std::locale * >(argp2);
  result = (arg1)->imbue((std::locale const &)*arg2);
  resultobj = SWIG_NewPointerObj((new std::locale(static_cast< const std::locale& >(result))), SWIGTYPE_p_std__locale, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ios_base_getloc(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::ios_base *arg1 = (std::ios_base *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::locale result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ios_base_getloc",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__ios_base, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ios_base_getloc" "', argument " "1"" of type '" "std::ios_base const *""'"); 
  }
  arg1 = reinterpret_cast< std::ios_base * >(argp1);
  result = ((std::ios_base const *)arg1)->getloc();
  resultobj = SWIG_NewPointerObj((new std::locale(static_cast< const std::locale& >(result))), SWIGTYPE_p_std__locale, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ios_base_xalloc(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)":ios_base_xalloc")) SWIG_fail;
  result = (int)std::ios_base::xalloc();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ios_base_iword(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::ios_base *arg1 = (std::ios_base *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  long *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ios_base_iword",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__ios_base, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ios_base_iword" "', argument " "1"" of type '" "std::ios_base *""'"); 
  }
  arg1 = reinterpret_cast< std::ios_base * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ios_base_iword" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (long *) &(arg1)->iword(arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_long, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ios_base_pword(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::ios_base *arg1 = (std::ios_base *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  void **result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ios_base_pword",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__ios_base, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ios_base_pword" "', argument " "1"" of type '" "std::ios_base *""'"); 
  }
  arg1 = reinterpret_cast< std::ios_base * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ios_base_pword" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (void **) &(arg1)->pword(arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_p_void, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ios_base(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::ios_base *arg1 = (std::ios_base *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_ios_base",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__ios_base, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ios_base" "', argument " "1"" of type '" "std::ios_base *""'"); 
  }
  arg1 = reinterpret_cast< std::ios_base * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ios_base_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__ios_base, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_ios_rdstate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_ios< char > *arg1 = (std::basic_ios< char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::ios_base::iostate result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ios_rdstate",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_iosT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ios_rdstate" "', argument " "1"" of type '" "std::basic_ios< char > const *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ios< char > * >(argp1);
  result = (std::ios_base::iostate)((std::basic_ios< char > const *)arg1)->rdstate();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ios_clear__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_ios< char > *arg1 = (std::basic_ios< char > *) 0 ;
  std::ios_base::iostate arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ios_clear",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_iosT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ios_clear" "', argument " "1"" of type '" "std::basic_ios< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ios< char > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ios_clear" "', argument " "2"" of type '" "std::ios_base::iostate""'");
  } 
  arg2 = static_cast< std::ios_base::iostate >(val2);
  (arg1)->clear(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ios_clear__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_ios< char > *arg1 = (std::basic_ios< char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ios_clear",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_iosT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ios_clear" "', argument " "1"" of type '" "std::basic_ios< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ios< char > * >(argp1);
  (arg1)->clear();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ios_clear(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_iosT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_ios_clear__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_iosT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ios_clear__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ios_clear'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    clear(std::basic_ios< char > *,std::ios_base::iostate)\n"
    "    clear(std::basic_ios< char > *)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_ios_setstate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_ios< char > *arg1 = (std::basic_ios< char > *) 0 ;
  std::ios_base::iostate arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ios_setstate",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_iosT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ios_setstate" "', argument " "1"" of type '" "std::basic_ios< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ios< char > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ios_setstate" "', argument " "2"" of type '" "std::ios_base::iostate""'");
  } 
  arg2 = static_cast< std::ios_base::iostate >(val2);
  (arg1)->setstate(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ios_good(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_ios< char > *arg1 = (std::basic_ios< char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ios_good",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_iosT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ios_good" "', argument " "1"" of type '" "std::basic_ios< char > const *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ios< char > * >(argp1);
  result = (bool)((std::basic_ios< char > const *)arg1)->good();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ios_eof(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_ios< char > *arg1 = (std::basic_ios< char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ios_eof",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_iosT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ios_eof" "', argument " "1"" of type '" "std::basic_ios< char > const *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ios< char > * >(argp1);
  result = (bool)((std::basic_ios< char > const *)arg1)->eof();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ios_fail(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_ios< char > *arg1 = (std::basic_ios< char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ios_fail",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_iosT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ios_fail" "', argument " "1"" of type '" "std::basic_ios< char > const *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ios< char > * >(argp1);
  result = (bool)((std::basic_ios< char > const *)arg1)->fail();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ios_bad(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_ios< char > *arg1 = (std::basic_ios< char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ios_bad",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_iosT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ios_bad" "', argument " "1"" of type '" "std::basic_ios< char > const *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ios< char > * >(argp1);
  result = (bool)((std::basic_ios< char > const *)arg1)->bad();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ios_exceptions__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_ios< char > *arg1 = (std::basic_ios< char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::ios_base::iostate result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ios_exceptions",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_iosT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ios_exceptions" "', argument " "1"" of type '" "std::basic_ios< char > const *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ios< char > * >(argp1);
  result = (std::ios_base::iostate)((std::basic_ios< char > const *)arg1)->exceptions();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ios_exceptions__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_ios< char > *arg1 = (std::basic_ios< char > *) 0 ;
  std::ios_base::iostate arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ios_exceptions",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_iosT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ios_exceptions" "', argument " "1"" of type '" "std::basic_ios< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ios< char > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ios_exceptions" "', argument " "2"" of type '" "std::ios_base::iostate""'");
  } 
  arg2 = static_cast< std::ios_base::iostate >(val2);
  (arg1)->exceptions(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ios_exceptions(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_iosT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_ios_exceptions__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_iosT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ios_exceptions__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ios_exceptions'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    exceptions(std::basic_ios< char > const *)\n"
    "    exceptions(std::basic_ios< char > *,std::ios_base::iostate)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ios(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_streambuf< char,std::char_traits< char > > *arg1 = (std::basic_streambuf< char,std::char_traits< char > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::basic_ios< char > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_ios",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_streambufT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ios" "', argument " "1"" of type '" "std::basic_streambuf< char,std::char_traits< char > > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_streambuf< char,std::char_traits< char > > * >(argp1);
  result = (std::basic_ios< char > *)new std::basic_ios< char >(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_iosT_char_std__char_traitsT_char_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ios(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_ios< char > *arg1 = (std::basic_ios< char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_ios",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_iosT_char_std__char_traitsT_char_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ios" "', argument " "1"" of type '" "std::basic_ios< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ios< char > * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ios_tie__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_ios< char > *arg1 = (std::basic_ios< char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::basic_ostream< char,std::char_traits< char > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ios_tie",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_iosT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ios_tie" "', argument " "1"" of type '" "std::basic_ios< char > const *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ios< char > * >(argp1);
  result = (std::basic_ostream< char,std::char_traits< char > > *)((std::basic_ios< char > const *)arg1)->tie();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ios_tie__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_ios< char > *arg1 = (std::basic_ios< char > *) 0 ;
  std::basic_ostream< char,std::char_traits< char > > *arg2 = (std::basic_ostream< char,std::char_traits< char > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::basic_ostream< char,std::char_traits< char > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ios_tie",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_iosT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ios_tie" "', argument " "1"" of type '" "std::basic_ios< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ios< char > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ios_tie" "', argument " "2"" of type '" "std::basic_ostream< char,std::char_traits< char > > *""'"); 
  }
  arg2 = reinterpret_cast< std::basic_ostream< char,std::char_traits< char > > * >(argp2);
  result = (std::basic_ostream< char,std::char_traits< char > > *)(arg1)->tie(arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ios_tie(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_iosT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_ios_tie__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_iosT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ios_tie__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ios_tie'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    tie(std::basic_ios< char > const *)\n"
    "    tie(std::basic_ios< char > *,std::basic_ostream< char,std::char_traits< char > > *)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_ios_rdbuf__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_ios< char > *arg1 = (std::basic_ios< char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::basic_streambuf< char,std::char_traits< char > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ios_rdbuf",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_iosT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ios_rdbuf" "', argument " "1"" of type '" "std::basic_ios< char > const *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ios< char > * >(argp1);
  result = (std::basic_streambuf< char,std::char_traits< char > > *)((std::basic_ios< char > const *)arg1)->rdbuf();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_streambufT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ios_rdbuf__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_ios< char > *arg1 = (std::basic_ios< char > *) 0 ;
  std::basic_streambuf< char,std::char_traits< char > > *arg2 = (std::basic_streambuf< char,std::char_traits< char > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::basic_streambuf< char,std::char_traits< char > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ios_rdbuf",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_iosT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ios_rdbuf" "', argument " "1"" of type '" "std::basic_ios< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ios< char > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_std__basic_streambufT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ios_rdbuf" "', argument " "2"" of type '" "std::basic_streambuf< char,std::char_traits< char > > *""'"); 
  }
  arg2 = reinterpret_cast< std::basic_streambuf< char,std::char_traits< char > > * >(argp2);
  result = (std::basic_streambuf< char,std::char_traits< char > > *)(arg1)->rdbuf(arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_streambufT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ios_rdbuf(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_iosT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_ios_rdbuf__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_iosT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__basic_streambufT_char_std__char_traitsT_char_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ios_rdbuf__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ios_rdbuf'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    rdbuf(std::basic_ios< char > const *)\n"
    "    rdbuf(std::basic_ios< char > *,std::basic_streambuf< char,std::char_traits< char > > *)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_ios_copyfmt(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_ios< char > *arg1 = (std::basic_ios< char > *) 0 ;
  std::basic_ios< char > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::basic_ios< char > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ios_copyfmt",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_iosT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ios_copyfmt" "', argument " "1"" of type '" "std::basic_ios< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ios< char > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__basic_iosT_char_std__char_traitsT_char_t_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ios_copyfmt" "', argument " "2"" of type '" "std::basic_ios< char > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ios_copyfmt" "', argument " "2"" of type '" "std::basic_ios< char > const &""'"); 
  }
  arg2 = reinterpret_cast< std::basic_ios< char > * >(argp2);
  result = (std::basic_ios< char > *) &(arg1)->copyfmt((std::basic_ios< char > const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_iosT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ios_fill__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_ios< char > *arg1 = (std::basic_ios< char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::basic_ios< char >::char_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ios_fill",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_iosT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ios_fill" "', argument " "1"" of type '" "std::basic_ios< char > const *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ios< char > * >(argp1);
  result = (std::basic_ios< char >::char_type)((std::basic_ios< char > const *)arg1)->fill();
  resultobj = SWIG_From_char(static_cast< char >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ios_fill__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_ios< char > *arg1 = (std::basic_ios< char > *) 0 ;
  std::basic_ios< char >::char_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::basic_ios< char >::char_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ios_fill",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_iosT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ios_fill" "', argument " "1"" of type '" "std::basic_ios< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ios< char > * >(argp1);
  ecode2 = SWIG_AsVal_char(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ios_fill" "', argument " "2"" of type '" "std::basic_ios< char >::char_type""'");
  } 
  arg2 = static_cast< std::basic_ios< char >::char_type >(val2);
  result = (std::basic_ios< char >::char_type)(arg1)->fill(arg2);
  resultobj = SWIG_From_char(static_cast< char >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ios_fill(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_iosT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_ios_fill__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_iosT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_char(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ios_fill__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ios_fill'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    fill(std::basic_ios< char > const *)\n"
    "    fill(std::basic_ios< char > *,std::basic_ios< char >::char_type)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_ios_imbue(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_ios< char > *arg1 = (std::basic_ios< char > *) 0 ;
  std::locale *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::locale result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ios_imbue",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_iosT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ios_imbue" "', argument " "1"" of type '" "std::basic_ios< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ios< char > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__locale,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ios_imbue" "', argument " "2"" of type '" "std::locale const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ios_imbue" "', argument " "2"" of type '" "std::locale const &""'"); 
  }
  arg2 = reinterpret_cast< std::locale * >(argp2);
  result = (arg1)->imbue((std::locale const &)*arg2);
  resultobj = SWIG_NewPointerObj((new std::locale(static_cast< const std::locale& >(result))), SWIGTYPE_p_std__locale, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ios_narrow(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_ios< char > *arg1 = (std::basic_ios< char > *) 0 ;
  std::basic_ios< char >::char_type arg2 ;
  char arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char val2 ;
  int ecode2 = 0 ;
  char val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ios_narrow",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_iosT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ios_narrow" "', argument " "1"" of type '" "std::basic_ios< char > const *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ios< char > * >(argp1);
  ecode2 = SWIG_AsVal_char(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ios_narrow" "', argument " "2"" of type '" "std::basic_ios< char >::char_type""'");
  } 
  arg2 = static_cast< std::basic_ios< char >::char_type >(val2);
  ecode3 = SWIG_AsVal_char(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ios_narrow" "', argument " "3"" of type '" "char""'");
  } 
  arg3 = static_cast< char >(val3);
  result = (char)((std::basic_ios< char > const *)arg1)->narrow(arg2,arg3);
  resultobj = SWIG_From_char(static_cast< char >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ios_widen(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_ios< char > *arg1 = (std::basic_ios< char > *) 0 ;
  char arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::basic_ios< char >::char_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ios_widen",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_iosT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ios_widen" "', argument " "1"" of type '" "std::basic_ios< char > const *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ios< char > * >(argp1);
  ecode2 = SWIG_AsVal_char(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ios_widen" "', argument " "2"" of type '" "char""'");
  } 
  arg2 = static_cast< char >(val2);
  result = (std::basic_ios< char >::char_type)((std::basic_ios< char > const *)arg1)->widen(arg2);
  resultobj = SWIG_From_char(static_cast< char >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ios_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__basic_iosT_char_std__char_traitsT_char_t_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN int Swig_var_cin_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable cin is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_cin_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&std::cin), SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_cout_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable cout is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_cout_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&std::cout), SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_cerr_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable cerr is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_cerr_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&std::cerr), SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_clog_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable clog is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_clog_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&std::clog), SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t,  0 );
  return pyobj;
}


SWIGINTERN PyObject *_wrap_new_ostream(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_streambuf< char,std::char_traits< char > > *arg1 = (std::basic_streambuf< char,std::char_traits< char > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::basic_ostream< char > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_ostream",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_streambufT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ostream" "', argument " "1"" of type '" "std::basic_streambuf< char,std::char_traits< char > > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_streambuf< char,std::char_traits< char > > * >(argp1);
  result = (std::basic_ostream< char > *)new std::basic_ostream< char >(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ostream(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_ostream< char > *arg1 = (std::basic_ostream< char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_ostream",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ostream" "', argument " "1"" of type '" "std::basic_ostream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ostream< char > * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ostream___lshift____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_ostream< char > *arg1 = (std::basic_ostream< char > *) 0 ;
  std::basic_ostream< char,std::char_traits< char > > &(*arg2)(std::basic_ostream< char,std::char_traits< char > > &) = (std::basic_ostream< char,std::char_traits< char > > &(*)(std::basic_ostream< char,std::char_traits< char > > &)) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::basic_ostream< char,std::char_traits< char > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ostream___lshift__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ostream___lshift__" "', argument " "1"" of type '" "std::basic_ostream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ostream< char > * >(argp1);
  {
    int res = SWIG_ConvertFunctionPtr(obj1, (void**)(&arg2), SWIGTYPE_p_f_r_std__basic_ostream__char_std__char_traits__char______r_std__basic_ostreamT_char_std__char_traitsT_char_t_t);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "ostream___lshift__" "', argument " "2"" of type '" "std::basic_ostream< char,std::char_traits< char > > &(*)(std::basic_ostream< char,std::char_traits< char > > &)""'"); 
    }
  }
  result = (std::basic_ostream< char,std::char_traits< char > > *) &(arg1)->operator <<(arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ostream___lshift____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_ostream< char > *arg1 = (std::basic_ostream< char > *) 0 ;
  std::basic_ios< char,std::char_traits< char > > &(*arg2)(std::basic_ios< char,std::char_traits< char > > &) = (std::basic_ios< char,std::char_traits< char > > &(*)(std::basic_ios< char,std::char_traits< char > > &)) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::basic_ostream< char,std::char_traits< char > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ostream___lshift__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ostream___lshift__" "', argument " "1"" of type '" "std::basic_ostream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ostream< char > * >(argp1);
  {
    int res = SWIG_ConvertFunctionPtr(obj1, (void**)(&arg2), SWIGTYPE_p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_iosT_char_std__char_traitsT_char_t_t);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "ostream___lshift__" "', argument " "2"" of type '" "std::basic_ios< char,std::char_traits< char > > &(*)(std::basic_ios< char,std::char_traits< char > > &)""'"); 
    }
  }
  result = (std::basic_ostream< char,std::char_traits< char > > *) &(arg1)->operator <<(arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ostream___lshift____SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_ostream< char > *arg1 = (std::basic_ostream< char > *) 0 ;
  std::ios_base &(*arg2)(std::ios_base &) = (std::ios_base &(*)(std::ios_base &)) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::basic_ostream< char,std::char_traits< char > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ostream___lshift__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ostream___lshift__" "', argument " "1"" of type '" "std::basic_ostream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ostream< char > * >(argp1);
  {
    int res = SWIG_ConvertFunctionPtr(obj1, (void**)(&arg2), SWIGTYPE_p_f_r_std__ios_base__r_std__ios_base);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "ostream___lshift__" "', argument " "2"" of type '" "std::ios_base &(*)(std::ios_base &)""'"); 
    }
  }
  result = (std::basic_ostream< char,std::char_traits< char > > *) &(arg1)->operator <<(arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ostream___lshift____SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_ostream< char > *arg1 = (std::basic_ostream< char > *) 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::basic_ostream< char,std::char_traits< char > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ostream___lshift__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ostream___lshift__" "', argument " "1"" of type '" "std::basic_ostream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ostream< char > * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ostream___lshift__" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  result = (std::basic_ostream< char,std::char_traits< char > > *) &(arg1)->operator <<(arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ostream___lshift____SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_ostream< char > *arg1 = (std::basic_ostream< char > *) 0 ;
  unsigned long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::basic_ostream< char,std::char_traits< char > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ostream___lshift__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ostream___lshift__" "', argument " "1"" of type '" "std::basic_ostream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ostream< char > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ostream___lshift__" "', argument " "2"" of type '" "unsigned long""'");
  } 
  arg2 = static_cast< unsigned long >(val2);
  result = (std::basic_ostream< char,std::char_traits< char > > *) &(arg1)->operator <<(arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ostream___lshift____SWIG_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_ostream< char > *arg1 = (std::basic_ostream< char > *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::basic_ostream< char,std::char_traits< char > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ostream___lshift__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ostream___lshift__" "', argument " "1"" of type '" "std::basic_ostream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ostream< char > * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ostream___lshift__" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  result = (std::basic_ostream< char,std::char_traits< char > > *) &(arg1)->operator <<(arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ostream___lshift____SWIG_6(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_ostream< char > *arg1 = (std::basic_ostream< char > *) 0 ;
  short arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  short val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::basic_ostream< char,std::char_traits< char > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ostream___lshift__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ostream___lshift__" "', argument " "1"" of type '" "std::basic_ostream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ostream< char > * >(argp1);
  ecode2 = SWIG_AsVal_short(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ostream___lshift__" "', argument " "2"" of type '" "short""'");
  } 
  arg2 = static_cast< short >(val2);
  result = (std::basic_ostream< char,std::char_traits< char > > *) &(arg1)->operator <<(arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ostream___lshift____SWIG_7(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_ostream< char > *arg1 = (std::basic_ostream< char > *) 0 ;
  unsigned short arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned short val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::basic_ostream< char,std::char_traits< char > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ostream___lshift__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ostream___lshift__" "', argument " "1"" of type '" "std::basic_ostream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ostream< char > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_short(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ostream___lshift__" "', argument " "2"" of type '" "unsigned short""'");
  } 
  arg2 = static_cast< unsigned short >(val2);
  result = (std::basic_ostream< char,std::char_traits< char > > *) &(arg1)->operator <<(arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ostream___lshift____SWIG_8(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_ostream< char > *arg1 = (std::basic_ostream< char > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::basic_ostream< char,std::char_traits< char > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ostream___lshift__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ostream___lshift__" "', argument " "1"" of type '" "std::basic_ostream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ostream< char > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ostream___lshift__" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (std::basic_ostream< char,std::char_traits< char > > *) &(arg1)->operator <<(arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ostream___lshift____SWIG_9(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_ostream< char > *arg1 = (std::basic_ostream< char > *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::basic_ostream< char,std::char_traits< char > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ostream___lshift__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ostream___lshift__" "', argument " "1"" of type '" "std::basic_ostream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ostream< char > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ostream___lshift__" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  result = (std::basic_ostream< char,std::char_traits< char > > *) &(arg1)->operator <<(arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ostream___lshift____SWIG_10(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_ostream< char > *arg1 = (std::basic_ostream< char > *) 0 ;
  long long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::basic_ostream< char,std::char_traits< char > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ostream___lshift__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ostream___lshift__" "', argument " "1"" of type '" "std::basic_ostream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ostream< char > * >(argp1);
  ecode2 = SWIG_AsVal_long_SS_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ostream___lshift__" "', argument " "2"" of type '" "long long""'");
  } 
  arg2 = static_cast< long long >(val2);
  result = (std::basic_ostream< char,std::char_traits< char > > *) &(arg1)->operator <<(arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ostream___lshift____SWIG_11(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_ostream< char > *arg1 = (std::basic_ostream< char > *) 0 ;
  unsigned long long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::basic_ostream< char,std::char_traits< char > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ostream___lshift__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ostream___lshift__" "', argument " "1"" of type '" "std::basic_ostream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ostream< char > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long_SS_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ostream___lshift__" "', argument " "2"" of type '" "unsigned long long""'");
  } 
  arg2 = static_cast< unsigned long long >(val2);
  result = (std::basic_ostream< char,std::char_traits< char > > *) &(arg1)->operator <<(arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ostream___lshift____SWIG_12(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_ostream< char > *arg1 = (std::basic_ostream< char > *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::basic_ostream< char,std::char_traits< char > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ostream___lshift__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ostream___lshift__" "', argument " "1"" of type '" "std::basic_ostream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ostream< char > * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ostream___lshift__" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  result = (std::basic_ostream< char,std::char_traits< char > > *) &(arg1)->operator <<(arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ostream___lshift____SWIG_13(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_ostream< char > *arg1 = (std::basic_ostream< char > *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::basic_ostream< char,std::char_traits< char > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ostream___lshift__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ostream___lshift__" "', argument " "1"" of type '" "std::basic_ostream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ostream< char > * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ostream___lshift__" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  result = (std::basic_ostream< char,std::char_traits< char > > *) &(arg1)->operator <<(arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ostream___lshift____SWIG_14(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_ostream< char > *arg1 = (std::basic_ostream< char > *) 0 ;
  long double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::basic_ostream< char,std::char_traits< char > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ostream___lshift__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ostream___lshift__" "', argument " "1"" of type '" "std::basic_ostream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ostream< char > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_long_double,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ostream___lshift__" "', argument " "2"" of type '" "long double""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ostream___lshift__" "', argument " "2"" of type '" "long double""'");
    } else {
      long double * temp = reinterpret_cast< long double * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  result = (std::basic_ostream< char,std::char_traits< char > > *) &(arg1)->operator <<(arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ostream___lshift____SWIG_15(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_ostream< char > *arg1 = (std::basic_ostream< char > *) 0 ;
  void *arg2 = (void *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::basic_ostream< char,std::char_traits< char > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ostream___lshift__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ostream___lshift__" "', argument " "1"" of type '" "std::basic_ostream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ostream< char > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1,SWIG_as_voidptrptr(&arg2), 0, 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ostream___lshift__" "', argument " "2"" of type '" "void const *""'"); 
  }
  result = (std::basic_ostream< char,std::char_traits< char > > *) &(arg1)->operator <<((void const *)arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ostream___lshift____SWIG_16(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_ostream< char > *arg1 = (std::basic_ostream< char > *) 0 ;
  std::basic_streambuf< char,std::char_traits< char > > *arg2 = (std::basic_streambuf< char,std::char_traits< char > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::basic_ostream< char,std::char_traits< char > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ostream___lshift__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ostream___lshift__" "', argument " "1"" of type '" "std::basic_ostream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ostream< char > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_std__basic_streambufT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ostream___lshift__" "', argument " "2"" of type '" "std::basic_streambuf< char,std::char_traits< char > > *""'"); 
  }
  arg2 = reinterpret_cast< std::basic_streambuf< char,std::char_traits< char > > * >(argp2);
  result = (std::basic_ostream< char,std::char_traits< char > > *) &(arg1)->operator <<(arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ostream___lshift____SWIG_17(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_ostream< char > *arg1 = (std::basic_ostream< char > *) 0 ;
  std::basic_string< char,std::char_traits< char >,std::allocator< char > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::basic_ostream< char,std::char_traits< char > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ostream___lshift__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ostream___lshift__" "', argument " "1"" of type '" "std::basic_ostream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ostream< char > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ostream___lshift__" "', argument " "2"" of type '" "std::basic_string< char,std::char_traits< char >,std::allocator< char > > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ostream___lshift__" "', argument " "2"" of type '" "std::basic_string< char,std::char_traits< char >,std::allocator< char > > const &""'"); 
  }
  arg2 = reinterpret_cast< std::basic_string< char,std::char_traits< char >,std::allocator< char > > * >(argp2);
  result = (std::basic_ostream< char,std::char_traits< char > > *) &std_basic_ostream_Sl_char_Sg__operator_Sl__Sl___SWIG_17(arg1,(std::basic_string< char,std::char_traits< char >,std::allocator< char > > const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ostream___lshift__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *ptr = 0;
      int res = SWIG_ConvertFunctionPtr(argv[1], &ptr, SWIGTYPE_p_f_r_std__basic_ostream__char_std__char_traits__char______r_std__basic_ostreamT_char_std__char_traitsT_char_t_t);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ostream___lshift____SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *ptr = 0;
      int res = SWIG_ConvertFunctionPtr(argv[1], &ptr, SWIGTYPE_p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_iosT_char_std__char_traitsT_char_t_t);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ostream___lshift____SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *ptr = 0;
      int res = SWIG_ConvertFunctionPtr(argv[1], &ptr, SWIGTYPE_p_f_r_std__ios_base__r_std__ios_base);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ostream___lshift____SWIG_2(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_long_double, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ostream___lshift____SWIG_14(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__basic_streambufT_char_std__char_traitsT_char_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ostream___lshift____SWIG_16(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ostream___lshift____SWIG_17(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *ptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &ptr, 0, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ostream___lshift____SWIG_15(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_short(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ostream___lshift____SWIG_7(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_short(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ostream___lshift____SWIG_6(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ostream___lshift____SWIG_9(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ostream___lshift____SWIG_8(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ostream___lshift____SWIG_4(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ostream___lshift____SWIG_3(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_long_SS_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ostream___lshift____SWIG_11(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_long_SS_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ostream___lshift____SWIG_10(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_float(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ostream___lshift____SWIG_13(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ostream___lshift____SWIG_12(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ostream___lshift____SWIG_5(self, args);
      }
    }
  }
  
fail:
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_ostream_put(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_ostream< char > *arg1 = (std::basic_ostream< char > *) 0 ;
  std::basic_ostream< char >::char_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::basic_ostream< char,std::char_traits< char > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ostream_put",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ostream_put" "', argument " "1"" of type '" "std::basic_ostream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ostream< char > * >(argp1);
  ecode2 = SWIG_AsVal_char(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ostream_put" "', argument " "2"" of type '" "std::basic_ostream< char >::char_type""'");
  } 
  arg2 = static_cast< std::basic_ostream< char >::char_type >(val2);
  result = (std::basic_ostream< char,std::char_traits< char > > *) &(arg1)->put(arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ostream_write(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_ostream< char > *arg1 = (std::basic_ostream< char > *) 0 ;
  std::basic_ostream< char >::char_type *arg2 = (std::basic_ostream< char >::char_type *) 0 ;
  std::streamsize arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::basic_ostream< char,std::char_traits< char > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ostream_write",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ostream_write" "', argument " "1"" of type '" "std::basic_ostream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ostream< char > * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ostream_write" "', argument " "2"" of type '" "std::basic_ostream< char >::char_type const *""'");
  }
  arg2 = reinterpret_cast< std::basic_ostream< char >::char_type * >(buf2);
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ostream_write" "', argument " "3"" of type '" "std::streamsize""'");
  } 
  arg3 = static_cast< std::streamsize >(val3);
  result = (std::basic_ostream< char,std::char_traits< char > > *) &(arg1)->write((std::basic_ostream< char >::char_type const *)arg2,arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ostream_flush(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_ostream< char > *arg1 = (std::basic_ostream< char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::basic_ostream< char,std::char_traits< char > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ostream_flush",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ostream_flush" "', argument " "1"" of type '" "std::basic_ostream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ostream< char > * >(argp1);
  result = (std::basic_ostream< char,std::char_traits< char > > *) &(arg1)->flush();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ostream_tellp(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_ostream< char > *arg1 = (std::basic_ostream< char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::basic_ostream< char >::pos_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ostream_tellp",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ostream_tellp" "', argument " "1"" of type '" "std::basic_ostream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ostream< char > * >(argp1);
  result = (arg1)->tellp();
  resultobj = SWIG_NewPointerObj((new std::basic_ostream< char >::pos_type(static_cast< const std::basic_ostream< char >::pos_type& >(result))), SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t__pos_type, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ostream_seekp__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_ostream< char > *arg1 = (std::basic_ostream< char > *) 0 ;
  std::basic_ostream< char >::pos_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::basic_ostream< char,std::char_traits< char > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ostream_seekp",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ostream_seekp" "', argument " "1"" of type '" "std::basic_ostream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ostream< char > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t__pos_type,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ostream_seekp" "', argument " "2"" of type '" "std::basic_ostream< char >::pos_type""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ostream_seekp" "', argument " "2"" of type '" "std::basic_ostream< char >::pos_type""'");
    } else {
      std::basic_ostream< char >::pos_type * temp = reinterpret_cast< std::basic_ostream< char >::pos_type * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  result = (std::basic_ostream< char,std::char_traits< char > > *) &(arg1)->seekp(arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ostream_seekp__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_ostream< char > *arg1 = (std::basic_ostream< char > *) 0 ;
  std::basic_ostream< char >::off_type arg2 ;
  std::ios_base::seekdir arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::basic_ostream< char,std::char_traits< char > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ostream_seekp",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ostream_seekp" "', argument " "1"" of type '" "std::basic_ostream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ostream< char > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t__off_type,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ostream_seekp" "', argument " "2"" of type '" "std::basic_ostream< char >::off_type""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ostream_seekp" "', argument " "2"" of type '" "std::basic_ostream< char >::off_type""'");
    } else {
      std::basic_ostream< char >::off_type * temp = reinterpret_cast< std::basic_ostream< char >::off_type * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ostream_seekp" "', argument " "3"" of type '" "std::ios_base::seekdir""'");
  } 
  arg3 = static_cast< std::ios_base::seekdir >(val3);
  result = (std::basic_ostream< char,std::char_traits< char > > *) &(arg1)->seekp(arg2,arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ostream_seekp(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t__pos_type, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ostream_seekp__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t__off_type, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_ostream_seekp__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ostream_seekp'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    seekp(std::basic_ostream< char > *,std::basic_ostream< char >::pos_type)\n"
    "    seekp(std::basic_ostream< char > *,std::basic_ostream< char >::off_type,std::ios_base::seekdir)\n");
  return NULL;
}


SWIGINTERN PyObject *ostream_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_istream(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_streambuf< char,std::char_traits< char > > *arg1 = (std::basic_streambuf< char,std::char_traits< char > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::basic_istream< char > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_istream",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_streambufT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_istream" "', argument " "1"" of type '" "std::basic_streambuf< char,std::char_traits< char > > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_streambuf< char,std::char_traits< char > > * >(argp1);
  result = (std::basic_istream< char > *)new std::basic_istream< char >(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_istream(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_istream< char > *arg1 = (std::basic_istream< char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_istream",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_istream" "', argument " "1"" of type '" "std::basic_istream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_istream< char > * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_istream___rshift____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_istream< char > *arg1 = (std::basic_istream< char > *) 0 ;
  std::basic_istream< char,std::char_traits< char > > &(*arg2)(std::basic_istream< char,std::char_traits< char > > &) = (std::basic_istream< char,std::char_traits< char > > &(*)(std::basic_istream< char,std::char_traits< char > > &)) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::basic_istream< char,std::char_traits< char > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:istream___rshift__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "istream___rshift__" "', argument " "1"" of type '" "std::basic_istream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_istream< char > * >(argp1);
  {
    int res = SWIG_ConvertFunctionPtr(obj1, (void**)(&arg2), SWIGTYPE_p_f_r_std__basic_istream__char_std__char_traits__char______r_std__basic_istreamT_char_std__char_traitsT_char_t_t);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "istream___rshift__" "', argument " "2"" of type '" "std::basic_istream< char,std::char_traits< char > > &(*)(std::basic_istream< char,std::char_traits< char > > &)""'"); 
    }
  }
  result = (std::basic_istream< char,std::char_traits< char > > *) &(arg1)->operator >>(arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_istream___rshift____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_istream< char > *arg1 = (std::basic_istream< char > *) 0 ;
  std::basic_ios< char,std::char_traits< char > > &(*arg2)(std::basic_ios< char,std::char_traits< char > > &) = (std::basic_ios< char,std::char_traits< char > > &(*)(std::basic_ios< char,std::char_traits< char > > &)) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::basic_istream< char,std::char_traits< char > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:istream___rshift__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "istream___rshift__" "', argument " "1"" of type '" "std::basic_istream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_istream< char > * >(argp1);
  {
    int res = SWIG_ConvertFunctionPtr(obj1, (void**)(&arg2), SWIGTYPE_p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_iosT_char_std__char_traitsT_char_t_t);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "istream___rshift__" "', argument " "2"" of type '" "std::basic_ios< char,std::char_traits< char > > &(*)(std::basic_ios< char,std::char_traits< char > > &)""'"); 
    }
  }
  result = (std::basic_istream< char,std::char_traits< char > > *) &(arg1)->operator >>(arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_istream___rshift____SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_istream< char > *arg1 = (std::basic_istream< char > *) 0 ;
  std::ios_base &(*arg2)(std::ios_base &) = (std::ios_base &(*)(std::ios_base &)) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::basic_istream< char,std::char_traits< char > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:istream___rshift__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "istream___rshift__" "', argument " "1"" of type '" "std::basic_istream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_istream< char > * >(argp1);
  {
    int res = SWIG_ConvertFunctionPtr(obj1, (void**)(&arg2), SWIGTYPE_p_f_r_std__ios_base__r_std__ios_base);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "istream___rshift__" "', argument " "2"" of type '" "std::ios_base &(*)(std::ios_base &)""'"); 
    }
  }
  result = (std::basic_istream< char,std::char_traits< char > > *) &(arg1)->operator >>(arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_istream___rshift____SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_istream< char > *arg1 = (std::basic_istream< char > *) 0 ;
  bool *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::basic_istream< char,std::char_traits< char > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:istream___rshift__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "istream___rshift__" "', argument " "1"" of type '" "std::basic_istream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_istream< char > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_bool,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "istream___rshift__" "', argument " "2"" of type '" "bool &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "istream___rshift__" "', argument " "2"" of type '" "bool &""'"); 
  }
  arg2 = reinterpret_cast< bool * >(argp2);
  result = (std::basic_istream< char,std::char_traits< char > > *) &(arg1)->operator >>(*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_istream___rshift____SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_istream< char > *arg1 = (std::basic_istream< char > *) 0 ;
  short *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::basic_istream< char,std::char_traits< char > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:istream___rshift__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "istream___rshift__" "', argument " "1"" of type '" "std::basic_istream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_istream< char > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_short,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "istream___rshift__" "', argument " "2"" of type '" "short &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "istream___rshift__" "', argument " "2"" of type '" "short &""'"); 
  }
  arg2 = reinterpret_cast< short * >(argp2);
  result = (std::basic_istream< char,std::char_traits< char > > *) &(arg1)->operator >>(*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_istream___rshift____SWIG_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_istream< char > *arg1 = (std::basic_istream< char > *) 0 ;
  unsigned short *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::basic_istream< char,std::char_traits< char > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:istream___rshift__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "istream___rshift__" "', argument " "1"" of type '" "std::basic_istream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_istream< char > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_unsigned_short,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "istream___rshift__" "', argument " "2"" of type '" "unsigned short &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "istream___rshift__" "', argument " "2"" of type '" "unsigned short &""'"); 
  }
  arg2 = reinterpret_cast< unsigned short * >(argp2);
  result = (std::basic_istream< char,std::char_traits< char > > *) &(arg1)->operator >>(*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_istream___rshift____SWIG_6(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_istream< char > *arg1 = (std::basic_istream< char > *) 0 ;
  int *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::basic_istream< char,std::char_traits< char > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:istream___rshift__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "istream___rshift__" "', argument " "1"" of type '" "std::basic_istream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_istream< char > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_int,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "istream___rshift__" "', argument " "2"" of type '" "int &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "istream___rshift__" "', argument " "2"" of type '" "int &""'"); 
  }
  arg2 = reinterpret_cast< int * >(argp2);
  result = (std::basic_istream< char,std::char_traits< char > > *) &(arg1)->operator >>(*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_istream___rshift____SWIG_7(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_istream< char > *arg1 = (std::basic_istream< char > *) 0 ;
  unsigned int *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::basic_istream< char,std::char_traits< char > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:istream___rshift__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "istream___rshift__" "', argument " "1"" of type '" "std::basic_istream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_istream< char > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_unsigned_int,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "istream___rshift__" "', argument " "2"" of type '" "unsigned int &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "istream___rshift__" "', argument " "2"" of type '" "unsigned int &""'"); 
  }
  arg2 = reinterpret_cast< unsigned int * >(argp2);
  result = (std::basic_istream< char,std::char_traits< char > > *) &(arg1)->operator >>(*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_istream___rshift____SWIG_8(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_istream< char > *arg1 = (std::basic_istream< char > *) 0 ;
  long *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::basic_istream< char,std::char_traits< char > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:istream___rshift__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "istream___rshift__" "', argument " "1"" of type '" "std::basic_istream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_istream< char > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_long,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "istream___rshift__" "', argument " "2"" of type '" "long &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "istream___rshift__" "', argument " "2"" of type '" "long &""'"); 
  }
  arg2 = reinterpret_cast< long * >(argp2);
  result = (std::basic_istream< char,std::char_traits< char > > *) &(arg1)->operator >>(*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_istream___rshift____SWIG_9(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_istream< char > *arg1 = (std::basic_istream< char > *) 0 ;
  unsigned long *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::basic_istream< char,std::char_traits< char > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:istream___rshift__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "istream___rshift__" "', argument " "1"" of type '" "std::basic_istream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_istream< char > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_unsigned_long,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "istream___rshift__" "', argument " "2"" of type '" "unsigned long &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "istream___rshift__" "', argument " "2"" of type '" "unsigned long &""'"); 
  }
  arg2 = reinterpret_cast< unsigned long * >(argp2);
  result = (std::basic_istream< char,std::char_traits< char > > *) &(arg1)->operator >>(*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_istream___rshift____SWIG_10(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_istream< char > *arg1 = (std::basic_istream< char > *) 0 ;
  long long *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::basic_istream< char,std::char_traits< char > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:istream___rshift__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "istream___rshift__" "', argument " "1"" of type '" "std::basic_istream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_istream< char > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_long_long,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "istream___rshift__" "', argument " "2"" of type '" "long long &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "istream___rshift__" "', argument " "2"" of type '" "long long &""'"); 
  }
  arg2 = reinterpret_cast< long long * >(argp2);
  result = (std::basic_istream< char,std::char_traits< char > > *) &(arg1)->operator >>(*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_istream___rshift____SWIG_11(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_istream< char > *arg1 = (std::basic_istream< char > *) 0 ;
  unsigned long long *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::basic_istream< char,std::char_traits< char > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:istream___rshift__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "istream___rshift__" "', argument " "1"" of type '" "std::basic_istream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_istream< char > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_unsigned_long_long,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "istream___rshift__" "', argument " "2"" of type '" "unsigned long long &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "istream___rshift__" "', argument " "2"" of type '" "unsigned long long &""'"); 
  }
  arg2 = reinterpret_cast< unsigned long long * >(argp2);
  result = (std::basic_istream< char,std::char_traits< char > > *) &(arg1)->operator >>(*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_istream___rshift____SWIG_12(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_istream< char > *arg1 = (std::basic_istream< char > *) 0 ;
  float *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::basic_istream< char,std::char_traits< char > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:istream___rshift__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "istream___rshift__" "', argument " "1"" of type '" "std::basic_istream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_istream< char > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_float,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "istream___rshift__" "', argument " "2"" of type '" "float &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "istream___rshift__" "', argument " "2"" of type '" "float &""'"); 
  }
  arg2 = reinterpret_cast< float * >(argp2);
  result = (std::basic_istream< char,std::char_traits< char > > *) &(arg1)->operator >>(*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_istream___rshift____SWIG_13(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_istream< char > *arg1 = (std::basic_istream< char > *) 0 ;
  double *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::basic_istream< char,std::char_traits< char > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:istream___rshift__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "istream___rshift__" "', argument " "1"" of type '" "std::basic_istream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_istream< char > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_double,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "istream___rshift__" "', argument " "2"" of type '" "double &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "istream___rshift__" "', argument " "2"" of type '" "double &""'"); 
  }
  arg2 = reinterpret_cast< double * >(argp2);
  result = (std::basic_istream< char,std::char_traits< char > > *) &(arg1)->operator >>(*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_istream___rshift____SWIG_14(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_istream< char > *arg1 = (std::basic_istream< char > *) 0 ;
  long double *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::basic_istream< char,std::char_traits< char > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:istream___rshift__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "istream___rshift__" "', argument " "1"" of type '" "std::basic_istream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_istream< char > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_long_double,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "istream___rshift__" "', argument " "2"" of type '" "long double &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "istream___rshift__" "', argument " "2"" of type '" "long double &""'"); 
  }
  arg2 = reinterpret_cast< long double * >(argp2);
  result = (std::basic_istream< char,std::char_traits< char > > *) &(arg1)->operator >>(*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_istream___rshift____SWIG_15(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_istream< char > *arg1 = (std::basic_istream< char > *) 0 ;
  void **arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::basic_istream< char,std::char_traits< char > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:istream___rshift__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "istream___rshift__" "', argument " "1"" of type '" "std::basic_istream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_istream< char > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_p_void,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "istream___rshift__" "', argument " "2"" of type '" "void *&""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "istream___rshift__" "', argument " "2"" of type '" "void *&""'"); 
  }
  arg2 = reinterpret_cast< void ** >(argp2);
  result = (std::basic_istream< char,std::char_traits< char > > *) &(arg1)->operator >>(*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_istream___rshift____SWIG_16(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_istream< char > *arg1 = (std::basic_istream< char > *) 0 ;
  std::basic_streambuf< char,std::char_traits< char > > *arg2 = (std::basic_streambuf< char,std::char_traits< char > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::basic_istream< char,std::char_traits< char > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:istream___rshift__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "istream___rshift__" "', argument " "1"" of type '" "std::basic_istream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_istream< char > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_std__basic_streambufT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "istream___rshift__" "', argument " "2"" of type '" "std::basic_streambuf< char,std::char_traits< char > > *""'"); 
  }
  arg2 = reinterpret_cast< std::basic_streambuf< char,std::char_traits< char > > * >(argp2);
  result = (std::basic_istream< char,std::char_traits< char > > *) &(arg1)->operator >>(arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_istream___rshift__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *ptr = 0;
      int res = SWIG_ConvertFunctionPtr(argv[1], &ptr, SWIGTYPE_p_f_r_std__basic_istream__char_std__char_traits__char______r_std__basic_istreamT_char_std__char_traitsT_char_t_t);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_istream___rshift____SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *ptr = 0;
      int res = SWIG_ConvertFunctionPtr(argv[1], &ptr, SWIGTYPE_p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_iosT_char_std__char_traitsT_char_t_t);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_istream___rshift____SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *ptr = 0;
      int res = SWIG_ConvertFunctionPtr(argv[1], &ptr, SWIGTYPE_p_f_r_std__ios_base__r_std__ios_base);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_istream___rshift____SWIG_2(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_bool, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_istream___rshift____SWIG_3(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_short, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_istream___rshift____SWIG_4(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_unsigned_short, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_istream___rshift____SWIG_5(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_int, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_istream___rshift____SWIG_6(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_unsigned_int, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_istream___rshift____SWIG_7(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_long, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_istream___rshift____SWIG_8(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_unsigned_long, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_istream___rshift____SWIG_9(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_long_long, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_istream___rshift____SWIG_10(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_unsigned_long_long, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_istream___rshift____SWIG_11(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_float, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_istream___rshift____SWIG_12(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_double, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_istream___rshift____SWIG_13(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_long_double, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_istream___rshift____SWIG_14(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_p_void, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_istream___rshift____SWIG_15(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__basic_streambufT_char_std__char_traitsT_char_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_istream___rshift____SWIG_16(self, args);
      }
    }
  }
  
fail:
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_istream_gcount(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_istream< char > *arg1 = (std::basic_istream< char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::streamsize result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:istream_gcount",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "istream_gcount" "', argument " "1"" of type '" "std::basic_istream< char > const *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_istream< char > * >(argp1);
  result = ((std::basic_istream< char > const *)arg1)->gcount();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_istream_get__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_istream< char > *arg1 = (std::basic_istream< char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::basic_istream< char >::int_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:istream_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "istream_get" "', argument " "1"" of type '" "std::basic_istream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_istream< char > * >(argp1);
  result = (std::basic_istream< char >::int_type)(arg1)->get();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_istream_get__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_istream< char > *arg1 = (std::basic_istream< char > *) 0 ;
  std::basic_istream< char >::char_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::basic_istream< char,std::char_traits< char > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:istream_get",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "istream_get" "', argument " "1"" of type '" "std::basic_istream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_istream< char > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t__char_type,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "istream_get" "', argument " "2"" of type '" "std::basic_istream< char >::char_type &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "istream_get" "', argument " "2"" of type '" "std::basic_istream< char >::char_type &""'"); 
  }
  arg2 = reinterpret_cast< std::basic_istream< char >::char_type * >(argp2);
  result = (std::basic_istream< char,std::char_traits< char > > *) &(arg1)->get(*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_istream_get__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_istream< char > *arg1 = (std::basic_istream< char > *) 0 ;
  std::basic_istream< char >::char_type *arg2 = (std::basic_istream< char >::char_type *) 0 ;
  std::streamsize arg3 ;
  std::basic_istream< char >::char_type arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  char val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  std::basic_istream< char,std::char_traits< char > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:istream_get",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "istream_get" "', argument " "1"" of type '" "std::basic_istream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_istream< char > * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "istream_get" "', argument " "2"" of type '" "std::basic_istream< char >::char_type *""'");
  }
  arg2 = reinterpret_cast< std::basic_istream< char >::char_type * >(buf2);
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "istream_get" "', argument " "3"" of type '" "std::streamsize""'");
  } 
  arg3 = static_cast< std::streamsize >(val3);
  ecode4 = SWIG_AsVal_char(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "istream_get" "', argument " "4"" of type '" "std::basic_istream< char >::char_type""'");
  } 
  arg4 = static_cast< std::basic_istream< char >::char_type >(val4);
  result = (std::basic_istream< char,std::char_traits< char > > *) &(arg1)->get(arg2,arg3,arg4);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_istream_get__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_istream< char > *arg1 = (std::basic_istream< char > *) 0 ;
  std::basic_istream< char >::char_type *arg2 = (std::basic_istream< char >::char_type *) 0 ;
  std::streamsize arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::basic_istream< char,std::char_traits< char > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:istream_get",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "istream_get" "', argument " "1"" of type '" "std::basic_istream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_istream< char > * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "istream_get" "', argument " "2"" of type '" "std::basic_istream< char >::char_type *""'");
  }
  arg2 = reinterpret_cast< std::basic_istream< char >::char_type * >(buf2);
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "istream_get" "', argument " "3"" of type '" "std::streamsize""'");
  } 
  arg3 = static_cast< std::streamsize >(val3);
  result = (std::basic_istream< char,std::char_traits< char > > *) &(arg1)->get(arg2,arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_istream_get__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_istream< char > *arg1 = (std::basic_istream< char > *) 0 ;
  std::basic_streambuf< char,std::char_traits< char > > *arg2 = 0 ;
  std::basic_istream< char >::char_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  char val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::basic_istream< char,std::char_traits< char > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:istream_get",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "istream_get" "', argument " "1"" of type '" "std::basic_istream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_istream< char > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__basic_streambufT_char_std__char_traitsT_char_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "istream_get" "', argument " "2"" of type '" "std::basic_streambuf< char,std::char_traits< char > > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "istream_get" "', argument " "2"" of type '" "std::basic_streambuf< char,std::char_traits< char > > &""'"); 
  }
  arg2 = reinterpret_cast< std::basic_streambuf< char,std::char_traits< char > > * >(argp2);
  ecode3 = SWIG_AsVal_char(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "istream_get" "', argument " "3"" of type '" "std::basic_istream< char >::char_type""'");
  } 
  arg3 = static_cast< std::basic_istream< char >::char_type >(val3);
  result = (std::basic_istream< char,std::char_traits< char > > *) &(arg1)->get(*arg2,arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_istream_get__SWIG_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_istream< char > *arg1 = (std::basic_istream< char > *) 0 ;
  std::basic_streambuf< char,std::char_traits< char > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::basic_istream< char,std::char_traits< char > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:istream_get",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "istream_get" "', argument " "1"" of type '" "std::basic_istream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_istream< char > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__basic_streambufT_char_std__char_traitsT_char_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "istream_get" "', argument " "2"" of type '" "std::basic_streambuf< char,std::char_traits< char > > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "istream_get" "', argument " "2"" of type '" "std::basic_streambuf< char,std::char_traits< char > > &""'"); 
  }
  arg2 = reinterpret_cast< std::basic_streambuf< char,std::char_traits< char > > * >(argp2);
  result = (std::basic_istream< char,std::char_traits< char > > *) &(arg1)->get(*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_istream_get(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 4); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_istream_get__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t__char_type, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_istream_get__SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__basic_streambufT_char_std__char_traitsT_char_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_istream_get__SWIG_5(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__basic_streambufT_char_std__char_traitsT_char_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_char(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_istream_get__SWIG_4(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_istream_get__SWIG_3(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_char(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_istream_get__SWIG_2(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'istream_get'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    get(std::basic_istream< char > *)\n"
    "    get(std::basic_istream< char > *,std::basic_istream< char >::char_type &)\n"
    "    get(std::basic_istream< char > *,std::basic_istream< char >::char_type *,std::streamsize,std::basic_istream< char >::char_type)\n"
    "    get(std::basic_istream< char > *,std::basic_istream< char >::char_type *,std::streamsize)\n"
    "    get(std::basic_istream< char > *,std::basic_streambuf< char,std::char_traits< char > > &,std::basic_istream< char >::char_type)\n"
    "    get(std::basic_istream< char > *,std::basic_streambuf< char,std::char_traits< char > > &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_istream_getline__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_istream< char > *arg1 = (std::basic_istream< char > *) 0 ;
  std::basic_istream< char >::char_type *arg2 = (std::basic_istream< char >::char_type *) 0 ;
  std::streamsize arg3 ;
  std::basic_istream< char >::char_type arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  char val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  std::basic_istream< char,std::char_traits< char > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:istream_getline",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "istream_getline" "', argument " "1"" of type '" "std::basic_istream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_istream< char > * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "istream_getline" "', argument " "2"" of type '" "std::basic_istream< char >::char_type *""'");
  }
  arg2 = reinterpret_cast< std::basic_istream< char >::char_type * >(buf2);
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "istream_getline" "', argument " "3"" of type '" "std::streamsize""'");
  } 
  arg3 = static_cast< std::streamsize >(val3);
  ecode4 = SWIG_AsVal_char(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "istream_getline" "', argument " "4"" of type '" "std::basic_istream< char >::char_type""'");
  } 
  arg4 = static_cast< std::basic_istream< char >::char_type >(val4);
  result = (std::basic_istream< char,std::char_traits< char > > *) &(arg1)->getline(arg2,arg3,arg4);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_istream_getline__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_istream< char > *arg1 = (std::basic_istream< char > *) 0 ;
  std::basic_istream< char >::char_type *arg2 = (std::basic_istream< char >::char_type *) 0 ;
  std::streamsize arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::basic_istream< char,std::char_traits< char > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:istream_getline",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "istream_getline" "', argument " "1"" of type '" "std::basic_istream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_istream< char > * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "istream_getline" "', argument " "2"" of type '" "std::basic_istream< char >::char_type *""'");
  }
  arg2 = reinterpret_cast< std::basic_istream< char >::char_type * >(buf2);
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "istream_getline" "', argument " "3"" of type '" "std::streamsize""'");
  } 
  arg3 = static_cast< std::streamsize >(val3);
  result = (std::basic_istream< char,std::char_traits< char > > *) &(arg1)->getline(arg2,arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_istream_getline(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 4); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_istream_getline__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_char(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_istream_getline__SWIG_0(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'istream_getline'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    getline(std::basic_istream< char > *,std::basic_istream< char >::char_type *,std::streamsize,std::basic_istream< char >::char_type)\n"
    "    getline(std::basic_istream< char > *,std::basic_istream< char >::char_type *,std::streamsize)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_istream_ignore__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_istream< char > *arg1 = (std::basic_istream< char > *) 0 ;
  std::streamsize arg2 ;
  std::basic_istream< char >::int_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::basic_istream< char,std::char_traits< char > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:istream_ignore",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "istream_ignore" "', argument " "1"" of type '" "std::basic_istream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_istream< char > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "istream_ignore" "', argument " "2"" of type '" "std::streamsize""'");
  } 
  arg2 = static_cast< std::streamsize >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "istream_ignore" "', argument " "3"" of type '" "std::basic_istream< char >::int_type""'");
  } 
  arg3 = static_cast< std::basic_istream< char >::int_type >(val3);
  result = (std::basic_istream< char,std::char_traits< char > > *) &(arg1)->ignore(arg2,arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_istream_ignore__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_istream< char > *arg1 = (std::basic_istream< char > *) 0 ;
  std::streamsize arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::basic_istream< char,std::char_traits< char > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:istream_ignore",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "istream_ignore" "', argument " "1"" of type '" "std::basic_istream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_istream< char > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "istream_ignore" "', argument " "2"" of type '" "std::streamsize""'");
  } 
  arg2 = static_cast< std::streamsize >(val2);
  result = (std::basic_istream< char,std::char_traits< char > > *) &(arg1)->ignore(arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_istream_ignore__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_istream< char > *arg1 = (std::basic_istream< char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::basic_istream< char,std::char_traits< char > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:istream_ignore",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "istream_ignore" "', argument " "1"" of type '" "std::basic_istream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_istream< char > * >(argp1);
  result = (std::basic_istream< char,std::char_traits< char > > *) &(arg1)->ignore();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_istream_ignore(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_istream_ignore__SWIG_2(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_istream_ignore__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_istream_ignore__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'istream_ignore'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ignore(std::basic_istream< char > *,std::streamsize,std::basic_istream< char >::int_type)\n"
    "    ignore(std::basic_istream< char > *,std::streamsize)\n"
    "    ignore(std::basic_istream< char > *)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_istream_peek(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_istream< char > *arg1 = (std::basic_istream< char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::basic_istream< char >::int_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:istream_peek",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "istream_peek" "', argument " "1"" of type '" "std::basic_istream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_istream< char > * >(argp1);
  result = (std::basic_istream< char >::int_type)(arg1)->peek();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_istream_read(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_istream< char > *arg1 = (std::basic_istream< char > *) 0 ;
  std::basic_istream< char >::char_type *arg2 = (std::basic_istream< char >::char_type *) 0 ;
  std::streamsize arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::basic_istream< char,std::char_traits< char > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:istream_read",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "istream_read" "', argument " "1"" of type '" "std::basic_istream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_istream< char > * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "istream_read" "', argument " "2"" of type '" "std::basic_istream< char >::char_type *""'");
  }
  arg2 = reinterpret_cast< std::basic_istream< char >::char_type * >(buf2);
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "istream_read" "', argument " "3"" of type '" "std::streamsize""'");
  } 
  arg3 = static_cast< std::streamsize >(val3);
  result = (std::basic_istream< char,std::char_traits< char > > *) &(arg1)->read(arg2,arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_istream_readsome(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_istream< char > *arg1 = (std::basic_istream< char > *) 0 ;
  std::basic_istream< char >::char_type *arg2 = (std::basic_istream< char >::char_type *) 0 ;
  std::streamsize arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::streamsize result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:istream_readsome",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "istream_readsome" "', argument " "1"" of type '" "std::basic_istream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_istream< char > * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "istream_readsome" "', argument " "2"" of type '" "std::basic_istream< char >::char_type *""'");
  }
  arg2 = reinterpret_cast< std::basic_istream< char >::char_type * >(buf2);
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "istream_readsome" "', argument " "3"" of type '" "std::streamsize""'");
  } 
  arg3 = static_cast< std::streamsize >(val3);
  result = (arg1)->readsome(arg2,arg3);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_istream_putback(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_istream< char > *arg1 = (std::basic_istream< char > *) 0 ;
  std::basic_istream< char >::char_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::basic_istream< char,std::char_traits< char > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:istream_putback",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "istream_putback" "', argument " "1"" of type '" "std::basic_istream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_istream< char > * >(argp1);
  ecode2 = SWIG_AsVal_char(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "istream_putback" "', argument " "2"" of type '" "std::basic_istream< char >::char_type""'");
  } 
  arg2 = static_cast< std::basic_istream< char >::char_type >(val2);
  result = (std::basic_istream< char,std::char_traits< char > > *) &(arg1)->putback(arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_istream_unget(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_istream< char > *arg1 = (std::basic_istream< char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::basic_istream< char,std::char_traits< char > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:istream_unget",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "istream_unget" "', argument " "1"" of type '" "std::basic_istream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_istream< char > * >(argp1);
  result = (std::basic_istream< char,std::char_traits< char > > *) &(arg1)->unget();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_istream_sync(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_istream< char > *arg1 = (std::basic_istream< char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:istream_sync",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "istream_sync" "', argument " "1"" of type '" "std::basic_istream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_istream< char > * >(argp1);
  result = (int)(arg1)->sync();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_istream_tellg(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_istream< char > *arg1 = (std::basic_istream< char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::basic_istream< char >::pos_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:istream_tellg",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "istream_tellg" "', argument " "1"" of type '" "std::basic_istream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_istream< char > * >(argp1);
  result = (arg1)->tellg();
  resultobj = SWIG_NewPointerObj((new std::basic_istream< char >::pos_type(static_cast< const std::basic_istream< char >::pos_type& >(result))), SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t__pos_type, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_istream_seekg__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_istream< char > *arg1 = (std::basic_istream< char > *) 0 ;
  std::basic_istream< char >::pos_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::basic_istream< char,std::char_traits< char > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:istream_seekg",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "istream_seekg" "', argument " "1"" of type '" "std::basic_istream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_istream< char > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t__pos_type,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "istream_seekg" "', argument " "2"" of type '" "std::basic_istream< char >::pos_type""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "istream_seekg" "', argument " "2"" of type '" "std::basic_istream< char >::pos_type""'");
    } else {
      std::basic_istream< char >::pos_type * temp = reinterpret_cast< std::basic_istream< char >::pos_type * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  result = (std::basic_istream< char,std::char_traits< char > > *) &(arg1)->seekg(arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_istream_seekg__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_istream< char > *arg1 = (std::basic_istream< char > *) 0 ;
  std::basic_istream< char >::off_type arg2 ;
  std::ios_base::seekdir arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::basic_istream< char,std::char_traits< char > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:istream_seekg",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "istream_seekg" "', argument " "1"" of type '" "std::basic_istream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_istream< char > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t__off_type,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "istream_seekg" "', argument " "2"" of type '" "std::basic_istream< char >::off_type""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "istream_seekg" "', argument " "2"" of type '" "std::basic_istream< char >::off_type""'");
    } else {
      std::basic_istream< char >::off_type * temp = reinterpret_cast< std::basic_istream< char >::off_type * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "istream_seekg" "', argument " "3"" of type '" "std::ios_base::seekdir""'");
  } 
  arg3 = static_cast< std::ios_base::seekdir >(val3);
  result = (std::basic_istream< char,std::char_traits< char > > *) &(arg1)->seekg(arg2,arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_istream_seekg(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t__pos_type, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_istream_seekg__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t__off_type, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_istream_seekg__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'istream_seekg'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    seekg(std::basic_istream< char > *,std::basic_istream< char >::pos_type)\n"
    "    seekg(std::basic_istream< char > *,std::basic_istream< char >::off_type,std::ios_base::seekdir)\n");
  return NULL;
}


SWIGINTERN PyObject *istream_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_iostream(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_streambuf< char,std::char_traits< char > > *arg1 = (std::basic_streambuf< char,std::char_traits< char > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::basic_iostream< char > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_iostream",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_streambufT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_iostream" "', argument " "1"" of type '" "std::basic_streambuf< char,std::char_traits< char > > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_streambuf< char,std::char_traits< char > > * >(argp1);
  result = (std::basic_iostream< char > *)new std::basic_iostream< char >(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_iostreamT_char_std__char_traitsT_char_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_iostream(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_iostream< char > *arg1 = (std::basic_iostream< char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_iostream",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_iostreamT_char_std__char_traitsT_char_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_iostream" "', argument " "1"" of type '" "std::basic_iostream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_iostream< char > * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *iostream_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__basic_iostreamT_char_std__char_traitsT_char_t_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_endl(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_ostream< char,std::char_traits< char > > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::basic_ostream< char,std::char_traits< char > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:endl",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "endl" "', argument " "1"" of type '" "std::basic_ostream< char,std::char_traits< char > > &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "endl" "', argument " "1"" of type '" "std::basic_ostream< char,std::char_traits< char > > &""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ostream< char,std::char_traits< char > > * >(argp1);
  result = (std::basic_ostream< char,std::char_traits< char > > *) &std::SWIGTEMPLATEDISAMBIGUATOR endl< char,std::char_traits< char > >(*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ends(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_ostream< char,std::char_traits< char > > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::basic_ostream< char,std::char_traits< char > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ends",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ends" "', argument " "1"" of type '" "std::basic_ostream< char,std::char_traits< char > > &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ends" "', argument " "1"" of type '" "std::basic_ostream< char,std::char_traits< char > > &""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ostream< char,std::char_traits< char > > * >(argp1);
  result = (std::basic_ostream< char,std::char_traits< char > > *) &std::SWIGTEMPLATEDISAMBIGUATOR ends< char,std::char_traits< char > >(*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_flush(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_ostream< char,std::char_traits< char > > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::basic_ostream< char,std::char_traits< char > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:flush",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "flush" "', argument " "1"" of type '" "std::basic_ostream< char,std::char_traits< char > > &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "flush" "', argument " "1"" of type '" "std::basic_ostream< char,std::char_traits< char > > &""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ostream< char,std::char_traits< char > > * >(argp1);
  result = (std::basic_ostream< char,std::char_traits< char > > *) &std::SWIGTEMPLATEDISAMBIGUATOR flush< char,std::char_traits< char > >(*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_SwigPyIterator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_SwigPyIterator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_SwigPyIterator" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_value(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SwigPyIterator_value",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_value" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  try {
    result = (PyObject *)((swig::SwigPyIterator const *)arg1)->value();
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_incr__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SwigPyIterator_incr",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_incr" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwigPyIterator_incr" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  try {
    result = (swig::SwigPyIterator *)(arg1)->incr(arg2);
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_incr__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SwigPyIterator_incr",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_incr" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  try {
    result = (swig::SwigPyIterator *)(arg1)->incr();
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_incr(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__SwigPyIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_SwigPyIterator_incr__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__SwigPyIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_SwigPyIterator_incr__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'SwigPyIterator_incr'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    incr(swig::SwigPyIterator *,size_t)\n"
    "    incr(swig::SwigPyIterator *)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_decr__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SwigPyIterator_decr",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_decr" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwigPyIterator_decr" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  try {
    result = (swig::SwigPyIterator *)(arg1)->decr(arg2);
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_decr__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SwigPyIterator_decr",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_decr" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  try {
    result = (swig::SwigPyIterator *)(arg1)->decr();
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_decr(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__SwigPyIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_SwigPyIterator_decr__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__SwigPyIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_SwigPyIterator_decr__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'SwigPyIterator_decr'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    decr(swig::SwigPyIterator *,size_t)\n"
    "    decr(swig::SwigPyIterator *)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_distance(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  swig::SwigPyIterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ptrdiff_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SwigPyIterator_distance",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_distance" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_swig__SwigPyIterator,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SwigPyIterator_distance" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SwigPyIterator_distance" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  arg2 = reinterpret_cast< swig::SwigPyIterator * >(argp2);
  try {
    result = ((swig::SwigPyIterator const *)arg1)->distance((swig::SwigPyIterator const &)*arg2);
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_From_ptrdiff_t(static_cast< ptrdiff_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_equal(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  swig::SwigPyIterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SwigPyIterator_equal",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_equal" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_swig__SwigPyIterator,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SwigPyIterator_equal" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SwigPyIterator_equal" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  arg2 = reinterpret_cast< swig::SwigPyIterator * >(argp2);
  try {
    result = (bool)((swig::SwigPyIterator const *)arg1)->equal((swig::SwigPyIterator const &)*arg2);
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_copy(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SwigPyIterator_copy",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_copy" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  result = (swig::SwigPyIterator *)((swig::SwigPyIterator const *)arg1)->copy();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_next(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SwigPyIterator_next",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_next" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  try {
    result = (PyObject *)(arg1)->next();
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___next__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SwigPyIterator___next__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___next__" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  try {
    result = (PyObject *)(arg1)->__next__();
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_previous(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SwigPyIterator_previous",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_previous" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  try {
    result = (PyObject *)(arg1)->previous();
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_advance(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  ptrdiff_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SwigPyIterator_advance",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_advance" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwigPyIterator_advance" "', argument " "2"" of type '" "ptrdiff_t""'");
  } 
  arg2 = static_cast< ptrdiff_t >(val2);
  try {
    result = (swig::SwigPyIterator *)(arg1)->advance(arg2);
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___eq__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  swig::SwigPyIterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SwigPyIterator___eq__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___eq__" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_swig__SwigPyIterator,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SwigPyIterator___eq__" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SwigPyIterator___eq__" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  arg2 = reinterpret_cast< swig::SwigPyIterator * >(argp2);
  result = (bool)((swig::SwigPyIterator const *)arg1)->operator ==((swig::SwigPyIterator const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___ne__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  swig::SwigPyIterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SwigPyIterator___ne__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___ne__" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_swig__SwigPyIterator,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SwigPyIterator___ne__" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SwigPyIterator___ne__" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  arg2 = reinterpret_cast< swig::SwigPyIterator * >(argp2);
  result = (bool)((swig::SwigPyIterator const *)arg1)->operator !=((swig::SwigPyIterator const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___iadd__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  ptrdiff_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SwigPyIterator___iadd__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___iadd__" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwigPyIterator___iadd__" "', argument " "2"" of type '" "ptrdiff_t""'");
  } 
  arg2 = static_cast< ptrdiff_t >(val2);
  try {
    result = (swig::SwigPyIterator *) &(arg1)->operator +=(arg2);
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___isub__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  ptrdiff_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SwigPyIterator___isub__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___isub__" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwigPyIterator___isub__" "', argument " "2"" of type '" "ptrdiff_t""'");
  } 
  arg2 = static_cast< ptrdiff_t >(val2);
  try {
    result = (swig::SwigPyIterator *) &(arg1)->operator -=(arg2);
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___add__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  ptrdiff_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SwigPyIterator___add__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___add__" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwigPyIterator___add__" "', argument " "2"" of type '" "ptrdiff_t""'");
  } 
  arg2 = static_cast< ptrdiff_t >(val2);
  try {
    result = (swig::SwigPyIterator *)((swig::SwigPyIterator const *)arg1)->operator +(arg2);
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___sub____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  ptrdiff_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SwigPyIterator___sub__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___sub__" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwigPyIterator___sub__" "', argument " "2"" of type '" "ptrdiff_t""'");
  } 
  arg2 = static_cast< ptrdiff_t >(val2);
  try {
    result = (swig::SwigPyIterator *)((swig::SwigPyIterator const *)arg1)->operator -(arg2);
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___sub____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  swig::SwigPyIterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ptrdiff_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SwigPyIterator___sub__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___sub__" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_swig__SwigPyIterator,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SwigPyIterator___sub__" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SwigPyIterator___sub__" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  arg2 = reinterpret_cast< swig::SwigPyIterator * >(argp2);
  result = ((swig::SwigPyIterator const *)arg1)->operator -((swig::SwigPyIterator const &)*arg2);
  resultobj = SWIG_From_ptrdiff_t(static_cast< ptrdiff_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___sub__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__SwigPyIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_swig__SwigPyIterator, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_SwigPyIterator___sub____SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__SwigPyIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_SwigPyIterator___sub____SWIG_0(self, args);
      }
    }
  }
  
fail:
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *SwigPyIterator_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_swig__SwigPyIterator, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_pairii__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::pair< int,int > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_pairii")) SWIG_fail;
  result = (std::pair< int,int > *)new std::pair< int,int >();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__pairT_int_int_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_pairii__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::pair< int,int > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_pairii",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_pairii" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_pairii" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (std::pair< int,int > *)new std::pair< int,int >(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__pairT_int_int_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_pairii__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::pair< int,int > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  std::pair< int,int > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_pairii",&obj0)) SWIG_fail;
  {
    std::pair<int,int > *ptr = (std::pair<int,int > *)0;
    res1 = swig::asptr(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_pairii" "', argument " "1"" of type '" "std::pair< int,int > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_pairii" "', argument " "1"" of type '" "std::pair< int,int > const &""'"); 
    }
    arg1 = ptr;
  }
  result = (std::pair< int,int > *)new std::pair< int,int >((std::pair< int,int > const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__pairT_int_int_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_pairii(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_pairii__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::pair<int,int >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_pairii__SWIG_2(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_pairii__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_pairii'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::pair< int,int >()\n"
    "    std::pair< int,int >(int,int)\n"
    "    std::pair< int,int >(std::pair< int,int > const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_pairii_first_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::pair< int,int > *arg1 = (std::pair< int,int > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:pairii_first_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__pairT_int_int_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pairii_first_set" "', argument " "1"" of type '" "std::pair< int,int > *""'"); 
  }
  arg1 = reinterpret_cast< std::pair< int,int > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "pairii_first_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->first = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pairii_first_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::pair< int,int > *arg1 = (std::pair< int,int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:pairii_first_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__pairT_int_int_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pairii_first_get" "', argument " "1"" of type '" "std::pair< int,int > *""'"); 
  }
  arg1 = reinterpret_cast< std::pair< int,int > * >(argp1);
  result = (int) ((arg1)->first);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pairii_second_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::pair< int,int > *arg1 = (std::pair< int,int > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:pairii_second_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__pairT_int_int_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pairii_second_set" "', argument " "1"" of type '" "std::pair< int,int > *""'"); 
  }
  arg1 = reinterpret_cast< std::pair< int,int > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "pairii_second_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->second = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pairii_second_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::pair< int,int > *arg1 = (std::pair< int,int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:pairii_second_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__pairT_int_int_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pairii_second_get" "', argument " "1"" of type '" "std::pair< int,int > *""'"); 
  }
  arg1 = reinterpret_cast< std::pair< int,int > * >(argp1);
  result = (int) ((arg1)->second);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_pairii(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::pair< int,int > *arg1 = (std::pair< int,int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_pairii",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__pairT_int_int_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_pairii" "', argument " "1"" of type '" "std::pair< int,int > *""'"); 
  }
  arg1 = reinterpret_cast< std::pair< int,int > * >(argp1);
  {
    try {
      delete arg1;
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *pairii_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__pairT_int_int_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_vectord_iterator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  PyObject **arg2 = (PyObject **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  arg2 = &obj0;
  if (!PyArg_ParseTuple(args,(char *)"O:vectord_iterator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectord_iterator" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  result = (swig::SwigPyIterator *)std_vector_Sl_double_Sg__iterator(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectord___nonzero__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vectord___nonzero__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectord___nonzero__" "', argument " "1"" of type '" "std::vector< double > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  result = (bool)std_vector_Sl_double_Sg____nonzero__((std::vector< double > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectord___bool__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vectord___bool__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectord___bool__" "', argument " "1"" of type '" "std::vector< double > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  result = (bool)std_vector_Sl_double_Sg____bool__((std::vector< double > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectord___len__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< double >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vectord___len__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectord___len__" "', argument " "1"" of type '" "std::vector< double > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  result = std_vector_Sl_double_Sg____len__((std::vector< double > const *)arg1);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectord_pop(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< double >::value_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vectord_pop",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectord_pop" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  try {
    result = (std::vector< double >::value_type)std_vector_Sl_double_Sg__pop(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectord___getslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::difference_type arg2 ;
  std::vector< double >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< double,std::allocator< double > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:vectord___getslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectord___getslice__" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vectord___getslice__" "', argument " "2"" of type '" "std::vector< double >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< double >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vectord___getslice__" "', argument " "3"" of type '" "std::vector< double >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< double >::difference_type >(val3);
  try {
    result = (std::vector< double,std::allocator< double > > *)std_vector_Sl_double_Sg____getslice__(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectord___setslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::difference_type arg2 ;
  std::vector< double >::difference_type arg3 ;
  std::vector< double,std::allocator< double > > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:vectord___setslice__",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectord___setslice__" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vectord___setslice__" "', argument " "2"" of type '" "std::vector< double >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< double >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vectord___setslice__" "', argument " "3"" of type '" "std::vector< double >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< double >::difference_type >(val3);
  {
    std::vector<double,std::allocator< double > > *ptr = (std::vector<double,std::allocator< double > > *)0;
    res4 = swig::asptr(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "vectord___setslice__" "', argument " "4"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vectord___setslice__" "', argument " "4"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    arg4 = ptr;
  }
  try {
    std_vector_Sl_double_Sg____setslice__(arg1,arg2,arg3,(std::vector< double,std::allocator< double > > const &)*arg4);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectord___delslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::difference_type arg2 ;
  std::vector< double >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:vectord___delslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectord___delslice__" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vectord___delslice__" "', argument " "2"" of type '" "std::vector< double >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< double >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vectord___delslice__" "', argument " "3"" of type '" "std::vector< double >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< double >::difference_type >(val3);
  try {
    std_vector_Sl_double_Sg____delslice__(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectord___delitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:vectord___delitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectord___delitem__" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vectord___delitem__" "', argument " "2"" of type '" "std::vector< double >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< double >::difference_type >(val2);
  try {
    std_vector_Sl_double_Sg____delitem____SWIG_0(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectord___getitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< double,std::allocator< double > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:vectord___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectord___getitem__" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  {
    arg2 = (PySliceObject *) obj1;
  }
  try {
    result = (std::vector< double,std::allocator< double > > *)std_vector_Sl_double_Sg____getitem____SWIG_0(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectord___setitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  std::vector< double,std::allocator< double > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:vectord___setitem__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectord___setitem__" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  {
    arg2 = (PySliceObject *) obj1;
  }
  {
    std::vector<double,std::allocator< double > > *ptr = (std::vector<double,std::allocator< double > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "vectord___setitem__" "', argument " "3"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vectord___setitem__" "', argument " "3"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    arg3 = ptr;
  }
  try {
    std_vector_Sl_double_Sg____setitem____SWIG_0(arg1,arg2,(std::vector< double,std::allocator< double > > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectord___delitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:vectord___delitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectord___delitem__" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  {
    arg2 = (PySliceObject *) obj1;
  }
  try {
    std_vector_Sl_double_Sg____delitem____SWIG_1(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectord___delitem__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<double,std::allocator< double > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_vectord___delitem____SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<double,std::allocator< double > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_vectord___delitem____SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'vectord___delitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    __delitem__(std::vector< double > *,std::vector< double >::difference_type)\n"
    "    __delitem__(std::vector< double > *,PySliceObject *)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectord___getitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< double >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:vectord___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectord___getitem__" "', argument " "1"" of type '" "std::vector< double > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vectord___getitem__" "', argument " "2"" of type '" "std::vector< double >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< double >::difference_type >(val2);
  try {
    result = (std::vector< double >::value_type *) &std_vector_Sl_double_Sg____getitem____SWIG_1((std::vector< double > const *)arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_From_double(static_cast< double >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectord___getitem__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<double,std::allocator< double > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_vectord___getitem____SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<double,std::allocator< double > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_vectord___getitem____SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'vectord___getitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    __getitem__(std::vector< double > *,PySliceObject *)\n"
    "    __getitem__(std::vector< double > const *,std::vector< double >::difference_type)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectord___setitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::difference_type arg2 ;
  std::vector< double >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  std::vector< double >::value_type temp3 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:vectord___setitem__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectord___setitem__" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vectord___setitem__" "', argument " "2"" of type '" "std::vector< double >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< double >::difference_type >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vectord___setitem__" "', argument " "3"" of type '" "std::vector< double >::value_type""'");
  } 
  temp3 = static_cast< std::vector< double >::value_type >(val3);
  arg3 = &temp3;
  try {
    std_vector_Sl_double_Sg____setitem____SWIG_1(arg1,arg2,(double const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectord___setitem__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<double,std::allocator< double > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector<double,std::allocator< double > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_vectord___setitem____SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<double,std::allocator< double > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_vectord___setitem____SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'vectord___setitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    __setitem__(std::vector< double > *,PySliceObject *,std::vector< double,std::allocator< double > > const &)\n"
    "    __setitem__(std::vector< double > *,std::vector< double >::difference_type,std::vector< double >::value_type const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectord_append(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< double >::value_type temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:vectord_append",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectord_append" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vectord_append" "', argument " "2"" of type '" "std::vector< double >::value_type""'");
  } 
  temp2 = static_cast< std::vector< double >::value_type >(val2);
  arg2 = &temp2;
  std_vector_Sl_double_Sg__append(arg1,(double const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_vectord__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_vectord")) SWIG_fail;
  result = (std::vector< double > *)new std::vector< double >();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_vectord__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  std::vector< double > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_vectord",&obj0)) SWIG_fail;
  {
    std::vector<double,std::allocator< double > > *ptr = (std::vector<double,std::allocator< double > > *)0;
    res1 = swig::asptr(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_vectord" "', argument " "1"" of type '" "std::vector< double > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_vectord" "', argument " "1"" of type '" "std::vector< double > const &""'"); 
    }
    arg1 = ptr;
  }
  result = (std::vector< double > *)new std::vector< double >((std::vector< double > const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectord_empty(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vectord_empty",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectord_empty" "', argument " "1"" of type '" "std::vector< double > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  result = (bool)((std::vector< double > const *)arg1)->empty();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectord_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< double >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vectord_size",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectord_size" "', argument " "1"" of type '" "std::vector< double > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  result = ((std::vector< double > const *)arg1)->size();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectord_clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vectord_clear",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectord_clear" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  (arg1)->clear();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectord_swap(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:vectord_swap",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectord_swap" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "vectord_swap" "', argument " "2"" of type '" "std::vector< double > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vectord_swap" "', argument " "2"" of type '" "std::vector< double > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< double > * >(argp2);
  (arg1)->swap(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectord_get_allocator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::allocator< double > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vectord_get_allocator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectord_get_allocator" "', argument " "1"" of type '" "std::vector< double > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  result = ((std::vector< double > const *)arg1)->get_allocator();
  resultobj = SWIG_NewPointerObj((new std::vector< double >::allocator_type(static_cast< const std::vector< double >::allocator_type& >(result))), SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t__allocator_type, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectord_begin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< double >::const_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vectord_begin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectord_begin" "', argument " "1"" of type '" "std::vector< double > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  result = ((std::vector< double > const *)arg1)->begin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< double >::const_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectord_end(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< double >::const_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vectord_end",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectord_end" "', argument " "1"" of type '" "std::vector< double > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  result = ((std::vector< double > const *)arg1)->end();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< double >::const_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectord_rbegin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< double >::const_reverse_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vectord_rbegin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectord_rbegin" "', argument " "1"" of type '" "std::vector< double > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  result = ((std::vector< double > const *)arg1)->rbegin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< double >::const_reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectord_rend(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< double >::const_reverse_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vectord_rend",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectord_rend" "', argument " "1"" of type '" "std::vector< double > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  result = ((std::vector< double > const *)arg1)->rend();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< double >::const_reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_vectord__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double >::size_type arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< double > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_vectord",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_vectord" "', argument " "1"" of type '" "std::vector< double >::size_type""'");
  } 
  arg1 = static_cast< std::vector< double >::size_type >(val1);
  result = (std::vector< double > *)new std::vector< double >(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectord_pop_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vectord_pop_back",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectord_pop_back" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  (arg1)->pop_back();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectord_resize__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:vectord_resize",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectord_resize" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vectord_resize" "', argument " "2"" of type '" "std::vector< double >::size_type""'");
  } 
  arg2 = static_cast< std::vector< double >::size_type >(val2);
  (arg1)->resize(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectord_erase__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::iterator arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< double >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:vectord_erase",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectord_erase" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vectord_erase" "', argument " "2"" of type '" "std::vector< double >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< double >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< double >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vectord_erase" "', argument " "2"" of type '" "std::vector< double >::iterator""'");
    }
  }
  result = (arg1)->erase(arg2);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< double >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectord_erase__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::iterator arg2 ;
  std::vector< double >::iterator arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  swig::SwigPyIterator *iter3 = 0 ;
  int res3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< double >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:vectord_erase",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectord_erase" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vectord_erase" "', argument " "2"" of type '" "std::vector< double >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< double >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< double >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vectord_erase" "', argument " "2"" of type '" "std::vector< double >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(obj2, SWIG_as_voidptrptr(&iter3), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res3) || !iter3) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vectord_erase" "', argument " "3"" of type '" "std::vector< double >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< double >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< double >::iterator > *>(iter3);
    if (iter_t) {
      arg3 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vectord_erase" "', argument " "3"" of type '" "std::vector< double >::iterator""'");
    }
  }
  result = (arg1)->erase(arg2,arg3);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< double >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectord_erase(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<double,std::allocator< double > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< double >::iterator > *>(iter) != 0));
      if (_v) {
        return _wrap_vectord_erase__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<double,std::allocator< double > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< double >::iterator > *>(iter) != 0));
      if (_v) {
        swig::SwigPyIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[2], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< double >::iterator > *>(iter) != 0));
        if (_v) {
          return _wrap_vectord_erase__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'vectord_erase'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    erase(std::vector< double > *,std::vector< double >::iterator)\n"
    "    erase(std::vector< double > *,std::vector< double >::iterator,std::vector< double >::iterator)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_vectord__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double >::size_type arg1 ;
  std::vector< double >::value_type *arg2 = 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  std::vector< double >::value_type temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< double > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_vectord",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_vectord" "', argument " "1"" of type '" "std::vector< double >::size_type""'");
  } 
  arg1 = static_cast< std::vector< double >::size_type >(val1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_vectord" "', argument " "2"" of type '" "std::vector< double >::value_type""'");
  } 
  temp2 = static_cast< std::vector< double >::value_type >(val2);
  arg2 = &temp2;
  result = (std::vector< double > *)new std::vector< double >(arg1,(std::vector< double >::value_type const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_vectord(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_vectord__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_vectord__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<double,std::allocator< double > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_vectord__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_vectord__SWIG_3(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_vectord'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< double >()\n"
    "    std::vector< double >(std::vector< double > const &)\n"
    "    std::vector< double >(std::vector< double >::size_type)\n"
    "    std::vector< double >(std::vector< double >::size_type,std::vector< double >::value_type const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectord_push_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< double >::value_type temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:vectord_push_back",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectord_push_back" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vectord_push_back" "', argument " "2"" of type '" "std::vector< double >::value_type""'");
  } 
  temp2 = static_cast< std::vector< double >::value_type >(val2);
  arg2 = &temp2;
  (arg1)->push_back((std::vector< double >::value_type const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectord_front(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< double >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vectord_front",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectord_front" "', argument " "1"" of type '" "std::vector< double > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  result = (std::vector< double >::value_type *) &((std::vector< double > const *)arg1)->front();
  resultobj = SWIG_From_double(static_cast< double >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectord_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< double >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vectord_back",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectord_back" "', argument " "1"" of type '" "std::vector< double > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  result = (std::vector< double >::value_type *) &((std::vector< double > const *)arg1)->back();
  resultobj = SWIG_From_double(static_cast< double >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectord_assign(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::size_type arg2 ;
  std::vector< double >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  std::vector< double >::value_type temp3 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:vectord_assign",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectord_assign" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vectord_assign" "', argument " "2"" of type '" "std::vector< double >::size_type""'");
  } 
  arg2 = static_cast< std::vector< double >::size_type >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vectord_assign" "', argument " "3"" of type '" "std::vector< double >::value_type""'");
  } 
  temp3 = static_cast< std::vector< double >::value_type >(val3);
  arg3 = &temp3;
  (arg1)->assign(arg2,(std::vector< double >::value_type const &)*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectord_resize__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::size_type arg2 ;
  std::vector< double >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  std::vector< double >::value_type temp3 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:vectord_resize",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectord_resize" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vectord_resize" "', argument " "2"" of type '" "std::vector< double >::size_type""'");
  } 
  arg2 = static_cast< std::vector< double >::size_type >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vectord_resize" "', argument " "3"" of type '" "std::vector< double >::value_type""'");
  } 
  temp3 = static_cast< std::vector< double >::value_type >(val3);
  arg3 = &temp3;
  (arg1)->resize(arg2,(std::vector< double >::value_type const &)*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectord_resize(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<double,std::allocator< double > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_vectord_resize__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<double,std::allocator< double > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_vectord_resize__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'vectord_resize'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    resize(std::vector< double > *,std::vector< double >::size_type)\n"
    "    resize(std::vector< double > *,std::vector< double >::size_type,std::vector< double >::value_type const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectord_insert__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::iterator arg2 ;
  std::vector< double >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  std::vector< double >::value_type temp3 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< double >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:vectord_insert",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectord_insert" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vectord_insert" "', argument " "2"" of type '" "std::vector< double >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< double >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< double >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vectord_insert" "', argument " "2"" of type '" "std::vector< double >::iterator""'");
    }
  }
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vectord_insert" "', argument " "3"" of type '" "std::vector< double >::value_type""'");
  } 
  temp3 = static_cast< std::vector< double >::value_type >(val3);
  arg3 = &temp3;
  result = (arg1)->insert(arg2,(std::vector< double >::value_type const &)*arg3);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< double >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectord_insert__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::iterator arg2 ;
  std::vector< double >::size_type arg3 ;
  std::vector< double >::value_type *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  size_t val3 ;
  int ecode3 = 0 ;
  std::vector< double >::value_type temp4 ;
  double val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:vectord_insert",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectord_insert" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vectord_insert" "', argument " "2"" of type '" "std::vector< double >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< double >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< double >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vectord_insert" "', argument " "2"" of type '" "std::vector< double >::iterator""'");
    }
  }
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vectord_insert" "', argument " "3"" of type '" "std::vector< double >::size_type""'");
  } 
  arg3 = static_cast< std::vector< double >::size_type >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "vectord_insert" "', argument " "4"" of type '" "std::vector< double >::value_type""'");
  } 
  temp4 = static_cast< std::vector< double >::value_type >(val4);
  arg4 = &temp4;
  (arg1)->insert(arg2,arg3,(std::vector< double >::value_type const &)*arg4);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectord_insert(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 4); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<double,std::allocator< double > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< double >::iterator > *>(iter) != 0));
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_vectord_insert__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<double,std::allocator< double > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< double >::iterator > *>(iter) != 0));
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_vectord_insert__SWIG_1(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'vectord_insert'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    insert(std::vector< double > *,std::vector< double >::iterator,std::vector< double >::value_type const &)\n"
    "    insert(std::vector< double > *,std::vector< double >::iterator,std::vector< double >::size_type,std::vector< double >::value_type const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectord_reserve(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:vectord_reserve",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectord_reserve" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vectord_reserve" "', argument " "2"" of type '" "std::vector< double >::size_type""'");
  } 
  arg2 = static_cast< std::vector< double >::size_type >(val2);
  (arg1)->reserve(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectord_capacity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< double >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vectord_capacity",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectord_capacity" "', argument " "1"" of type '" "std::vector< double > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  result = ((std::vector< double > const *)arg1)->capacity();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_vectord(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_vectord",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_vectord" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  {
    try {
      delete arg1;
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *vectord_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_vectorddd_iterator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< std::vector< double > > > *arg1 = (std::vector< std::vector< std::vector< double > > > *) 0 ;
  PyObject **arg2 = (PyObject **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  arg2 = &obj0;
  if (!PyArg_ParseTuple(args,(char *)"O:vectorddd_iterator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t_std__allocatorT_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorddd_iterator" "', argument " "1"" of type '" "std::vector< std::vector< std::vector< double > > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< std::vector< double > > > * >(argp1);
  result = (swig::SwigPyIterator *)std_vector_Sl_std_vector_Sl_std_vector_Sl_double_Sg__Sg__Sg__iterator(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorddd___nonzero__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< std::vector< double > > > *arg1 = (std::vector< std::vector< std::vector< double > > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vectorddd___nonzero__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t_std__allocatorT_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorddd___nonzero__" "', argument " "1"" of type '" "std::vector< std::vector< std::vector< double > > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< std::vector< double > > > * >(argp1);
  result = (bool)std_vector_Sl_std_vector_Sl_std_vector_Sl_double_Sg__Sg__Sg____nonzero__((std::vector< std::vector< std::vector< double > > > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorddd___bool__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< std::vector< double > > > *arg1 = (std::vector< std::vector< std::vector< double > > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vectorddd___bool__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t_std__allocatorT_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorddd___bool__" "', argument " "1"" of type '" "std::vector< std::vector< std::vector< double > > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< std::vector< double > > > * >(argp1);
  result = (bool)std_vector_Sl_std_vector_Sl_std_vector_Sl_double_Sg__Sg__Sg____bool__((std::vector< std::vector< std::vector< double > > > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorddd___len__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< std::vector< double > > > *arg1 = (std::vector< std::vector< std::vector< double > > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::vector< std::vector< double > > >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vectorddd___len__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t_std__allocatorT_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorddd___len__" "', argument " "1"" of type '" "std::vector< std::vector< std::vector< double > > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< std::vector< double > > > * >(argp1);
  result = std_vector_Sl_std_vector_Sl_std_vector_Sl_double_Sg__Sg__Sg____len__((std::vector< std::vector< std::vector< double > > > const *)arg1);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorddd_pop(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< std::vector< double > > > *arg1 = (std::vector< std::vector< std::vector< double > > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vectorddd_pop",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t_std__allocatorT_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorddd_pop" "', argument " "1"" of type '" "std::vector< std::vector< std::vector< double > > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< std::vector< double > > > * >(argp1);
  try {
    result = std_vector_Sl_std_vector_Sl_std_vector_Sl_double_Sg__Sg__Sg__pop(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_NewPointerObj((new std::vector< std::vector< std::vector< double > > >::value_type(static_cast< const std::vector< std::vector< std::vector< double > > >::value_type& >(result))), SWIGTYPE_p_std__vectorT_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t_std__allocatorT_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t_t_t__value_type, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorddd___getslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< std::vector< double > > > *arg1 = (std::vector< std::vector< std::vector< double > > > *) 0 ;
  std::vector< std::vector< std::vector< double > > >::difference_type arg2 ;
  std::vector< std::vector< std::vector< double > > >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > >,std::allocator< std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:vectorddd___getslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t_std__allocatorT_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorddd___getslice__" "', argument " "1"" of type '" "std::vector< std::vector< std::vector< double > > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< std::vector< double > > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vectorddd___getslice__" "', argument " "2"" of type '" "std::vector< std::vector< std::vector< double > > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::vector< std::vector< double > > >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vectorddd___getslice__" "', argument " "3"" of type '" "std::vector< std::vector< std::vector< double > > >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< std::vector< std::vector< double > > >::difference_type >(val3);
  try {
    result = (std::vector< std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > >,std::allocator< std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > > > *)std_vector_Sl_std_vector_Sl_std_vector_Sl_double_Sg__Sg__Sg____getslice__(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t_std__allocatorT_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorddd___setslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< std::vector< double > > > *arg1 = (std::vector< std::vector< std::vector< double > > > *) 0 ;
  std::vector< std::vector< std::vector< double > > >::difference_type arg2 ;
  std::vector< std::vector< std::vector< double > > >::difference_type arg3 ;
  std::vector< std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > >,std::allocator< std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > > > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:vectorddd___setslice__",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t_std__allocatorT_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorddd___setslice__" "', argument " "1"" of type '" "std::vector< std::vector< std::vector< double > > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< std::vector< double > > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vectorddd___setslice__" "', argument " "2"" of type '" "std::vector< std::vector< std::vector< double > > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::vector< std::vector< double > > >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vectorddd___setslice__" "', argument " "3"" of type '" "std::vector< std::vector< std::vector< double > > >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< std::vector< std::vector< double > > >::difference_type >(val3);
  {
    std::vector<std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > >,std::allocator< std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > > > *ptr = (std::vector<std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > >,std::allocator< std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > > > *)0;
    res4 = swig::asptr(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "vectorddd___setslice__" "', argument " "4"" of type '" "std::vector< std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > >,std::allocator< std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vectorddd___setslice__" "', argument " "4"" of type '" "std::vector< std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > >,std::allocator< std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > > > const &""'"); 
    }
    arg4 = ptr;
  }
  try {
    std_vector_Sl_std_vector_Sl_std_vector_Sl_double_Sg__Sg__Sg____setslice__(arg1,arg2,arg3,(std::vector< std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > >,std::allocator< std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > > > const &)*arg4);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorddd___delslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< std::vector< double > > > *arg1 = (std::vector< std::vector< std::vector< double > > > *) 0 ;
  std::vector< std::vector< std::vector< double > > >::difference_type arg2 ;
  std::vector< std::vector< std::vector< double > > >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:vectorddd___delslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t_std__allocatorT_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorddd___delslice__" "', argument " "1"" of type '" "std::vector< std::vector< std::vector< double > > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< std::vector< double > > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vectorddd___delslice__" "', argument " "2"" of type '" "std::vector< std::vector< std::vector< double > > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::vector< std::vector< double > > >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vectorddd___delslice__" "', argument " "3"" of type '" "std::vector< std::vector< std::vector< double > > >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< std::vector< std::vector< double > > >::difference_type >(val3);
  try {
    std_vector_Sl_std_vector_Sl_std_vector_Sl_double_Sg__Sg__Sg____delslice__(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorddd___delitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< std::vector< double > > > *arg1 = (std::vector< std::vector< std::vector< double > > > *) 0 ;
  std::vector< std::vector< std::vector< double > > >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:vectorddd___delitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t_std__allocatorT_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorddd___delitem__" "', argument " "1"" of type '" "std::vector< std::vector< std::vector< double > > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< std::vector< double > > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vectorddd___delitem__" "', argument " "2"" of type '" "std::vector< std::vector< std::vector< double > > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::vector< std::vector< double > > >::difference_type >(val2);
  try {
    std_vector_Sl_std_vector_Sl_std_vector_Sl_double_Sg__Sg__Sg____delitem____SWIG_0(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorddd___getitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< std::vector< double > > > *arg1 = (std::vector< std::vector< std::vector< double > > > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > >,std::allocator< std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:vectorddd___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t_std__allocatorT_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorddd___getitem__" "', argument " "1"" of type '" "std::vector< std::vector< std::vector< double > > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< std::vector< double > > > * >(argp1);
  {
    arg2 = (PySliceObject *) obj1;
  }
  try {
    result = (std::vector< std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > >,std::allocator< std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > > > *)std_vector_Sl_std_vector_Sl_std_vector_Sl_double_Sg__Sg__Sg____getitem____SWIG_0(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t_std__allocatorT_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorddd___setitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< std::vector< double > > > *arg1 = (std::vector< std::vector< std::vector< double > > > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  std::vector< std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > >,std::allocator< std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:vectorddd___setitem__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t_std__allocatorT_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorddd___setitem__" "', argument " "1"" of type '" "std::vector< std::vector< std::vector< double > > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< std::vector< double > > > * >(argp1);
  {
    arg2 = (PySliceObject *) obj1;
  }
  {
    std::vector<std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > >,std::allocator< std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > > > *ptr = (std::vector<std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > >,std::allocator< std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "vectorddd___setitem__" "', argument " "3"" of type '" "std::vector< std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > >,std::allocator< std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vectorddd___setitem__" "', argument " "3"" of type '" "std::vector< std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > >,std::allocator< std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > > > const &""'"); 
    }
    arg3 = ptr;
  }
  try {
    std_vector_Sl_std_vector_Sl_std_vector_Sl_double_Sg__Sg__Sg____setitem____SWIG_0(arg1,arg2,(std::vector< std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > >,std::allocator< std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > > > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorddd___delitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< std::vector< double > > > *arg1 = (std::vector< std::vector< std::vector< double > > > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:vectorddd___delitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t_std__allocatorT_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorddd___delitem__" "', argument " "1"" of type '" "std::vector< std::vector< std::vector< double > > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< std::vector< double > > > * >(argp1);
  {
    arg2 = (PySliceObject *) obj1;
  }
  try {
    std_vector_Sl_std_vector_Sl_std_vector_Sl_double_Sg__Sg__Sg____delitem____SWIG_1(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorddd___delitem__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > >,std::allocator< std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_vectorddd___delitem____SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > >,std::allocator< std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_vectorddd___delitem____SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'vectorddd___delitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    __delitem__(std::vector< std::vector< std::vector< double > > > *,std::vector< std::vector< std::vector< double > > >::difference_type)\n"
    "    __delitem__(std::vector< std::vector< std::vector< double > > > *,PySliceObject *)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorddd___getitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< std::vector< double > > > *arg1 = (std::vector< std::vector< std::vector< double > > > *) 0 ;
  std::vector< std::vector< std::vector< double > > >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< std::vector< std::vector< double > > >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:vectorddd___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t_std__allocatorT_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorddd___getitem__" "', argument " "1"" of type '" "std::vector< std::vector< std::vector< double > > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< std::vector< double > > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vectorddd___getitem__" "', argument " "2"" of type '" "std::vector< std::vector< std::vector< double > > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::vector< std::vector< double > > >::difference_type >(val2);
  try {
    result = (std::vector< std::vector< std::vector< double > > >::value_type *) &std_vector_Sl_std_vector_Sl_std_vector_Sl_double_Sg__Sg__Sg____getitem____SWIG_1((std::vector< std::vector< std::vector< double > > > const *)arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t_std__allocatorT_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t_t_t__value_type, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorddd___getitem__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > >,std::allocator< std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_vectorddd___getitem____SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > >,std::allocator< std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_vectorddd___getitem____SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'vectorddd___getitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    __getitem__(std::vector< std::vector< std::vector< double > > > *,PySliceObject *)\n"
    "    __getitem__(std::vector< std::vector< std::vector< double > > > const *,std::vector< std::vector< std::vector< double > > >::difference_type)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorddd___setitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< std::vector< double > > > *arg1 = (std::vector< std::vector< std::vector< double > > > *) 0 ;
  std::vector< std::vector< std::vector< double > > >::difference_type arg2 ;
  std::vector< std::vector< std::vector< double > > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:vectorddd___setitem__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t_std__allocatorT_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorddd___setitem__" "', argument " "1"" of type '" "std::vector< std::vector< std::vector< double > > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< std::vector< double > > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vectorddd___setitem__" "', argument " "2"" of type '" "std::vector< std::vector< std::vector< double > > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::vector< std::vector< double > > >::difference_type >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__vectorT_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t_std__allocatorT_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t_t_t__value_type,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "vectorddd___setitem__" "', argument " "3"" of type '" "std::vector< std::vector< std::vector< double > > >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vectorddd___setitem__" "', argument " "3"" of type '" "std::vector< std::vector< std::vector< double > > >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< std::vector< std::vector< double > > >::value_type * >(argp3);
  try {
    std_vector_Sl_std_vector_Sl_std_vector_Sl_double_Sg__Sg__Sg____setitem____SWIG_1(arg1,arg2,(std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorddd___setitem__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > >,std::allocator< std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector<std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > >,std::allocator< std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_vectorddd___setitem____SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > >,std::allocator< std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_std__vectorT_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t_std__allocatorT_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t_t_t__value_type, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_vectorddd___setitem____SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'vectorddd___setitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    __setitem__(std::vector< std::vector< std::vector< double > > > *,PySliceObject *,std::vector< std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > >,std::allocator< std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > > > const &)\n"
    "    __setitem__(std::vector< std::vector< std::vector< double > > > *,std::vector< std::vector< std::vector< double > > >::difference_type,std::vector< std::vector< std::vector< double > > >::value_type const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorddd_append(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< std::vector< double > > > *arg1 = (std::vector< std::vector< std::vector< double > > > *) 0 ;
  std::vector< std::vector< std::vector< double > > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:vectorddd_append",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t_std__allocatorT_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorddd_append" "', argument " "1"" of type '" "std::vector< std::vector< std::vector< double > > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< std::vector< double > > > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t_std__allocatorT_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t_t_t__value_type,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "vectorddd_append" "', argument " "2"" of type '" "std::vector< std::vector< std::vector< double > > >::value_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vectorddd_append" "', argument " "2"" of type '" "std::vector< std::vector< std::vector< double > > >::value_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< std::vector< std::vector< double > > >::value_type * >(argp2);
  std_vector_Sl_std_vector_Sl_std_vector_Sl_double_Sg__Sg__Sg__append(arg1,(std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_vectorddd__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< std::vector< double > > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_vectorddd")) SWIG_fail;
  result = (std::vector< std::vector< std::vector< double > > > *)new std::vector< std::vector< std::vector< double > > >();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t_std__allocatorT_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_vectorddd__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  std::vector< std::vector< std::vector< double > > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_vectorddd",&obj0)) SWIG_fail;
  {
    std::vector<std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > >,std::allocator< std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > > > *ptr = (std::vector<std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > >,std::allocator< std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > > > *)0;
    res1 = swig::asptr(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_vectorddd" "', argument " "1"" of type '" "std::vector< std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_vectorddd" "', argument " "1"" of type '" "std::vector< std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > > const &""'"); 
    }
    arg1 = ptr;
  }
  result = (std::vector< std::vector< std::vector< double > > > *)new std::vector< std::vector< std::vector< double > > >((std::vector< std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > > const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t_std__allocatorT_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t_t_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorddd_empty(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< std::vector< double > > > *arg1 = (std::vector< std::vector< std::vector< double > > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vectorddd_empty",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t_std__allocatorT_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorddd_empty" "', argument " "1"" of type '" "std::vector< std::vector< std::vector< double > > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< std::vector< double > > > * >(argp1);
  result = (bool)((std::vector< std::vector< std::vector< double > > > const *)arg1)->empty();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorddd_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< std::vector< double > > > *arg1 = (std::vector< std::vector< std::vector< double > > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::vector< std::vector< double > > >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vectorddd_size",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t_std__allocatorT_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorddd_size" "', argument " "1"" of type '" "std::vector< std::vector< std::vector< double > > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< std::vector< double > > > * >(argp1);
  result = ((std::vector< std::vector< std::vector< double > > > const *)arg1)->size();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorddd_clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< std::vector< double > > > *arg1 = (std::vector< std::vector< std::vector< double > > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vectorddd_clear",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t_std__allocatorT_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorddd_clear" "', argument " "1"" of type '" "std::vector< std::vector< std::vector< double > > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< std::vector< double > > > * >(argp1);
  (arg1)->clear();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorddd_swap(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< std::vector< double > > > *arg1 = (std::vector< std::vector< std::vector< double > > > *) 0 ;
  std::vector< std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:vectorddd_swap",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t_std__allocatorT_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorddd_swap" "', argument " "1"" of type '" "std::vector< std::vector< std::vector< double > > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< std::vector< double > > > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t_std__allocatorT_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "vectorddd_swap" "', argument " "2"" of type '" "std::vector< std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vectorddd_swap" "', argument " "2"" of type '" "std::vector< std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > > * >(argp2);
  (arg1)->swap(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorddd_get_allocator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< std::vector< double > > > *arg1 = (std::vector< std::vector< std::vector< double > > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::allocator< std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vectorddd_get_allocator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t_std__allocatorT_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorddd_get_allocator" "', argument " "1"" of type '" "std::vector< std::vector< std::vector< double > > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< std::vector< double > > > * >(argp1);
  result = ((std::vector< std::vector< std::vector< double > > > const *)arg1)->get_allocator();
  resultobj = SWIG_NewPointerObj((new std::vector< std::vector< std::vector< double > > >::allocator_type(static_cast< const std::vector< std::vector< std::vector< double > > >::allocator_type& >(result))), SWIGTYPE_p_std__vectorT_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t_std__allocatorT_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t_t_t__allocator_type, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorddd_begin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< std::vector< double > > > *arg1 = (std::vector< std::vector< std::vector< double > > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::vector< std::vector< double > > >::const_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vectorddd_begin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t_std__allocatorT_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorddd_begin" "', argument " "1"" of type '" "std::vector< std::vector< std::vector< double > > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< std::vector< double > > > * >(argp1);
  result = ((std::vector< std::vector< std::vector< double > > > const *)arg1)->begin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::vector< std::vector< double > > >::const_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorddd_end(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< std::vector< double > > > *arg1 = (std::vector< std::vector< std::vector< double > > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::vector< std::vector< double > > >::const_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vectorddd_end",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t_std__allocatorT_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorddd_end" "', argument " "1"" of type '" "std::vector< std::vector< std::vector< double > > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< std::vector< double > > > * >(argp1);
  result = ((std::vector< std::vector< std::vector< double > > > const *)arg1)->end();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::vector< std::vector< double > > >::const_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorddd_rbegin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< std::vector< double > > > *arg1 = (std::vector< std::vector< std::vector< double > > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::vector< std::vector< double > > >::const_reverse_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vectorddd_rbegin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t_std__allocatorT_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorddd_rbegin" "', argument " "1"" of type '" "std::vector< std::vector< std::vector< double > > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< std::vector< double > > > * >(argp1);
  result = ((std::vector< std::vector< std::vector< double > > > const *)arg1)->rbegin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::vector< std::vector< double > > >::const_reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorddd_rend(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< std::vector< double > > > *arg1 = (std::vector< std::vector< std::vector< double > > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::vector< std::vector< double > > >::const_reverse_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vectorddd_rend",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t_std__allocatorT_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorddd_rend" "', argument " "1"" of type '" "std::vector< std::vector< std::vector< double > > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< std::vector< double > > > * >(argp1);
  result = ((std::vector< std::vector< std::vector< double > > > const *)arg1)->rend();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::vector< std::vector< double > > >::const_reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_vectorddd__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< std::vector< double > > >::size_type arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::vector< std::vector< double > > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_vectorddd",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_vectorddd" "', argument " "1"" of type '" "std::vector< std::vector< std::vector< double > > >::size_type""'");
  } 
  arg1 = static_cast< std::vector< std::vector< std::vector< double > > >::size_type >(val1);
  result = (std::vector< std::vector< std::vector< double > > > *)new std::vector< std::vector< std::vector< double > > >(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t_std__allocatorT_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorddd_pop_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< std::vector< double > > > *arg1 = (std::vector< std::vector< std::vector< double > > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vectorddd_pop_back",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t_std__allocatorT_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorddd_pop_back" "', argument " "1"" of type '" "std::vector< std::vector< std::vector< double > > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< std::vector< double > > > * >(argp1);
  (arg1)->pop_back();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorddd_resize__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< std::vector< double > > > *arg1 = (std::vector< std::vector< std::vector< double > > > *) 0 ;
  std::vector< std::vector< std::vector< double > > >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:vectorddd_resize",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t_std__allocatorT_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorddd_resize" "', argument " "1"" of type '" "std::vector< std::vector< std::vector< double > > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< std::vector< double > > > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vectorddd_resize" "', argument " "2"" of type '" "std::vector< std::vector< std::vector< double > > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< std::vector< std::vector< double > > >::size_type >(val2);
  (arg1)->resize(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorddd_erase__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< std::vector< double > > > *arg1 = (std::vector< std::vector< std::vector< double > > > *) 0 ;
  std::vector< std::vector< std::vector< double > > >::iterator arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< std::vector< std::vector< double > > >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:vectorddd_erase",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t_std__allocatorT_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorddd_erase" "', argument " "1"" of type '" "std::vector< std::vector< std::vector< double > > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< std::vector< double > > > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vectorddd_erase" "', argument " "2"" of type '" "std::vector< std::vector< std::vector< double > > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< std::vector< std::vector< double > > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< std::vector< std::vector< double > > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vectorddd_erase" "', argument " "2"" of type '" "std::vector< std::vector< std::vector< double > > >::iterator""'");
    }
  }
  result = (arg1)->erase(arg2);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::vector< std::vector< double > > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorddd_erase__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< std::vector< double > > > *arg1 = (std::vector< std::vector< std::vector< double > > > *) 0 ;
  std::vector< std::vector< std::vector< double > > >::iterator arg2 ;
  std::vector< std::vector< std::vector< double > > >::iterator arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  swig::SwigPyIterator *iter3 = 0 ;
  int res3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< std::vector< std::vector< double > > >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:vectorddd_erase",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t_std__allocatorT_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorddd_erase" "', argument " "1"" of type '" "std::vector< std::vector< std::vector< double > > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< std::vector< double > > > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vectorddd_erase" "', argument " "2"" of type '" "std::vector< std::vector< std::vector< double > > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< std::vector< std::vector< double > > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< std::vector< std::vector< double > > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vectorddd_erase" "', argument " "2"" of type '" "std::vector< std::vector< std::vector< double > > >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(obj2, SWIG_as_voidptrptr(&iter3), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res3) || !iter3) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vectorddd_erase" "', argument " "3"" of type '" "std::vector< std::vector< std::vector< double > > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< std::vector< std::vector< double > > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< std::vector< std::vector< double > > >::iterator > *>(iter3);
    if (iter_t) {
      arg3 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vectorddd_erase" "', argument " "3"" of type '" "std::vector< std::vector< std::vector< double > > >::iterator""'");
    }
  }
  result = (arg1)->erase(arg2,arg3);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::vector< std::vector< double > > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorddd_erase(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > >,std::allocator< std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< std::vector< std::vector< double > > >::iterator > *>(iter) != 0));
      if (_v) {
        return _wrap_vectorddd_erase__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > >,std::allocator< std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< std::vector< std::vector< double > > >::iterator > *>(iter) != 0));
      if (_v) {
        swig::SwigPyIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[2], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< std::vector< std::vector< double > > >::iterator > *>(iter) != 0));
        if (_v) {
          return _wrap_vectorddd_erase__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'vectorddd_erase'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    erase(std::vector< std::vector< std::vector< double > > > *,std::vector< std::vector< std::vector< double > > >::iterator)\n"
    "    erase(std::vector< std::vector< std::vector< double > > > *,std::vector< std::vector< std::vector< double > > >::iterator,std::vector< std::vector< std::vector< double > > >::iterator)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_vectorddd__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< std::vector< double > > >::size_type arg1 ;
  std::vector< std::vector< std::vector< double > > >::value_type *arg2 = 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< std::vector< std::vector< double > > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_vectorddd",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_vectorddd" "', argument " "1"" of type '" "std::vector< std::vector< std::vector< double > > >::size_type""'");
  } 
  arg1 = static_cast< std::vector< std::vector< std::vector< double > > >::size_type >(val1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t_std__allocatorT_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t_t_t__value_type,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_vectorddd" "', argument " "2"" of type '" "std::vector< std::vector< std::vector< double > > >::value_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_vectorddd" "', argument " "2"" of type '" "std::vector< std::vector< std::vector< double > > >::value_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< std::vector< std::vector< double > > >::value_type * >(argp2);
  result = (std::vector< std::vector< std::vector< double > > > *)new std::vector< std::vector< std::vector< double > > >(arg1,(std::vector< std::vector< std::vector< double > > >::value_type const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t_std__allocatorT_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_vectorddd(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_vectorddd__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_vectorddd__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > >,std::allocator< std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_vectorddd__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_std__vectorT_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t_std__allocatorT_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t_t_t__value_type, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_vectorddd__SWIG_3(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_vectorddd'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::vector< std::vector< double > > >()\n"
    "    std::vector< std::vector< std::vector< double > > >(std::vector< std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > > const &)\n"
    "    std::vector< std::vector< std::vector< double > > >(std::vector< std::vector< std::vector< double > > >::size_type)\n"
    "    std::vector< std::vector< std::vector< double > > >(std::vector< std::vector< std::vector< double > > >::size_type,std::vector< std::vector< std::vector< double > > >::value_type const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorddd_push_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< std::vector< double > > > *arg1 = (std::vector< std::vector< std::vector< double > > > *) 0 ;
  std::vector< std::vector< std::vector< double > > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:vectorddd_push_back",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t_std__allocatorT_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorddd_push_back" "', argument " "1"" of type '" "std::vector< std::vector< std::vector< double > > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< std::vector< double > > > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t_std__allocatorT_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t_t_t__value_type,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "vectorddd_push_back" "', argument " "2"" of type '" "std::vector< std::vector< std::vector< double > > >::value_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vectorddd_push_back" "', argument " "2"" of type '" "std::vector< std::vector< std::vector< double > > >::value_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< std::vector< std::vector< double > > >::value_type * >(argp2);
  (arg1)->push_back((std::vector< std::vector< std::vector< double > > >::value_type const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorddd_front(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< std::vector< double > > > *arg1 = (std::vector< std::vector< std::vector< double > > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::vector< std::vector< double > > >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vectorddd_front",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t_std__allocatorT_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorddd_front" "', argument " "1"" of type '" "std::vector< std::vector< std::vector< double > > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< std::vector< double > > > * >(argp1);
  result = (std::vector< std::vector< std::vector< double > > >::value_type *) &((std::vector< std::vector< std::vector< double > > > const *)arg1)->front();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t_std__allocatorT_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t_t_t__value_type, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorddd_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< std::vector< double > > > *arg1 = (std::vector< std::vector< std::vector< double > > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::vector< std::vector< double > > >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vectorddd_back",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t_std__allocatorT_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorddd_back" "', argument " "1"" of type '" "std::vector< std::vector< std::vector< double > > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< std::vector< double > > > * >(argp1);
  result = (std::vector< std::vector< std::vector< double > > >::value_type *) &((std::vector< std::vector< std::vector< double > > > const *)arg1)->back();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t_std__allocatorT_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t_t_t__value_type, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorddd_assign(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< std::vector< double > > > *arg1 = (std::vector< std::vector< std::vector< double > > > *) 0 ;
  std::vector< std::vector< std::vector< double > > >::size_type arg2 ;
  std::vector< std::vector< std::vector< double > > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:vectorddd_assign",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t_std__allocatorT_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorddd_assign" "', argument " "1"" of type '" "std::vector< std::vector< std::vector< double > > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< std::vector< double > > > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vectorddd_assign" "', argument " "2"" of type '" "std::vector< std::vector< std::vector< double > > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< std::vector< std::vector< double > > >::size_type >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__vectorT_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t_std__allocatorT_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t_t_t__value_type,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "vectorddd_assign" "', argument " "3"" of type '" "std::vector< std::vector< std::vector< double > > >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vectorddd_assign" "', argument " "3"" of type '" "std::vector< std::vector< std::vector< double > > >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< std::vector< std::vector< double > > >::value_type * >(argp3);
  (arg1)->assign(arg2,(std::vector< std::vector< std::vector< double > > >::value_type const &)*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorddd_resize__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< std::vector< double > > > *arg1 = (std::vector< std::vector< std::vector< double > > > *) 0 ;
  std::vector< std::vector< std::vector< double > > >::size_type arg2 ;
  std::vector< std::vector< std::vector< double > > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:vectorddd_resize",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t_std__allocatorT_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorddd_resize" "', argument " "1"" of type '" "std::vector< std::vector< std::vector< double > > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< std::vector< double > > > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vectorddd_resize" "', argument " "2"" of type '" "std::vector< std::vector< std::vector< double > > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< std::vector< std::vector< double > > >::size_type >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__vectorT_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t_std__allocatorT_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t_t_t__value_type,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "vectorddd_resize" "', argument " "3"" of type '" "std::vector< std::vector< std::vector< double > > >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vectorddd_resize" "', argument " "3"" of type '" "std::vector< std::vector< std::vector< double > > >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< std::vector< std::vector< double > > >::value_type * >(argp3);
  (arg1)->resize(arg2,(std::vector< std::vector< std::vector< double > > >::value_type const &)*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorddd_resize(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > >,std::allocator< std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_vectorddd_resize__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > >,std::allocator< std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_std__vectorT_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t_std__allocatorT_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t_t_t__value_type, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_vectorddd_resize__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'vectorddd_resize'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    resize(std::vector< std::vector< std::vector< double > > > *,std::vector< std::vector< std::vector< double > > >::size_type)\n"
    "    resize(std::vector< std::vector< std::vector< double > > > *,std::vector< std::vector< std::vector< double > > >::size_type,std::vector< std::vector< std::vector< double > > >::value_type const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorddd_insert__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< std::vector< double > > > *arg1 = (std::vector< std::vector< std::vector< double > > > *) 0 ;
  std::vector< std::vector< std::vector< double > > >::iterator arg2 ;
  std::vector< std::vector< std::vector< double > > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< std::vector< std::vector< double > > >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:vectorddd_insert",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t_std__allocatorT_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorddd_insert" "', argument " "1"" of type '" "std::vector< std::vector< std::vector< double > > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< std::vector< double > > > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vectorddd_insert" "', argument " "2"" of type '" "std::vector< std::vector< std::vector< double > > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< std::vector< std::vector< double > > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< std::vector< std::vector< double > > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vectorddd_insert" "', argument " "2"" of type '" "std::vector< std::vector< std::vector< double > > >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__vectorT_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t_std__allocatorT_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t_t_t__value_type,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "vectorddd_insert" "', argument " "3"" of type '" "std::vector< std::vector< std::vector< double > > >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vectorddd_insert" "', argument " "3"" of type '" "std::vector< std::vector< std::vector< double > > >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< std::vector< std::vector< double > > >::value_type * >(argp3);
  result = (arg1)->insert(arg2,(std::vector< std::vector< std::vector< double > > >::value_type const &)*arg3);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::vector< std::vector< double > > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorddd_insert__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< std::vector< double > > > *arg1 = (std::vector< std::vector< std::vector< double > > > *) 0 ;
  std::vector< std::vector< std::vector< double > > >::iterator arg2 ;
  std::vector< std::vector< std::vector< double > > >::size_type arg3 ;
  std::vector< std::vector< std::vector< double > > >::value_type *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  size_t val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:vectorddd_insert",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t_std__allocatorT_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorddd_insert" "', argument " "1"" of type '" "std::vector< std::vector< std::vector< double > > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< std::vector< double > > > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vectorddd_insert" "', argument " "2"" of type '" "std::vector< std::vector< std::vector< double > > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< std::vector< std::vector< double > > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< std::vector< std::vector< double > > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vectorddd_insert" "', argument " "2"" of type '" "std::vector< std::vector< std::vector< double > > >::iterator""'");
    }
  }
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vectorddd_insert" "', argument " "3"" of type '" "std::vector< std::vector< std::vector< double > > >::size_type""'");
  } 
  arg3 = static_cast< std::vector< std::vector< std::vector< double > > >::size_type >(val3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_std__vectorT_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t_std__allocatorT_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t_t_t__value_type,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "vectorddd_insert" "', argument " "4"" of type '" "std::vector< std::vector< std::vector< double > > >::value_type const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vectorddd_insert" "', argument " "4"" of type '" "std::vector< std::vector< std::vector< double > > >::value_type const &""'"); 
  }
  arg4 = reinterpret_cast< std::vector< std::vector< std::vector< double > > >::value_type * >(argp4);
  (arg1)->insert(arg2,arg3,(std::vector< std::vector< std::vector< double > > >::value_type const &)*arg4);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorddd_insert(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 4); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > >,std::allocator< std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< std::vector< std::vector< double > > >::iterator > *>(iter) != 0));
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_std__vectorT_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t_std__allocatorT_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t_t_t__value_type, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_vectorddd_insert__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > >,std::allocator< std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< std::vector< std::vector< double > > >::iterator > *>(iter) != 0));
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_std__vectorT_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t_std__allocatorT_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t_t_t__value_type, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_vectorddd_insert__SWIG_1(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'vectorddd_insert'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    insert(std::vector< std::vector< std::vector< double > > > *,std::vector< std::vector< std::vector< double > > >::iterator,std::vector< std::vector< std::vector< double > > >::value_type const &)\n"
    "    insert(std::vector< std::vector< std::vector< double > > > *,std::vector< std::vector< std::vector< double > > >::iterator,std::vector< std::vector< std::vector< double > > >::size_type,std::vector< std::vector< std::vector< double > > >::value_type const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorddd_reserve(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< std::vector< double > > > *arg1 = (std::vector< std::vector< std::vector< double > > > *) 0 ;
  std::vector< std::vector< std::vector< double > > >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:vectorddd_reserve",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t_std__allocatorT_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorddd_reserve" "', argument " "1"" of type '" "std::vector< std::vector< std::vector< double > > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< std::vector< double > > > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vectorddd_reserve" "', argument " "2"" of type '" "std::vector< std::vector< std::vector< double > > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< std::vector< std::vector< double > > >::size_type >(val2);
  (arg1)->reserve(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorddd_capacity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< std::vector< double > > > *arg1 = (std::vector< std::vector< std::vector< double > > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::vector< std::vector< double > > >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vectorddd_capacity",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t_std__allocatorT_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorddd_capacity" "', argument " "1"" of type '" "std::vector< std::vector< std::vector< double > > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< std::vector< double > > > * >(argp1);
  result = ((std::vector< std::vector< std::vector< double > > > const *)arg1)->capacity();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_vectorddd(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< std::vector< double > > > *arg1 = (std::vector< std::vector< std::vector< double > > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_vectorddd",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t_std__allocatorT_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_vectorddd" "', argument " "1"" of type '" "std::vector< std::vector< std::vector< double > > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< std::vector< double > > > * >(argp1);
  {
    try {
      delete arg1;
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *vectorddd_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__vectorT_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t_std__allocatorT_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t_t_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_vectori_iterator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  PyObject **arg2 = (PyObject **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  arg2 = &obj0;
  if (!PyArg_ParseTuple(args,(char *)"O:vectori_iterator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectori_iterator" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  result = (swig::SwigPyIterator *)std_vector_Sl_int_Sg__iterator(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectori___nonzero__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vectori___nonzero__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectori___nonzero__" "', argument " "1"" of type '" "std::vector< int > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  result = (bool)std_vector_Sl_int_Sg____nonzero__((std::vector< int > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectori___bool__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vectori___bool__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectori___bool__" "', argument " "1"" of type '" "std::vector< int > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  result = (bool)std_vector_Sl_int_Sg____bool__((std::vector< int > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectori___len__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< int >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vectori___len__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectori___len__" "', argument " "1"" of type '" "std::vector< int > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  result = std_vector_Sl_int_Sg____len__((std::vector< int > const *)arg1);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectori_pop(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< int >::value_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vectori_pop",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectori_pop" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  try {
    result = (std::vector< int >::value_type)std_vector_Sl_int_Sg__pop(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectori___getslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::difference_type arg2 ;
  std::vector< int >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< int,std::allocator< int > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:vectori___getslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectori___getslice__" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vectori___getslice__" "', argument " "2"" of type '" "std::vector< int >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< int >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vectori___getslice__" "', argument " "3"" of type '" "std::vector< int >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< int >::difference_type >(val3);
  try {
    result = (std::vector< int,std::allocator< int > > *)std_vector_Sl_int_Sg____getslice__(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectori___setslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::difference_type arg2 ;
  std::vector< int >::difference_type arg3 ;
  std::vector< int,std::allocator< int > > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:vectori___setslice__",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectori___setslice__" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vectori___setslice__" "', argument " "2"" of type '" "std::vector< int >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< int >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vectori___setslice__" "', argument " "3"" of type '" "std::vector< int >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< int >::difference_type >(val3);
  {
    std::vector<int,std::allocator< int > > *ptr = (std::vector<int,std::allocator< int > > *)0;
    res4 = swig::asptr(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "vectori___setslice__" "', argument " "4"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vectori___setslice__" "', argument " "4"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    arg4 = ptr;
  }
  try {
    std_vector_Sl_int_Sg____setslice__(arg1,arg2,arg3,(std::vector< int,std::allocator< int > > const &)*arg4);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectori___delslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::difference_type arg2 ;
  std::vector< int >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:vectori___delslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectori___delslice__" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vectori___delslice__" "', argument " "2"" of type '" "std::vector< int >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< int >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vectori___delslice__" "', argument " "3"" of type '" "std::vector< int >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< int >::difference_type >(val3);
  try {
    std_vector_Sl_int_Sg____delslice__(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectori___delitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:vectori___delitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectori___delitem__" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vectori___delitem__" "', argument " "2"" of type '" "std::vector< int >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< int >::difference_type >(val2);
  try {
    std_vector_Sl_int_Sg____delitem____SWIG_0(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectori___getitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< int,std::allocator< int > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:vectori___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectori___getitem__" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  {
    arg2 = (PySliceObject *) obj1;
  }
  try {
    result = (std::vector< int,std::allocator< int > > *)std_vector_Sl_int_Sg____getitem____SWIG_0(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectori___setitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  std::vector< int,std::allocator< int > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:vectori___setitem__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectori___setitem__" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  {
    arg2 = (PySliceObject *) obj1;
  }
  {
    std::vector<int,std::allocator< int > > *ptr = (std::vector<int,std::allocator< int > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "vectori___setitem__" "', argument " "3"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vectori___setitem__" "', argument " "3"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    arg3 = ptr;
  }
  try {
    std_vector_Sl_int_Sg____setitem____SWIG_0(arg1,arg2,(std::vector< int,std::allocator< int > > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectori___delitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:vectori___delitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectori___delitem__" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  {
    arg2 = (PySliceObject *) obj1;
  }
  try {
    std_vector_Sl_int_Sg____delitem____SWIG_1(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectori___delitem__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<int,std::allocator< int > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_vectori___delitem____SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<int,std::allocator< int > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_vectori___delitem____SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'vectori___delitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    __delitem__(std::vector< int > *,std::vector< int >::difference_type)\n"
    "    __delitem__(std::vector< int > *,PySliceObject *)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectori___getitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< int >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:vectori___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectori___getitem__" "', argument " "1"" of type '" "std::vector< int > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vectori___getitem__" "', argument " "2"" of type '" "std::vector< int >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< int >::difference_type >(val2);
  try {
    result = (std::vector< int >::value_type *) &std_vector_Sl_int_Sg____getitem____SWIG_1((std::vector< int > const *)arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_From_int(static_cast< int >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectori___getitem__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<int,std::allocator< int > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_vectori___getitem____SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<int,std::allocator< int > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_vectori___getitem____SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'vectori___getitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    __getitem__(std::vector< int > *,PySliceObject *)\n"
    "    __getitem__(std::vector< int > const *,std::vector< int >::difference_type)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectori___setitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::difference_type arg2 ;
  std::vector< int >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  std::vector< int >::value_type temp3 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:vectori___setitem__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectori___setitem__" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vectori___setitem__" "', argument " "2"" of type '" "std::vector< int >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< int >::difference_type >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vectori___setitem__" "', argument " "3"" of type '" "std::vector< int >::value_type""'");
  } 
  temp3 = static_cast< std::vector< int >::value_type >(val3);
  arg3 = &temp3;
  try {
    std_vector_Sl_int_Sg____setitem____SWIG_1(arg1,arg2,(int const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectori___setitem__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<int,std::allocator< int > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector<int,std::allocator< int > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_vectori___setitem____SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<int,std::allocator< int > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_vectori___setitem____SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'vectori___setitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    __setitem__(std::vector< int > *,PySliceObject *,std::vector< int,std::allocator< int > > const &)\n"
    "    __setitem__(std::vector< int > *,std::vector< int >::difference_type,std::vector< int >::value_type const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectori_append(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< int >::value_type temp2 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:vectori_append",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectori_append" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vectori_append" "', argument " "2"" of type '" "std::vector< int >::value_type""'");
  } 
  temp2 = static_cast< std::vector< int >::value_type >(val2);
  arg2 = &temp2;
  std_vector_Sl_int_Sg__append(arg1,(int const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_vectori__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_vectori")) SWIG_fail;
  result = (std::vector< int > *)new std::vector< int >();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_vectori__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  std::vector< int > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_vectori",&obj0)) SWIG_fail;
  {
    std::vector<int,std::allocator< int > > *ptr = (std::vector<int,std::allocator< int > > *)0;
    res1 = swig::asptr(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_vectori" "', argument " "1"" of type '" "std::vector< int > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_vectori" "', argument " "1"" of type '" "std::vector< int > const &""'"); 
    }
    arg1 = ptr;
  }
  result = (std::vector< int > *)new std::vector< int >((std::vector< int > const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectori_empty(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vectori_empty",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectori_empty" "', argument " "1"" of type '" "std::vector< int > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  result = (bool)((std::vector< int > const *)arg1)->empty();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectori_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< int >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vectori_size",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectori_size" "', argument " "1"" of type '" "std::vector< int > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  result = ((std::vector< int > const *)arg1)->size();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectori_clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vectori_clear",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectori_clear" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  (arg1)->clear();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectori_swap(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:vectori_swap",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectori_swap" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "vectori_swap" "', argument " "2"" of type '" "std::vector< int > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vectori_swap" "', argument " "2"" of type '" "std::vector< int > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< int > * >(argp2);
  (arg1)->swap(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectori_get_allocator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::allocator< int > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vectori_get_allocator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectori_get_allocator" "', argument " "1"" of type '" "std::vector< int > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  result = ((std::vector< int > const *)arg1)->get_allocator();
  resultobj = SWIG_NewPointerObj((new std::vector< int >::allocator_type(static_cast< const std::vector< int >::allocator_type& >(result))), SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t__allocator_type, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectori_begin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< int >::const_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vectori_begin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectori_begin" "', argument " "1"" of type '" "std::vector< int > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  result = ((std::vector< int > const *)arg1)->begin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< int >::const_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectori_end(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< int >::const_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vectori_end",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectori_end" "', argument " "1"" of type '" "std::vector< int > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  result = ((std::vector< int > const *)arg1)->end();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< int >::const_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectori_rbegin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< int >::const_reverse_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vectori_rbegin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectori_rbegin" "', argument " "1"" of type '" "std::vector< int > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  result = ((std::vector< int > const *)arg1)->rbegin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< int >::const_reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectori_rend(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< int >::const_reverse_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vectori_rend",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectori_rend" "', argument " "1"" of type '" "std::vector< int > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  result = ((std::vector< int > const *)arg1)->rend();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< int >::const_reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_vectori__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int >::size_type arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< int > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_vectori",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_vectori" "', argument " "1"" of type '" "std::vector< int >::size_type""'");
  } 
  arg1 = static_cast< std::vector< int >::size_type >(val1);
  result = (std::vector< int > *)new std::vector< int >(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectori_pop_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vectori_pop_back",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectori_pop_back" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  (arg1)->pop_back();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectori_resize__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:vectori_resize",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectori_resize" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vectori_resize" "', argument " "2"" of type '" "std::vector< int >::size_type""'");
  } 
  arg2 = static_cast< std::vector< int >::size_type >(val2);
  (arg1)->resize(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectori_erase__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::iterator arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< int >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:vectori_erase",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectori_erase" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vectori_erase" "', argument " "2"" of type '" "std::vector< int >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< int >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< int >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vectori_erase" "', argument " "2"" of type '" "std::vector< int >::iterator""'");
    }
  }
  result = (arg1)->erase(arg2);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< int >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectori_erase__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::iterator arg2 ;
  std::vector< int >::iterator arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  swig::SwigPyIterator *iter3 = 0 ;
  int res3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< int >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:vectori_erase",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectori_erase" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vectori_erase" "', argument " "2"" of type '" "std::vector< int >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< int >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< int >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vectori_erase" "', argument " "2"" of type '" "std::vector< int >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(obj2, SWIG_as_voidptrptr(&iter3), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res3) || !iter3) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vectori_erase" "', argument " "3"" of type '" "std::vector< int >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< int >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< int >::iterator > *>(iter3);
    if (iter_t) {
      arg3 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vectori_erase" "', argument " "3"" of type '" "std::vector< int >::iterator""'");
    }
  }
  result = (arg1)->erase(arg2,arg3);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< int >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectori_erase(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<int,std::allocator< int > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< int >::iterator > *>(iter) != 0));
      if (_v) {
        return _wrap_vectori_erase__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<int,std::allocator< int > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< int >::iterator > *>(iter) != 0));
      if (_v) {
        swig::SwigPyIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[2], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< int >::iterator > *>(iter) != 0));
        if (_v) {
          return _wrap_vectori_erase__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'vectori_erase'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    erase(std::vector< int > *,std::vector< int >::iterator)\n"
    "    erase(std::vector< int > *,std::vector< int >::iterator,std::vector< int >::iterator)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_vectori__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int >::size_type arg1 ;
  std::vector< int >::value_type *arg2 = 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  std::vector< int >::value_type temp2 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< int > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_vectori",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_vectori" "', argument " "1"" of type '" "std::vector< int >::size_type""'");
  } 
  arg1 = static_cast< std::vector< int >::size_type >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_vectori" "', argument " "2"" of type '" "std::vector< int >::value_type""'");
  } 
  temp2 = static_cast< std::vector< int >::value_type >(val2);
  arg2 = &temp2;
  result = (std::vector< int > *)new std::vector< int >(arg1,(std::vector< int >::value_type const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_vectori(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_vectori__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_vectori__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<int,std::allocator< int > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_vectori__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_vectori__SWIG_3(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_vectori'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< int >()\n"
    "    std::vector< int >(std::vector< int > const &)\n"
    "    std::vector< int >(std::vector< int >::size_type)\n"
    "    std::vector< int >(std::vector< int >::size_type,std::vector< int >::value_type const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectori_push_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< int >::value_type temp2 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:vectori_push_back",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectori_push_back" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vectori_push_back" "', argument " "2"" of type '" "std::vector< int >::value_type""'");
  } 
  temp2 = static_cast< std::vector< int >::value_type >(val2);
  arg2 = &temp2;
  (arg1)->push_back((std::vector< int >::value_type const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectori_front(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< int >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vectori_front",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectori_front" "', argument " "1"" of type '" "std::vector< int > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  result = (std::vector< int >::value_type *) &((std::vector< int > const *)arg1)->front();
  resultobj = SWIG_From_int(static_cast< int >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectori_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< int >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vectori_back",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectori_back" "', argument " "1"" of type '" "std::vector< int > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  result = (std::vector< int >::value_type *) &((std::vector< int > const *)arg1)->back();
  resultobj = SWIG_From_int(static_cast< int >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectori_assign(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::size_type arg2 ;
  std::vector< int >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  std::vector< int >::value_type temp3 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:vectori_assign",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectori_assign" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vectori_assign" "', argument " "2"" of type '" "std::vector< int >::size_type""'");
  } 
  arg2 = static_cast< std::vector< int >::size_type >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vectori_assign" "', argument " "3"" of type '" "std::vector< int >::value_type""'");
  } 
  temp3 = static_cast< std::vector< int >::value_type >(val3);
  arg3 = &temp3;
  (arg1)->assign(arg2,(std::vector< int >::value_type const &)*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectori_resize__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::size_type arg2 ;
  std::vector< int >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  std::vector< int >::value_type temp3 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:vectori_resize",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectori_resize" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vectori_resize" "', argument " "2"" of type '" "std::vector< int >::size_type""'");
  } 
  arg2 = static_cast< std::vector< int >::size_type >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vectori_resize" "', argument " "3"" of type '" "std::vector< int >::value_type""'");
  } 
  temp3 = static_cast< std::vector< int >::value_type >(val3);
  arg3 = &temp3;
  (arg1)->resize(arg2,(std::vector< int >::value_type const &)*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectori_resize(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<int,std::allocator< int > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_vectori_resize__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<int,std::allocator< int > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_vectori_resize__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'vectori_resize'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    resize(std::vector< int > *,std::vector< int >::size_type)\n"
    "    resize(std::vector< int > *,std::vector< int >::size_type,std::vector< int >::value_type const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectori_insert__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::iterator arg2 ;
  std::vector< int >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  std::vector< int >::value_type temp3 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< int >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:vectori_insert",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectori_insert" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vectori_insert" "', argument " "2"" of type '" "std::vector< int >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< int >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< int >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vectori_insert" "', argument " "2"" of type '" "std::vector< int >::iterator""'");
    }
  }
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vectori_insert" "', argument " "3"" of type '" "std::vector< int >::value_type""'");
  } 
  temp3 = static_cast< std::vector< int >::value_type >(val3);
  arg3 = &temp3;
  result = (arg1)->insert(arg2,(std::vector< int >::value_type const &)*arg3);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< int >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectori_insert__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::iterator arg2 ;
  std::vector< int >::size_type arg3 ;
  std::vector< int >::value_type *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  size_t val3 ;
  int ecode3 = 0 ;
  std::vector< int >::value_type temp4 ;
  int val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:vectori_insert",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectori_insert" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vectori_insert" "', argument " "2"" of type '" "std::vector< int >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< int >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< int >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vectori_insert" "', argument " "2"" of type '" "std::vector< int >::iterator""'");
    }
  }
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vectori_insert" "', argument " "3"" of type '" "std::vector< int >::size_type""'");
  } 
  arg3 = static_cast< std::vector< int >::size_type >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "vectori_insert" "', argument " "4"" of type '" "std::vector< int >::value_type""'");
  } 
  temp4 = static_cast< std::vector< int >::value_type >(val4);
  arg4 = &temp4;
  (arg1)->insert(arg2,arg3,(std::vector< int >::value_type const &)*arg4);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectori_insert(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 4); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<int,std::allocator< int > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< int >::iterator > *>(iter) != 0));
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_vectori_insert__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<int,std::allocator< int > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< int >::iterator > *>(iter) != 0));
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_vectori_insert__SWIG_1(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'vectori_insert'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    insert(std::vector< int > *,std::vector< int >::iterator,std::vector< int >::value_type const &)\n"
    "    insert(std::vector< int > *,std::vector< int >::iterator,std::vector< int >::size_type,std::vector< int >::value_type const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectori_reserve(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:vectori_reserve",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectori_reserve" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vectori_reserve" "', argument " "2"" of type '" "std::vector< int >::size_type""'");
  } 
  arg2 = static_cast< std::vector< int >::size_type >(val2);
  (arg1)->reserve(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectori_capacity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< int >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vectori_capacity",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectori_capacity" "', argument " "1"" of type '" "std::vector< int > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  result = ((std::vector< int > const *)arg1)->capacity();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_vectori(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_vectori",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_vectori" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  {
    try {
      delete arg1;
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *vectori_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_vectorii_iterator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< int > > *arg1 = (std::vector< std::vector< int > > *) 0 ;
  PyObject **arg2 = (PyObject **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  arg2 = &obj0;
  if (!PyArg_ParseTuple(args,(char *)"O:vectorii_iterator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_int_std__allocatorT_int_t_t_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorii_iterator" "', argument " "1"" of type '" "std::vector< std::vector< int > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< int > > * >(argp1);
  result = (swig::SwigPyIterator *)std_vector_Sl_std_vector_Sl_int_Sg__Sg__iterator(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorii___nonzero__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< int > > *arg1 = (std::vector< std::vector< int > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vectorii___nonzero__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_int_std__allocatorT_int_t_t_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorii___nonzero__" "', argument " "1"" of type '" "std::vector< std::vector< int > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< int > > * >(argp1);
  result = (bool)std_vector_Sl_std_vector_Sl_int_Sg__Sg____nonzero__((std::vector< std::vector< int > > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorii___bool__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< int > > *arg1 = (std::vector< std::vector< int > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vectorii___bool__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_int_std__allocatorT_int_t_t_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorii___bool__" "', argument " "1"" of type '" "std::vector< std::vector< int > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< int > > * >(argp1);
  result = (bool)std_vector_Sl_std_vector_Sl_int_Sg__Sg____bool__((std::vector< std::vector< int > > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorii___len__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< int > > *arg1 = (std::vector< std::vector< int > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::vector< int > >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vectorii___len__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_int_std__allocatorT_int_t_t_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorii___len__" "', argument " "1"" of type '" "std::vector< std::vector< int > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< int > > * >(argp1);
  result = std_vector_Sl_std_vector_Sl_int_Sg__Sg____len__((std::vector< std::vector< int > > const *)arg1);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorii_pop(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< int > > *arg1 = (std::vector< std::vector< int > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::vector< int > >::value_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vectorii_pop",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_int_std__allocatorT_int_t_t_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorii_pop" "', argument " "1"" of type '" "std::vector< std::vector< int > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< int > > * >(argp1);
  try {
    result = std_vector_Sl_std_vector_Sl_int_Sg__Sg__pop(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = swig::from(static_cast< std::vector<int,std::allocator< int > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorii___getslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< int > > *arg1 = (std::vector< std::vector< int > > *) 0 ;
  std::vector< std::vector< int > >::difference_type arg2 ;
  std::vector< std::vector< int > >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:vectorii___getslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_int_std__allocatorT_int_t_t_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorii___getslice__" "', argument " "1"" of type '" "std::vector< std::vector< int > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< int > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vectorii___getslice__" "', argument " "2"" of type '" "std::vector< std::vector< int > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::vector< int > >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vectorii___getslice__" "', argument " "3"" of type '" "std::vector< std::vector< int > >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< std::vector< int > >::difference_type >(val3);
  try {
    result = (std::vector< std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > > *)std_vector_Sl_std_vector_Sl_int_Sg__Sg____getslice__(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__vectorT_int_std__allocatorT_int_t_t_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorii___setslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< int > > *arg1 = (std::vector< std::vector< int > > *) 0 ;
  std::vector< std::vector< int > >::difference_type arg2 ;
  std::vector< std::vector< int > >::difference_type arg3 ;
  std::vector< std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:vectorii___setslice__",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_int_std__allocatorT_int_t_t_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorii___setslice__" "', argument " "1"" of type '" "std::vector< std::vector< int > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< int > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vectorii___setslice__" "', argument " "2"" of type '" "std::vector< std::vector< int > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::vector< int > >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vectorii___setslice__" "', argument " "3"" of type '" "std::vector< std::vector< int > >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< std::vector< int > >::difference_type >(val3);
  {
    std::vector<std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > > *ptr = (std::vector<std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > > *)0;
    res4 = swig::asptr(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "vectorii___setslice__" "', argument " "4"" of type '" "std::vector< std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vectorii___setslice__" "', argument " "4"" of type '" "std::vector< std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > > const &""'"); 
    }
    arg4 = ptr;
  }
  try {
    std_vector_Sl_std_vector_Sl_int_Sg__Sg____setslice__(arg1,arg2,arg3,(std::vector< std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > > const &)*arg4);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorii___delslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< int > > *arg1 = (std::vector< std::vector< int > > *) 0 ;
  std::vector< std::vector< int > >::difference_type arg2 ;
  std::vector< std::vector< int > >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:vectorii___delslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_int_std__allocatorT_int_t_t_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorii___delslice__" "', argument " "1"" of type '" "std::vector< std::vector< int > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< int > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vectorii___delslice__" "', argument " "2"" of type '" "std::vector< std::vector< int > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::vector< int > >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vectorii___delslice__" "', argument " "3"" of type '" "std::vector< std::vector< int > >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< std::vector< int > >::difference_type >(val3);
  try {
    std_vector_Sl_std_vector_Sl_int_Sg__Sg____delslice__(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorii___delitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< int > > *arg1 = (std::vector< std::vector< int > > *) 0 ;
  std::vector< std::vector< int > >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:vectorii___delitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_int_std__allocatorT_int_t_t_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorii___delitem__" "', argument " "1"" of type '" "std::vector< std::vector< int > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< int > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vectorii___delitem__" "', argument " "2"" of type '" "std::vector< std::vector< int > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::vector< int > >::difference_type >(val2);
  try {
    std_vector_Sl_std_vector_Sl_int_Sg__Sg____delitem____SWIG_0(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorii___getitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< int > > *arg1 = (std::vector< std::vector< int > > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:vectorii___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_int_std__allocatorT_int_t_t_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorii___getitem__" "', argument " "1"" of type '" "std::vector< std::vector< int > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< int > > * >(argp1);
  {
    arg2 = (PySliceObject *) obj1;
  }
  try {
    result = (std::vector< std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > > *)std_vector_Sl_std_vector_Sl_int_Sg__Sg____getitem____SWIG_0(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__vectorT_int_std__allocatorT_int_t_t_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorii___setitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< int > > *arg1 = (std::vector< std::vector< int > > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  std::vector< std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:vectorii___setitem__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_int_std__allocatorT_int_t_t_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorii___setitem__" "', argument " "1"" of type '" "std::vector< std::vector< int > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< int > > * >(argp1);
  {
    arg2 = (PySliceObject *) obj1;
  }
  {
    std::vector<std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > > *ptr = (std::vector<std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "vectorii___setitem__" "', argument " "3"" of type '" "std::vector< std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vectorii___setitem__" "', argument " "3"" of type '" "std::vector< std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > > const &""'"); 
    }
    arg3 = ptr;
  }
  try {
    std_vector_Sl_std_vector_Sl_int_Sg__Sg____setitem____SWIG_0(arg1,arg2,(std::vector< std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorii___delitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< int > > *arg1 = (std::vector< std::vector< int > > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:vectorii___delitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_int_std__allocatorT_int_t_t_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorii___delitem__" "', argument " "1"" of type '" "std::vector< std::vector< int > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< int > > * >(argp1);
  {
    arg2 = (PySliceObject *) obj1;
  }
  try {
    std_vector_Sl_std_vector_Sl_int_Sg__Sg____delitem____SWIG_1(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorii___delitem__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_vectorii___delitem____SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_vectorii___delitem____SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'vectorii___delitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    __delitem__(std::vector< std::vector< int > > *,std::vector< std::vector< int > >::difference_type)\n"
    "    __delitem__(std::vector< std::vector< int > > *,PySliceObject *)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorii___getitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< int > > *arg1 = (std::vector< std::vector< int > > *) 0 ;
  std::vector< std::vector< int > >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< std::vector< int > >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:vectorii___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_int_std__allocatorT_int_t_t_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorii___getitem__" "', argument " "1"" of type '" "std::vector< std::vector< int > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< int > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vectorii___getitem__" "', argument " "2"" of type '" "std::vector< std::vector< int > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::vector< int > >::difference_type >(val2);
  try {
    result = (std::vector< std::vector< int > >::value_type *) &std_vector_Sl_std_vector_Sl_int_Sg__Sg____getitem____SWIG_1((std::vector< std::vector< int > > const *)arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = swig::from(static_cast< std::vector<int,std::allocator< int > > >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorii___getitem__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_vectorii___getitem____SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_vectorii___getitem____SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'vectorii___getitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    __getitem__(std::vector< std::vector< int > > *,PySliceObject *)\n"
    "    __getitem__(std::vector< std::vector< int > > const *,std::vector< std::vector< int > >::difference_type)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorii___setitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< int > > *arg1 = (std::vector< std::vector< int > > *) 0 ;
  std::vector< std::vector< int > >::difference_type arg2 ;
  std::vector< std::vector< int > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:vectorii___setitem__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_int_std__allocatorT_int_t_t_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorii___setitem__" "', argument " "1"" of type '" "std::vector< std::vector< int > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< int > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vectorii___setitem__" "', argument " "2"" of type '" "std::vector< std::vector< int > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::vector< int > >::difference_type >(val2);
  {
    std::vector<int,std::allocator< int > > *ptr = (std::vector<int,std::allocator< int > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "vectorii___setitem__" "', argument " "3"" of type '" "std::vector< std::vector< int > >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vectorii___setitem__" "', argument " "3"" of type '" "std::vector< std::vector< int > >::value_type const &""'"); 
    }
    arg3 = ptr;
  }
  try {
    std_vector_Sl_std_vector_Sl_int_Sg__Sg____setitem____SWIG_1(arg1,arg2,(std::vector< int,std::allocator< int > > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorii___setitem__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector<std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_vectorii___setitem____SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector<int,std::allocator< int > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_vectorii___setitem____SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'vectorii___setitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    __setitem__(std::vector< std::vector< int > > *,PySliceObject *,std::vector< std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > > const &)\n"
    "    __setitem__(std::vector< std::vector< int > > *,std::vector< std::vector< int > >::difference_type,std::vector< std::vector< int > >::value_type const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorii_append(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< int > > *arg1 = (std::vector< std::vector< int > > *) 0 ;
  std::vector< std::vector< int > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:vectorii_append",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_int_std__allocatorT_int_t_t_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorii_append" "', argument " "1"" of type '" "std::vector< std::vector< int > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< int > > * >(argp1);
  {
    std::vector<int,std::allocator< int > > *ptr = (std::vector<int,std::allocator< int > > *)0;
    res2 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "vectorii_append" "', argument " "2"" of type '" "std::vector< std::vector< int > >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vectorii_append" "', argument " "2"" of type '" "std::vector< std::vector< int > >::value_type const &""'"); 
    }
    arg2 = ptr;
  }
  std_vector_Sl_std_vector_Sl_int_Sg__Sg__append(arg1,(std::vector< int,std::allocator< int > > const &)*arg2);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_vectorii__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< int > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_vectorii")) SWIG_fail;
  result = (std::vector< std::vector< int > > *)new std::vector< std::vector< int > >();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__vectorT_int_std__allocatorT_int_t_t_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_vectorii__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< int,std::allocator< int > > > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  std::vector< std::vector< int > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_vectorii",&obj0)) SWIG_fail;
  {
    std::vector<std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > > *ptr = (std::vector<std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > > *)0;
    res1 = swig::asptr(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_vectorii" "', argument " "1"" of type '" "std::vector< std::vector< int,std::allocator< int > > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_vectorii" "', argument " "1"" of type '" "std::vector< std::vector< int,std::allocator< int > > > const &""'"); 
    }
    arg1 = ptr;
  }
  result = (std::vector< std::vector< int > > *)new std::vector< std::vector< int > >((std::vector< std::vector< int,std::allocator< int > > > const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__vectorT_int_std__allocatorT_int_t_t_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorii_empty(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< int > > *arg1 = (std::vector< std::vector< int > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vectorii_empty",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_int_std__allocatorT_int_t_t_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorii_empty" "', argument " "1"" of type '" "std::vector< std::vector< int > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< int > > * >(argp1);
  result = (bool)((std::vector< std::vector< int > > const *)arg1)->empty();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorii_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< int > > *arg1 = (std::vector< std::vector< int > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::vector< int > >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vectorii_size",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_int_std__allocatorT_int_t_t_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorii_size" "', argument " "1"" of type '" "std::vector< std::vector< int > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< int > > * >(argp1);
  result = ((std::vector< std::vector< int > > const *)arg1)->size();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorii_clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< int > > *arg1 = (std::vector< std::vector< int > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vectorii_clear",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_int_std__allocatorT_int_t_t_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorii_clear" "', argument " "1"" of type '" "std::vector< std::vector< int > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< int > > * >(argp1);
  (arg1)->clear();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorii_swap(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< int > > *arg1 = (std::vector< std::vector< int > > *) 0 ;
  std::vector< std::vector< int,std::allocator< int > > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:vectorii_swap",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_int_std__allocatorT_int_t_t_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorii_swap" "', argument " "1"" of type '" "std::vector< std::vector< int > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< int > > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_std__vectorT_int_std__allocatorT_int_t_t_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "vectorii_swap" "', argument " "2"" of type '" "std::vector< std::vector< int,std::allocator< int > > > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vectorii_swap" "', argument " "2"" of type '" "std::vector< std::vector< int,std::allocator< int > > > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< std::vector< int,std::allocator< int > > > * >(argp2);
  (arg1)->swap(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorii_get_allocator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< int > > *arg1 = (std::vector< std::vector< int > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::allocator< std::vector< int,std::allocator< int > > > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vectorii_get_allocator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_int_std__allocatorT_int_t_t_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorii_get_allocator" "', argument " "1"" of type '" "std::vector< std::vector< int > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< int > > * >(argp1);
  result = ((std::vector< std::vector< int > > const *)arg1)->get_allocator();
  resultobj = SWIG_NewPointerObj((new std::vector< std::vector< int > >::allocator_type(static_cast< const std::vector< std::vector< int > >::allocator_type& >(result))), SWIGTYPE_p_std__vectorT_std__vectorT_int_std__allocatorT_int_t_t_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t_t__allocator_type, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorii_begin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< int > > *arg1 = (std::vector< std::vector< int > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::vector< int > >::const_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vectorii_begin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_int_std__allocatorT_int_t_t_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorii_begin" "', argument " "1"" of type '" "std::vector< std::vector< int > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< int > > * >(argp1);
  result = ((std::vector< std::vector< int > > const *)arg1)->begin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::vector< int > >::const_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorii_end(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< int > > *arg1 = (std::vector< std::vector< int > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::vector< int > >::const_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vectorii_end",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_int_std__allocatorT_int_t_t_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorii_end" "', argument " "1"" of type '" "std::vector< std::vector< int > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< int > > * >(argp1);
  result = ((std::vector< std::vector< int > > const *)arg1)->end();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::vector< int > >::const_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorii_rbegin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< int > > *arg1 = (std::vector< std::vector< int > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::vector< int > >::const_reverse_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vectorii_rbegin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_int_std__allocatorT_int_t_t_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorii_rbegin" "', argument " "1"" of type '" "std::vector< std::vector< int > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< int > > * >(argp1);
  result = ((std::vector< std::vector< int > > const *)arg1)->rbegin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::vector< int > >::const_reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorii_rend(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< int > > *arg1 = (std::vector< std::vector< int > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::vector< int > >::const_reverse_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vectorii_rend",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_int_std__allocatorT_int_t_t_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorii_rend" "', argument " "1"" of type '" "std::vector< std::vector< int > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< int > > * >(argp1);
  result = ((std::vector< std::vector< int > > const *)arg1)->rend();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::vector< int > >::const_reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_vectorii__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< int > >::size_type arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::vector< int > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_vectorii",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_vectorii" "', argument " "1"" of type '" "std::vector< std::vector< int > >::size_type""'");
  } 
  arg1 = static_cast< std::vector< std::vector< int > >::size_type >(val1);
  result = (std::vector< std::vector< int > > *)new std::vector< std::vector< int > >(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__vectorT_int_std__allocatorT_int_t_t_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorii_pop_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< int > > *arg1 = (std::vector< std::vector< int > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vectorii_pop_back",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_int_std__allocatorT_int_t_t_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorii_pop_back" "', argument " "1"" of type '" "std::vector< std::vector< int > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< int > > * >(argp1);
  (arg1)->pop_back();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorii_resize__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< int > > *arg1 = (std::vector< std::vector< int > > *) 0 ;
  std::vector< std::vector< int > >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:vectorii_resize",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_int_std__allocatorT_int_t_t_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorii_resize" "', argument " "1"" of type '" "std::vector< std::vector< int > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< int > > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vectorii_resize" "', argument " "2"" of type '" "std::vector< std::vector< int > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< std::vector< int > >::size_type >(val2);
  (arg1)->resize(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorii_erase__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< int > > *arg1 = (std::vector< std::vector< int > > *) 0 ;
  std::vector< std::vector< int > >::iterator arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< std::vector< int > >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:vectorii_erase",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_int_std__allocatorT_int_t_t_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorii_erase" "', argument " "1"" of type '" "std::vector< std::vector< int > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< int > > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vectorii_erase" "', argument " "2"" of type '" "std::vector< std::vector< int > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< std::vector< int > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< std::vector< int > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vectorii_erase" "', argument " "2"" of type '" "std::vector< std::vector< int > >::iterator""'");
    }
  }
  result = (arg1)->erase(arg2);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::vector< int > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorii_erase__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< int > > *arg1 = (std::vector< std::vector< int > > *) 0 ;
  std::vector< std::vector< int > >::iterator arg2 ;
  std::vector< std::vector< int > >::iterator arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  swig::SwigPyIterator *iter3 = 0 ;
  int res3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< std::vector< int > >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:vectorii_erase",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_int_std__allocatorT_int_t_t_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorii_erase" "', argument " "1"" of type '" "std::vector< std::vector< int > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< int > > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vectorii_erase" "', argument " "2"" of type '" "std::vector< std::vector< int > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< std::vector< int > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< std::vector< int > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vectorii_erase" "', argument " "2"" of type '" "std::vector< std::vector< int > >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(obj2, SWIG_as_voidptrptr(&iter3), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res3) || !iter3) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vectorii_erase" "', argument " "3"" of type '" "std::vector< std::vector< int > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< std::vector< int > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< std::vector< int > >::iterator > *>(iter3);
    if (iter_t) {
      arg3 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vectorii_erase" "', argument " "3"" of type '" "std::vector< std::vector< int > >::iterator""'");
    }
  }
  result = (arg1)->erase(arg2,arg3);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::vector< int > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorii_erase(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< std::vector< int > >::iterator > *>(iter) != 0));
      if (_v) {
        return _wrap_vectorii_erase__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< std::vector< int > >::iterator > *>(iter) != 0));
      if (_v) {
        swig::SwigPyIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[2], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< std::vector< int > >::iterator > *>(iter) != 0));
        if (_v) {
          return _wrap_vectorii_erase__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'vectorii_erase'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    erase(std::vector< std::vector< int > > *,std::vector< std::vector< int > >::iterator)\n"
    "    erase(std::vector< std::vector< int > > *,std::vector< std::vector< int > >::iterator,std::vector< std::vector< int > >::iterator)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_vectorii__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< int > >::size_type arg1 ;
  std::vector< std::vector< int > >::value_type *arg2 = 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< std::vector< int > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_vectorii",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_vectorii" "', argument " "1"" of type '" "std::vector< std::vector< int > >::size_type""'");
  } 
  arg1 = static_cast< std::vector< std::vector< int > >::size_type >(val1);
  {
    std::vector<int,std::allocator< int > > *ptr = (std::vector<int,std::allocator< int > > *)0;
    res2 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_vectorii" "', argument " "2"" of type '" "std::vector< std::vector< int > >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_vectorii" "', argument " "2"" of type '" "std::vector< std::vector< int > >::value_type const &""'"); 
    }
    arg2 = ptr;
  }
  result = (std::vector< std::vector< int > > *)new std::vector< std::vector< int > >(arg1,(std::vector< std::vector< int > >::value_type const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__vectorT_int_std__allocatorT_int_t_t_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_vectorii(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_vectorii__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_vectorii__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_vectorii__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = swig::asptr(argv[1], (std::vector<int,std::allocator< int > >**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_vectorii__SWIG_3(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_vectorii'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::vector< int > >()\n"
    "    std::vector< std::vector< int > >(std::vector< std::vector< int,std::allocator< int > > > const &)\n"
    "    std::vector< std::vector< int > >(std::vector< std::vector< int > >::size_type)\n"
    "    std::vector< std::vector< int > >(std::vector< std::vector< int > >::size_type,std::vector< std::vector< int > >::value_type const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorii_push_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< int > > *arg1 = (std::vector< std::vector< int > > *) 0 ;
  std::vector< std::vector< int > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:vectorii_push_back",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_int_std__allocatorT_int_t_t_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorii_push_back" "', argument " "1"" of type '" "std::vector< std::vector< int > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< int > > * >(argp1);
  {
    std::vector<int,std::allocator< int > > *ptr = (std::vector<int,std::allocator< int > > *)0;
    res2 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "vectorii_push_back" "', argument " "2"" of type '" "std::vector< std::vector< int > >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vectorii_push_back" "', argument " "2"" of type '" "std::vector< std::vector< int > >::value_type const &""'"); 
    }
    arg2 = ptr;
  }
  (arg1)->push_back((std::vector< std::vector< int > >::value_type const &)*arg2);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorii_front(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< int > > *arg1 = (std::vector< std::vector< int > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::vector< int > >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vectorii_front",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_int_std__allocatorT_int_t_t_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorii_front" "', argument " "1"" of type '" "std::vector< std::vector< int > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< int > > * >(argp1);
  result = (std::vector< std::vector< int > >::value_type *) &((std::vector< std::vector< int > > const *)arg1)->front();
  resultobj = swig::from(static_cast< std::vector<int,std::allocator< int > > >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorii_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< int > > *arg1 = (std::vector< std::vector< int > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::vector< int > >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vectorii_back",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_int_std__allocatorT_int_t_t_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorii_back" "', argument " "1"" of type '" "std::vector< std::vector< int > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< int > > * >(argp1);
  result = (std::vector< std::vector< int > >::value_type *) &((std::vector< std::vector< int > > const *)arg1)->back();
  resultobj = swig::from(static_cast< std::vector<int,std::allocator< int > > >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorii_assign(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< int > > *arg1 = (std::vector< std::vector< int > > *) 0 ;
  std::vector< std::vector< int > >::size_type arg2 ;
  std::vector< std::vector< int > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:vectorii_assign",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_int_std__allocatorT_int_t_t_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorii_assign" "', argument " "1"" of type '" "std::vector< std::vector< int > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< int > > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vectorii_assign" "', argument " "2"" of type '" "std::vector< std::vector< int > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< std::vector< int > >::size_type >(val2);
  {
    std::vector<int,std::allocator< int > > *ptr = (std::vector<int,std::allocator< int > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "vectorii_assign" "', argument " "3"" of type '" "std::vector< std::vector< int > >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vectorii_assign" "', argument " "3"" of type '" "std::vector< std::vector< int > >::value_type const &""'"); 
    }
    arg3 = ptr;
  }
  (arg1)->assign(arg2,(std::vector< std::vector< int > >::value_type const &)*arg3);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorii_resize__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< int > > *arg1 = (std::vector< std::vector< int > > *) 0 ;
  std::vector< std::vector< int > >::size_type arg2 ;
  std::vector< std::vector< int > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:vectorii_resize",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_int_std__allocatorT_int_t_t_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorii_resize" "', argument " "1"" of type '" "std::vector< std::vector< int > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< int > > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vectorii_resize" "', argument " "2"" of type '" "std::vector< std::vector< int > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< std::vector< int > >::size_type >(val2);
  {
    std::vector<int,std::allocator< int > > *ptr = (std::vector<int,std::allocator< int > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "vectorii_resize" "', argument " "3"" of type '" "std::vector< std::vector< int > >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vectorii_resize" "', argument " "3"" of type '" "std::vector< std::vector< int > >::value_type const &""'"); 
    }
    arg3 = ptr;
  }
  (arg1)->resize(arg2,(std::vector< std::vector< int > >::value_type const &)*arg3);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorii_resize(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_vectorii_resize__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector<int,std::allocator< int > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_vectorii_resize__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'vectorii_resize'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    resize(std::vector< std::vector< int > > *,std::vector< std::vector< int > >::size_type)\n"
    "    resize(std::vector< std::vector< int > > *,std::vector< std::vector< int > >::size_type,std::vector< std::vector< int > >::value_type const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorii_insert__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< int > > *arg1 = (std::vector< std::vector< int > > *) 0 ;
  std::vector< std::vector< int > >::iterator arg2 ;
  std::vector< std::vector< int > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< std::vector< int > >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:vectorii_insert",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_int_std__allocatorT_int_t_t_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorii_insert" "', argument " "1"" of type '" "std::vector< std::vector< int > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< int > > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vectorii_insert" "', argument " "2"" of type '" "std::vector< std::vector< int > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< std::vector< int > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< std::vector< int > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vectorii_insert" "', argument " "2"" of type '" "std::vector< std::vector< int > >::iterator""'");
    }
  }
  {
    std::vector<int,std::allocator< int > > *ptr = (std::vector<int,std::allocator< int > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "vectorii_insert" "', argument " "3"" of type '" "std::vector< std::vector< int > >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vectorii_insert" "', argument " "3"" of type '" "std::vector< std::vector< int > >::value_type const &""'"); 
    }
    arg3 = ptr;
  }
  result = (arg1)->insert(arg2,(std::vector< std::vector< int > >::value_type const &)*arg3);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::vector< int > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorii_insert__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< int > > *arg1 = (std::vector< std::vector< int > > *) 0 ;
  std::vector< std::vector< int > >::iterator arg2 ;
  std::vector< std::vector< int > >::size_type arg3 ;
  std::vector< std::vector< int > >::value_type *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  size_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:vectorii_insert",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_int_std__allocatorT_int_t_t_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorii_insert" "', argument " "1"" of type '" "std::vector< std::vector< int > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< int > > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vectorii_insert" "', argument " "2"" of type '" "std::vector< std::vector< int > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< std::vector< int > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< std::vector< int > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vectorii_insert" "', argument " "2"" of type '" "std::vector< std::vector< int > >::iterator""'");
    }
  }
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vectorii_insert" "', argument " "3"" of type '" "std::vector< std::vector< int > >::size_type""'");
  } 
  arg3 = static_cast< std::vector< std::vector< int > >::size_type >(val3);
  {
    std::vector<int,std::allocator< int > > *ptr = (std::vector<int,std::allocator< int > > *)0;
    res4 = swig::asptr(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "vectorii_insert" "', argument " "4"" of type '" "std::vector< std::vector< int > >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vectorii_insert" "', argument " "4"" of type '" "std::vector< std::vector< int > >::value_type const &""'"); 
    }
    arg4 = ptr;
  }
  (arg1)->insert(arg2,arg3,(std::vector< std::vector< int > >::value_type const &)*arg4);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorii_insert(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 4); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< std::vector< int > >::iterator > *>(iter) != 0));
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector<int,std::allocator< int > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_vectorii_insert__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< std::vector< int > >::iterator > *>(iter) != 0));
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = swig::asptr(argv[3], (std::vector<int,std::allocator< int > >**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_vectorii_insert__SWIG_1(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'vectorii_insert'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    insert(std::vector< std::vector< int > > *,std::vector< std::vector< int > >::iterator,std::vector< std::vector< int > >::value_type const &)\n"
    "    insert(std::vector< std::vector< int > > *,std::vector< std::vector< int > >::iterator,std::vector< std::vector< int > >::size_type,std::vector< std::vector< int > >::value_type const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorii_reserve(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< int > > *arg1 = (std::vector< std::vector< int > > *) 0 ;
  std::vector< std::vector< int > >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:vectorii_reserve",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_int_std__allocatorT_int_t_t_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorii_reserve" "', argument " "1"" of type '" "std::vector< std::vector< int > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< int > > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vectorii_reserve" "', argument " "2"" of type '" "std::vector< std::vector< int > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< std::vector< int > >::size_type >(val2);
  (arg1)->reserve(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorii_capacity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< int > > *arg1 = (std::vector< std::vector< int > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::vector< int > >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vectorii_capacity",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_int_std__allocatorT_int_t_t_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorii_capacity" "', argument " "1"" of type '" "std::vector< std::vector< int > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< int > > * >(argp1);
  result = ((std::vector< std::vector< int > > const *)arg1)->capacity();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_vectorii(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< int > > *arg1 = (std::vector< std::vector< int > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_vectorii",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_int_std__allocatorT_int_t_t_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_vectorii" "', argument " "1"" of type '" "std::vector< std::vector< int > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< int > > * >(argp1);
  {
    try {
      delete arg1;
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *vectorii_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__vectorT_std__vectorT_int_std__allocatorT_int_t_t_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_vectorpairii_iterator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::pair< int,int > > *arg1 = (std::vector< std::pair< int,int > > *) 0 ;
  PyObject **arg2 = (PyObject **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  arg2 = &obj0;
  if (!PyArg_ParseTuple(args,(char *)"O:vectorpairii_iterator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__pairT_int_int_t_std__allocatorT_std__pairT_int_int_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorpairii_iterator" "', argument " "1"" of type '" "std::vector< std::pair< int,int > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::pair< int,int > > * >(argp1);
  result = (swig::SwigPyIterator *)std_vector_Sl_std_pair_Sl_int_Sc_int_Sg__Sg__iterator(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorpairii___nonzero__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::pair< int,int > > *arg1 = (std::vector< std::pair< int,int > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vectorpairii___nonzero__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__pairT_int_int_t_std__allocatorT_std__pairT_int_int_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorpairii___nonzero__" "', argument " "1"" of type '" "std::vector< std::pair< int,int > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::pair< int,int > > * >(argp1);
  result = (bool)std_vector_Sl_std_pair_Sl_int_Sc_int_Sg__Sg____nonzero__((std::vector< std::pair< int,int > > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorpairii___bool__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::pair< int,int > > *arg1 = (std::vector< std::pair< int,int > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vectorpairii___bool__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__pairT_int_int_t_std__allocatorT_std__pairT_int_int_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorpairii___bool__" "', argument " "1"" of type '" "std::vector< std::pair< int,int > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::pair< int,int > > * >(argp1);
  result = (bool)std_vector_Sl_std_pair_Sl_int_Sc_int_Sg__Sg____bool__((std::vector< std::pair< int,int > > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorpairii___len__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::pair< int,int > > *arg1 = (std::vector< std::pair< int,int > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::pair< int,int > >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vectorpairii___len__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__pairT_int_int_t_std__allocatorT_std__pairT_int_int_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorpairii___len__" "', argument " "1"" of type '" "std::vector< std::pair< int,int > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::pair< int,int > > * >(argp1);
  result = std_vector_Sl_std_pair_Sl_int_Sc_int_Sg__Sg____len__((std::vector< std::pair< int,int > > const *)arg1);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorpairii_pop(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::pair< int,int > > *arg1 = (std::vector< std::pair< int,int > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::pair< int,int > >::value_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vectorpairii_pop",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__pairT_int_int_t_std__allocatorT_std__pairT_int_int_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorpairii_pop" "', argument " "1"" of type '" "std::vector< std::pair< int,int > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::pair< int,int > > * >(argp1);
  try {
    result = std_vector_Sl_std_pair_Sl_int_Sc_int_Sg__Sg__pop(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = swig::from(static_cast< std::pair<int,int > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorpairii___getslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::pair< int,int > > *arg1 = (std::vector< std::pair< int,int > > *) 0 ;
  std::vector< std::pair< int,int > >::difference_type arg2 ;
  std::vector< std::pair< int,int > >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< std::pair< int,int >,std::allocator< std::pair< int,int > > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:vectorpairii___getslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__pairT_int_int_t_std__allocatorT_std__pairT_int_int_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorpairii___getslice__" "', argument " "1"" of type '" "std::vector< std::pair< int,int > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::pair< int,int > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vectorpairii___getslice__" "', argument " "2"" of type '" "std::vector< std::pair< int,int > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::pair< int,int > >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vectorpairii___getslice__" "', argument " "3"" of type '" "std::vector< std::pair< int,int > >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< std::pair< int,int > >::difference_type >(val3);
  try {
    result = (std::vector< std::pair< int,int >,std::allocator< std::pair< int,int > > > *)std_vector_Sl_std_pair_Sl_int_Sc_int_Sg__Sg____getslice__(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__pairT_int_int_t_std__allocatorT_std__pairT_int_int_t_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorpairii___setslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::pair< int,int > > *arg1 = (std::vector< std::pair< int,int > > *) 0 ;
  std::vector< std::pair< int,int > >::difference_type arg2 ;
  std::vector< std::pair< int,int > >::difference_type arg3 ;
  std::vector< std::pair< int,int >,std::allocator< std::pair< int,int > > > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:vectorpairii___setslice__",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__pairT_int_int_t_std__allocatorT_std__pairT_int_int_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorpairii___setslice__" "', argument " "1"" of type '" "std::vector< std::pair< int,int > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::pair< int,int > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vectorpairii___setslice__" "', argument " "2"" of type '" "std::vector< std::pair< int,int > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::pair< int,int > >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vectorpairii___setslice__" "', argument " "3"" of type '" "std::vector< std::pair< int,int > >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< std::pair< int,int > >::difference_type >(val3);
  {
    std::vector<std::pair< int,int >,std::allocator< std::pair< int,int > > > *ptr = (std::vector<std::pair< int,int >,std::allocator< std::pair< int,int > > > *)0;
    res4 = swig::asptr(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "vectorpairii___setslice__" "', argument " "4"" of type '" "std::vector< std::pair< int,int >,std::allocator< std::pair< int,int > > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vectorpairii___setslice__" "', argument " "4"" of type '" "std::vector< std::pair< int,int >,std::allocator< std::pair< int,int > > > const &""'"); 
    }
    arg4 = ptr;
  }
  try {
    std_vector_Sl_std_pair_Sl_int_Sc_int_Sg__Sg____setslice__(arg1,arg2,arg3,(std::vector< std::pair< int,int >,std::allocator< std::pair< int,int > > > const &)*arg4);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorpairii___delslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::pair< int,int > > *arg1 = (std::vector< std::pair< int,int > > *) 0 ;
  std::vector< std::pair< int,int > >::difference_type arg2 ;
  std::vector< std::pair< int,int > >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:vectorpairii___delslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__pairT_int_int_t_std__allocatorT_std__pairT_int_int_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorpairii___delslice__" "', argument " "1"" of type '" "std::vector< std::pair< int,int > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::pair< int,int > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vectorpairii___delslice__" "', argument " "2"" of type '" "std::vector< std::pair< int,int > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::pair< int,int > >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vectorpairii___delslice__" "', argument " "3"" of type '" "std::vector< std::pair< int,int > >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< std::pair< int,int > >::difference_type >(val3);
  try {
    std_vector_Sl_std_pair_Sl_int_Sc_int_Sg__Sg____delslice__(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorpairii___delitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::pair< int,int > > *arg1 = (std::vector< std::pair< int,int > > *) 0 ;
  std::vector< std::pair< int,int > >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:vectorpairii___delitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__pairT_int_int_t_std__allocatorT_std__pairT_int_int_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorpairii___delitem__" "', argument " "1"" of type '" "std::vector< std::pair< int,int > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::pair< int,int > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vectorpairii___delitem__" "', argument " "2"" of type '" "std::vector< std::pair< int,int > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::pair< int,int > >::difference_type >(val2);
  try {
    std_vector_Sl_std_pair_Sl_int_Sc_int_Sg__Sg____delitem____SWIG_0(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorpairii___getitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::pair< int,int > > *arg1 = (std::vector< std::pair< int,int > > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< std::pair< int,int >,std::allocator< std::pair< int,int > > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:vectorpairii___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__pairT_int_int_t_std__allocatorT_std__pairT_int_int_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorpairii___getitem__" "', argument " "1"" of type '" "std::vector< std::pair< int,int > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::pair< int,int > > * >(argp1);
  {
    arg2 = (PySliceObject *) obj1;
  }
  try {
    result = (std::vector< std::pair< int,int >,std::allocator< std::pair< int,int > > > *)std_vector_Sl_std_pair_Sl_int_Sc_int_Sg__Sg____getitem____SWIG_0(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__pairT_int_int_t_std__allocatorT_std__pairT_int_int_t_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorpairii___setitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::pair< int,int > > *arg1 = (std::vector< std::pair< int,int > > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  std::vector< std::pair< int,int >,std::allocator< std::pair< int,int > > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:vectorpairii___setitem__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__pairT_int_int_t_std__allocatorT_std__pairT_int_int_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorpairii___setitem__" "', argument " "1"" of type '" "std::vector< std::pair< int,int > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::pair< int,int > > * >(argp1);
  {
    arg2 = (PySliceObject *) obj1;
  }
  {
    std::vector<std::pair< int,int >,std::allocator< std::pair< int,int > > > *ptr = (std::vector<std::pair< int,int >,std::allocator< std::pair< int,int > > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "vectorpairii___setitem__" "', argument " "3"" of type '" "std::vector< std::pair< int,int >,std::allocator< std::pair< int,int > > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vectorpairii___setitem__" "', argument " "3"" of type '" "std::vector< std::pair< int,int >,std::allocator< std::pair< int,int > > > const &""'"); 
    }
    arg3 = ptr;
  }
  try {
    std_vector_Sl_std_pair_Sl_int_Sc_int_Sg__Sg____setitem____SWIG_0(arg1,arg2,(std::vector< std::pair< int,int >,std::allocator< std::pair< int,int > > > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorpairii___delitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::pair< int,int > > *arg1 = (std::vector< std::pair< int,int > > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:vectorpairii___delitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__pairT_int_int_t_std__allocatorT_std__pairT_int_int_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorpairii___delitem__" "', argument " "1"" of type '" "std::vector< std::pair< int,int > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::pair< int,int > > * >(argp1);
  {
    arg2 = (PySliceObject *) obj1;
  }
  try {
    std_vector_Sl_std_pair_Sl_int_Sc_int_Sg__Sg____delitem____SWIG_1(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorpairii___delitem__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::pair< int,int >,std::allocator< std::pair< int,int > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_vectorpairii___delitem____SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::pair< int,int >,std::allocator< std::pair< int,int > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_vectorpairii___delitem____SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'vectorpairii___delitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    __delitem__(std::vector< std::pair< int,int > > *,std::vector< std::pair< int,int > >::difference_type)\n"
    "    __delitem__(std::vector< std::pair< int,int > > *,PySliceObject *)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorpairii___getitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::pair< int,int > > *arg1 = (std::vector< std::pair< int,int > > *) 0 ;
  std::vector< std::pair< int,int > >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< std::pair< int,int > >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:vectorpairii___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__pairT_int_int_t_std__allocatorT_std__pairT_int_int_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorpairii___getitem__" "', argument " "1"" of type '" "std::vector< std::pair< int,int > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::pair< int,int > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vectorpairii___getitem__" "', argument " "2"" of type '" "std::vector< std::pair< int,int > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::pair< int,int > >::difference_type >(val2);
  try {
    result = (std::vector< std::pair< int,int > >::value_type *) &std_vector_Sl_std_pair_Sl_int_Sc_int_Sg__Sg____getitem____SWIG_1((std::vector< std::pair< int,int > > const *)arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = swig::from(static_cast< std::pair<int,int > >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorpairii___getitem__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::pair< int,int >,std::allocator< std::pair< int,int > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_vectorpairii___getitem____SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::pair< int,int >,std::allocator< std::pair< int,int > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_vectorpairii___getitem____SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'vectorpairii___getitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    __getitem__(std::vector< std::pair< int,int > > *,PySliceObject *)\n"
    "    __getitem__(std::vector< std::pair< int,int > > const *,std::vector< std::pair< int,int > >::difference_type)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorpairii___setitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::pair< int,int > > *arg1 = (std::vector< std::pair< int,int > > *) 0 ;
  std::vector< std::pair< int,int > >::difference_type arg2 ;
  std::vector< std::pair< int,int > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:vectorpairii___setitem__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__pairT_int_int_t_std__allocatorT_std__pairT_int_int_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorpairii___setitem__" "', argument " "1"" of type '" "std::vector< std::pair< int,int > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::pair< int,int > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vectorpairii___setitem__" "', argument " "2"" of type '" "std::vector< std::pair< int,int > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::pair< int,int > >::difference_type >(val2);
  {
    std::pair<int,int > *ptr = (std::pair<int,int > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "vectorpairii___setitem__" "', argument " "3"" of type '" "std::vector< std::pair< int,int > >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vectorpairii___setitem__" "', argument " "3"" of type '" "std::vector< std::pair< int,int > >::value_type const &""'"); 
    }
    arg3 = ptr;
  }
  try {
    std_vector_Sl_std_pair_Sl_int_Sc_int_Sg__Sg____setitem____SWIG_1(arg1,arg2,(std::pair< int,int > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorpairii___setitem__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::pair< int,int >,std::allocator< std::pair< int,int > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector<std::pair< int,int >,std::allocator< std::pair< int,int > > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_vectorpairii___setitem____SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::pair< int,int >,std::allocator< std::pair< int,int > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = swig::asptr(argv[2], (std::pair<int,int >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_vectorpairii___setitem____SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'vectorpairii___setitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    __setitem__(std::vector< std::pair< int,int > > *,PySliceObject *,std::vector< std::pair< int,int >,std::allocator< std::pair< int,int > > > const &)\n"
    "    __setitem__(std::vector< std::pair< int,int > > *,std::vector< std::pair< int,int > >::difference_type,std::vector< std::pair< int,int > >::value_type const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorpairii_append(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::pair< int,int > > *arg1 = (std::vector< std::pair< int,int > > *) 0 ;
  std::vector< std::pair< int,int > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:vectorpairii_append",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__pairT_int_int_t_std__allocatorT_std__pairT_int_int_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorpairii_append" "', argument " "1"" of type '" "std::vector< std::pair< int,int > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::pair< int,int > > * >(argp1);
  {
    std::pair<int,int > *ptr = (std::pair<int,int > *)0;
    res2 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "vectorpairii_append" "', argument " "2"" of type '" "std::vector< std::pair< int,int > >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vectorpairii_append" "', argument " "2"" of type '" "std::vector< std::pair< int,int > >::value_type const &""'"); 
    }
    arg2 = ptr;
  }
  std_vector_Sl_std_pair_Sl_int_Sc_int_Sg__Sg__append(arg1,(std::pair< int,int > const &)*arg2);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_vectorpairii__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::pair< int,int > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_vectorpairii")) SWIG_fail;
  result = (std::vector< std::pair< int,int > > *)new std::vector< std::pair< int,int > >();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__pairT_int_int_t_std__allocatorT_std__pairT_int_int_t_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_vectorpairii__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::pair< int,int > > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  std::vector< std::pair< int,int > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_vectorpairii",&obj0)) SWIG_fail;
  {
    std::vector<std::pair< int,int >,std::allocator< std::pair< int,int > > > *ptr = (std::vector<std::pair< int,int >,std::allocator< std::pair< int,int > > > *)0;
    res1 = swig::asptr(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_vectorpairii" "', argument " "1"" of type '" "std::vector< std::pair< int,int > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_vectorpairii" "', argument " "1"" of type '" "std::vector< std::pair< int,int > > const &""'"); 
    }
    arg1 = ptr;
  }
  result = (std::vector< std::pair< int,int > > *)new std::vector< std::pair< int,int > >((std::vector< std::pair< int,int > > const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__pairT_int_int_t_std__allocatorT_std__pairT_int_int_t_t_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorpairii_empty(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::pair< int,int > > *arg1 = (std::vector< std::pair< int,int > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vectorpairii_empty",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__pairT_int_int_t_std__allocatorT_std__pairT_int_int_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorpairii_empty" "', argument " "1"" of type '" "std::vector< std::pair< int,int > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::pair< int,int > > * >(argp1);
  result = (bool)((std::vector< std::pair< int,int > > const *)arg1)->empty();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorpairii_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::pair< int,int > > *arg1 = (std::vector< std::pair< int,int > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::pair< int,int > >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vectorpairii_size",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__pairT_int_int_t_std__allocatorT_std__pairT_int_int_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorpairii_size" "', argument " "1"" of type '" "std::vector< std::pair< int,int > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::pair< int,int > > * >(argp1);
  result = ((std::vector< std::pair< int,int > > const *)arg1)->size();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorpairii_clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::pair< int,int > > *arg1 = (std::vector< std::pair< int,int > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vectorpairii_clear",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__pairT_int_int_t_std__allocatorT_std__pairT_int_int_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorpairii_clear" "', argument " "1"" of type '" "std::vector< std::pair< int,int > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::pair< int,int > > * >(argp1);
  (arg1)->clear();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorpairii_swap(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::pair< int,int > > *arg1 = (std::vector< std::pair< int,int > > *) 0 ;
  std::vector< std::pair< int,int > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:vectorpairii_swap",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__pairT_int_int_t_std__allocatorT_std__pairT_int_int_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorpairii_swap" "', argument " "1"" of type '" "std::vector< std::pair< int,int > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::pair< int,int > > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_std__pairT_int_int_t_std__allocatorT_std__pairT_int_int_t_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "vectorpairii_swap" "', argument " "2"" of type '" "std::vector< std::pair< int,int > > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vectorpairii_swap" "', argument " "2"" of type '" "std::vector< std::pair< int,int > > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< std::pair< int,int > > * >(argp2);
  (arg1)->swap(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorpairii_get_allocator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::pair< int,int > > *arg1 = (std::vector< std::pair< int,int > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::allocator< std::pair< int,int > > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vectorpairii_get_allocator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__pairT_int_int_t_std__allocatorT_std__pairT_int_int_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorpairii_get_allocator" "', argument " "1"" of type '" "std::vector< std::pair< int,int > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::pair< int,int > > * >(argp1);
  result = ((std::vector< std::pair< int,int > > const *)arg1)->get_allocator();
  resultobj = SWIG_NewPointerObj((new std::vector< std::pair< int,int > >::allocator_type(static_cast< const std::vector< std::pair< int,int > >::allocator_type& >(result))), SWIGTYPE_p_std__vectorT_std__pairT_int_int_t_std__allocatorT_std__pairT_int_int_t_t_t__allocator_type, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorpairii_begin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::pair< int,int > > *arg1 = (std::vector< std::pair< int,int > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::pair< int,int > >::const_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vectorpairii_begin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__pairT_int_int_t_std__allocatorT_std__pairT_int_int_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorpairii_begin" "', argument " "1"" of type '" "std::vector< std::pair< int,int > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::pair< int,int > > * >(argp1);
  result = ((std::vector< std::pair< int,int > > const *)arg1)->begin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::pair< int,int > >::const_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorpairii_end(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::pair< int,int > > *arg1 = (std::vector< std::pair< int,int > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::pair< int,int > >::const_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vectorpairii_end",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__pairT_int_int_t_std__allocatorT_std__pairT_int_int_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorpairii_end" "', argument " "1"" of type '" "std::vector< std::pair< int,int > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::pair< int,int > > * >(argp1);
  result = ((std::vector< std::pair< int,int > > const *)arg1)->end();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::pair< int,int > >::const_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorpairii_rbegin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::pair< int,int > > *arg1 = (std::vector< std::pair< int,int > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::pair< int,int > >::const_reverse_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vectorpairii_rbegin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__pairT_int_int_t_std__allocatorT_std__pairT_int_int_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorpairii_rbegin" "', argument " "1"" of type '" "std::vector< std::pair< int,int > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::pair< int,int > > * >(argp1);
  result = ((std::vector< std::pair< int,int > > const *)arg1)->rbegin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::pair< int,int > >::const_reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorpairii_rend(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::pair< int,int > > *arg1 = (std::vector< std::pair< int,int > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::pair< int,int > >::const_reverse_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vectorpairii_rend",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__pairT_int_int_t_std__allocatorT_std__pairT_int_int_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorpairii_rend" "', argument " "1"" of type '" "std::vector< std::pair< int,int > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::pair< int,int > > * >(argp1);
  result = ((std::vector< std::pair< int,int > > const *)arg1)->rend();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::pair< int,int > >::const_reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_vectorpairii__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::pair< int,int > >::size_type arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::pair< int,int > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_vectorpairii",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_vectorpairii" "', argument " "1"" of type '" "std::vector< std::pair< int,int > >::size_type""'");
  } 
  arg1 = static_cast< std::vector< std::pair< int,int > >::size_type >(val1);
  result = (std::vector< std::pair< int,int > > *)new std::vector< std::pair< int,int > >(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__pairT_int_int_t_std__allocatorT_std__pairT_int_int_t_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorpairii_pop_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::pair< int,int > > *arg1 = (std::vector< std::pair< int,int > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vectorpairii_pop_back",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__pairT_int_int_t_std__allocatorT_std__pairT_int_int_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorpairii_pop_back" "', argument " "1"" of type '" "std::vector< std::pair< int,int > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::pair< int,int > > * >(argp1);
  (arg1)->pop_back();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorpairii_resize__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::pair< int,int > > *arg1 = (std::vector< std::pair< int,int > > *) 0 ;
  std::vector< std::pair< int,int > >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:vectorpairii_resize",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__pairT_int_int_t_std__allocatorT_std__pairT_int_int_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorpairii_resize" "', argument " "1"" of type '" "std::vector< std::pair< int,int > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::pair< int,int > > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vectorpairii_resize" "', argument " "2"" of type '" "std::vector< std::pair< int,int > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< std::pair< int,int > >::size_type >(val2);
  (arg1)->resize(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorpairii_erase__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::pair< int,int > > *arg1 = (std::vector< std::pair< int,int > > *) 0 ;
  std::vector< std::pair< int,int > >::iterator arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< std::pair< int,int > >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:vectorpairii_erase",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__pairT_int_int_t_std__allocatorT_std__pairT_int_int_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorpairii_erase" "', argument " "1"" of type '" "std::vector< std::pair< int,int > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::pair< int,int > > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vectorpairii_erase" "', argument " "2"" of type '" "std::vector< std::pair< int,int > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< std::pair< int,int > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< std::pair< int,int > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vectorpairii_erase" "', argument " "2"" of type '" "std::vector< std::pair< int,int > >::iterator""'");
    }
  }
  result = (arg1)->erase(arg2);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::pair< int,int > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorpairii_erase__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::pair< int,int > > *arg1 = (std::vector< std::pair< int,int > > *) 0 ;
  std::vector< std::pair< int,int > >::iterator arg2 ;
  std::vector< std::pair< int,int > >::iterator arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  swig::SwigPyIterator *iter3 = 0 ;
  int res3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< std::pair< int,int > >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:vectorpairii_erase",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__pairT_int_int_t_std__allocatorT_std__pairT_int_int_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorpairii_erase" "', argument " "1"" of type '" "std::vector< std::pair< int,int > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::pair< int,int > > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vectorpairii_erase" "', argument " "2"" of type '" "std::vector< std::pair< int,int > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< std::pair< int,int > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< std::pair< int,int > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vectorpairii_erase" "', argument " "2"" of type '" "std::vector< std::pair< int,int > >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(obj2, SWIG_as_voidptrptr(&iter3), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res3) || !iter3) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vectorpairii_erase" "', argument " "3"" of type '" "std::vector< std::pair< int,int > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< std::pair< int,int > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< std::pair< int,int > >::iterator > *>(iter3);
    if (iter_t) {
      arg3 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vectorpairii_erase" "', argument " "3"" of type '" "std::vector< std::pair< int,int > >::iterator""'");
    }
  }
  result = (arg1)->erase(arg2,arg3);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::pair< int,int > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorpairii_erase(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::pair< int,int >,std::allocator< std::pair< int,int > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< std::pair< int,int > >::iterator > *>(iter) != 0));
      if (_v) {
        return _wrap_vectorpairii_erase__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::pair< int,int >,std::allocator< std::pair< int,int > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< std::pair< int,int > >::iterator > *>(iter) != 0));
      if (_v) {
        swig::SwigPyIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[2], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< std::pair< int,int > >::iterator > *>(iter) != 0));
        if (_v) {
          return _wrap_vectorpairii_erase__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'vectorpairii_erase'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    erase(std::vector< std::pair< int,int > > *,std::vector< std::pair< int,int > >::iterator)\n"
    "    erase(std::vector< std::pair< int,int > > *,std::vector< std::pair< int,int > >::iterator,std::vector< std::pair< int,int > >::iterator)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_vectorpairii__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::pair< int,int > >::size_type arg1 ;
  std::vector< std::pair< int,int > >::value_type *arg2 = 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< std::pair< int,int > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_vectorpairii",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_vectorpairii" "', argument " "1"" of type '" "std::vector< std::pair< int,int > >::size_type""'");
  } 
  arg1 = static_cast< std::vector< std::pair< int,int > >::size_type >(val1);
  {
    std::pair<int,int > *ptr = (std::pair<int,int > *)0;
    res2 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_vectorpairii" "', argument " "2"" of type '" "std::vector< std::pair< int,int > >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_vectorpairii" "', argument " "2"" of type '" "std::vector< std::pair< int,int > >::value_type const &""'"); 
    }
    arg2 = ptr;
  }
  result = (std::vector< std::pair< int,int > > *)new std::vector< std::pair< int,int > >(arg1,(std::vector< std::pair< int,int > >::value_type const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__pairT_int_int_t_std__allocatorT_std__pairT_int_int_t_t_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_vectorpairii(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_vectorpairii__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_vectorpairii__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::pair< int,int >,std::allocator< std::pair< int,int > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_vectorpairii__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = swig::asptr(argv[1], (std::pair<int,int >**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_vectorpairii__SWIG_3(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_vectorpairii'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::pair< int,int > >()\n"
    "    std::vector< std::pair< int,int > >(std::vector< std::pair< int,int > > const &)\n"
    "    std::vector< std::pair< int,int > >(std::vector< std::pair< int,int > >::size_type)\n"
    "    std::vector< std::pair< int,int > >(std::vector< std::pair< int,int > >::size_type,std::vector< std::pair< int,int > >::value_type const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorpairii_push_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::pair< int,int > > *arg1 = (std::vector< std::pair< int,int > > *) 0 ;
  std::vector< std::pair< int,int > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:vectorpairii_push_back",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__pairT_int_int_t_std__allocatorT_std__pairT_int_int_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorpairii_push_back" "', argument " "1"" of type '" "std::vector< std::pair< int,int > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::pair< int,int > > * >(argp1);
  {
    std::pair<int,int > *ptr = (std::pair<int,int > *)0;
    res2 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "vectorpairii_push_back" "', argument " "2"" of type '" "std::vector< std::pair< int,int > >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vectorpairii_push_back" "', argument " "2"" of type '" "std::vector< std::pair< int,int > >::value_type const &""'"); 
    }
    arg2 = ptr;
  }
  (arg1)->push_back((std::vector< std::pair< int,int > >::value_type const &)*arg2);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorpairii_front(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::pair< int,int > > *arg1 = (std::vector< std::pair< int,int > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::pair< int,int > >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vectorpairii_front",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__pairT_int_int_t_std__allocatorT_std__pairT_int_int_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorpairii_front" "', argument " "1"" of type '" "std::vector< std::pair< int,int > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::pair< int,int > > * >(argp1);
  result = (std::vector< std::pair< int,int > >::value_type *) &((std::vector< std::pair< int,int > > const *)arg1)->front();
  resultobj = swig::from(static_cast< std::pair<int,int > >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorpairii_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::pair< int,int > > *arg1 = (std::vector< std::pair< int,int > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::pair< int,int > >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vectorpairii_back",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__pairT_int_int_t_std__allocatorT_std__pairT_int_int_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorpairii_back" "', argument " "1"" of type '" "std::vector< std::pair< int,int > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::pair< int,int > > * >(argp1);
  result = (std::vector< std::pair< int,int > >::value_type *) &((std::vector< std::pair< int,int > > const *)arg1)->back();
  resultobj = swig::from(static_cast< std::pair<int,int > >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorpairii_assign(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::pair< int,int > > *arg1 = (std::vector< std::pair< int,int > > *) 0 ;
  std::vector< std::pair< int,int > >::size_type arg2 ;
  std::vector< std::pair< int,int > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:vectorpairii_assign",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__pairT_int_int_t_std__allocatorT_std__pairT_int_int_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorpairii_assign" "', argument " "1"" of type '" "std::vector< std::pair< int,int > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::pair< int,int > > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vectorpairii_assign" "', argument " "2"" of type '" "std::vector< std::pair< int,int > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< std::pair< int,int > >::size_type >(val2);
  {
    std::pair<int,int > *ptr = (std::pair<int,int > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "vectorpairii_assign" "', argument " "3"" of type '" "std::vector< std::pair< int,int > >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vectorpairii_assign" "', argument " "3"" of type '" "std::vector< std::pair< int,int > >::value_type const &""'"); 
    }
    arg3 = ptr;
  }
  (arg1)->assign(arg2,(std::vector< std::pair< int,int > >::value_type const &)*arg3);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorpairii_resize__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::pair< int,int > > *arg1 = (std::vector< std::pair< int,int > > *) 0 ;
  std::vector< std::pair< int,int > >::size_type arg2 ;
  std::vector< std::pair< int,int > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:vectorpairii_resize",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__pairT_int_int_t_std__allocatorT_std__pairT_int_int_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorpairii_resize" "', argument " "1"" of type '" "std::vector< std::pair< int,int > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::pair< int,int > > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vectorpairii_resize" "', argument " "2"" of type '" "std::vector< std::pair< int,int > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< std::pair< int,int > >::size_type >(val2);
  {
    std::pair<int,int > *ptr = (std::pair<int,int > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "vectorpairii_resize" "', argument " "3"" of type '" "std::vector< std::pair< int,int > >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vectorpairii_resize" "', argument " "3"" of type '" "std::vector< std::pair< int,int > >::value_type const &""'"); 
    }
    arg3 = ptr;
  }
  (arg1)->resize(arg2,(std::vector< std::pair< int,int > >::value_type const &)*arg3);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorpairii_resize(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::pair< int,int >,std::allocator< std::pair< int,int > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_vectorpairii_resize__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::pair< int,int >,std::allocator< std::pair< int,int > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = swig::asptr(argv[2], (std::pair<int,int >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_vectorpairii_resize__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'vectorpairii_resize'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    resize(std::vector< std::pair< int,int > > *,std::vector< std::pair< int,int > >::size_type)\n"
    "    resize(std::vector< std::pair< int,int > > *,std::vector< std::pair< int,int > >::size_type,std::vector< std::pair< int,int > >::value_type const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorpairii_insert__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::pair< int,int > > *arg1 = (std::vector< std::pair< int,int > > *) 0 ;
  std::vector< std::pair< int,int > >::iterator arg2 ;
  std::vector< std::pair< int,int > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< std::pair< int,int > >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:vectorpairii_insert",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__pairT_int_int_t_std__allocatorT_std__pairT_int_int_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorpairii_insert" "', argument " "1"" of type '" "std::vector< std::pair< int,int > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::pair< int,int > > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vectorpairii_insert" "', argument " "2"" of type '" "std::vector< std::pair< int,int > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< std::pair< int,int > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< std::pair< int,int > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vectorpairii_insert" "', argument " "2"" of type '" "std::vector< std::pair< int,int > >::iterator""'");
    }
  }
  {
    std::pair<int,int > *ptr = (std::pair<int,int > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "vectorpairii_insert" "', argument " "3"" of type '" "std::vector< std::pair< int,int > >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vectorpairii_insert" "', argument " "3"" of type '" "std::vector< std::pair< int,int > >::value_type const &""'"); 
    }
    arg3 = ptr;
  }
  result = (arg1)->insert(arg2,(std::vector< std::pair< int,int > >::value_type const &)*arg3);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::pair< int,int > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorpairii_insert__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::pair< int,int > > *arg1 = (std::vector< std::pair< int,int > > *) 0 ;
  std::vector< std::pair< int,int > >::iterator arg2 ;
  std::vector< std::pair< int,int > >::size_type arg3 ;
  std::vector< std::pair< int,int > >::value_type *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  size_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:vectorpairii_insert",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__pairT_int_int_t_std__allocatorT_std__pairT_int_int_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorpairii_insert" "', argument " "1"" of type '" "std::vector< std::pair< int,int > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::pair< int,int > > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vectorpairii_insert" "', argument " "2"" of type '" "std::vector< std::pair< int,int > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< std::pair< int,int > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< std::pair< int,int > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vectorpairii_insert" "', argument " "2"" of type '" "std::vector< std::pair< int,int > >::iterator""'");
    }
  }
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vectorpairii_insert" "', argument " "3"" of type '" "std::vector< std::pair< int,int > >::size_type""'");
  } 
  arg3 = static_cast< std::vector< std::pair< int,int > >::size_type >(val3);
  {
    std::pair<int,int > *ptr = (std::pair<int,int > *)0;
    res4 = swig::asptr(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "vectorpairii_insert" "', argument " "4"" of type '" "std::vector< std::pair< int,int > >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vectorpairii_insert" "', argument " "4"" of type '" "std::vector< std::pair< int,int > >::value_type const &""'"); 
    }
    arg4 = ptr;
  }
  (arg1)->insert(arg2,arg3,(std::vector< std::pair< int,int > >::value_type const &)*arg4);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorpairii_insert(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 4); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::pair< int,int >,std::allocator< std::pair< int,int > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< std::pair< int,int > >::iterator > *>(iter) != 0));
      if (_v) {
        int res = swig::asptr(argv[2], (std::pair<int,int >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_vectorpairii_insert__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::pair< int,int >,std::allocator< std::pair< int,int > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< std::pair< int,int > >::iterator > *>(iter) != 0));
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = swig::asptr(argv[3], (std::pair<int,int >**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_vectorpairii_insert__SWIG_1(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'vectorpairii_insert'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    insert(std::vector< std::pair< int,int > > *,std::vector< std::pair< int,int > >::iterator,std::vector< std::pair< int,int > >::value_type const &)\n"
    "    insert(std::vector< std::pair< int,int > > *,std::vector< std::pair< int,int > >::iterator,std::vector< std::pair< int,int > >::size_type,std::vector< std::pair< int,int > >::value_type const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorpairii_reserve(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::pair< int,int > > *arg1 = (std::vector< std::pair< int,int > > *) 0 ;
  std::vector< std::pair< int,int > >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:vectorpairii_reserve",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__pairT_int_int_t_std__allocatorT_std__pairT_int_int_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorpairii_reserve" "', argument " "1"" of type '" "std::vector< std::pair< int,int > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::pair< int,int > > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vectorpairii_reserve" "', argument " "2"" of type '" "std::vector< std::pair< int,int > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< std::pair< int,int > >::size_type >(val2);
  (arg1)->reserve(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorpairii_capacity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::pair< int,int > > *arg1 = (std::vector< std::pair< int,int > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::pair< int,int > >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vectorpairii_capacity",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__pairT_int_int_t_std__allocatorT_std__pairT_int_int_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorpairii_capacity" "', argument " "1"" of type '" "std::vector< std::pair< int,int > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::pair< int,int > > * >(argp1);
  result = ((std::vector< std::pair< int,int > > const *)arg1)->capacity();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_vectorpairii(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::pair< int,int > > *arg1 = (std::vector< std::pair< int,int > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_vectorpairii",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__pairT_int_int_t_std__allocatorT_std__pairT_int_int_t_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_vectorpairii" "', argument " "1"" of type '" "std::vector< std::pair< int,int > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::pair< int,int > > * >(argp1);
  {
    try {
      delete arg1;
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *vectorpairii_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__vectorT_std__pairT_int_int_t_std__allocatorT_std__pairT_int_int_t_t_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_vectorstring_iterator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  PyObject **arg2 = (PyObject **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  arg2 = &obj0;
  if (!PyArg_ParseTuple(args,(char *)"O:vectorstring_iterator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorstring_iterator" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  result = (swig::SwigPyIterator *)std_vector_Sl_std_string_Sg__iterator(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorstring___nonzero__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vectorstring___nonzero__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorstring___nonzero__" "', argument " "1"" of type '" "std::vector< std::string > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  result = (bool)std_vector_Sl_std_string_Sg____nonzero__((std::vector< std::string > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorstring___bool__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vectorstring___bool__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorstring___bool__" "', argument " "1"" of type '" "std::vector< std::string > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  result = (bool)std_vector_Sl_std_string_Sg____bool__((std::vector< std::string > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorstring___len__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::string >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vectorstring___len__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorstring___len__" "', argument " "1"" of type '" "std::vector< std::string > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  result = std_vector_Sl_std_string_Sg____len__((std::vector< std::string > const *)arg1);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorstring_pop(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::string >::value_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vectorstring_pop",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorstring_pop" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  try {
    result = std_vector_Sl_std_string_Sg__pop(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorstring___getslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::difference_type arg2 ;
  std::vector< std::string >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< std::string,std::allocator< std::string > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:vectorstring___getslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorstring___getslice__" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vectorstring___getslice__" "', argument " "2"" of type '" "std::vector< std::string >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::string >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vectorstring___getslice__" "', argument " "3"" of type '" "std::vector< std::string >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< std::string >::difference_type >(val3);
  try {
    result = (std::vector< std::string,std::allocator< std::string > > *)std_vector_Sl_std_string_Sg____getslice__(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorstring___setslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::difference_type arg2 ;
  std::vector< std::string >::difference_type arg3 ;
  std::vector< std::string,std::allocator< std::string > > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:vectorstring___setslice__",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorstring___setslice__" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vectorstring___setslice__" "', argument " "2"" of type '" "std::vector< std::string >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::string >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vectorstring___setslice__" "', argument " "3"" of type '" "std::vector< std::string >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< std::string >::difference_type >(val3);
  {
    std::vector<std::string,std::allocator< std::string > > *ptr = (std::vector<std::string,std::allocator< std::string > > *)0;
    res4 = swig::asptr(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "vectorstring___setslice__" "', argument " "4"" of type '" "std::vector< std::string,std::allocator< std::string > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vectorstring___setslice__" "', argument " "4"" of type '" "std::vector< std::string,std::allocator< std::string > > const &""'"); 
    }
    arg4 = ptr;
  }
  try {
    std_vector_Sl_std_string_Sg____setslice__(arg1,arg2,arg3,(std::vector< std::string,std::allocator< std::string > > const &)*arg4);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorstring___delslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::difference_type arg2 ;
  std::vector< std::string >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:vectorstring___delslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorstring___delslice__" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vectorstring___delslice__" "', argument " "2"" of type '" "std::vector< std::string >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::string >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vectorstring___delslice__" "', argument " "3"" of type '" "std::vector< std::string >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< std::string >::difference_type >(val3);
  try {
    std_vector_Sl_std_string_Sg____delslice__(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorstring___delitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:vectorstring___delitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorstring___delitem__" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vectorstring___delitem__" "', argument " "2"" of type '" "std::vector< std::string >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::string >::difference_type >(val2);
  try {
    std_vector_Sl_std_string_Sg____delitem____SWIG_0(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorstring___getitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< std::string,std::allocator< std::string > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:vectorstring___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorstring___getitem__" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  {
    arg2 = (PySliceObject *) obj1;
  }
  try {
    result = (std::vector< std::string,std::allocator< std::string > > *)std_vector_Sl_std_string_Sg____getitem____SWIG_0(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorstring___setitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  std::vector< std::string,std::allocator< std::string > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:vectorstring___setitem__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorstring___setitem__" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  {
    arg2 = (PySliceObject *) obj1;
  }
  {
    std::vector<std::string,std::allocator< std::string > > *ptr = (std::vector<std::string,std::allocator< std::string > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "vectorstring___setitem__" "', argument " "3"" of type '" "std::vector< std::string,std::allocator< std::string > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vectorstring___setitem__" "', argument " "3"" of type '" "std::vector< std::string,std::allocator< std::string > > const &""'"); 
    }
    arg3 = ptr;
  }
  try {
    std_vector_Sl_std_string_Sg____setitem____SWIG_0(arg1,arg2,(std::vector< std::string,std::allocator< std::string > > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorstring___delitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:vectorstring___delitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorstring___delitem__" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  {
    arg2 = (PySliceObject *) obj1;
  }
  try {
    std_vector_Sl_std_string_Sg____delitem____SWIG_1(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorstring___delitem__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::string,std::allocator< std::string > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_vectorstring___delitem____SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::string,std::allocator< std::string > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_vectorstring___delitem____SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'vectorstring___delitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    __delitem__(std::vector< std::string > *,std::vector< std::string >::difference_type)\n"
    "    __delitem__(std::vector< std::string > *,PySliceObject *)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorstring___getitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< std::string >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:vectorstring___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorstring___getitem__" "', argument " "1"" of type '" "std::vector< std::string > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vectorstring___getitem__" "', argument " "2"" of type '" "std::vector< std::string >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::string >::difference_type >(val2);
  try {
    result = (std::vector< std::string >::value_type *) &std_vector_Sl_std_string_Sg____getitem____SWIG_1((std::vector< std::string > const *)arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorstring___getitem__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::string,std::allocator< std::string > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_vectorstring___getitem____SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::string,std::allocator< std::string > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_vectorstring___getitem____SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'vectorstring___getitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    __getitem__(std::vector< std::string > *,PySliceObject *)\n"
    "    __getitem__(std::vector< std::string > const *,std::vector< std::string >::difference_type)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorstring___setitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::difference_type arg2 ;
  std::vector< std::string >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:vectorstring___setitem__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorstring___setitem__" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vectorstring___setitem__" "', argument " "2"" of type '" "std::vector< std::string >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::string >::difference_type >(val2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "vectorstring___setitem__" "', argument " "3"" of type '" "std::vector< std::string >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vectorstring___setitem__" "', argument " "3"" of type '" "std::vector< std::string >::value_type const &""'"); 
    }
    arg3 = ptr;
  }
  try {
    std_vector_Sl_std_string_Sg____setitem____SWIG_1(arg1,arg2,(std::string const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorstring___setitem__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::string,std::allocator< std::string > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector<std::string,std::allocator< std::string > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_vectorstring___setitem____SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::string,std::allocator< std::string > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_vectorstring___setitem____SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'vectorstring___setitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    __setitem__(std::vector< std::string > *,PySliceObject *,std::vector< std::string,std::allocator< std::string > > const &)\n"
    "    __setitem__(std::vector< std::string > *,std::vector< std::string >::difference_type,std::vector< std::string >::value_type const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorstring_append(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:vectorstring_append",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorstring_append" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "vectorstring_append" "', argument " "2"" of type '" "std::vector< std::string >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vectorstring_append" "', argument " "2"" of type '" "std::vector< std::string >::value_type const &""'"); 
    }
    arg2 = ptr;
  }
  std_vector_Sl_std_string_Sg__append(arg1,(std::string const &)*arg2);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_vectorstring__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_vectorstring")) SWIG_fail;
  result = (std::vector< std::string > *)new std::vector< std::string >();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_vectorstring__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  std::vector< std::string > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_vectorstring",&obj0)) SWIG_fail;
  {
    std::vector<std::string,std::allocator< std::string > > *ptr = (std::vector<std::string,std::allocator< std::string > > *)0;
    res1 = swig::asptr(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_vectorstring" "', argument " "1"" of type '" "std::vector< std::string > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_vectorstring" "', argument " "1"" of type '" "std::vector< std::string > const &""'"); 
    }
    arg1 = ptr;
  }
  result = (std::vector< std::string > *)new std::vector< std::string >((std::vector< std::string > const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorstring_empty(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vectorstring_empty",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorstring_empty" "', argument " "1"" of type '" "std::vector< std::string > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  result = (bool)((std::vector< std::string > const *)arg1)->empty();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorstring_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::string >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vectorstring_size",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorstring_size" "', argument " "1"" of type '" "std::vector< std::string > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  result = ((std::vector< std::string > const *)arg1)->size();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorstring_clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vectorstring_clear",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorstring_clear" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  (arg1)->clear();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorstring_swap(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:vectorstring_swap",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorstring_swap" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "vectorstring_swap" "', argument " "2"" of type '" "std::vector< std::string > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vectorstring_swap" "', argument " "2"" of type '" "std::vector< std::string > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< std::string > * >(argp2);
  (arg1)->swap(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorstring_get_allocator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::allocator< std::string > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vectorstring_get_allocator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorstring_get_allocator" "', argument " "1"" of type '" "std::vector< std::string > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  result = ((std::vector< std::string > const *)arg1)->get_allocator();
  resultobj = SWIG_NewPointerObj((new std::vector< std::string >::allocator_type(static_cast< const std::vector< std::string >::allocator_type& >(result))), SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t__allocator_type, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorstring_begin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::string >::const_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vectorstring_begin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorstring_begin" "', argument " "1"" of type '" "std::vector< std::string > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  result = ((std::vector< std::string > const *)arg1)->begin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::string >::const_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorstring_end(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::string >::const_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vectorstring_end",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorstring_end" "', argument " "1"" of type '" "std::vector< std::string > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  result = ((std::vector< std::string > const *)arg1)->end();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::string >::const_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorstring_rbegin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::string >::const_reverse_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vectorstring_rbegin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorstring_rbegin" "', argument " "1"" of type '" "std::vector< std::string > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  result = ((std::vector< std::string > const *)arg1)->rbegin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::string >::const_reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorstring_rend(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::string >::const_reverse_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vectorstring_rend",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorstring_rend" "', argument " "1"" of type '" "std::vector< std::string > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  result = ((std::vector< std::string > const *)arg1)->rend();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::string >::const_reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_vectorstring__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string >::size_type arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::string > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_vectorstring",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_vectorstring" "', argument " "1"" of type '" "std::vector< std::string >::size_type""'");
  } 
  arg1 = static_cast< std::vector< std::string >::size_type >(val1);
  result = (std::vector< std::string > *)new std::vector< std::string >(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorstring_pop_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vectorstring_pop_back",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorstring_pop_back" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  (arg1)->pop_back();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorstring_resize__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:vectorstring_resize",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorstring_resize" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vectorstring_resize" "', argument " "2"" of type '" "std::vector< std::string >::size_type""'");
  } 
  arg2 = static_cast< std::vector< std::string >::size_type >(val2);
  (arg1)->resize(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorstring_erase__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::iterator arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< std::string >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:vectorstring_erase",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorstring_erase" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vectorstring_erase" "', argument " "2"" of type '" "std::vector< std::string >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< std::string >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< std::string >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vectorstring_erase" "', argument " "2"" of type '" "std::vector< std::string >::iterator""'");
    }
  }
  result = (arg1)->erase(arg2);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::string >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorstring_erase__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::iterator arg2 ;
  std::vector< std::string >::iterator arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  swig::SwigPyIterator *iter3 = 0 ;
  int res3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< std::string >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:vectorstring_erase",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorstring_erase" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vectorstring_erase" "', argument " "2"" of type '" "std::vector< std::string >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< std::string >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< std::string >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vectorstring_erase" "', argument " "2"" of type '" "std::vector< std::string >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(obj2, SWIG_as_voidptrptr(&iter3), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res3) || !iter3) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vectorstring_erase" "', argument " "3"" of type '" "std::vector< std::string >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< std::string >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< std::string >::iterator > *>(iter3);
    if (iter_t) {
      arg3 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vectorstring_erase" "', argument " "3"" of type '" "std::vector< std::string >::iterator""'");
    }
  }
  result = (arg1)->erase(arg2,arg3);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::string >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorstring_erase(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::string,std::allocator< std::string > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< std::string >::iterator > *>(iter) != 0));
      if (_v) {
        return _wrap_vectorstring_erase__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::string,std::allocator< std::string > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< std::string >::iterator > *>(iter) != 0));
      if (_v) {
        swig::SwigPyIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[2], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< std::string >::iterator > *>(iter) != 0));
        if (_v) {
          return _wrap_vectorstring_erase__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'vectorstring_erase'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    erase(std::vector< std::string > *,std::vector< std::string >::iterator)\n"
    "    erase(std::vector< std::string > *,std::vector< std::string >::iterator,std::vector< std::string >::iterator)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_vectorstring__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string >::size_type arg1 ;
  std::vector< std::string >::value_type *arg2 = 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< std::string > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_vectorstring",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_vectorstring" "', argument " "1"" of type '" "std::vector< std::string >::size_type""'");
  } 
  arg1 = static_cast< std::vector< std::string >::size_type >(val1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_vectorstring" "', argument " "2"" of type '" "std::vector< std::string >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_vectorstring" "', argument " "2"" of type '" "std::vector< std::string >::value_type const &""'"); 
    }
    arg2 = ptr;
  }
  result = (std::vector< std::string > *)new std::vector< std::string >(arg1,(std::vector< std::string >::value_type const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_vectorstring(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_vectorstring__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_vectorstring__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::string,std::allocator< std::string > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_vectorstring__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_vectorstring__SWIG_3(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_vectorstring'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::string >()\n"
    "    std::vector< std::string >(std::vector< std::string > const &)\n"
    "    std::vector< std::string >(std::vector< std::string >::size_type)\n"
    "    std::vector< std::string >(std::vector< std::string >::size_type,std::vector< std::string >::value_type const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorstring_push_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:vectorstring_push_back",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorstring_push_back" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "vectorstring_push_back" "', argument " "2"" of type '" "std::vector< std::string >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vectorstring_push_back" "', argument " "2"" of type '" "std::vector< std::string >::value_type const &""'"); 
    }
    arg2 = ptr;
  }
  (arg1)->push_back((std::vector< std::string >::value_type const &)*arg2);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorstring_front(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::string >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vectorstring_front",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorstring_front" "', argument " "1"" of type '" "std::vector< std::string > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  result = (std::vector< std::string >::value_type *) &((std::vector< std::string > const *)arg1)->front();
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorstring_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::string >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vectorstring_back",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorstring_back" "', argument " "1"" of type '" "std::vector< std::string > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  result = (std::vector< std::string >::value_type *) &((std::vector< std::string > const *)arg1)->back();
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorstring_assign(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::size_type arg2 ;
  std::vector< std::string >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:vectorstring_assign",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorstring_assign" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vectorstring_assign" "', argument " "2"" of type '" "std::vector< std::string >::size_type""'");
  } 
  arg2 = static_cast< std::vector< std::string >::size_type >(val2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "vectorstring_assign" "', argument " "3"" of type '" "std::vector< std::string >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vectorstring_assign" "', argument " "3"" of type '" "std::vector< std::string >::value_type const &""'"); 
    }
    arg3 = ptr;
  }
  (arg1)->assign(arg2,(std::vector< std::string >::value_type const &)*arg3);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorstring_resize__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::size_type arg2 ;
  std::vector< std::string >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:vectorstring_resize",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorstring_resize" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vectorstring_resize" "', argument " "2"" of type '" "std::vector< std::string >::size_type""'");
  } 
  arg2 = static_cast< std::vector< std::string >::size_type >(val2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "vectorstring_resize" "', argument " "3"" of type '" "std::vector< std::string >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vectorstring_resize" "', argument " "3"" of type '" "std::vector< std::string >::value_type const &""'"); 
    }
    arg3 = ptr;
  }
  (arg1)->resize(arg2,(std::vector< std::string >::value_type const &)*arg3);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorstring_resize(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::string,std::allocator< std::string > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_vectorstring_resize__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::string,std::allocator< std::string > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_vectorstring_resize__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'vectorstring_resize'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    resize(std::vector< std::string > *,std::vector< std::string >::size_type)\n"
    "    resize(std::vector< std::string > *,std::vector< std::string >::size_type,std::vector< std::string >::value_type const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorstring_insert__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::iterator arg2 ;
  std::vector< std::string >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< std::string >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:vectorstring_insert",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorstring_insert" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vectorstring_insert" "', argument " "2"" of type '" "std::vector< std::string >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< std::string >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< std::string >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vectorstring_insert" "', argument " "2"" of type '" "std::vector< std::string >::iterator""'");
    }
  }
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "vectorstring_insert" "', argument " "3"" of type '" "std::vector< std::string >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vectorstring_insert" "', argument " "3"" of type '" "std::vector< std::string >::value_type const &""'"); 
    }
    arg3 = ptr;
  }
  result = (arg1)->insert(arg2,(std::vector< std::string >::value_type const &)*arg3);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::string >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorstring_insert__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::iterator arg2 ;
  std::vector< std::string >::size_type arg3 ;
  std::vector< std::string >::value_type *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  size_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:vectorstring_insert",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorstring_insert" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vectorstring_insert" "', argument " "2"" of type '" "std::vector< std::string >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< std::string >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< std::string >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vectorstring_insert" "', argument " "2"" of type '" "std::vector< std::string >::iterator""'");
    }
  }
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vectorstring_insert" "', argument " "3"" of type '" "std::vector< std::string >::size_type""'");
  } 
  arg3 = static_cast< std::vector< std::string >::size_type >(val3);
  {
    std::string *ptr = (std::string *)0;
    res4 = SWIG_AsPtr_std_string(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "vectorstring_insert" "', argument " "4"" of type '" "std::vector< std::string >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vectorstring_insert" "', argument " "4"" of type '" "std::vector< std::string >::value_type const &""'"); 
    }
    arg4 = ptr;
  }
  (arg1)->insert(arg2,arg3,(std::vector< std::string >::value_type const &)*arg4);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorstring_insert(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 4); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::string,std::allocator< std::string > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< std::string >::iterator > *>(iter) != 0));
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_vectorstring_insert__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::string,std::allocator< std::string > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< std::string >::iterator > *>(iter) != 0));
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = SWIG_AsPtr_std_string(argv[3], (std::string**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_vectorstring_insert__SWIG_1(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'vectorstring_insert'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    insert(std::vector< std::string > *,std::vector< std::string >::iterator,std::vector< std::string >::value_type const &)\n"
    "    insert(std::vector< std::string > *,std::vector< std::string >::iterator,std::vector< std::string >::size_type,std::vector< std::string >::value_type const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorstring_reserve(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:vectorstring_reserve",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorstring_reserve" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vectorstring_reserve" "', argument " "2"" of type '" "std::vector< std::string >::size_type""'");
  } 
  arg2 = static_cast< std::vector< std::string >::size_type >(val2);
  (arg1)->reserve(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorstring_capacity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::string >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vectorstring_capacity",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorstring_capacity" "', argument " "1"" of type '" "std::vector< std::string > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  result = ((std::vector< std::string > const *)arg1)->capacity();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_vectorstring(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_vectorstring",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_vectorstring" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  {
    try {
      delete arg1;
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *vectorstring_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_mapstringstring__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::less< std::string > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::map< std::string,std::string > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_mapstringstring",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_std__lessT_std__string_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_mapstringstring" "', argument " "1"" of type '" "std::less< std::string > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_mapstringstring" "', argument " "1"" of type '" "std::less< std::string > const &""'"); 
  }
  arg1 = reinterpret_cast< std::less< std::string > * >(argp1);
  result = (std::map< std::string,std::string > *)new std::map< std::string,std::string >((std::less< std::string > const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__mapT_std__string_std__string_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_std__string_t_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_mapstringstring_iterator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::map< std::string,std::string > *arg1 = (std::map< std::string,std::string > *) 0 ;
  PyObject **arg2 = (PyObject **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  arg2 = &obj0;
  if (!PyArg_ParseTuple(args,(char *)"O:mapstringstring_iterator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__mapT_std__string_std__string_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_std__string_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mapstringstring_iterator" "', argument " "1"" of type '" "std::map< std::string,std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,std::string > * >(argp1);
  result = (swig::SwigPyIterator *)std_map_Sl_std_string_Sc_std_string_Sg__iterator(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_mapstringstring___nonzero__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::map< std::string,std::string > *arg1 = (std::map< std::string,std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:mapstringstring___nonzero__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__mapT_std__string_std__string_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_std__string_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mapstringstring___nonzero__" "', argument " "1"" of type '" "std::map< std::string,std::string > const *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,std::string > * >(argp1);
  result = (bool)std_map_Sl_std_string_Sc_std_string_Sg____nonzero__((std::map< std::string,std::string > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_mapstringstring___bool__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::map< std::string,std::string > *arg1 = (std::map< std::string,std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:mapstringstring___bool__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__mapT_std__string_std__string_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_std__string_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mapstringstring___bool__" "', argument " "1"" of type '" "std::map< std::string,std::string > const *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,std::string > * >(argp1);
  result = (bool)std_map_Sl_std_string_Sc_std_string_Sg____bool__((std::map< std::string,std::string > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_mapstringstring___len__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::map< std::string,std::string > *arg1 = (std::map< std::string,std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::map< std::string,std::string >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:mapstringstring___len__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__mapT_std__string_std__string_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_std__string_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mapstringstring___len__" "', argument " "1"" of type '" "std::map< std::string,std::string > const *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,std::string > * >(argp1);
  result = std_map_Sl_std_string_Sc_std_string_Sg____len__((std::map< std::string,std::string > const *)arg1);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_mapstringstring___getitem__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::map< std::string,std::string > *arg1 = (std::map< std::string,std::string > *) 0 ;
  std::map< std::string,std::string >::key_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::map< std::string,std::string >::mapped_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:mapstringstring___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__mapT_std__string_std__string_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_std__string_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mapstringstring___getitem__" "', argument " "1"" of type '" "std::map< std::string,std::string > const *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,std::string > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "mapstringstring___getitem__" "', argument " "2"" of type '" "std::map< std::string,std::string >::key_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "mapstringstring___getitem__" "', argument " "2"" of type '" "std::map< std::string,std::string >::key_type const &""'"); 
    }
    arg2 = ptr;
  }
  try {
    result = std_map_Sl_std_string_Sc_std_string_Sg____getitem__((std::map< std::string,std::string > const *)arg1,(std::string const &)*arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_mapstringstring___delitem__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::map< std::string,std::string > *arg1 = (std::map< std::string,std::string > *) 0 ;
  std::map< std::string,std::string >::key_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:mapstringstring___delitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__mapT_std__string_std__string_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_std__string_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mapstringstring___delitem__" "', argument " "1"" of type '" "std::map< std::string,std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,std::string > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "mapstringstring___delitem__" "', argument " "2"" of type '" "std::map< std::string,std::string >::key_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "mapstringstring___delitem__" "', argument " "2"" of type '" "std::map< std::string,std::string >::key_type const &""'"); 
    }
    arg2 = ptr;
  }
  try {
    std_map_Sl_std_string_Sc_std_string_Sg____delitem__(arg1,(std::string const &)*arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_mapstringstring_has_key(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::map< std::string,std::string > *arg1 = (std::map< std::string,std::string > *) 0 ;
  std::map< std::string,std::string >::key_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:mapstringstring_has_key",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__mapT_std__string_std__string_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_std__string_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mapstringstring_has_key" "', argument " "1"" of type '" "std::map< std::string,std::string > const *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,std::string > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "mapstringstring_has_key" "', argument " "2"" of type '" "std::map< std::string,std::string >::key_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "mapstringstring_has_key" "', argument " "2"" of type '" "std::map< std::string,std::string >::key_type const &""'"); 
    }
    arg2 = ptr;
  }
  result = (bool)std_map_Sl_std_string_Sc_std_string_Sg__has_key((std::map< std::string,std::string > const *)arg1,(std::string const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_mapstringstring_keys(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::map< std::string,std::string > *arg1 = (std::map< std::string,std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:mapstringstring_keys",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__mapT_std__string_std__string_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_std__string_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mapstringstring_keys" "', argument " "1"" of type '" "std::map< std::string,std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,std::string > * >(argp1);
  result = (PyObject *)std_map_Sl_std_string_Sc_std_string_Sg__keys(arg1);
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_mapstringstring_values(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::map< std::string,std::string > *arg1 = (std::map< std::string,std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:mapstringstring_values",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__mapT_std__string_std__string_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_std__string_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mapstringstring_values" "', argument " "1"" of type '" "std::map< std::string,std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,std::string > * >(argp1);
  result = (PyObject *)std_map_Sl_std_string_Sc_std_string_Sg__values(arg1);
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_mapstringstring_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::map< std::string,std::string > *arg1 = (std::map< std::string,std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:mapstringstring_items",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__mapT_std__string_std__string_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_std__string_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mapstringstring_items" "', argument " "1"" of type '" "std::map< std::string,std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,std::string > * >(argp1);
  result = (PyObject *)std_map_Sl_std_string_Sc_std_string_Sg__items(arg1);
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_mapstringstring___contains__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::map< std::string,std::string > *arg1 = (std::map< std::string,std::string > *) 0 ;
  std::map< std::string,std::string >::key_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:mapstringstring___contains__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__mapT_std__string_std__string_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_std__string_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mapstringstring___contains__" "', argument " "1"" of type '" "std::map< std::string,std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,std::string > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "mapstringstring___contains__" "', argument " "2"" of type '" "std::map< std::string,std::string >::key_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "mapstringstring___contains__" "', argument " "2"" of type '" "std::map< std::string,std::string >::key_type const &""'"); 
    }
    arg2 = ptr;
  }
  result = (bool)std_map_Sl_std_string_Sc_std_string_Sg____contains__(arg1,(std::string const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_mapstringstring_key_iterator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::map< std::string,std::string > *arg1 = (std::map< std::string,std::string > *) 0 ;
  PyObject **arg2 = (PyObject **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  arg2 = &obj0;
  if (!PyArg_ParseTuple(args,(char *)"O:mapstringstring_key_iterator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__mapT_std__string_std__string_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_std__string_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mapstringstring_key_iterator" "', argument " "1"" of type '" "std::map< std::string,std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,std::string > * >(argp1);
  result = (swig::SwigPyIterator *)std_map_Sl_std_string_Sc_std_string_Sg__key_iterator(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_mapstringstring_value_iterator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::map< std::string,std::string > *arg1 = (std::map< std::string,std::string > *) 0 ;
  PyObject **arg2 = (PyObject **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  arg2 = &obj0;
  if (!PyArg_ParseTuple(args,(char *)"O:mapstringstring_value_iterator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__mapT_std__string_std__string_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_std__string_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mapstringstring_value_iterator" "', argument " "1"" of type '" "std::map< std::string,std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,std::string > * >(argp1);
  result = (swig::SwigPyIterator *)std_map_Sl_std_string_Sc_std_string_Sg__value_iterator(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_mapstringstring___setitem__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::map< std::string,std::string > *arg1 = (std::map< std::string,std::string > *) 0 ;
  std::map< std::string,std::string >::key_type *arg2 = 0 ;
  std::map< std::string,std::string >::mapped_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:mapstringstring___setitem__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__mapT_std__string_std__string_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_std__string_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mapstringstring___setitem__" "', argument " "1"" of type '" "std::map< std::string,std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,std::string > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "mapstringstring___setitem__" "', argument " "2"" of type '" "std::map< std::string,std::string >::key_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "mapstringstring___setitem__" "', argument " "2"" of type '" "std::map< std::string,std::string >::key_type const &""'"); 
    }
    arg2 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "mapstringstring___setitem__" "', argument " "3"" of type '" "std::map< std::string,std::string >::mapped_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "mapstringstring___setitem__" "', argument " "3"" of type '" "std::map< std::string,std::string >::mapped_type const &""'"); 
    }
    arg3 = ptr;
  }
  try {
    std_map_Sl_std_string_Sc_std_string_Sg____setitem__(arg1,(std::string const &)*arg2,(std::string const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_mapstringstring__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::map< std::string,std::string > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_mapstringstring")) SWIG_fail;
  result = (std::map< std::string,std::string > *)new std::map< std::string,std::string >();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__mapT_std__string_std__string_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_std__string_t_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_mapstringstring__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::map< std::string,std::string > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  std::map< std::string,std::string > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_mapstringstring",&obj0)) SWIG_fail;
  {
    std::map<std::string,std::string,std::less< std::string >,std::allocator< std::pair< std::string const,std::string > > > *ptr = (std::map<std::string,std::string,std::less< std::string >,std::allocator< std::pair< std::string const,std::string > > > *)0;
    res1 = swig::asptr(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_mapstringstring" "', argument " "1"" of type '" "std::map< std::string,std::string > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_mapstringstring" "', argument " "1"" of type '" "std::map< std::string,std::string > const &""'"); 
    }
    arg1 = ptr;
  }
  result = (std::map< std::string,std::string > *)new std::map< std::string,std::string >((std::map< std::string,std::string > const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__mapT_std__string_std__string_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_std__string_t_t_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_mapstringstring(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 1); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_mapstringstring__SWIG_1(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__lessT_std__string_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_mapstringstring__SWIG_0(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::map<std::string,std::string,std::less< std::string >,std::allocator< std::pair< std::string const,std::string > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_mapstringstring__SWIG_2(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_mapstringstring'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::map< std::string,std::string >(std::less< std::string > const &)\n"
    "    std::map< std::string,std::string >()\n"
    "    std::map< std::string,std::string >(std::map< std::string,std::string > const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_mapstringstring_empty(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::map< std::string,std::string > *arg1 = (std::map< std::string,std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:mapstringstring_empty",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__mapT_std__string_std__string_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_std__string_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mapstringstring_empty" "', argument " "1"" of type '" "std::map< std::string,std::string > const *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,std::string > * >(argp1);
  result = (bool)((std::map< std::string,std::string > const *)arg1)->empty();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_mapstringstring_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::map< std::string,std::string > *arg1 = (std::map< std::string,std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::map< std::string,std::string >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:mapstringstring_size",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__mapT_std__string_std__string_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_std__string_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mapstringstring_size" "', argument " "1"" of type '" "std::map< std::string,std::string > const *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,std::string > * >(argp1);
  result = ((std::map< std::string,std::string > const *)arg1)->size();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_mapstringstring_clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::map< std::string,std::string > *arg1 = (std::map< std::string,std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:mapstringstring_clear",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__mapT_std__string_std__string_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_std__string_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mapstringstring_clear" "', argument " "1"" of type '" "std::map< std::string,std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,std::string > * >(argp1);
  (arg1)->clear();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_mapstringstring_swap(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::map< std::string,std::string > *arg1 = (std::map< std::string,std::string > *) 0 ;
  std::map< std::string,std::string > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:mapstringstring_swap",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__mapT_std__string_std__string_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_std__string_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mapstringstring_swap" "', argument " "1"" of type '" "std::map< std::string,std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,std::string > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__mapT_std__string_std__string_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_std__string_t_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "mapstringstring_swap" "', argument " "2"" of type '" "std::map< std::string,std::string > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "mapstringstring_swap" "', argument " "2"" of type '" "std::map< std::string,std::string > &""'"); 
  }
  arg2 = reinterpret_cast< std::map< std::string,std::string > * >(argp2);
  (arg1)->swap(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_mapstringstring_get_allocator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::map< std::string,std::string > *arg1 = (std::map< std::string,std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::allocator< std::pair< std::string const,std::string > > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:mapstringstring_get_allocator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__mapT_std__string_std__string_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_std__string_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mapstringstring_get_allocator" "', argument " "1"" of type '" "std::map< std::string,std::string > const *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,std::string > * >(argp1);
  result = ((std::map< std::string,std::string > const *)arg1)->get_allocator();
  resultobj = SWIG_NewPointerObj((new std::map< std::string,std::string >::allocator_type(static_cast< const std::map< std::string,std::string >::allocator_type& >(result))), SWIGTYPE_p_std__mapT_std__string_std__string_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_std__string_t_t_t__allocator_type, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_mapstringstring_begin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::map< std::string,std::string > *arg1 = (std::map< std::string,std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::map< std::string,std::string >::const_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:mapstringstring_begin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__mapT_std__string_std__string_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_std__string_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mapstringstring_begin" "', argument " "1"" of type '" "std::map< std::string,std::string > const *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,std::string > * >(argp1);
  result = ((std::map< std::string,std::string > const *)arg1)->begin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::map< std::string,std::string >::const_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_mapstringstring_end(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::map< std::string,std::string > *arg1 = (std::map< std::string,std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::map< std::string,std::string >::const_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:mapstringstring_end",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__mapT_std__string_std__string_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_std__string_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mapstringstring_end" "', argument " "1"" of type '" "std::map< std::string,std::string > const *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,std::string > * >(argp1);
  result = ((std::map< std::string,std::string > const *)arg1)->end();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::map< std::string,std::string >::const_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_mapstringstring_rbegin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::map< std::string,std::string > *arg1 = (std::map< std::string,std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::map< std::string,std::string >::const_reverse_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:mapstringstring_rbegin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__mapT_std__string_std__string_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_std__string_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mapstringstring_rbegin" "', argument " "1"" of type '" "std::map< std::string,std::string > const *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,std::string > * >(argp1);
  result = ((std::map< std::string,std::string > const *)arg1)->rbegin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::map< std::string,std::string >::const_reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_mapstringstring_rend(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::map< std::string,std::string > *arg1 = (std::map< std::string,std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::map< std::string,std::string >::const_reverse_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:mapstringstring_rend",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__mapT_std__string_std__string_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_std__string_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mapstringstring_rend" "', argument " "1"" of type '" "std::map< std::string,std::string > const *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,std::string > * >(argp1);
  result = ((std::map< std::string,std::string > const *)arg1)->rend();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::map< std::string,std::string >::const_reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_mapstringstring_erase__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::map< std::string,std::string > *arg1 = (std::map< std::string,std::string > *) 0 ;
  std::map< std::string,std::string >::key_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::map< std::string,std::string >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:mapstringstring_erase",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__mapT_std__string_std__string_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_std__string_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mapstringstring_erase" "', argument " "1"" of type '" "std::map< std::string,std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,std::string > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "mapstringstring_erase" "', argument " "2"" of type '" "std::map< std::string,std::string >::key_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "mapstringstring_erase" "', argument " "2"" of type '" "std::map< std::string,std::string >::key_type const &""'"); 
    }
    arg2 = ptr;
  }
  result = (arg1)->erase((std::map< std::string,std::string >::key_type const &)*arg2);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_mapstringstring_count(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::map< std::string,std::string > *arg1 = (std::map< std::string,std::string > *) 0 ;
  std::map< std::string,std::string >::key_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::map< std::string,std::string >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:mapstringstring_count",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__mapT_std__string_std__string_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_std__string_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mapstringstring_count" "', argument " "1"" of type '" "std::map< std::string,std::string > const *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,std::string > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "mapstringstring_count" "', argument " "2"" of type '" "std::map< std::string,std::string >::key_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "mapstringstring_count" "', argument " "2"" of type '" "std::map< std::string,std::string >::key_type const &""'"); 
    }
    arg2 = ptr;
  }
  result = ((std::map< std::string,std::string > const *)arg1)->count((std::map< std::string,std::string >::key_type const &)*arg2);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_mapstringstring_erase__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::map< std::string,std::string > *arg1 = (std::map< std::string,std::string > *) 0 ;
  std::map< std::string,std::string >::iterator arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:mapstringstring_erase",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__mapT_std__string_std__string_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_std__string_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mapstringstring_erase" "', argument " "1"" of type '" "std::map< std::string,std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,std::string > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "mapstringstring_erase" "', argument " "2"" of type '" "std::map< std::string,std::string >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::map< std::string,std::string >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::map< std::string,std::string >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "mapstringstring_erase" "', argument " "2"" of type '" "std::map< std::string,std::string >::iterator""'");
    }
  }
  (arg1)->erase(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_mapstringstring_erase__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::map< std::string,std::string > *arg1 = (std::map< std::string,std::string > *) 0 ;
  std::map< std::string,std::string >::iterator arg2 ;
  std::map< std::string,std::string >::iterator arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  swig::SwigPyIterator *iter3 = 0 ;
  int res3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:mapstringstring_erase",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__mapT_std__string_std__string_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_std__string_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mapstringstring_erase" "', argument " "1"" of type '" "std::map< std::string,std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,std::string > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "mapstringstring_erase" "', argument " "2"" of type '" "std::map< std::string,std::string >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::map< std::string,std::string >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::map< std::string,std::string >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "mapstringstring_erase" "', argument " "2"" of type '" "std::map< std::string,std::string >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(obj2, SWIG_as_voidptrptr(&iter3), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res3) || !iter3) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "mapstringstring_erase" "', argument " "3"" of type '" "std::map< std::string,std::string >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::map< std::string,std::string >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::map< std::string,std::string >::iterator > *>(iter3);
    if (iter_t) {
      arg3 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "mapstringstring_erase" "', argument " "3"" of type '" "std::map< std::string,std::string >::iterator""'");
    }
  }
  (arg1)->erase(arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_mapstringstring_erase(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::map<std::string,std::string,std::less< std::string >,std::allocator< std::pair< std::string const,std::string > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::map< std::string,std::string >::iterator > *>(iter) != 0));
      if (_v) {
        return _wrap_mapstringstring_erase__SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::map<std::string,std::string,std::less< std::string >,std::allocator< std::pair< std::string const,std::string > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_mapstringstring_erase__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::map<std::string,std::string,std::less< std::string >,std::allocator< std::pair< std::string const,std::string > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::map< std::string,std::string >::iterator > *>(iter) != 0));
      if (_v) {
        swig::SwigPyIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[2], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::map< std::string,std::string >::iterator > *>(iter) != 0));
        if (_v) {
          return _wrap_mapstringstring_erase__SWIG_2(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'mapstringstring_erase'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    erase(std::map< std::string,std::string > *,std::map< std::string,std::string >::key_type const &)\n"
    "    erase(std::map< std::string,std::string > *,std::map< std::string,std::string >::iterator)\n"
    "    erase(std::map< std::string,std::string > *,std::map< std::string,std::string >::iterator,std::map< std::string,std::string >::iterator)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_mapstringstring_find(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::map< std::string,std::string > *arg1 = (std::map< std::string,std::string > *) 0 ;
  std::map< std::string,std::string >::key_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::map< std::string,std::string >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:mapstringstring_find",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__mapT_std__string_std__string_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_std__string_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mapstringstring_find" "', argument " "1"" of type '" "std::map< std::string,std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,std::string > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "mapstringstring_find" "', argument " "2"" of type '" "std::map< std::string,std::string >::key_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "mapstringstring_find" "', argument " "2"" of type '" "std::map< std::string,std::string >::key_type const &""'"); 
    }
    arg2 = ptr;
  }
  result = (arg1)->find((std::map< std::string,std::string >::key_type const &)*arg2);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::map< std::string,std::string >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_mapstringstring_lower_bound(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::map< std::string,std::string > *arg1 = (std::map< std::string,std::string > *) 0 ;
  std::map< std::string,std::string >::key_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::map< std::string,std::string >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:mapstringstring_lower_bound",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__mapT_std__string_std__string_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_std__string_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mapstringstring_lower_bound" "', argument " "1"" of type '" "std::map< std::string,std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,std::string > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "mapstringstring_lower_bound" "', argument " "2"" of type '" "std::map< std::string,std::string >::key_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "mapstringstring_lower_bound" "', argument " "2"" of type '" "std::map< std::string,std::string >::key_type const &""'"); 
    }
    arg2 = ptr;
  }
  result = (arg1)->lower_bound((std::map< std::string,std::string >::key_type const &)*arg2);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::map< std::string,std::string >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_mapstringstring_upper_bound(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::map< std::string,std::string > *arg1 = (std::map< std::string,std::string > *) 0 ;
  std::map< std::string,std::string >::key_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::map< std::string,std::string >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:mapstringstring_upper_bound",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__mapT_std__string_std__string_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_std__string_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mapstringstring_upper_bound" "', argument " "1"" of type '" "std::map< std::string,std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,std::string > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "mapstringstring_upper_bound" "', argument " "2"" of type '" "std::map< std::string,std::string >::key_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "mapstringstring_upper_bound" "', argument " "2"" of type '" "std::map< std::string,std::string >::key_type const &""'"); 
    }
    arg2 = ptr;
  }
  result = (arg1)->upper_bound((std::map< std::string,std::string >::key_type const &)*arg2);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::map< std::string,std::string >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_mapstringstring(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::map< std::string,std::string > *arg1 = (std::map< std::string,std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_mapstringstring",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__mapT_std__string_std__string_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_std__string_t_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_mapstringstring" "', argument " "1"" of type '" "std::map< std::string,std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,std::string > * >(argp1);
  {
    try {
      delete arg1;
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *mapstringstring_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__mapT_std__string_std__string_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_std__string_t_t_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN int Swig_var_NmPerAngstrom_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable NmPerAngstrom is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_NmPerAngstrom_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_double(static_cast< double >(OpenMM::NmPerAngstrom));
  return pyobj;
}


SWIGINTERN int Swig_var_AngstromsPerNm_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable AngstromsPerNm is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_AngstromsPerNm_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_double(static_cast< double >(OpenMM::AngstromsPerNm));
  return pyobj;
}


SWIGINTERN int Swig_var_PsPerFs_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable PsPerFs is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_PsPerFs_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_double(static_cast< double >(OpenMM::PsPerFs));
  return pyobj;
}


SWIGINTERN int Swig_var_FsPerPs_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable FsPerPs is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_FsPerPs_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_double(static_cast< double >(OpenMM::FsPerPs));
  return pyobj;
}


SWIGINTERN int Swig_var_KJPerKcal_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable KJPerKcal is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_KJPerKcal_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_double(static_cast< double >(OpenMM::KJPerKcal));
  return pyobj;
}


SWIGINTERN int Swig_var_KcalPerKJ_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable KcalPerKJ is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_KcalPerKJ_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_double(static_cast< double >(OpenMM::KcalPerKJ));
  return pyobj;
}


SWIGINTERN int Swig_var_RadiansPerDegree_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable RadiansPerDegree is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_RadiansPerDegree_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_double(static_cast< double >(OpenMM::RadiansPerDegree));
  return pyobj;
}


SWIGINTERN int Swig_var_DegreesPerRadian_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable DegreesPerRadian is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_DegreesPerRadian_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_double(static_cast< double >(OpenMM::DegreesPerRadian));
  return pyobj;
}


SWIGINTERN int Swig_var_SigmaPerVdwRadius_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SigmaPerVdwRadius is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_SigmaPerVdwRadius_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_double(static_cast< double >(OpenMM::SigmaPerVdwRadius));
  return pyobj;
}


SWIGINTERN int Swig_var_VdwRadiusPerSigma_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable VdwRadiusPerSigma is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_VdwRadiusPerSigma_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_double(static_cast< double >(OpenMM::VdwRadiusPerSigma));
  return pyobj;
}


SWIGINTERN PyObject *_wrap_delete_Force(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::Force *arg1 = (OpenMM::Force *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_Force",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__Force, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Force" "', argument " "1"" of type '" "OpenMM::Force *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::Force * >(argp1);
  {
    try {
      delete arg1;
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Force_getForceGroup(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::Force *arg1 = (OpenMM::Force *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Force_getForceGroup",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__Force, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Force_getForceGroup" "', argument " "1"" of type '" "OpenMM::Force const *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::Force * >(argp1);
  {
    try {
      result = (int)((OpenMM::Force const *)arg1)->getForceGroup();
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Force_setForceGroup(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::Force *arg1 = (OpenMM::Force *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Force_setForceGroup",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__Force, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Force_setForceGroup" "', argument " "1"" of type '" "OpenMM::Force *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::Force * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Force_setForceGroup" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      (arg1)->setForceGroup(arg2);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Force_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_OpenMM__Force, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_AmoebaGeneralizedKirkwoodForce__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::AmoebaGeneralizedKirkwoodForce *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_AmoebaGeneralizedKirkwoodForce")) SWIG_fail;
  {
    try {
      result = (OpenMM::AmoebaGeneralizedKirkwoodForce *)new OpenMM::AmoebaGeneralizedKirkwoodForce();
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_OpenMM__AmoebaGeneralizedKirkwoodForce, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AmoebaGeneralizedKirkwoodForce_getNumParticles(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::AmoebaGeneralizedKirkwoodForce *arg1 = (OpenMM::AmoebaGeneralizedKirkwoodForce *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:AmoebaGeneralizedKirkwoodForce_getNumParticles",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__AmoebaGeneralizedKirkwoodForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AmoebaGeneralizedKirkwoodForce_getNumParticles" "', argument " "1"" of type '" "OpenMM::AmoebaGeneralizedKirkwoodForce const *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::AmoebaGeneralizedKirkwoodForce * >(argp1);
  {
    try {
      result = (int)((OpenMM::AmoebaGeneralizedKirkwoodForce const *)arg1)->getNumParticles();
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AmoebaGeneralizedKirkwoodForce_addParticle(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::AmoebaGeneralizedKirkwoodForce *arg1 = (OpenMM::AmoebaGeneralizedKirkwoodForce *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:AmoebaGeneralizedKirkwoodForce_addParticle",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__AmoebaGeneralizedKirkwoodForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AmoebaGeneralizedKirkwoodForce_addParticle" "', argument " "1"" of type '" "OpenMM::AmoebaGeneralizedKirkwoodForce *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::AmoebaGeneralizedKirkwoodForce * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AmoebaGeneralizedKirkwoodForce_addParticle" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "AmoebaGeneralizedKirkwoodForce_addParticle" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "AmoebaGeneralizedKirkwoodForce_addParticle" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  {
    try {
      result = (int)(arg1)->addParticle(arg2,arg3,arg4);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AmoebaGeneralizedKirkwoodForce_getParticleParameters(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::AmoebaGeneralizedKirkwoodForce *arg1 = (OpenMM::AmoebaGeneralizedKirkwoodForce *) 0 ;
  int arg2 ;
  double *arg3 = 0 ;
  double *arg4 = 0 ;
  double *arg5 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  double temp3 ;
  int res3 = SWIG_TMPOBJ ;
  double temp4 ;
  int res4 = SWIG_TMPOBJ ;
  double temp5 ;
  int res5 = SWIG_TMPOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  arg3 = &temp3;
  arg4 = &temp4;
  arg5 = &temp5;
  if (!PyArg_ParseTuple(args,(char *)"OO:AmoebaGeneralizedKirkwoodForce_getParticleParameters",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__AmoebaGeneralizedKirkwoodForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AmoebaGeneralizedKirkwoodForce_getParticleParameters" "', argument " "1"" of type '" "OpenMM::AmoebaGeneralizedKirkwoodForce const *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::AmoebaGeneralizedKirkwoodForce * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AmoebaGeneralizedKirkwoodForce_getParticleParameters" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      ((OpenMM::AmoebaGeneralizedKirkwoodForce const *)arg1)->getParticleParameters(arg2,*arg3,*arg4,*arg5);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsTmpObj(res3)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_From_double((*arg3)));
  } else {
    int new_flags = SWIG_IsNewObj(res3) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg3), SWIGTYPE_p_double, new_flags));
  }
  if (SWIG_IsTmpObj(res4)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_From_double((*arg4)));
  } else {
    int new_flags = SWIG_IsNewObj(res4) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg4), SWIGTYPE_p_double, new_flags));
  }
  if (SWIG_IsTmpObj(res5)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_From_double((*arg5)));
  } else {
    int new_flags = SWIG_IsNewObj(res5) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg5), SWIGTYPE_p_double, new_flags));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AmoebaGeneralizedKirkwoodForce_setParticleParameters(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::AmoebaGeneralizedKirkwoodForce *arg1 = (OpenMM::AmoebaGeneralizedKirkwoodForce *) 0 ;
  int arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:AmoebaGeneralizedKirkwoodForce_setParticleParameters",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__AmoebaGeneralizedKirkwoodForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AmoebaGeneralizedKirkwoodForce_setParticleParameters" "', argument " "1"" of type '" "OpenMM::AmoebaGeneralizedKirkwoodForce *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::AmoebaGeneralizedKirkwoodForce * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AmoebaGeneralizedKirkwoodForce_setParticleParameters" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "AmoebaGeneralizedKirkwoodForce_setParticleParameters" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "AmoebaGeneralizedKirkwoodForce_setParticleParameters" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  ecode5 = SWIG_AsVal_double(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "AmoebaGeneralizedKirkwoodForce_setParticleParameters" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  {
    try {
      (arg1)->setParticleParameters(arg2,arg3,arg4,arg5);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AmoebaGeneralizedKirkwoodForce_getSolventDielectric(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::AmoebaGeneralizedKirkwoodForce *arg1 = (OpenMM::AmoebaGeneralizedKirkwoodForce *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:AmoebaGeneralizedKirkwoodForce_getSolventDielectric",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__AmoebaGeneralizedKirkwoodForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AmoebaGeneralizedKirkwoodForce_getSolventDielectric" "', argument " "1"" of type '" "OpenMM::AmoebaGeneralizedKirkwoodForce const *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::AmoebaGeneralizedKirkwoodForce * >(argp1);
  {
    try {
      result = (double)((OpenMM::AmoebaGeneralizedKirkwoodForce const *)arg1)->getSolventDielectric();
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AmoebaGeneralizedKirkwoodForce_setSolventDielectric(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::AmoebaGeneralizedKirkwoodForce *arg1 = (OpenMM::AmoebaGeneralizedKirkwoodForce *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:AmoebaGeneralizedKirkwoodForce_setSolventDielectric",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__AmoebaGeneralizedKirkwoodForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AmoebaGeneralizedKirkwoodForce_setSolventDielectric" "', argument " "1"" of type '" "OpenMM::AmoebaGeneralizedKirkwoodForce *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::AmoebaGeneralizedKirkwoodForce * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AmoebaGeneralizedKirkwoodForce_setSolventDielectric" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->setSolventDielectric(arg2);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AmoebaGeneralizedKirkwoodForce_getSoluteDielectric(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::AmoebaGeneralizedKirkwoodForce *arg1 = (OpenMM::AmoebaGeneralizedKirkwoodForce *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:AmoebaGeneralizedKirkwoodForce_getSoluteDielectric",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__AmoebaGeneralizedKirkwoodForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AmoebaGeneralizedKirkwoodForce_getSoluteDielectric" "', argument " "1"" of type '" "OpenMM::AmoebaGeneralizedKirkwoodForce const *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::AmoebaGeneralizedKirkwoodForce * >(argp1);
  {
    try {
      result = (double)((OpenMM::AmoebaGeneralizedKirkwoodForce const *)arg1)->getSoluteDielectric();
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AmoebaGeneralizedKirkwoodForce_setSoluteDielectric(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::AmoebaGeneralizedKirkwoodForce *arg1 = (OpenMM::AmoebaGeneralizedKirkwoodForce *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:AmoebaGeneralizedKirkwoodForce_setSoluteDielectric",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__AmoebaGeneralizedKirkwoodForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AmoebaGeneralizedKirkwoodForce_setSoluteDielectric" "', argument " "1"" of type '" "OpenMM::AmoebaGeneralizedKirkwoodForce *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::AmoebaGeneralizedKirkwoodForce * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AmoebaGeneralizedKirkwoodForce_setSoluteDielectric" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->setSoluteDielectric(arg2);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AmoebaGeneralizedKirkwoodForce_getIncludeCavityTerm(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::AmoebaGeneralizedKirkwoodForce *arg1 = (OpenMM::AmoebaGeneralizedKirkwoodForce *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:AmoebaGeneralizedKirkwoodForce_getIncludeCavityTerm",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__AmoebaGeneralizedKirkwoodForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AmoebaGeneralizedKirkwoodForce_getIncludeCavityTerm" "', argument " "1"" of type '" "OpenMM::AmoebaGeneralizedKirkwoodForce const *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::AmoebaGeneralizedKirkwoodForce * >(argp1);
  {
    try {
      result = (int)((OpenMM::AmoebaGeneralizedKirkwoodForce const *)arg1)->getIncludeCavityTerm();
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AmoebaGeneralizedKirkwoodForce_setIncludeCavityTerm(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::AmoebaGeneralizedKirkwoodForce *arg1 = (OpenMM::AmoebaGeneralizedKirkwoodForce *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:AmoebaGeneralizedKirkwoodForce_setIncludeCavityTerm",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__AmoebaGeneralizedKirkwoodForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AmoebaGeneralizedKirkwoodForce_setIncludeCavityTerm" "', argument " "1"" of type '" "OpenMM::AmoebaGeneralizedKirkwoodForce *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::AmoebaGeneralizedKirkwoodForce * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AmoebaGeneralizedKirkwoodForce_setIncludeCavityTerm" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      (arg1)->setIncludeCavityTerm(arg2);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AmoebaGeneralizedKirkwoodForce_getProbeRadius(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::AmoebaGeneralizedKirkwoodForce *arg1 = (OpenMM::AmoebaGeneralizedKirkwoodForce *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:AmoebaGeneralizedKirkwoodForce_getProbeRadius",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__AmoebaGeneralizedKirkwoodForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AmoebaGeneralizedKirkwoodForce_getProbeRadius" "', argument " "1"" of type '" "OpenMM::AmoebaGeneralizedKirkwoodForce const *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::AmoebaGeneralizedKirkwoodForce * >(argp1);
  {
    try {
      result = (double)((OpenMM::AmoebaGeneralizedKirkwoodForce const *)arg1)->getProbeRadius();
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AmoebaGeneralizedKirkwoodForce_setProbeRadius(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::AmoebaGeneralizedKirkwoodForce *arg1 = (OpenMM::AmoebaGeneralizedKirkwoodForce *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:AmoebaGeneralizedKirkwoodForce_setProbeRadius",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__AmoebaGeneralizedKirkwoodForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AmoebaGeneralizedKirkwoodForce_setProbeRadius" "', argument " "1"" of type '" "OpenMM::AmoebaGeneralizedKirkwoodForce *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::AmoebaGeneralizedKirkwoodForce * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AmoebaGeneralizedKirkwoodForce_setProbeRadius" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->setProbeRadius(arg2);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AmoebaGeneralizedKirkwoodForce_getSurfaceAreaFactor(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::AmoebaGeneralizedKirkwoodForce *arg1 = (OpenMM::AmoebaGeneralizedKirkwoodForce *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:AmoebaGeneralizedKirkwoodForce_getSurfaceAreaFactor",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__AmoebaGeneralizedKirkwoodForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AmoebaGeneralizedKirkwoodForce_getSurfaceAreaFactor" "', argument " "1"" of type '" "OpenMM::AmoebaGeneralizedKirkwoodForce const *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::AmoebaGeneralizedKirkwoodForce * >(argp1);
  {
    try {
      result = (double)((OpenMM::AmoebaGeneralizedKirkwoodForce const *)arg1)->getSurfaceAreaFactor();
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AmoebaGeneralizedKirkwoodForce_setSurfaceAreaFactor(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::AmoebaGeneralizedKirkwoodForce *arg1 = (OpenMM::AmoebaGeneralizedKirkwoodForce *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:AmoebaGeneralizedKirkwoodForce_setSurfaceAreaFactor",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__AmoebaGeneralizedKirkwoodForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AmoebaGeneralizedKirkwoodForce_setSurfaceAreaFactor" "', argument " "1"" of type '" "OpenMM::AmoebaGeneralizedKirkwoodForce *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::AmoebaGeneralizedKirkwoodForce * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AmoebaGeneralizedKirkwoodForce_setSurfaceAreaFactor" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->setSurfaceAreaFactor(arg2);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_AmoebaGeneralizedKirkwoodForce__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::AmoebaGeneralizedKirkwoodForce *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  OpenMM::AmoebaGeneralizedKirkwoodForce *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_AmoebaGeneralizedKirkwoodForce",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_OpenMM__AmoebaGeneralizedKirkwoodForce,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_AmoebaGeneralizedKirkwoodForce" "', argument " "1"" of type '" "OpenMM::AmoebaGeneralizedKirkwoodForce const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_AmoebaGeneralizedKirkwoodForce" "', argument " "1"" of type '" "OpenMM::AmoebaGeneralizedKirkwoodForce const &""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::AmoebaGeneralizedKirkwoodForce * >(argp1);
  {
    try {
      result = (OpenMM::AmoebaGeneralizedKirkwoodForce *)new OpenMM::AmoebaGeneralizedKirkwoodForce((OpenMM::AmoebaGeneralizedKirkwoodForce const &)*arg1);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_OpenMM__AmoebaGeneralizedKirkwoodForce, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_AmoebaGeneralizedKirkwoodForce(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 1); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_AmoebaGeneralizedKirkwoodForce__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_OpenMM__AmoebaGeneralizedKirkwoodForce, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_AmoebaGeneralizedKirkwoodForce__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_AmoebaGeneralizedKirkwoodForce'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    OpenMM::AmoebaGeneralizedKirkwoodForce()\n"
    "    OpenMM::AmoebaGeneralizedKirkwoodForce::AmoebaGeneralizedKirkwoodForce(OpenMM::AmoebaGeneralizedKirkwoodForce const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_AmoebaGeneralizedKirkwoodForce(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::AmoebaGeneralizedKirkwoodForce *arg1 = (OpenMM::AmoebaGeneralizedKirkwoodForce *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_AmoebaGeneralizedKirkwoodForce",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__AmoebaGeneralizedKirkwoodForce, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_AmoebaGeneralizedKirkwoodForce" "', argument " "1"" of type '" "OpenMM::AmoebaGeneralizedKirkwoodForce *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::AmoebaGeneralizedKirkwoodForce * >(argp1);
  {
    try {
      delete arg1;
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *AmoebaGeneralizedKirkwoodForce_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_OpenMM__AmoebaGeneralizedKirkwoodForce, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_AmoebaHarmonicAngleForce__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::AmoebaHarmonicAngleForce *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_AmoebaHarmonicAngleForce")) SWIG_fail;
  {
    try {
      result = (OpenMM::AmoebaHarmonicAngleForce *)new OpenMM::AmoebaHarmonicAngleForce();
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_OpenMM__AmoebaHarmonicAngleForce, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AmoebaHarmonicAngleForce_getNumAngles(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::AmoebaHarmonicAngleForce *arg1 = (OpenMM::AmoebaHarmonicAngleForce *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:AmoebaHarmonicAngleForce_getNumAngles",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__AmoebaHarmonicAngleForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AmoebaHarmonicAngleForce_getNumAngles" "', argument " "1"" of type '" "OpenMM::AmoebaHarmonicAngleForce const *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::AmoebaHarmonicAngleForce * >(argp1);
  {
    try {
      result = (int)((OpenMM::AmoebaHarmonicAngleForce const *)arg1)->getNumAngles();
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AmoebaHarmonicAngleForce_setAmoebaGlobalHarmonicAngleCubic(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::AmoebaHarmonicAngleForce *arg1 = (OpenMM::AmoebaHarmonicAngleForce *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:AmoebaHarmonicAngleForce_setAmoebaGlobalHarmonicAngleCubic",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__AmoebaHarmonicAngleForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AmoebaHarmonicAngleForce_setAmoebaGlobalHarmonicAngleCubic" "', argument " "1"" of type '" "OpenMM::AmoebaHarmonicAngleForce *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::AmoebaHarmonicAngleForce * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AmoebaHarmonicAngleForce_setAmoebaGlobalHarmonicAngleCubic" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->setAmoebaGlobalHarmonicAngleCubic(arg2);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AmoebaHarmonicAngleForce_getAmoebaGlobalHarmonicAngleCubic(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::AmoebaHarmonicAngleForce *arg1 = (OpenMM::AmoebaHarmonicAngleForce *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:AmoebaHarmonicAngleForce_getAmoebaGlobalHarmonicAngleCubic",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__AmoebaHarmonicAngleForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AmoebaHarmonicAngleForce_getAmoebaGlobalHarmonicAngleCubic" "', argument " "1"" of type '" "OpenMM::AmoebaHarmonicAngleForce const *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::AmoebaHarmonicAngleForce * >(argp1);
  {
    try {
      result = (double)((OpenMM::AmoebaHarmonicAngleForce const *)arg1)->getAmoebaGlobalHarmonicAngleCubic();
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AmoebaHarmonicAngleForce_setAmoebaGlobalHarmonicAngleQuartic(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::AmoebaHarmonicAngleForce *arg1 = (OpenMM::AmoebaHarmonicAngleForce *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:AmoebaHarmonicAngleForce_setAmoebaGlobalHarmonicAngleQuartic",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__AmoebaHarmonicAngleForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AmoebaHarmonicAngleForce_setAmoebaGlobalHarmonicAngleQuartic" "', argument " "1"" of type '" "OpenMM::AmoebaHarmonicAngleForce *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::AmoebaHarmonicAngleForce * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AmoebaHarmonicAngleForce_setAmoebaGlobalHarmonicAngleQuartic" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->setAmoebaGlobalHarmonicAngleQuartic(arg2);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AmoebaHarmonicAngleForce_getAmoebaGlobalHarmonicAngleQuartic(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::AmoebaHarmonicAngleForce *arg1 = (OpenMM::AmoebaHarmonicAngleForce *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:AmoebaHarmonicAngleForce_getAmoebaGlobalHarmonicAngleQuartic",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__AmoebaHarmonicAngleForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AmoebaHarmonicAngleForce_getAmoebaGlobalHarmonicAngleQuartic" "', argument " "1"" of type '" "OpenMM::AmoebaHarmonicAngleForce const *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::AmoebaHarmonicAngleForce * >(argp1);
  {
    try {
      result = (double)((OpenMM::AmoebaHarmonicAngleForce const *)arg1)->getAmoebaGlobalHarmonicAngleQuartic();
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AmoebaHarmonicAngleForce_setAmoebaGlobalHarmonicAnglePentic(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::AmoebaHarmonicAngleForce *arg1 = (OpenMM::AmoebaHarmonicAngleForce *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:AmoebaHarmonicAngleForce_setAmoebaGlobalHarmonicAnglePentic",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__AmoebaHarmonicAngleForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AmoebaHarmonicAngleForce_setAmoebaGlobalHarmonicAnglePentic" "', argument " "1"" of type '" "OpenMM::AmoebaHarmonicAngleForce *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::AmoebaHarmonicAngleForce * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AmoebaHarmonicAngleForce_setAmoebaGlobalHarmonicAnglePentic" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->setAmoebaGlobalHarmonicAnglePentic(arg2);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AmoebaHarmonicAngleForce_getAmoebaGlobalHarmonicAnglePentic(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::AmoebaHarmonicAngleForce *arg1 = (OpenMM::AmoebaHarmonicAngleForce *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:AmoebaHarmonicAngleForce_getAmoebaGlobalHarmonicAnglePentic",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__AmoebaHarmonicAngleForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AmoebaHarmonicAngleForce_getAmoebaGlobalHarmonicAnglePentic" "', argument " "1"" of type '" "OpenMM::AmoebaHarmonicAngleForce const *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::AmoebaHarmonicAngleForce * >(argp1);
  {
    try {
      result = (double)((OpenMM::AmoebaHarmonicAngleForce const *)arg1)->getAmoebaGlobalHarmonicAnglePentic();
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AmoebaHarmonicAngleForce_setAmoebaGlobalHarmonicAngleSextic(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::AmoebaHarmonicAngleForce *arg1 = (OpenMM::AmoebaHarmonicAngleForce *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:AmoebaHarmonicAngleForce_setAmoebaGlobalHarmonicAngleSextic",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__AmoebaHarmonicAngleForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AmoebaHarmonicAngleForce_setAmoebaGlobalHarmonicAngleSextic" "', argument " "1"" of type '" "OpenMM::AmoebaHarmonicAngleForce *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::AmoebaHarmonicAngleForce * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AmoebaHarmonicAngleForce_setAmoebaGlobalHarmonicAngleSextic" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->setAmoebaGlobalHarmonicAngleSextic(arg2);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AmoebaHarmonicAngleForce_getAmoebaGlobalHarmonicAngleSextic(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::AmoebaHarmonicAngleForce *arg1 = (OpenMM::AmoebaHarmonicAngleForce *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:AmoebaHarmonicAngleForce_getAmoebaGlobalHarmonicAngleSextic",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__AmoebaHarmonicAngleForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AmoebaHarmonicAngleForce_getAmoebaGlobalHarmonicAngleSextic" "', argument " "1"" of type '" "OpenMM::AmoebaHarmonicAngleForce const *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::AmoebaHarmonicAngleForce * >(argp1);
  {
    try {
      result = (double)((OpenMM::AmoebaHarmonicAngleForce const *)arg1)->getAmoebaGlobalHarmonicAngleSextic();
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AmoebaHarmonicAngleForce_addAngle(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::AmoebaHarmonicAngleForce *arg1 = (OpenMM::AmoebaHarmonicAngleForce *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  double arg5 ;
  double arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  double val6 ;
  int ecode6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:AmoebaHarmonicAngleForce_addAngle",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__AmoebaHarmonicAngleForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AmoebaHarmonicAngleForce_addAngle" "', argument " "1"" of type '" "OpenMM::AmoebaHarmonicAngleForce *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::AmoebaHarmonicAngleForce * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AmoebaHarmonicAngleForce_addAngle" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "AmoebaHarmonicAngleForce_addAngle" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "AmoebaHarmonicAngleForce_addAngle" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  ecode5 = SWIG_AsVal_double(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "AmoebaHarmonicAngleForce_addAngle" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  ecode6 = SWIG_AsVal_double(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "AmoebaHarmonicAngleForce_addAngle" "', argument " "6"" of type '" "double""'");
  } 
  arg6 = static_cast< double >(val6);
  {
    try {
      result = (int)(arg1)->addAngle(arg2,arg3,arg4,arg5,arg6);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AmoebaHarmonicAngleForce_getAngleParameters(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::AmoebaHarmonicAngleForce *arg1 = (OpenMM::AmoebaHarmonicAngleForce *) 0 ;
  int arg2 ;
  int *arg3 = 0 ;
  int *arg4 = 0 ;
  int *arg5 = 0 ;
  double *arg6 = 0 ;
  double *arg7 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int temp3 ;
  int res3 = SWIG_TMPOBJ ;
  int temp4 ;
  int res4 = SWIG_TMPOBJ ;
  int temp5 ;
  int res5 = SWIG_TMPOBJ ;
  double temp6 ;
  int res6 = SWIG_TMPOBJ ;
  double temp7 ;
  int res7 = SWIG_TMPOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  arg3 = &temp3;
  arg4 = &temp4;
  arg5 = &temp5;
  arg6 = &temp6;
  arg7 = &temp7;
  if (!PyArg_ParseTuple(args,(char *)"OO:AmoebaHarmonicAngleForce_getAngleParameters",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__AmoebaHarmonicAngleForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AmoebaHarmonicAngleForce_getAngleParameters" "', argument " "1"" of type '" "OpenMM::AmoebaHarmonicAngleForce const *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::AmoebaHarmonicAngleForce * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AmoebaHarmonicAngleForce_getAngleParameters" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      ((OpenMM::AmoebaHarmonicAngleForce const *)arg1)->getAngleParameters(arg2,*arg3,*arg4,*arg5,*arg6,*arg7);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsTmpObj(res3)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_From_int((*arg3)));
  } else {
    int new_flags = SWIG_IsNewObj(res3) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg3), SWIGTYPE_p_int, new_flags));
  }
  if (SWIG_IsTmpObj(res4)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_From_int((*arg4)));
  } else {
    int new_flags = SWIG_IsNewObj(res4) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg4), SWIGTYPE_p_int, new_flags));
  }
  if (SWIG_IsTmpObj(res5)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_From_int((*arg5)));
  } else {
    int new_flags = SWIG_IsNewObj(res5) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg5), SWIGTYPE_p_int, new_flags));
  }
  if (SWIG_IsTmpObj(res6)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_From_double((*arg6)));
  } else {
    int new_flags = SWIG_IsNewObj(res6) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg6), SWIGTYPE_p_double, new_flags));
  }
  if (SWIG_IsTmpObj(res7)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_From_double((*arg7)));
  } else {
    int new_flags = SWIG_IsNewObj(res7) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg7), SWIGTYPE_p_double, new_flags));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AmoebaHarmonicAngleForce_setAngleParameters(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::AmoebaHarmonicAngleForce *arg1 = (OpenMM::AmoebaHarmonicAngleForce *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  double arg6 ;
  double arg7 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  double val6 ;
  int ecode6 = 0 ;
  double val7 ;
  int ecode7 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOO:AmoebaHarmonicAngleForce_setAngleParameters",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__AmoebaHarmonicAngleForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AmoebaHarmonicAngleForce_setAngleParameters" "', argument " "1"" of type '" "OpenMM::AmoebaHarmonicAngleForce *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::AmoebaHarmonicAngleForce * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AmoebaHarmonicAngleForce_setAngleParameters" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "AmoebaHarmonicAngleForce_setAngleParameters" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "AmoebaHarmonicAngleForce_setAngleParameters" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  ecode5 = SWIG_AsVal_int(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "AmoebaHarmonicAngleForce_setAngleParameters" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  ecode6 = SWIG_AsVal_double(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "AmoebaHarmonicAngleForce_setAngleParameters" "', argument " "6"" of type '" "double""'");
  } 
  arg6 = static_cast< double >(val6);
  ecode7 = SWIG_AsVal_double(obj6, &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "AmoebaHarmonicAngleForce_setAngleParameters" "', argument " "7"" of type '" "double""'");
  } 
  arg7 = static_cast< double >(val7);
  {
    try {
      (arg1)->setAngleParameters(arg2,arg3,arg4,arg5,arg6,arg7);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_AmoebaHarmonicAngleForce__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::AmoebaHarmonicAngleForce *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  OpenMM::AmoebaHarmonicAngleForce *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_AmoebaHarmonicAngleForce",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_OpenMM__AmoebaHarmonicAngleForce,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_AmoebaHarmonicAngleForce" "', argument " "1"" of type '" "OpenMM::AmoebaHarmonicAngleForce const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_AmoebaHarmonicAngleForce" "', argument " "1"" of type '" "OpenMM::AmoebaHarmonicAngleForce const &""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::AmoebaHarmonicAngleForce * >(argp1);
  {
    try {
      result = (OpenMM::AmoebaHarmonicAngleForce *)new OpenMM::AmoebaHarmonicAngleForce((OpenMM::AmoebaHarmonicAngleForce const &)*arg1);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_OpenMM__AmoebaHarmonicAngleForce, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_AmoebaHarmonicAngleForce(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 1); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_AmoebaHarmonicAngleForce__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_OpenMM__AmoebaHarmonicAngleForce, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_AmoebaHarmonicAngleForce__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_AmoebaHarmonicAngleForce'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    OpenMM::AmoebaHarmonicAngleForce()\n"
    "    OpenMM::AmoebaHarmonicAngleForce::AmoebaHarmonicAngleForce(OpenMM::AmoebaHarmonicAngleForce const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_AmoebaHarmonicAngleForce(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::AmoebaHarmonicAngleForce *arg1 = (OpenMM::AmoebaHarmonicAngleForce *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_AmoebaHarmonicAngleForce",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__AmoebaHarmonicAngleForce, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_AmoebaHarmonicAngleForce" "', argument " "1"" of type '" "OpenMM::AmoebaHarmonicAngleForce *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::AmoebaHarmonicAngleForce * >(argp1);
  {
    try {
      delete arg1;
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *AmoebaHarmonicAngleForce_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_OpenMM__AmoebaHarmonicAngleForce, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_AmoebaHarmonicBondForce__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::AmoebaHarmonicBondForce *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_AmoebaHarmonicBondForce")) SWIG_fail;
  {
    try {
      result = (OpenMM::AmoebaHarmonicBondForce *)new OpenMM::AmoebaHarmonicBondForce();
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_OpenMM__AmoebaHarmonicBondForce, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AmoebaHarmonicBondForce_getNumBonds(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::AmoebaHarmonicBondForce *arg1 = (OpenMM::AmoebaHarmonicBondForce *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:AmoebaHarmonicBondForce_getNumBonds",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__AmoebaHarmonicBondForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AmoebaHarmonicBondForce_getNumBonds" "', argument " "1"" of type '" "OpenMM::AmoebaHarmonicBondForce const *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::AmoebaHarmonicBondForce * >(argp1);
  {
    try {
      result = (int)((OpenMM::AmoebaHarmonicBondForce const *)arg1)->getNumBonds();
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AmoebaHarmonicBondForce_setAmoebaGlobalHarmonicBondCubic(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::AmoebaHarmonicBondForce *arg1 = (OpenMM::AmoebaHarmonicBondForce *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:AmoebaHarmonicBondForce_setAmoebaGlobalHarmonicBondCubic",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__AmoebaHarmonicBondForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AmoebaHarmonicBondForce_setAmoebaGlobalHarmonicBondCubic" "', argument " "1"" of type '" "OpenMM::AmoebaHarmonicBondForce *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::AmoebaHarmonicBondForce * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AmoebaHarmonicBondForce_setAmoebaGlobalHarmonicBondCubic" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->setAmoebaGlobalHarmonicBondCubic(arg2);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AmoebaHarmonicBondForce_getAmoebaGlobalHarmonicBondCubic(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::AmoebaHarmonicBondForce *arg1 = (OpenMM::AmoebaHarmonicBondForce *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:AmoebaHarmonicBondForce_getAmoebaGlobalHarmonicBondCubic",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__AmoebaHarmonicBondForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AmoebaHarmonicBondForce_getAmoebaGlobalHarmonicBondCubic" "', argument " "1"" of type '" "OpenMM::AmoebaHarmonicBondForce const *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::AmoebaHarmonicBondForce * >(argp1);
  {
    try {
      result = (double)((OpenMM::AmoebaHarmonicBondForce const *)arg1)->getAmoebaGlobalHarmonicBondCubic();
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AmoebaHarmonicBondForce_setAmoebaGlobalHarmonicBondQuartic(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::AmoebaHarmonicBondForce *arg1 = (OpenMM::AmoebaHarmonicBondForce *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:AmoebaHarmonicBondForce_setAmoebaGlobalHarmonicBondQuartic",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__AmoebaHarmonicBondForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AmoebaHarmonicBondForce_setAmoebaGlobalHarmonicBondQuartic" "', argument " "1"" of type '" "OpenMM::AmoebaHarmonicBondForce *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::AmoebaHarmonicBondForce * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AmoebaHarmonicBondForce_setAmoebaGlobalHarmonicBondQuartic" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->setAmoebaGlobalHarmonicBondQuartic(arg2);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AmoebaHarmonicBondForce_getAmoebaGlobalHarmonicBondQuartic(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::AmoebaHarmonicBondForce *arg1 = (OpenMM::AmoebaHarmonicBondForce *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:AmoebaHarmonicBondForce_getAmoebaGlobalHarmonicBondQuartic",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__AmoebaHarmonicBondForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AmoebaHarmonicBondForce_getAmoebaGlobalHarmonicBondQuartic" "', argument " "1"" of type '" "OpenMM::AmoebaHarmonicBondForce const *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::AmoebaHarmonicBondForce * >(argp1);
  {
    try {
      result = (double)((OpenMM::AmoebaHarmonicBondForce const *)arg1)->getAmoebaGlobalHarmonicBondQuartic();
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AmoebaHarmonicBondForce_addBond(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::AmoebaHarmonicBondForce *arg1 = (OpenMM::AmoebaHarmonicBondForce *) 0 ;
  int arg2 ;
  int arg3 ;
  double arg4 ;
  double arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:AmoebaHarmonicBondForce_addBond",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__AmoebaHarmonicBondForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AmoebaHarmonicBondForce_addBond" "', argument " "1"" of type '" "OpenMM::AmoebaHarmonicBondForce *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::AmoebaHarmonicBondForce * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AmoebaHarmonicBondForce_addBond" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "AmoebaHarmonicBondForce_addBond" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "AmoebaHarmonicBondForce_addBond" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  ecode5 = SWIG_AsVal_double(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "AmoebaHarmonicBondForce_addBond" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  {
    try {
      result = (int)(arg1)->addBond(arg2,arg3,arg4,arg5);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AmoebaHarmonicBondForce_getBondParameters(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::AmoebaHarmonicBondForce *arg1 = (OpenMM::AmoebaHarmonicBondForce *) 0 ;
  int arg2 ;
  int *arg3 = 0 ;
  int *arg4 = 0 ;
  double *arg5 = 0 ;
  double *arg6 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int temp3 ;
  int res3 = SWIG_TMPOBJ ;
  int temp4 ;
  int res4 = SWIG_TMPOBJ ;
  double temp5 ;
  int res5 = SWIG_TMPOBJ ;
  double temp6 ;
  int res6 = SWIG_TMPOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  arg3 = &temp3;
  arg4 = &temp4;
  arg5 = &temp5;
  arg6 = &temp6;
  if (!PyArg_ParseTuple(args,(char *)"OO:AmoebaHarmonicBondForce_getBondParameters",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__AmoebaHarmonicBondForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AmoebaHarmonicBondForce_getBondParameters" "', argument " "1"" of type '" "OpenMM::AmoebaHarmonicBondForce const *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::AmoebaHarmonicBondForce * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AmoebaHarmonicBondForce_getBondParameters" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      ((OpenMM::AmoebaHarmonicBondForce const *)arg1)->getBondParameters(arg2,*arg3,*arg4,*arg5,*arg6);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsTmpObj(res3)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_From_int((*arg3)));
  } else {
    int new_flags = SWIG_IsNewObj(res3) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg3), SWIGTYPE_p_int, new_flags));
  }
  if (SWIG_IsTmpObj(res4)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_From_int((*arg4)));
  } else {
    int new_flags = SWIG_IsNewObj(res4) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg4), SWIGTYPE_p_int, new_flags));
  }
  if (SWIG_IsTmpObj(res5)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_From_double((*arg5)));
  } else {
    int new_flags = SWIG_IsNewObj(res5) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg5), SWIGTYPE_p_double, new_flags));
  }
  if (SWIG_IsTmpObj(res6)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_From_double((*arg6)));
  } else {
    int new_flags = SWIG_IsNewObj(res6) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg6), SWIGTYPE_p_double, new_flags));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AmoebaHarmonicBondForce_setBondParameters(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::AmoebaHarmonicBondForce *arg1 = (OpenMM::AmoebaHarmonicBondForce *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  double arg5 ;
  double arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  double val6 ;
  int ecode6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:AmoebaHarmonicBondForce_setBondParameters",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__AmoebaHarmonicBondForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AmoebaHarmonicBondForce_setBondParameters" "', argument " "1"" of type '" "OpenMM::AmoebaHarmonicBondForce *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::AmoebaHarmonicBondForce * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AmoebaHarmonicBondForce_setBondParameters" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "AmoebaHarmonicBondForce_setBondParameters" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "AmoebaHarmonicBondForce_setBondParameters" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  ecode5 = SWIG_AsVal_double(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "AmoebaHarmonicBondForce_setBondParameters" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  ecode6 = SWIG_AsVal_double(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "AmoebaHarmonicBondForce_setBondParameters" "', argument " "6"" of type '" "double""'");
  } 
  arg6 = static_cast< double >(val6);
  {
    try {
      (arg1)->setBondParameters(arg2,arg3,arg4,arg5,arg6);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_AmoebaHarmonicBondForce__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::AmoebaHarmonicBondForce *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  OpenMM::AmoebaHarmonicBondForce *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_AmoebaHarmonicBondForce",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_OpenMM__AmoebaHarmonicBondForce,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_AmoebaHarmonicBondForce" "', argument " "1"" of type '" "OpenMM::AmoebaHarmonicBondForce const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_AmoebaHarmonicBondForce" "', argument " "1"" of type '" "OpenMM::AmoebaHarmonicBondForce const &""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::AmoebaHarmonicBondForce * >(argp1);
  {
    try {
      result = (OpenMM::AmoebaHarmonicBondForce *)new OpenMM::AmoebaHarmonicBondForce((OpenMM::AmoebaHarmonicBondForce const &)*arg1);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_OpenMM__AmoebaHarmonicBondForce, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_AmoebaHarmonicBondForce(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 1); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_AmoebaHarmonicBondForce__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_OpenMM__AmoebaHarmonicBondForce, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_AmoebaHarmonicBondForce__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_AmoebaHarmonicBondForce'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    OpenMM::AmoebaHarmonicBondForce()\n"
    "    OpenMM::AmoebaHarmonicBondForce::AmoebaHarmonicBondForce(OpenMM::AmoebaHarmonicBondForce const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_AmoebaHarmonicBondForce(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::AmoebaHarmonicBondForce *arg1 = (OpenMM::AmoebaHarmonicBondForce *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_AmoebaHarmonicBondForce",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__AmoebaHarmonicBondForce, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_AmoebaHarmonicBondForce" "', argument " "1"" of type '" "OpenMM::AmoebaHarmonicBondForce *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::AmoebaHarmonicBondForce * >(argp1);
  {
    try {
      delete arg1;
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *AmoebaHarmonicBondForce_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_OpenMM__AmoebaHarmonicBondForce, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_AmoebaHarmonicInPlaneAngleForce__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::AmoebaHarmonicInPlaneAngleForce *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_AmoebaHarmonicInPlaneAngleForce")) SWIG_fail;
  {
    try {
      result = (OpenMM::AmoebaHarmonicInPlaneAngleForce *)new OpenMM::AmoebaHarmonicInPlaneAngleForce();
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_OpenMM__AmoebaHarmonicInPlaneAngleForce, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AmoebaHarmonicInPlaneAngleForce_getNumAngles(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::AmoebaHarmonicInPlaneAngleForce *arg1 = (OpenMM::AmoebaHarmonicInPlaneAngleForce *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:AmoebaHarmonicInPlaneAngleForce_getNumAngles",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__AmoebaHarmonicInPlaneAngleForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AmoebaHarmonicInPlaneAngleForce_getNumAngles" "', argument " "1"" of type '" "OpenMM::AmoebaHarmonicInPlaneAngleForce const *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::AmoebaHarmonicInPlaneAngleForce * >(argp1);
  {
    try {
      result = (int)((OpenMM::AmoebaHarmonicInPlaneAngleForce const *)arg1)->getNumAngles();
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AmoebaHarmonicInPlaneAngleForce_setAmoebaGlobalHarmonicInPlaneAngleCubic(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::AmoebaHarmonicInPlaneAngleForce *arg1 = (OpenMM::AmoebaHarmonicInPlaneAngleForce *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:AmoebaHarmonicInPlaneAngleForce_setAmoebaGlobalHarmonicInPlaneAngleCubic",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__AmoebaHarmonicInPlaneAngleForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AmoebaHarmonicInPlaneAngleForce_setAmoebaGlobalHarmonicInPlaneAngleCubic" "', argument " "1"" of type '" "OpenMM::AmoebaHarmonicInPlaneAngleForce *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::AmoebaHarmonicInPlaneAngleForce * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AmoebaHarmonicInPlaneAngleForce_setAmoebaGlobalHarmonicInPlaneAngleCubic" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->setAmoebaGlobalHarmonicInPlaneAngleCubic(arg2);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AmoebaHarmonicInPlaneAngleForce_getAmoebaGlobalHarmonicInPlaneAngleCubic(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::AmoebaHarmonicInPlaneAngleForce *arg1 = (OpenMM::AmoebaHarmonicInPlaneAngleForce *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:AmoebaHarmonicInPlaneAngleForce_getAmoebaGlobalHarmonicInPlaneAngleCubic",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__AmoebaHarmonicInPlaneAngleForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AmoebaHarmonicInPlaneAngleForce_getAmoebaGlobalHarmonicInPlaneAngleCubic" "', argument " "1"" of type '" "OpenMM::AmoebaHarmonicInPlaneAngleForce const *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::AmoebaHarmonicInPlaneAngleForce * >(argp1);
  {
    try {
      result = (double)((OpenMM::AmoebaHarmonicInPlaneAngleForce const *)arg1)->getAmoebaGlobalHarmonicInPlaneAngleCubic();
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AmoebaHarmonicInPlaneAngleForce_setAmoebaGlobalHarmonicInPlaneAngleQuartic(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::AmoebaHarmonicInPlaneAngleForce *arg1 = (OpenMM::AmoebaHarmonicInPlaneAngleForce *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:AmoebaHarmonicInPlaneAngleForce_setAmoebaGlobalHarmonicInPlaneAngleQuartic",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__AmoebaHarmonicInPlaneAngleForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AmoebaHarmonicInPlaneAngleForce_setAmoebaGlobalHarmonicInPlaneAngleQuartic" "', argument " "1"" of type '" "OpenMM::AmoebaHarmonicInPlaneAngleForce *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::AmoebaHarmonicInPlaneAngleForce * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AmoebaHarmonicInPlaneAngleForce_setAmoebaGlobalHarmonicInPlaneAngleQuartic" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->setAmoebaGlobalHarmonicInPlaneAngleQuartic(arg2);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AmoebaHarmonicInPlaneAngleForce_getAmoebaGlobalHarmonicInPlaneAngleQuartic(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::AmoebaHarmonicInPlaneAngleForce *arg1 = (OpenMM::AmoebaHarmonicInPlaneAngleForce *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:AmoebaHarmonicInPlaneAngleForce_getAmoebaGlobalHarmonicInPlaneAngleQuartic",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__AmoebaHarmonicInPlaneAngleForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AmoebaHarmonicInPlaneAngleForce_getAmoebaGlobalHarmonicInPlaneAngleQuartic" "', argument " "1"" of type '" "OpenMM::AmoebaHarmonicInPlaneAngleForce const *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::AmoebaHarmonicInPlaneAngleForce * >(argp1);
  {
    try {
      result = (double)((OpenMM::AmoebaHarmonicInPlaneAngleForce const *)arg1)->getAmoebaGlobalHarmonicInPlaneAngleQuartic();
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AmoebaHarmonicInPlaneAngleForce_setAmoebaGlobalHarmonicInPlaneAnglePentic(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::AmoebaHarmonicInPlaneAngleForce *arg1 = (OpenMM::AmoebaHarmonicInPlaneAngleForce *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:AmoebaHarmonicInPlaneAngleForce_setAmoebaGlobalHarmonicInPlaneAnglePentic",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__AmoebaHarmonicInPlaneAngleForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AmoebaHarmonicInPlaneAngleForce_setAmoebaGlobalHarmonicInPlaneAnglePentic" "', argument " "1"" of type '" "OpenMM::AmoebaHarmonicInPlaneAngleForce *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::AmoebaHarmonicInPlaneAngleForce * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AmoebaHarmonicInPlaneAngleForce_setAmoebaGlobalHarmonicInPlaneAnglePentic" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->setAmoebaGlobalHarmonicInPlaneAnglePentic(arg2);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AmoebaHarmonicInPlaneAngleForce_getAmoebaGlobalHarmonicInPlaneAnglePentic(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::AmoebaHarmonicInPlaneAngleForce *arg1 = (OpenMM::AmoebaHarmonicInPlaneAngleForce *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:AmoebaHarmonicInPlaneAngleForce_getAmoebaGlobalHarmonicInPlaneAnglePentic",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__AmoebaHarmonicInPlaneAngleForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AmoebaHarmonicInPlaneAngleForce_getAmoebaGlobalHarmonicInPlaneAnglePentic" "', argument " "1"" of type '" "OpenMM::AmoebaHarmonicInPlaneAngleForce const *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::AmoebaHarmonicInPlaneAngleForce * >(argp1);
  {
    try {
      result = (double)((OpenMM::AmoebaHarmonicInPlaneAngleForce const *)arg1)->getAmoebaGlobalHarmonicInPlaneAnglePentic();
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AmoebaHarmonicInPlaneAngleForce_setAmoebaGlobalHarmonicInPlaneAngleSextic(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::AmoebaHarmonicInPlaneAngleForce *arg1 = (OpenMM::AmoebaHarmonicInPlaneAngleForce *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:AmoebaHarmonicInPlaneAngleForce_setAmoebaGlobalHarmonicInPlaneAngleSextic",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__AmoebaHarmonicInPlaneAngleForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AmoebaHarmonicInPlaneAngleForce_setAmoebaGlobalHarmonicInPlaneAngleSextic" "', argument " "1"" of type '" "OpenMM::AmoebaHarmonicInPlaneAngleForce *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::AmoebaHarmonicInPlaneAngleForce * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AmoebaHarmonicInPlaneAngleForce_setAmoebaGlobalHarmonicInPlaneAngleSextic" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->setAmoebaGlobalHarmonicInPlaneAngleSextic(arg2);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AmoebaHarmonicInPlaneAngleForce_getAmoebaGlobalHarmonicInPlaneAngleSextic(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::AmoebaHarmonicInPlaneAngleForce *arg1 = (OpenMM::AmoebaHarmonicInPlaneAngleForce *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:AmoebaHarmonicInPlaneAngleForce_getAmoebaGlobalHarmonicInPlaneAngleSextic",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__AmoebaHarmonicInPlaneAngleForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AmoebaHarmonicInPlaneAngleForce_getAmoebaGlobalHarmonicInPlaneAngleSextic" "', argument " "1"" of type '" "OpenMM::AmoebaHarmonicInPlaneAngleForce const *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::AmoebaHarmonicInPlaneAngleForce * >(argp1);
  {
    try {
      result = (double)((OpenMM::AmoebaHarmonicInPlaneAngleForce const *)arg1)->getAmoebaGlobalHarmonicInPlaneAngleSextic();
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AmoebaHarmonicInPlaneAngleForce_addAngle(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::AmoebaHarmonicInPlaneAngleForce *arg1 = (OpenMM::AmoebaHarmonicInPlaneAngleForce *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  double arg6 ;
  double arg7 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  double val6 ;
  int ecode6 = 0 ;
  double val7 ;
  int ecode7 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOO:AmoebaHarmonicInPlaneAngleForce_addAngle",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__AmoebaHarmonicInPlaneAngleForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AmoebaHarmonicInPlaneAngleForce_addAngle" "', argument " "1"" of type '" "OpenMM::AmoebaHarmonicInPlaneAngleForce *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::AmoebaHarmonicInPlaneAngleForce * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AmoebaHarmonicInPlaneAngleForce_addAngle" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "AmoebaHarmonicInPlaneAngleForce_addAngle" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "AmoebaHarmonicInPlaneAngleForce_addAngle" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  ecode5 = SWIG_AsVal_int(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "AmoebaHarmonicInPlaneAngleForce_addAngle" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  ecode6 = SWIG_AsVal_double(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "AmoebaHarmonicInPlaneAngleForce_addAngle" "', argument " "6"" of type '" "double""'");
  } 
  arg6 = static_cast< double >(val6);
  ecode7 = SWIG_AsVal_double(obj6, &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "AmoebaHarmonicInPlaneAngleForce_addAngle" "', argument " "7"" of type '" "double""'");
  } 
  arg7 = static_cast< double >(val7);
  {
    try {
      result = (int)(arg1)->addAngle(arg2,arg3,arg4,arg5,arg6,arg7);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AmoebaHarmonicInPlaneAngleForce_getAngleParameters(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::AmoebaHarmonicInPlaneAngleForce *arg1 = (OpenMM::AmoebaHarmonicInPlaneAngleForce *) 0 ;
  int arg2 ;
  int *arg3 = 0 ;
  int *arg4 = 0 ;
  int *arg5 = 0 ;
  int *arg6 = 0 ;
  double *arg7 = 0 ;
  double *arg8 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int temp3 ;
  int res3 = SWIG_TMPOBJ ;
  int temp4 ;
  int res4 = SWIG_TMPOBJ ;
  int temp5 ;
  int res5 = SWIG_TMPOBJ ;
  int temp6 ;
  int res6 = SWIG_TMPOBJ ;
  double temp7 ;
  int res7 = SWIG_TMPOBJ ;
  double temp8 ;
  int res8 = SWIG_TMPOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  arg3 = &temp3;
  arg4 = &temp4;
  arg5 = &temp5;
  arg6 = &temp6;
  arg7 = &temp7;
  arg8 = &temp8;
  if (!PyArg_ParseTuple(args,(char *)"OO:AmoebaHarmonicInPlaneAngleForce_getAngleParameters",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__AmoebaHarmonicInPlaneAngleForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AmoebaHarmonicInPlaneAngleForce_getAngleParameters" "', argument " "1"" of type '" "OpenMM::AmoebaHarmonicInPlaneAngleForce const *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::AmoebaHarmonicInPlaneAngleForce * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AmoebaHarmonicInPlaneAngleForce_getAngleParameters" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      ((OpenMM::AmoebaHarmonicInPlaneAngleForce const *)arg1)->getAngleParameters(arg2,*arg3,*arg4,*arg5,*arg6,*arg7,*arg8);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsTmpObj(res3)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_From_int((*arg3)));
  } else {
    int new_flags = SWIG_IsNewObj(res3) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg3), SWIGTYPE_p_int, new_flags));
  }
  if (SWIG_IsTmpObj(res4)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_From_int((*arg4)));
  } else {
    int new_flags = SWIG_IsNewObj(res4) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg4), SWIGTYPE_p_int, new_flags));
  }
  if (SWIG_IsTmpObj(res5)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_From_int((*arg5)));
  } else {
    int new_flags = SWIG_IsNewObj(res5) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg5), SWIGTYPE_p_int, new_flags));
  }
  if (SWIG_IsTmpObj(res6)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_From_int((*arg6)));
  } else {
    int new_flags = SWIG_IsNewObj(res6) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg6), SWIGTYPE_p_int, new_flags));
  }
  if (SWIG_IsTmpObj(res7)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_From_double((*arg7)));
  } else {
    int new_flags = SWIG_IsNewObj(res7) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg7), SWIGTYPE_p_double, new_flags));
  }
  if (SWIG_IsTmpObj(res8)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_From_double((*arg8)));
  } else {
    int new_flags = SWIG_IsNewObj(res8) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg8), SWIGTYPE_p_double, new_flags));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AmoebaHarmonicInPlaneAngleForce_setAngleParameters(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::AmoebaHarmonicInPlaneAngleForce *arg1 = (OpenMM::AmoebaHarmonicInPlaneAngleForce *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  double arg7 ;
  double arg8 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  int val6 ;
  int ecode6 = 0 ;
  double val7 ;
  int ecode7 = 0 ;
  double val8 ;
  int ecode8 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOOO:AmoebaHarmonicInPlaneAngleForce_setAngleParameters",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__AmoebaHarmonicInPlaneAngleForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AmoebaHarmonicInPlaneAngleForce_setAngleParameters" "', argument " "1"" of type '" "OpenMM::AmoebaHarmonicInPlaneAngleForce *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::AmoebaHarmonicInPlaneAngleForce * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AmoebaHarmonicInPlaneAngleForce_setAngleParameters" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "AmoebaHarmonicInPlaneAngleForce_setAngleParameters" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "AmoebaHarmonicInPlaneAngleForce_setAngleParameters" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  ecode5 = SWIG_AsVal_int(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "AmoebaHarmonicInPlaneAngleForce_setAngleParameters" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  ecode6 = SWIG_AsVal_int(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "AmoebaHarmonicInPlaneAngleForce_setAngleParameters" "', argument " "6"" of type '" "int""'");
  } 
  arg6 = static_cast< int >(val6);
  ecode7 = SWIG_AsVal_double(obj6, &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "AmoebaHarmonicInPlaneAngleForce_setAngleParameters" "', argument " "7"" of type '" "double""'");
  } 
  arg7 = static_cast< double >(val7);
  ecode8 = SWIG_AsVal_double(obj7, &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "AmoebaHarmonicInPlaneAngleForce_setAngleParameters" "', argument " "8"" of type '" "double""'");
  } 
  arg8 = static_cast< double >(val8);
  {
    try {
      (arg1)->setAngleParameters(arg2,arg3,arg4,arg5,arg6,arg7,arg8);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_AmoebaHarmonicInPlaneAngleForce__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::AmoebaHarmonicInPlaneAngleForce *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  OpenMM::AmoebaHarmonicInPlaneAngleForce *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_AmoebaHarmonicInPlaneAngleForce",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_OpenMM__AmoebaHarmonicInPlaneAngleForce,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_AmoebaHarmonicInPlaneAngleForce" "', argument " "1"" of type '" "OpenMM::AmoebaHarmonicInPlaneAngleForce const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_AmoebaHarmonicInPlaneAngleForce" "', argument " "1"" of type '" "OpenMM::AmoebaHarmonicInPlaneAngleForce const &""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::AmoebaHarmonicInPlaneAngleForce * >(argp1);
  {
    try {
      result = (OpenMM::AmoebaHarmonicInPlaneAngleForce *)new OpenMM::AmoebaHarmonicInPlaneAngleForce((OpenMM::AmoebaHarmonicInPlaneAngleForce const &)*arg1);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_OpenMM__AmoebaHarmonicInPlaneAngleForce, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_AmoebaHarmonicInPlaneAngleForce(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 1); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_AmoebaHarmonicInPlaneAngleForce__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_OpenMM__AmoebaHarmonicInPlaneAngleForce, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_AmoebaHarmonicInPlaneAngleForce__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_AmoebaHarmonicInPlaneAngleForce'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    OpenMM::AmoebaHarmonicInPlaneAngleForce()\n"
    "    OpenMM::AmoebaHarmonicInPlaneAngleForce::AmoebaHarmonicInPlaneAngleForce(OpenMM::AmoebaHarmonicInPlaneAngleForce const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_AmoebaHarmonicInPlaneAngleForce(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::AmoebaHarmonicInPlaneAngleForce *arg1 = (OpenMM::AmoebaHarmonicInPlaneAngleForce *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_AmoebaHarmonicInPlaneAngleForce",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__AmoebaHarmonicInPlaneAngleForce, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_AmoebaHarmonicInPlaneAngleForce" "', argument " "1"" of type '" "OpenMM::AmoebaHarmonicInPlaneAngleForce *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::AmoebaHarmonicInPlaneAngleForce * >(argp1);
  {
    try {
      delete arg1;
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *AmoebaHarmonicInPlaneAngleForce_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_OpenMM__AmoebaHarmonicInPlaneAngleForce, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_AmoebaMultipoleForce__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::AmoebaMultipoleForce *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_AmoebaMultipoleForce")) SWIG_fail;
  {
    try {
      result = (OpenMM::AmoebaMultipoleForce *)new OpenMM::AmoebaMultipoleForce();
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_OpenMM__AmoebaMultipoleForce, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AmoebaMultipoleForce_getNumMultipoles(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::AmoebaMultipoleForce *arg1 = (OpenMM::AmoebaMultipoleForce *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:AmoebaMultipoleForce_getNumMultipoles",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__AmoebaMultipoleForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AmoebaMultipoleForce_getNumMultipoles" "', argument " "1"" of type '" "OpenMM::AmoebaMultipoleForce const *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::AmoebaMultipoleForce * >(argp1);
  {
    try {
      result = (int)((OpenMM::AmoebaMultipoleForce const *)arg1)->getNumMultipoles();
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AmoebaMultipoleForce_getNonbondedMethod(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::AmoebaMultipoleForce *arg1 = (OpenMM::AmoebaMultipoleForce *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  OpenMM::AmoebaMultipoleForce::AmoebaNonbondedMethod result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:AmoebaMultipoleForce_getNonbondedMethod",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__AmoebaMultipoleForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AmoebaMultipoleForce_getNonbondedMethod" "', argument " "1"" of type '" "OpenMM::AmoebaMultipoleForce const *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::AmoebaMultipoleForce * >(argp1);
  {
    try {
      result = (OpenMM::AmoebaMultipoleForce::AmoebaNonbondedMethod)((OpenMM::AmoebaMultipoleForce const *)arg1)->getNonbondedMethod();
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AmoebaMultipoleForce_setNonbondedMethod(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::AmoebaMultipoleForce *arg1 = (OpenMM::AmoebaMultipoleForce *) 0 ;
  OpenMM::AmoebaMultipoleForce::AmoebaNonbondedMethod arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:AmoebaMultipoleForce_setNonbondedMethod",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__AmoebaMultipoleForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AmoebaMultipoleForce_setNonbondedMethod" "', argument " "1"" of type '" "OpenMM::AmoebaMultipoleForce *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::AmoebaMultipoleForce * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AmoebaMultipoleForce_setNonbondedMethod" "', argument " "2"" of type '" "OpenMM::AmoebaMultipoleForce::AmoebaNonbondedMethod""'");
  } 
  arg2 = static_cast< OpenMM::AmoebaMultipoleForce::AmoebaNonbondedMethod >(val2);
  {
    try {
      (arg1)->setNonbondedMethod(arg2);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AmoebaMultipoleForce_getPolarizationType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::AmoebaMultipoleForce *arg1 = (OpenMM::AmoebaMultipoleForce *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  OpenMM::AmoebaMultipoleForce::AmoebaPolarizationType result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:AmoebaMultipoleForce_getPolarizationType",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__AmoebaMultipoleForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AmoebaMultipoleForce_getPolarizationType" "', argument " "1"" of type '" "OpenMM::AmoebaMultipoleForce const *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::AmoebaMultipoleForce * >(argp1);
  {
    try {
      result = (OpenMM::AmoebaMultipoleForce::AmoebaPolarizationType)((OpenMM::AmoebaMultipoleForce const *)arg1)->getPolarizationType();
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AmoebaMultipoleForce_setPolarizationType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::AmoebaMultipoleForce *arg1 = (OpenMM::AmoebaMultipoleForce *) 0 ;
  OpenMM::AmoebaMultipoleForce::AmoebaPolarizationType arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:AmoebaMultipoleForce_setPolarizationType",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__AmoebaMultipoleForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AmoebaMultipoleForce_setPolarizationType" "', argument " "1"" of type '" "OpenMM::AmoebaMultipoleForce *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::AmoebaMultipoleForce * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AmoebaMultipoleForce_setPolarizationType" "', argument " "2"" of type '" "OpenMM::AmoebaMultipoleForce::AmoebaPolarizationType""'");
  } 
  arg2 = static_cast< OpenMM::AmoebaMultipoleForce::AmoebaPolarizationType >(val2);
  {
    try {
      (arg1)->setPolarizationType(arg2);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AmoebaMultipoleForce_getCutoffDistance(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::AmoebaMultipoleForce *arg1 = (OpenMM::AmoebaMultipoleForce *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:AmoebaMultipoleForce_getCutoffDistance",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__AmoebaMultipoleForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AmoebaMultipoleForce_getCutoffDistance" "', argument " "1"" of type '" "OpenMM::AmoebaMultipoleForce const *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::AmoebaMultipoleForce * >(argp1);
  {
    try {
      result = (double)((OpenMM::AmoebaMultipoleForce const *)arg1)->getCutoffDistance();
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AmoebaMultipoleForce_setCutoffDistance(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::AmoebaMultipoleForce *arg1 = (OpenMM::AmoebaMultipoleForce *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:AmoebaMultipoleForce_setCutoffDistance",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__AmoebaMultipoleForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AmoebaMultipoleForce_setCutoffDistance" "', argument " "1"" of type '" "OpenMM::AmoebaMultipoleForce *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::AmoebaMultipoleForce * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AmoebaMultipoleForce_setCutoffDistance" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->setCutoffDistance(arg2);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AmoebaMultipoleForce_getAEwald(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::AmoebaMultipoleForce *arg1 = (OpenMM::AmoebaMultipoleForce *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:AmoebaMultipoleForce_getAEwald",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__AmoebaMultipoleForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AmoebaMultipoleForce_getAEwald" "', argument " "1"" of type '" "OpenMM::AmoebaMultipoleForce const *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::AmoebaMultipoleForce * >(argp1);
  {
    try {
      result = (double)((OpenMM::AmoebaMultipoleForce const *)arg1)->getAEwald();
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AmoebaMultipoleForce_setAEwald(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::AmoebaMultipoleForce *arg1 = (OpenMM::AmoebaMultipoleForce *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:AmoebaMultipoleForce_setAEwald",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__AmoebaMultipoleForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AmoebaMultipoleForce_setAEwald" "', argument " "1"" of type '" "OpenMM::AmoebaMultipoleForce *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::AmoebaMultipoleForce * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AmoebaMultipoleForce_setAEwald" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->setAEwald(arg2);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AmoebaMultipoleForce_getPmeBSplineOrder(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::AmoebaMultipoleForce *arg1 = (OpenMM::AmoebaMultipoleForce *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:AmoebaMultipoleForce_getPmeBSplineOrder",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__AmoebaMultipoleForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AmoebaMultipoleForce_getPmeBSplineOrder" "', argument " "1"" of type '" "OpenMM::AmoebaMultipoleForce const *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::AmoebaMultipoleForce * >(argp1);
  {
    try {
      result = (int)((OpenMM::AmoebaMultipoleForce const *)arg1)->getPmeBSplineOrder();
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AmoebaMultipoleForce_getPmeGridDimensions(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::AmoebaMultipoleForce *arg1 = (OpenMM::AmoebaMultipoleForce *) 0 ;
  std::vector< int,std::allocator< int > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< int,std::allocator< int > > temp2 ;
  int res2 = SWIG_TMPOBJ ;
  PyObject * obj0 = 0 ;
  
  arg2 = &temp2;
  if (!PyArg_ParseTuple(args,(char *)"O:AmoebaMultipoleForce_getPmeGridDimensions",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__AmoebaMultipoleForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AmoebaMultipoleForce_getPmeGridDimensions" "', argument " "1"" of type '" "OpenMM::AmoebaMultipoleForce const *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::AmoebaMultipoleForce * >(argp1);
  {
    try {
      ((OpenMM::AmoebaMultipoleForce const *)arg1)->getPmeGridDimensions(*arg2);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsTmpObj(res2)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, swig::from((*arg2)));
  } else {
    int new_flags = SWIG_IsNewObj(res2) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg2), SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, new_flags));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AmoebaMultipoleForce_setPmeGridDimensions(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::AmoebaMultipoleForce *arg1 = (OpenMM::AmoebaMultipoleForce *) 0 ;
  std::vector< int,std::allocator< int > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:AmoebaMultipoleForce_setPmeGridDimensions",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__AmoebaMultipoleForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AmoebaMultipoleForce_setPmeGridDimensions" "', argument " "1"" of type '" "OpenMM::AmoebaMultipoleForce *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::AmoebaMultipoleForce * >(argp1);
  {
    std::vector<int,std::allocator< int > > *ptr = (std::vector<int,std::allocator< int > > *)0;
    res2 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AmoebaMultipoleForce_setPmeGridDimensions" "', argument " "2"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AmoebaMultipoleForce_setPmeGridDimensions" "', argument " "2"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      (arg1)->setPmeGridDimensions((std::vector< int,std::allocator< int > > const &)*arg2);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_AmoebaMultipoleForce_addParticle(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::AmoebaMultipoleForce *arg1 = (OpenMM::AmoebaMultipoleForce *) 0 ;
  double arg2 ;
  std::vector< double,std::allocator< double > > *arg3 = 0 ;
  std::vector< double,std::allocator< double > > *arg4 = 0 ;
  int arg5 ;
  int arg6 ;
  int arg7 ;
  int arg8 ;
  double arg9 ;
  double arg10 ;
  double arg11 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  int res4 = SWIG_OLDOBJ ;
  int val5 ;
  int ecode5 = 0 ;
  int val6 ;
  int ecode6 = 0 ;
  int val7 ;
  int ecode7 = 0 ;
  int val8 ;
  int ecode8 = 0 ;
  double val9 ;
  int ecode9 = 0 ;
  double val10 ;
  int ecode10 = 0 ;
  double val11 ;
  int ecode11 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  PyObject * obj8 = 0 ;
  PyObject * obj9 = 0 ;
  PyObject * obj10 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOOOOOO:AmoebaMultipoleForce_addParticle",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7,&obj8,&obj9,&obj10)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__AmoebaMultipoleForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AmoebaMultipoleForce_addParticle" "', argument " "1"" of type '" "OpenMM::AmoebaMultipoleForce *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::AmoebaMultipoleForce * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AmoebaMultipoleForce_addParticle" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    std::vector<double,std::allocator< double > > *ptr = (std::vector<double,std::allocator< double > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "AmoebaMultipoleForce_addParticle" "', argument " "3"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AmoebaMultipoleForce_addParticle" "', argument " "3"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    arg3 = ptr;
  }
  {
    std::vector<double,std::allocator< double > > *ptr = (std::vector<double,std::allocator< double > > *)0;
    res4 = swig::asptr(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "AmoebaMultipoleForce_addParticle" "', argument " "4"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AmoebaMultipoleForce_addParticle" "', argument " "4"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    arg4 = ptr;
  }
  ecode5 = SWIG_AsVal_int(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "AmoebaMultipoleForce_addParticle" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  ecode6 = SWIG_AsVal_int(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "AmoebaMultipoleForce_addParticle" "', argument " "6"" of type '" "int""'");
  } 
  arg6 = static_cast< int >(val6);
  ecode7 = SWIG_AsVal_int(obj6, &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "AmoebaMultipoleForce_addParticle" "', argument " "7"" of type '" "int""'");
  } 
  arg7 = static_cast< int >(val7);
  ecode8 = SWIG_AsVal_int(obj7, &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "AmoebaMultipoleForce_addParticle" "', argument " "8"" of type '" "int""'");
  } 
  arg8 = static_cast< int >(val8);
  ecode9 = SWIG_AsVal_double(obj8, &val9);
  if (!SWIG_IsOK(ecode9)) {
    SWIG_exception_fail(SWIG_ArgError(ecode9), "in method '" "AmoebaMultipoleForce_addParticle" "', argument " "9"" of type '" "double""'");
  } 
  arg9 = static_cast< double >(val9);
  ecode10 = SWIG_AsVal_double(obj9, &val10);
  if (!SWIG_IsOK(ecode10)) {
    SWIG_exception_fail(SWIG_ArgError(ecode10), "in method '" "AmoebaMultipoleForce_addParticle" "', argument " "10"" of type '" "double""'");
  } 
  arg10 = static_cast< double >(val10);
  ecode11 = SWIG_AsVal_double(obj10, &val11);
  if (!SWIG_IsOK(ecode11)) {
    SWIG_exception_fail(SWIG_ArgError(ecode11), "in method '" "AmoebaMultipoleForce_addParticle" "', argument " "11"" of type '" "double""'");
  } 
  arg11 = static_cast< double >(val11);
  {
    try {
      result = (int)(arg1)->addParticle(arg2,(std::vector< double,std::allocator< double > > const &)*arg3,(std::vector< double,std::allocator< double > > const &)*arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (SWIG_IsNewObj(res3)) delete arg3;
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_AmoebaMultipoleForce_getMultipoleParameters(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::AmoebaMultipoleForce *arg1 = (OpenMM::AmoebaMultipoleForce *) 0 ;
  int arg2 ;
  double *arg3 = 0 ;
  std::vector< double,std::allocator< double > > *arg4 = 0 ;
  std::vector< double,std::allocator< double > > *arg5 = 0 ;
  int *arg6 = 0 ;
  int *arg7 = 0 ;
  int *arg8 = 0 ;
  int *arg9 = 0 ;
  double *arg10 = 0 ;
  double *arg11 = 0 ;
  double *arg12 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  double temp3 ;
  int res3 = SWIG_TMPOBJ ;
  std::vector< double,std::allocator< double > > temp4 ;
  int res4 = SWIG_TMPOBJ ;
  std::vector< double,std::allocator< double > > temp5 ;
  int res5 = SWIG_TMPOBJ ;
  int temp6 ;
  int res6 = SWIG_TMPOBJ ;
  int temp7 ;
  int res7 = SWIG_TMPOBJ ;
  int temp8 ;
  int res8 = SWIG_TMPOBJ ;
  int temp9 ;
  int res9 = SWIG_TMPOBJ ;
  double temp10 ;
  int res10 = SWIG_TMPOBJ ;
  double temp11 ;
  int res11 = SWIG_TMPOBJ ;
  double temp12 ;
  int res12 = SWIG_TMPOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  arg3 = &temp3;
  arg4 = &temp4;
  arg5 = &temp5;
  arg6 = &temp6;
  arg7 = &temp7;
  arg8 = &temp8;
  arg9 = &temp9;
  arg10 = &temp10;
  arg11 = &temp11;
  arg12 = &temp12;
  if (!PyArg_ParseTuple(args,(char *)"OO:AmoebaMultipoleForce_getMultipoleParameters",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__AmoebaMultipoleForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AmoebaMultipoleForce_getMultipoleParameters" "', argument " "1"" of type '" "OpenMM::AmoebaMultipoleForce const *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::AmoebaMultipoleForce * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AmoebaMultipoleForce_getMultipoleParameters" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      ((OpenMM::AmoebaMultipoleForce const *)arg1)->getMultipoleParameters(arg2,*arg3,*arg4,*arg5,*arg6,*arg7,*arg8,*arg9,*arg10,*arg11,*arg12);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsTmpObj(res3)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_From_double((*arg3)));
  } else {
    int new_flags = SWIG_IsNewObj(res3) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg3), SWIGTYPE_p_double, new_flags));
  }
  if (SWIG_IsTmpObj(res4)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, swig::from((*arg4)));
  } else {
    int new_flags = SWIG_IsNewObj(res4) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg4), SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, new_flags));
  }
  if (SWIG_IsTmpObj(res5)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, swig::from((*arg5)));
  } else {
    int new_flags = SWIG_IsNewObj(res5) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg5), SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, new_flags));
  }
  if (SWIG_IsTmpObj(res6)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_From_int((*arg6)));
  } else {
    int new_flags = SWIG_IsNewObj(res6) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg6), SWIGTYPE_p_int, new_flags));
  }
  if (SWIG_IsTmpObj(res7)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_From_int((*arg7)));
  } else {
    int new_flags = SWIG_IsNewObj(res7) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg7), SWIGTYPE_p_int, new_flags));
  }
  if (SWIG_IsTmpObj(res8)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_From_int((*arg8)));
  } else {
    int new_flags = SWIG_IsNewObj(res8) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg8), SWIGTYPE_p_int, new_flags));
  }
  if (SWIG_IsTmpObj(res9)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_From_int((*arg9)));
  } else {
    int new_flags = SWIG_IsNewObj(res9) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg9), SWIGTYPE_p_int, new_flags));
  }
  if (SWIG_IsTmpObj(res10)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_From_double((*arg10)));
  } else {
    int new_flags = SWIG_IsNewObj(res10) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg10), SWIGTYPE_p_double, new_flags));
  }
  if (SWIG_IsTmpObj(res11)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_From_double((*arg11)));
  } else {
    int new_flags = SWIG_IsNewObj(res11) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg11), SWIGTYPE_p_double, new_flags));
  }
  if (SWIG_IsTmpObj(res12)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_From_double((*arg12)));
  } else {
    int new_flags = SWIG_IsNewObj(res12) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg12), SWIGTYPE_p_double, new_flags));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AmoebaMultipoleForce_setMultipoleParameters(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::AmoebaMultipoleForce *arg1 = (OpenMM::AmoebaMultipoleForce *) 0 ;
  int arg2 ;
  double arg3 ;
  std::vector< double,std::allocator< double > > *arg4 = 0 ;
  std::vector< double,std::allocator< double > > *arg5 = 0 ;
  int arg6 ;
  int arg7 ;
  int arg8 ;
  int arg9 ;
  double arg10 ;
  double arg11 ;
  double arg12 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  int res5 = SWIG_OLDOBJ ;
  int val6 ;
  int ecode6 = 0 ;
  int val7 ;
  int ecode7 = 0 ;
  int val8 ;
  int ecode8 = 0 ;
  int val9 ;
  int ecode9 = 0 ;
  double val10 ;
  int ecode10 = 0 ;
  double val11 ;
  int ecode11 = 0 ;
  double val12 ;
  int ecode12 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  PyObject * obj8 = 0 ;
  PyObject * obj9 = 0 ;
  PyObject * obj10 = 0 ;
  PyObject * obj11 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOOOOOOO:AmoebaMultipoleForce_setMultipoleParameters",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7,&obj8,&obj9,&obj10,&obj11)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__AmoebaMultipoleForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AmoebaMultipoleForce_setMultipoleParameters" "', argument " "1"" of type '" "OpenMM::AmoebaMultipoleForce *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::AmoebaMultipoleForce * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AmoebaMultipoleForce_setMultipoleParameters" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "AmoebaMultipoleForce_setMultipoleParameters" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    std::vector<double,std::allocator< double > > *ptr = (std::vector<double,std::allocator< double > > *)0;
    res4 = swig::asptr(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "AmoebaMultipoleForce_setMultipoleParameters" "', argument " "4"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AmoebaMultipoleForce_setMultipoleParameters" "', argument " "4"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    arg4 = ptr;
  }
  {
    std::vector<double,std::allocator< double > > *ptr = (std::vector<double,std::allocator< double > > *)0;
    res5 = swig::asptr(obj4, &ptr);
    if (!SWIG_IsOK(res5)) {
      SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "AmoebaMultipoleForce_setMultipoleParameters" "', argument " "5"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AmoebaMultipoleForce_setMultipoleParameters" "', argument " "5"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    arg5 = ptr;
  }
  ecode6 = SWIG_AsVal_int(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "AmoebaMultipoleForce_setMultipoleParameters" "', argument " "6"" of type '" "int""'");
  } 
  arg6 = static_cast< int >(val6);
  ecode7 = SWIG_AsVal_int(obj6, &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "AmoebaMultipoleForce_setMultipoleParameters" "', argument " "7"" of type '" "int""'");
  } 
  arg7 = static_cast< int >(val7);
  ecode8 = SWIG_AsVal_int(obj7, &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "AmoebaMultipoleForce_setMultipoleParameters" "', argument " "8"" of type '" "int""'");
  } 
  arg8 = static_cast< int >(val8);
  ecode9 = SWIG_AsVal_int(obj8, &val9);
  if (!SWIG_IsOK(ecode9)) {
    SWIG_exception_fail(SWIG_ArgError(ecode9), "in method '" "AmoebaMultipoleForce_setMultipoleParameters" "', argument " "9"" of type '" "int""'");
  } 
  arg9 = static_cast< int >(val9);
  ecode10 = SWIG_AsVal_double(obj9, &val10);
  if (!SWIG_IsOK(ecode10)) {
    SWIG_exception_fail(SWIG_ArgError(ecode10), "in method '" "AmoebaMultipoleForce_setMultipoleParameters" "', argument " "10"" of type '" "double""'");
  } 
  arg10 = static_cast< double >(val10);
  ecode11 = SWIG_AsVal_double(obj10, &val11);
  if (!SWIG_IsOK(ecode11)) {
    SWIG_exception_fail(SWIG_ArgError(ecode11), "in method '" "AmoebaMultipoleForce_setMultipoleParameters" "', argument " "11"" of type '" "double""'");
  } 
  arg11 = static_cast< double >(val11);
  ecode12 = SWIG_AsVal_double(obj11, &val12);
  if (!SWIG_IsOK(ecode12)) {
    SWIG_exception_fail(SWIG_ArgError(ecode12), "in method '" "AmoebaMultipoleForce_setMultipoleParameters" "', argument " "12"" of type '" "double""'");
  } 
  arg12 = static_cast< double >(val12);
  {
    try {
      (arg1)->setMultipoleParameters(arg2,arg3,(std::vector< double,std::allocator< double > > const &)*arg4,(std::vector< double,std::allocator< double > > const &)*arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  if (SWIG_IsNewObj(res5)) delete arg5;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  if (SWIG_IsNewObj(res5)) delete arg5;
  return NULL;
}


SWIGINTERN PyObject *_wrap_AmoebaMultipoleForce_setCovalentMap(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::AmoebaMultipoleForce *arg1 = (OpenMM::AmoebaMultipoleForce *) 0 ;
  int arg2 ;
  OpenMM::AmoebaMultipoleForce::CovalentType arg3 ;
  std::vector< int,std::allocator< int > > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:AmoebaMultipoleForce_setCovalentMap",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__AmoebaMultipoleForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AmoebaMultipoleForce_setCovalentMap" "', argument " "1"" of type '" "OpenMM::AmoebaMultipoleForce *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::AmoebaMultipoleForce * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AmoebaMultipoleForce_setCovalentMap" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "AmoebaMultipoleForce_setCovalentMap" "', argument " "3"" of type '" "OpenMM::AmoebaMultipoleForce::CovalentType""'");
  } 
  arg3 = static_cast< OpenMM::AmoebaMultipoleForce::CovalentType >(val3);
  {
    std::vector<int,std::allocator< int > > *ptr = (std::vector<int,std::allocator< int > > *)0;
    res4 = swig::asptr(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "AmoebaMultipoleForce_setCovalentMap" "', argument " "4"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AmoebaMultipoleForce_setCovalentMap" "', argument " "4"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    arg4 = ptr;
  }
  {
    try {
      (arg1)->setCovalentMap(arg2,arg3,(std::vector< int,std::allocator< int > > const &)*arg4);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_AmoebaMultipoleForce_getCovalentMap(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::AmoebaMultipoleForce *arg1 = (OpenMM::AmoebaMultipoleForce *) 0 ;
  int arg2 ;
  OpenMM::AmoebaMultipoleForce::CovalentType arg3 ;
  std::vector< int,std::allocator< int > > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  std::vector< int,std::allocator< int > > temp4 ;
  int res4 = SWIG_TMPOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  arg4 = &temp4;
  if (!PyArg_ParseTuple(args,(char *)"OOO:AmoebaMultipoleForce_getCovalentMap",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__AmoebaMultipoleForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AmoebaMultipoleForce_getCovalentMap" "', argument " "1"" of type '" "OpenMM::AmoebaMultipoleForce const *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::AmoebaMultipoleForce * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AmoebaMultipoleForce_getCovalentMap" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "AmoebaMultipoleForce_getCovalentMap" "', argument " "3"" of type '" "OpenMM::AmoebaMultipoleForce::CovalentType""'");
  } 
  arg3 = static_cast< OpenMM::AmoebaMultipoleForce::CovalentType >(val3);
  {
    try {
      ((OpenMM::AmoebaMultipoleForce const *)arg1)->getCovalentMap(arg2,arg3,*arg4);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsTmpObj(res4)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, swig::from((*arg4)));
  } else {
    int new_flags = SWIG_IsNewObj(res4) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg4), SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, new_flags));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AmoebaMultipoleForce_getCovalentMaps(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::AmoebaMultipoleForce *arg1 = (OpenMM::AmoebaMultipoleForce *) 0 ;
  int arg2 ;
  std::vector< std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  std::vector< std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > > temp3 ;
  int res3 = SWIG_TMPOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  arg3 = &temp3;
  if (!PyArg_ParseTuple(args,(char *)"OO:AmoebaMultipoleForce_getCovalentMaps",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__AmoebaMultipoleForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AmoebaMultipoleForce_getCovalentMaps" "', argument " "1"" of type '" "OpenMM::AmoebaMultipoleForce const *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::AmoebaMultipoleForce * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AmoebaMultipoleForce_getCovalentMaps" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      ((OpenMM::AmoebaMultipoleForce const *)arg1)->getCovalentMaps(arg2,*arg3);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsTmpObj(res3)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, swig::from((*arg3)));
  } else {
    int new_flags = SWIG_IsNewObj(res3) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg3), SWIGTYPE_p_std__vectorT_std__vectorT_int_std__allocatorT_int_t_t_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t_t, new_flags));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AmoebaMultipoleForce_getMutualInducedMaxIterations(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::AmoebaMultipoleForce *arg1 = (OpenMM::AmoebaMultipoleForce *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:AmoebaMultipoleForce_getMutualInducedMaxIterations",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__AmoebaMultipoleForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AmoebaMultipoleForce_getMutualInducedMaxIterations" "', argument " "1"" of type '" "OpenMM::AmoebaMultipoleForce const *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::AmoebaMultipoleForce * >(argp1);
  {
    try {
      result = (int)((OpenMM::AmoebaMultipoleForce const *)arg1)->getMutualInducedMaxIterations();
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AmoebaMultipoleForce_setMutualInducedMaxIterations(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::AmoebaMultipoleForce *arg1 = (OpenMM::AmoebaMultipoleForce *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:AmoebaMultipoleForce_setMutualInducedMaxIterations",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__AmoebaMultipoleForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AmoebaMultipoleForce_setMutualInducedMaxIterations" "', argument " "1"" of type '" "OpenMM::AmoebaMultipoleForce *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::AmoebaMultipoleForce * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AmoebaMultipoleForce_setMutualInducedMaxIterations" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      (arg1)->setMutualInducedMaxIterations(arg2);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AmoebaMultipoleForce_getMutualInducedTargetEpsilon(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::AmoebaMultipoleForce *arg1 = (OpenMM::AmoebaMultipoleForce *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:AmoebaMultipoleForce_getMutualInducedTargetEpsilon",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__AmoebaMultipoleForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AmoebaMultipoleForce_getMutualInducedTargetEpsilon" "', argument " "1"" of type '" "OpenMM::AmoebaMultipoleForce const *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::AmoebaMultipoleForce * >(argp1);
  {
    try {
      result = (double)((OpenMM::AmoebaMultipoleForce const *)arg1)->getMutualInducedTargetEpsilon();
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AmoebaMultipoleForce_setMutualInducedTargetEpsilon(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::AmoebaMultipoleForce *arg1 = (OpenMM::AmoebaMultipoleForce *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:AmoebaMultipoleForce_setMutualInducedTargetEpsilon",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__AmoebaMultipoleForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AmoebaMultipoleForce_setMutualInducedTargetEpsilon" "', argument " "1"" of type '" "OpenMM::AmoebaMultipoleForce *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::AmoebaMultipoleForce * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AmoebaMultipoleForce_setMutualInducedTargetEpsilon" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->setMutualInducedTargetEpsilon(arg2);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AmoebaMultipoleForce_getEwaldErrorTolerance(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::AmoebaMultipoleForce *arg1 = (OpenMM::AmoebaMultipoleForce *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:AmoebaMultipoleForce_getEwaldErrorTolerance",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__AmoebaMultipoleForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AmoebaMultipoleForce_getEwaldErrorTolerance" "', argument " "1"" of type '" "OpenMM::AmoebaMultipoleForce const *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::AmoebaMultipoleForce * >(argp1);
  {
    try {
      result = (double)((OpenMM::AmoebaMultipoleForce const *)arg1)->getEwaldErrorTolerance();
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AmoebaMultipoleForce_setEwaldErrorTolerance(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::AmoebaMultipoleForce *arg1 = (OpenMM::AmoebaMultipoleForce *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:AmoebaMultipoleForce_setEwaldErrorTolerance",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__AmoebaMultipoleForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AmoebaMultipoleForce_setEwaldErrorTolerance" "', argument " "1"" of type '" "OpenMM::AmoebaMultipoleForce *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::AmoebaMultipoleForce * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AmoebaMultipoleForce_setEwaldErrorTolerance" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->setEwaldErrorTolerance(arg2);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_AmoebaMultipoleForce__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::AmoebaMultipoleForce *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  OpenMM::AmoebaMultipoleForce *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_AmoebaMultipoleForce",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_OpenMM__AmoebaMultipoleForce,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_AmoebaMultipoleForce" "', argument " "1"" of type '" "OpenMM::AmoebaMultipoleForce const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_AmoebaMultipoleForce" "', argument " "1"" of type '" "OpenMM::AmoebaMultipoleForce const &""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::AmoebaMultipoleForce * >(argp1);
  {
    try {
      result = (OpenMM::AmoebaMultipoleForce *)new OpenMM::AmoebaMultipoleForce((OpenMM::AmoebaMultipoleForce const &)*arg1);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_OpenMM__AmoebaMultipoleForce, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_AmoebaMultipoleForce(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 1); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_AmoebaMultipoleForce__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_OpenMM__AmoebaMultipoleForce, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_AmoebaMultipoleForce__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_AmoebaMultipoleForce'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    OpenMM::AmoebaMultipoleForce()\n"
    "    OpenMM::AmoebaMultipoleForce::AmoebaMultipoleForce(OpenMM::AmoebaMultipoleForce const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_AmoebaMultipoleForce(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::AmoebaMultipoleForce *arg1 = (OpenMM::AmoebaMultipoleForce *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_AmoebaMultipoleForce",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__AmoebaMultipoleForce, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_AmoebaMultipoleForce" "', argument " "1"" of type '" "OpenMM::AmoebaMultipoleForce *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::AmoebaMultipoleForce * >(argp1);
  {
    try {
      delete arg1;
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *AmoebaMultipoleForce_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_OpenMM__AmoebaMultipoleForce, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_AmoebaOutOfPlaneBendForce__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::AmoebaOutOfPlaneBendForce *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_AmoebaOutOfPlaneBendForce")) SWIG_fail;
  {
    try {
      result = (OpenMM::AmoebaOutOfPlaneBendForce *)new OpenMM::AmoebaOutOfPlaneBendForce();
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_OpenMM__AmoebaOutOfPlaneBendForce, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AmoebaOutOfPlaneBendForce_getNumOutOfPlaneBends(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::AmoebaOutOfPlaneBendForce *arg1 = (OpenMM::AmoebaOutOfPlaneBendForce *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:AmoebaOutOfPlaneBendForce_getNumOutOfPlaneBends",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__AmoebaOutOfPlaneBendForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AmoebaOutOfPlaneBendForce_getNumOutOfPlaneBends" "', argument " "1"" of type '" "OpenMM::AmoebaOutOfPlaneBendForce const *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::AmoebaOutOfPlaneBendForce * >(argp1);
  {
    try {
      result = (int)((OpenMM::AmoebaOutOfPlaneBendForce const *)arg1)->getNumOutOfPlaneBends();
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AmoebaOutOfPlaneBendForce_setAmoebaGlobalOutOfPlaneBendCubic(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::AmoebaOutOfPlaneBendForce *arg1 = (OpenMM::AmoebaOutOfPlaneBendForce *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:AmoebaOutOfPlaneBendForce_setAmoebaGlobalOutOfPlaneBendCubic",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__AmoebaOutOfPlaneBendForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AmoebaOutOfPlaneBendForce_setAmoebaGlobalOutOfPlaneBendCubic" "', argument " "1"" of type '" "OpenMM::AmoebaOutOfPlaneBendForce *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::AmoebaOutOfPlaneBendForce * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AmoebaOutOfPlaneBendForce_setAmoebaGlobalOutOfPlaneBendCubic" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->setAmoebaGlobalOutOfPlaneBendCubic(arg2);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AmoebaOutOfPlaneBendForce_getAmoebaGlobalOutOfPlaneBendCubic(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::AmoebaOutOfPlaneBendForce *arg1 = (OpenMM::AmoebaOutOfPlaneBendForce *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:AmoebaOutOfPlaneBendForce_getAmoebaGlobalOutOfPlaneBendCubic",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__AmoebaOutOfPlaneBendForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AmoebaOutOfPlaneBendForce_getAmoebaGlobalOutOfPlaneBendCubic" "', argument " "1"" of type '" "OpenMM::AmoebaOutOfPlaneBendForce const *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::AmoebaOutOfPlaneBendForce * >(argp1);
  {
    try {
      result = (double)((OpenMM::AmoebaOutOfPlaneBendForce const *)arg1)->getAmoebaGlobalOutOfPlaneBendCubic();
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AmoebaOutOfPlaneBendForce_setAmoebaGlobalOutOfPlaneBendQuartic(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::AmoebaOutOfPlaneBendForce *arg1 = (OpenMM::AmoebaOutOfPlaneBendForce *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:AmoebaOutOfPlaneBendForce_setAmoebaGlobalOutOfPlaneBendQuartic",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__AmoebaOutOfPlaneBendForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AmoebaOutOfPlaneBendForce_setAmoebaGlobalOutOfPlaneBendQuartic" "', argument " "1"" of type '" "OpenMM::AmoebaOutOfPlaneBendForce *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::AmoebaOutOfPlaneBendForce * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AmoebaOutOfPlaneBendForce_setAmoebaGlobalOutOfPlaneBendQuartic" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->setAmoebaGlobalOutOfPlaneBendQuartic(arg2);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AmoebaOutOfPlaneBendForce_getAmoebaGlobalOutOfPlaneBendQuartic(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::AmoebaOutOfPlaneBendForce *arg1 = (OpenMM::AmoebaOutOfPlaneBendForce *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:AmoebaOutOfPlaneBendForce_getAmoebaGlobalOutOfPlaneBendQuartic",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__AmoebaOutOfPlaneBendForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AmoebaOutOfPlaneBendForce_getAmoebaGlobalOutOfPlaneBendQuartic" "', argument " "1"" of type '" "OpenMM::AmoebaOutOfPlaneBendForce const *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::AmoebaOutOfPlaneBendForce * >(argp1);
  {
    try {
      result = (double)((OpenMM::AmoebaOutOfPlaneBendForce const *)arg1)->getAmoebaGlobalOutOfPlaneBendQuartic();
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AmoebaOutOfPlaneBendForce_setAmoebaGlobalOutOfPlaneBendPentic(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::AmoebaOutOfPlaneBendForce *arg1 = (OpenMM::AmoebaOutOfPlaneBendForce *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:AmoebaOutOfPlaneBendForce_setAmoebaGlobalOutOfPlaneBendPentic",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__AmoebaOutOfPlaneBendForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AmoebaOutOfPlaneBendForce_setAmoebaGlobalOutOfPlaneBendPentic" "', argument " "1"" of type '" "OpenMM::AmoebaOutOfPlaneBendForce *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::AmoebaOutOfPlaneBendForce * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AmoebaOutOfPlaneBendForce_setAmoebaGlobalOutOfPlaneBendPentic" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->setAmoebaGlobalOutOfPlaneBendPentic(arg2);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AmoebaOutOfPlaneBendForce_getAmoebaGlobalOutOfPlaneBendPentic(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::AmoebaOutOfPlaneBendForce *arg1 = (OpenMM::AmoebaOutOfPlaneBendForce *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:AmoebaOutOfPlaneBendForce_getAmoebaGlobalOutOfPlaneBendPentic",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__AmoebaOutOfPlaneBendForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AmoebaOutOfPlaneBendForce_getAmoebaGlobalOutOfPlaneBendPentic" "', argument " "1"" of type '" "OpenMM::AmoebaOutOfPlaneBendForce const *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::AmoebaOutOfPlaneBendForce * >(argp1);
  {
    try {
      result = (double)((OpenMM::AmoebaOutOfPlaneBendForce const *)arg1)->getAmoebaGlobalOutOfPlaneBendPentic();
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AmoebaOutOfPlaneBendForce_setAmoebaGlobalOutOfPlaneBendSextic(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::AmoebaOutOfPlaneBendForce *arg1 = (OpenMM::AmoebaOutOfPlaneBendForce *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:AmoebaOutOfPlaneBendForce_setAmoebaGlobalOutOfPlaneBendSextic",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__AmoebaOutOfPlaneBendForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AmoebaOutOfPlaneBendForce_setAmoebaGlobalOutOfPlaneBendSextic" "', argument " "1"" of type '" "OpenMM::AmoebaOutOfPlaneBendForce *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::AmoebaOutOfPlaneBendForce * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AmoebaOutOfPlaneBendForce_setAmoebaGlobalOutOfPlaneBendSextic" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->setAmoebaGlobalOutOfPlaneBendSextic(arg2);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AmoebaOutOfPlaneBendForce_getAmoebaGlobalOutOfPlaneBendSextic(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::AmoebaOutOfPlaneBendForce *arg1 = (OpenMM::AmoebaOutOfPlaneBendForce *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:AmoebaOutOfPlaneBendForce_getAmoebaGlobalOutOfPlaneBendSextic",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__AmoebaOutOfPlaneBendForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AmoebaOutOfPlaneBendForce_getAmoebaGlobalOutOfPlaneBendSextic" "', argument " "1"" of type '" "OpenMM::AmoebaOutOfPlaneBendForce const *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::AmoebaOutOfPlaneBendForce * >(argp1);
  {
    try {
      result = (double)((OpenMM::AmoebaOutOfPlaneBendForce const *)arg1)->getAmoebaGlobalOutOfPlaneBendSextic();
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AmoebaOutOfPlaneBendForce_addOutOfPlaneBend(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::AmoebaOutOfPlaneBendForce *arg1 = (OpenMM::AmoebaOutOfPlaneBendForce *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  double arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  double val6 ;
  int ecode6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:AmoebaOutOfPlaneBendForce_addOutOfPlaneBend",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__AmoebaOutOfPlaneBendForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AmoebaOutOfPlaneBendForce_addOutOfPlaneBend" "', argument " "1"" of type '" "OpenMM::AmoebaOutOfPlaneBendForce *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::AmoebaOutOfPlaneBendForce * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AmoebaOutOfPlaneBendForce_addOutOfPlaneBend" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "AmoebaOutOfPlaneBendForce_addOutOfPlaneBend" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "AmoebaOutOfPlaneBendForce_addOutOfPlaneBend" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  ecode5 = SWIG_AsVal_int(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "AmoebaOutOfPlaneBendForce_addOutOfPlaneBend" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  ecode6 = SWIG_AsVal_double(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "AmoebaOutOfPlaneBendForce_addOutOfPlaneBend" "', argument " "6"" of type '" "double""'");
  } 
  arg6 = static_cast< double >(val6);
  {
    try {
      result = (int)(arg1)->addOutOfPlaneBend(arg2,arg3,arg4,arg5,arg6);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AmoebaOutOfPlaneBendForce_getOutOfPlaneBendParameters(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::AmoebaOutOfPlaneBendForce *arg1 = (OpenMM::AmoebaOutOfPlaneBendForce *) 0 ;
  int arg2 ;
  int *arg3 = 0 ;
  int *arg4 = 0 ;
  int *arg5 = 0 ;
  int *arg6 = 0 ;
  double *arg7 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int temp3 ;
  int res3 = SWIG_TMPOBJ ;
  int temp4 ;
  int res4 = SWIG_TMPOBJ ;
  int temp5 ;
  int res5 = SWIG_TMPOBJ ;
  int temp6 ;
  int res6 = SWIG_TMPOBJ ;
  double temp7 ;
  int res7 = SWIG_TMPOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  arg3 = &temp3;
  arg4 = &temp4;
  arg5 = &temp5;
  arg6 = &temp6;
  arg7 = &temp7;
  if (!PyArg_ParseTuple(args,(char *)"OO:AmoebaOutOfPlaneBendForce_getOutOfPlaneBendParameters",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__AmoebaOutOfPlaneBendForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AmoebaOutOfPlaneBendForce_getOutOfPlaneBendParameters" "', argument " "1"" of type '" "OpenMM::AmoebaOutOfPlaneBendForce const *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::AmoebaOutOfPlaneBendForce * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AmoebaOutOfPlaneBendForce_getOutOfPlaneBendParameters" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      ((OpenMM::AmoebaOutOfPlaneBendForce const *)arg1)->getOutOfPlaneBendParameters(arg2,*arg3,*arg4,*arg5,*arg6,*arg7);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsTmpObj(res3)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_From_int((*arg3)));
  } else {
    int new_flags = SWIG_IsNewObj(res3) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg3), SWIGTYPE_p_int, new_flags));
  }
  if (SWIG_IsTmpObj(res4)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_From_int((*arg4)));
  } else {
    int new_flags = SWIG_IsNewObj(res4) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg4), SWIGTYPE_p_int, new_flags));
  }
  if (SWIG_IsTmpObj(res5)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_From_int((*arg5)));
  } else {
    int new_flags = SWIG_IsNewObj(res5) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg5), SWIGTYPE_p_int, new_flags));
  }
  if (SWIG_IsTmpObj(res6)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_From_int((*arg6)));
  } else {
    int new_flags = SWIG_IsNewObj(res6) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg6), SWIGTYPE_p_int, new_flags));
  }
  if (SWIG_IsTmpObj(res7)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_From_double((*arg7)));
  } else {
    int new_flags = SWIG_IsNewObj(res7) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg7), SWIGTYPE_p_double, new_flags));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AmoebaOutOfPlaneBendForce_setOutOfPlaneBendParameters(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::AmoebaOutOfPlaneBendForce *arg1 = (OpenMM::AmoebaOutOfPlaneBendForce *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  double arg7 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  int val6 ;
  int ecode6 = 0 ;
  double val7 ;
  int ecode7 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOO:AmoebaOutOfPlaneBendForce_setOutOfPlaneBendParameters",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__AmoebaOutOfPlaneBendForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AmoebaOutOfPlaneBendForce_setOutOfPlaneBendParameters" "', argument " "1"" of type '" "OpenMM::AmoebaOutOfPlaneBendForce *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::AmoebaOutOfPlaneBendForce * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AmoebaOutOfPlaneBendForce_setOutOfPlaneBendParameters" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "AmoebaOutOfPlaneBendForce_setOutOfPlaneBendParameters" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "AmoebaOutOfPlaneBendForce_setOutOfPlaneBendParameters" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  ecode5 = SWIG_AsVal_int(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "AmoebaOutOfPlaneBendForce_setOutOfPlaneBendParameters" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  ecode6 = SWIG_AsVal_int(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "AmoebaOutOfPlaneBendForce_setOutOfPlaneBendParameters" "', argument " "6"" of type '" "int""'");
  } 
  arg6 = static_cast< int >(val6);
  ecode7 = SWIG_AsVal_double(obj6, &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "AmoebaOutOfPlaneBendForce_setOutOfPlaneBendParameters" "', argument " "7"" of type '" "double""'");
  } 
  arg7 = static_cast< double >(val7);
  {
    try {
      (arg1)->setOutOfPlaneBendParameters(arg2,arg3,arg4,arg5,arg6,arg7);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_AmoebaOutOfPlaneBendForce__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::AmoebaOutOfPlaneBendForce *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  OpenMM::AmoebaOutOfPlaneBendForce *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_AmoebaOutOfPlaneBendForce",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_OpenMM__AmoebaOutOfPlaneBendForce,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_AmoebaOutOfPlaneBendForce" "', argument " "1"" of type '" "OpenMM::AmoebaOutOfPlaneBendForce const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_AmoebaOutOfPlaneBendForce" "', argument " "1"" of type '" "OpenMM::AmoebaOutOfPlaneBendForce const &""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::AmoebaOutOfPlaneBendForce * >(argp1);
  {
    try {
      result = (OpenMM::AmoebaOutOfPlaneBendForce *)new OpenMM::AmoebaOutOfPlaneBendForce((OpenMM::AmoebaOutOfPlaneBendForce const &)*arg1);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_OpenMM__AmoebaOutOfPlaneBendForce, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_AmoebaOutOfPlaneBendForce(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 1); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_AmoebaOutOfPlaneBendForce__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_OpenMM__AmoebaOutOfPlaneBendForce, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_AmoebaOutOfPlaneBendForce__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_AmoebaOutOfPlaneBendForce'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    OpenMM::AmoebaOutOfPlaneBendForce()\n"
    "    OpenMM::AmoebaOutOfPlaneBendForce::AmoebaOutOfPlaneBendForce(OpenMM::AmoebaOutOfPlaneBendForce const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_AmoebaOutOfPlaneBendForce(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::AmoebaOutOfPlaneBendForce *arg1 = (OpenMM::AmoebaOutOfPlaneBendForce *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_AmoebaOutOfPlaneBendForce",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__AmoebaOutOfPlaneBendForce, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_AmoebaOutOfPlaneBendForce" "', argument " "1"" of type '" "OpenMM::AmoebaOutOfPlaneBendForce *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::AmoebaOutOfPlaneBendForce * >(argp1);
  {
    try {
      delete arg1;
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *AmoebaOutOfPlaneBendForce_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_OpenMM__AmoebaOutOfPlaneBendForce, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_AmoebaPiTorsionForce__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::AmoebaPiTorsionForce *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_AmoebaPiTorsionForce")) SWIG_fail;
  {
    try {
      result = (OpenMM::AmoebaPiTorsionForce *)new OpenMM::AmoebaPiTorsionForce();
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_OpenMM__AmoebaPiTorsionForce, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AmoebaPiTorsionForce_getNumPiTorsions(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::AmoebaPiTorsionForce *arg1 = (OpenMM::AmoebaPiTorsionForce *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:AmoebaPiTorsionForce_getNumPiTorsions",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__AmoebaPiTorsionForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AmoebaPiTorsionForce_getNumPiTorsions" "', argument " "1"" of type '" "OpenMM::AmoebaPiTorsionForce const *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::AmoebaPiTorsionForce * >(argp1);
  {
    try {
      result = (int)((OpenMM::AmoebaPiTorsionForce const *)arg1)->getNumPiTorsions();
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AmoebaPiTorsionForce_addPiTorsion(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::AmoebaPiTorsionForce *arg1 = (OpenMM::AmoebaPiTorsionForce *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  int arg7 ;
  double arg8 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  int val6 ;
  int ecode6 = 0 ;
  int val7 ;
  int ecode7 = 0 ;
  double val8 ;
  int ecode8 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOOO:AmoebaPiTorsionForce_addPiTorsion",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__AmoebaPiTorsionForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AmoebaPiTorsionForce_addPiTorsion" "', argument " "1"" of type '" "OpenMM::AmoebaPiTorsionForce *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::AmoebaPiTorsionForce * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AmoebaPiTorsionForce_addPiTorsion" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "AmoebaPiTorsionForce_addPiTorsion" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "AmoebaPiTorsionForce_addPiTorsion" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  ecode5 = SWIG_AsVal_int(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "AmoebaPiTorsionForce_addPiTorsion" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  ecode6 = SWIG_AsVal_int(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "AmoebaPiTorsionForce_addPiTorsion" "', argument " "6"" of type '" "int""'");
  } 
  arg6 = static_cast< int >(val6);
  ecode7 = SWIG_AsVal_int(obj6, &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "AmoebaPiTorsionForce_addPiTorsion" "', argument " "7"" of type '" "int""'");
  } 
  arg7 = static_cast< int >(val7);
  ecode8 = SWIG_AsVal_double(obj7, &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "AmoebaPiTorsionForce_addPiTorsion" "', argument " "8"" of type '" "double""'");
  } 
  arg8 = static_cast< double >(val8);
  {
    try {
      result = (int)(arg1)->addPiTorsion(arg2,arg3,arg4,arg5,arg6,arg7,arg8);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AmoebaPiTorsionForce_getPiTorsionParameters(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::AmoebaPiTorsionForce *arg1 = (OpenMM::AmoebaPiTorsionForce *) 0 ;
  int arg2 ;
  int *arg3 = 0 ;
  int *arg4 = 0 ;
  int *arg5 = 0 ;
  int *arg6 = 0 ;
  int *arg7 = 0 ;
  int *arg8 = 0 ;
  double *arg9 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int temp3 ;
  int res3 = SWIG_TMPOBJ ;
  int temp4 ;
  int res4 = SWIG_TMPOBJ ;
  int temp5 ;
  int res5 = SWIG_TMPOBJ ;
  int temp6 ;
  int res6 = SWIG_TMPOBJ ;
  int temp7 ;
  int res7 = SWIG_TMPOBJ ;
  int temp8 ;
  int res8 = SWIG_TMPOBJ ;
  double temp9 ;
  int res9 = SWIG_TMPOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  arg3 = &temp3;
  arg4 = &temp4;
  arg5 = &temp5;
  arg6 = &temp6;
  arg7 = &temp7;
  arg8 = &temp8;
  arg9 = &temp9;
  if (!PyArg_ParseTuple(args,(char *)"OO:AmoebaPiTorsionForce_getPiTorsionParameters",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__AmoebaPiTorsionForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AmoebaPiTorsionForce_getPiTorsionParameters" "', argument " "1"" of type '" "OpenMM::AmoebaPiTorsionForce const *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::AmoebaPiTorsionForce * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AmoebaPiTorsionForce_getPiTorsionParameters" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      ((OpenMM::AmoebaPiTorsionForce const *)arg1)->getPiTorsionParameters(arg2,*arg3,*arg4,*arg5,*arg6,*arg7,*arg8,*arg9);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsTmpObj(res3)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_From_int((*arg3)));
  } else {
    int new_flags = SWIG_IsNewObj(res3) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg3), SWIGTYPE_p_int, new_flags));
  }
  if (SWIG_IsTmpObj(res4)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_From_int((*arg4)));
  } else {
    int new_flags = SWIG_IsNewObj(res4) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg4), SWIGTYPE_p_int, new_flags));
  }
  if (SWIG_IsTmpObj(res5)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_From_int((*arg5)));
  } else {
    int new_flags = SWIG_IsNewObj(res5) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg5), SWIGTYPE_p_int, new_flags));
  }
  if (SWIG_IsTmpObj(res6)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_From_int((*arg6)));
  } else {
    int new_flags = SWIG_IsNewObj(res6) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg6), SWIGTYPE_p_int, new_flags));
  }
  if (SWIG_IsTmpObj(res7)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_From_int((*arg7)));
  } else {
    int new_flags = SWIG_IsNewObj(res7) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg7), SWIGTYPE_p_int, new_flags));
  }
  if (SWIG_IsTmpObj(res8)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_From_int((*arg8)));
  } else {
    int new_flags = SWIG_IsNewObj(res8) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg8), SWIGTYPE_p_int, new_flags));
  }
  if (SWIG_IsTmpObj(res9)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_From_double((*arg9)));
  } else {
    int new_flags = SWIG_IsNewObj(res9) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg9), SWIGTYPE_p_double, new_flags));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AmoebaPiTorsionForce_setPiTorsionParameters(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::AmoebaPiTorsionForce *arg1 = (OpenMM::AmoebaPiTorsionForce *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  int arg7 ;
  int arg8 ;
  double arg9 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  int val6 ;
  int ecode6 = 0 ;
  int val7 ;
  int ecode7 = 0 ;
  int val8 ;
  int ecode8 = 0 ;
  double val9 ;
  int ecode9 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  PyObject * obj8 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOOOO:AmoebaPiTorsionForce_setPiTorsionParameters",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7,&obj8)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__AmoebaPiTorsionForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AmoebaPiTorsionForce_setPiTorsionParameters" "', argument " "1"" of type '" "OpenMM::AmoebaPiTorsionForce *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::AmoebaPiTorsionForce * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AmoebaPiTorsionForce_setPiTorsionParameters" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "AmoebaPiTorsionForce_setPiTorsionParameters" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "AmoebaPiTorsionForce_setPiTorsionParameters" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  ecode5 = SWIG_AsVal_int(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "AmoebaPiTorsionForce_setPiTorsionParameters" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  ecode6 = SWIG_AsVal_int(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "AmoebaPiTorsionForce_setPiTorsionParameters" "', argument " "6"" of type '" "int""'");
  } 
  arg6 = static_cast< int >(val6);
  ecode7 = SWIG_AsVal_int(obj6, &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "AmoebaPiTorsionForce_setPiTorsionParameters" "', argument " "7"" of type '" "int""'");
  } 
  arg7 = static_cast< int >(val7);
  ecode8 = SWIG_AsVal_int(obj7, &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "AmoebaPiTorsionForce_setPiTorsionParameters" "', argument " "8"" of type '" "int""'");
  } 
  arg8 = static_cast< int >(val8);
  ecode9 = SWIG_AsVal_double(obj8, &val9);
  if (!SWIG_IsOK(ecode9)) {
    SWIG_exception_fail(SWIG_ArgError(ecode9), "in method '" "AmoebaPiTorsionForce_setPiTorsionParameters" "', argument " "9"" of type '" "double""'");
  } 
  arg9 = static_cast< double >(val9);
  {
    try {
      (arg1)->setPiTorsionParameters(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_AmoebaPiTorsionForce__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::AmoebaPiTorsionForce *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  OpenMM::AmoebaPiTorsionForce *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_AmoebaPiTorsionForce",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_OpenMM__AmoebaPiTorsionForce,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_AmoebaPiTorsionForce" "', argument " "1"" of type '" "OpenMM::AmoebaPiTorsionForce const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_AmoebaPiTorsionForce" "', argument " "1"" of type '" "OpenMM::AmoebaPiTorsionForce const &""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::AmoebaPiTorsionForce * >(argp1);
  {
    try {
      result = (OpenMM::AmoebaPiTorsionForce *)new OpenMM::AmoebaPiTorsionForce((OpenMM::AmoebaPiTorsionForce const &)*arg1);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_OpenMM__AmoebaPiTorsionForce, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_AmoebaPiTorsionForce(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 1); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_AmoebaPiTorsionForce__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_OpenMM__AmoebaPiTorsionForce, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_AmoebaPiTorsionForce__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_AmoebaPiTorsionForce'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    OpenMM::AmoebaPiTorsionForce()\n"
    "    OpenMM::AmoebaPiTorsionForce::AmoebaPiTorsionForce(OpenMM::AmoebaPiTorsionForce const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_AmoebaPiTorsionForce(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::AmoebaPiTorsionForce *arg1 = (OpenMM::AmoebaPiTorsionForce *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_AmoebaPiTorsionForce",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__AmoebaPiTorsionForce, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_AmoebaPiTorsionForce" "', argument " "1"" of type '" "OpenMM::AmoebaPiTorsionForce *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::AmoebaPiTorsionForce * >(argp1);
  {
    try {
      delete arg1;
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *AmoebaPiTorsionForce_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_OpenMM__AmoebaPiTorsionForce, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_AmoebaStretchBendForce__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::AmoebaStretchBendForce *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_AmoebaStretchBendForce")) SWIG_fail;
  {
    try {
      result = (OpenMM::AmoebaStretchBendForce *)new OpenMM::AmoebaStretchBendForce();
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_OpenMM__AmoebaStretchBendForce, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AmoebaStretchBendForce_getNumStretchBends(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::AmoebaStretchBendForce *arg1 = (OpenMM::AmoebaStretchBendForce *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:AmoebaStretchBendForce_getNumStretchBends",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__AmoebaStretchBendForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AmoebaStretchBendForce_getNumStretchBends" "', argument " "1"" of type '" "OpenMM::AmoebaStretchBendForce const *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::AmoebaStretchBendForce * >(argp1);
  {
    try {
      result = (int)((OpenMM::AmoebaStretchBendForce const *)arg1)->getNumStretchBends();
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AmoebaStretchBendForce_addStretchBend(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::AmoebaStretchBendForce *arg1 = (OpenMM::AmoebaStretchBendForce *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  double arg5 ;
  double arg6 ;
  double arg7 ;
  double arg8 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  double val6 ;
  int ecode6 = 0 ;
  double val7 ;
  int ecode7 = 0 ;
  double val8 ;
  int ecode8 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOOO:AmoebaStretchBendForce_addStretchBend",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__AmoebaStretchBendForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AmoebaStretchBendForce_addStretchBend" "', argument " "1"" of type '" "OpenMM::AmoebaStretchBendForce *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::AmoebaStretchBendForce * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AmoebaStretchBendForce_addStretchBend" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "AmoebaStretchBendForce_addStretchBend" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "AmoebaStretchBendForce_addStretchBend" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  ecode5 = SWIG_AsVal_double(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "AmoebaStretchBendForce_addStretchBend" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  ecode6 = SWIG_AsVal_double(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "AmoebaStretchBendForce_addStretchBend" "', argument " "6"" of type '" "double""'");
  } 
  arg6 = static_cast< double >(val6);
  ecode7 = SWIG_AsVal_double(obj6, &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "AmoebaStretchBendForce_addStretchBend" "', argument " "7"" of type '" "double""'");
  } 
  arg7 = static_cast< double >(val7);
  ecode8 = SWIG_AsVal_double(obj7, &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "AmoebaStretchBendForce_addStretchBend" "', argument " "8"" of type '" "double""'");
  } 
  arg8 = static_cast< double >(val8);
  {
    try {
      result = (int)(arg1)->addStretchBend(arg2,arg3,arg4,arg5,arg6,arg7,arg8);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AmoebaStretchBendForce_getStretchBendParameters(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::AmoebaStretchBendForce *arg1 = (OpenMM::AmoebaStretchBendForce *) 0 ;
  int arg2 ;
  int *arg3 = 0 ;
  int *arg4 = 0 ;
  int *arg5 = 0 ;
  double *arg6 = 0 ;
  double *arg7 = 0 ;
  double *arg8 = 0 ;
  double *arg9 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int temp3 ;
  int res3 = SWIG_TMPOBJ ;
  int temp4 ;
  int res4 = SWIG_TMPOBJ ;
  int temp5 ;
  int res5 = SWIG_TMPOBJ ;
  double temp6 ;
  int res6 = SWIG_TMPOBJ ;
  double temp7 ;
  int res7 = SWIG_TMPOBJ ;
  double temp8 ;
  int res8 = SWIG_TMPOBJ ;
  double temp9 ;
  int res9 = SWIG_TMPOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  arg3 = &temp3;
  arg4 = &temp4;
  arg5 = &temp5;
  arg6 = &temp6;
  arg7 = &temp7;
  arg8 = &temp8;
  arg9 = &temp9;
  if (!PyArg_ParseTuple(args,(char *)"OO:AmoebaStretchBendForce_getStretchBendParameters",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__AmoebaStretchBendForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AmoebaStretchBendForce_getStretchBendParameters" "', argument " "1"" of type '" "OpenMM::AmoebaStretchBendForce const *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::AmoebaStretchBendForce * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AmoebaStretchBendForce_getStretchBendParameters" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      ((OpenMM::AmoebaStretchBendForce const *)arg1)->getStretchBendParameters(arg2,*arg3,*arg4,*arg5,*arg6,*arg7,*arg8,*arg9);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsTmpObj(res3)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_From_int((*arg3)));
  } else {
    int new_flags = SWIG_IsNewObj(res3) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg3), SWIGTYPE_p_int, new_flags));
  }
  if (SWIG_IsTmpObj(res4)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_From_int((*arg4)));
  } else {
    int new_flags = SWIG_IsNewObj(res4) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg4), SWIGTYPE_p_int, new_flags));
  }
  if (SWIG_IsTmpObj(res5)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_From_int((*arg5)));
  } else {
    int new_flags = SWIG_IsNewObj(res5) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg5), SWIGTYPE_p_int, new_flags));
  }
  if (SWIG_IsTmpObj(res6)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_From_double((*arg6)));
  } else {
    int new_flags = SWIG_IsNewObj(res6) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg6), SWIGTYPE_p_double, new_flags));
  }
  if (SWIG_IsTmpObj(res7)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_From_double((*arg7)));
  } else {
    int new_flags = SWIG_IsNewObj(res7) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg7), SWIGTYPE_p_double, new_flags));
  }
  if (SWIG_IsTmpObj(res8)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_From_double((*arg8)));
  } else {
    int new_flags = SWIG_IsNewObj(res8) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg8), SWIGTYPE_p_double, new_flags));
  }
  if (SWIG_IsTmpObj(res9)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_From_double((*arg9)));
  } else {
    int new_flags = SWIG_IsNewObj(res9) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg9), SWIGTYPE_p_double, new_flags));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AmoebaStretchBendForce_setStretchBendParameters(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::AmoebaStretchBendForce *arg1 = (OpenMM::AmoebaStretchBendForce *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  double arg6 ;
  double arg7 ;
  double arg8 ;
  double arg9 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  double val6 ;
  int ecode6 = 0 ;
  double val7 ;
  int ecode7 = 0 ;
  double val8 ;
  int ecode8 = 0 ;
  double val9 ;
  int ecode9 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  PyObject * obj8 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOOOO:AmoebaStretchBendForce_setStretchBendParameters",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7,&obj8)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__AmoebaStretchBendForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AmoebaStretchBendForce_setStretchBendParameters" "', argument " "1"" of type '" "OpenMM::AmoebaStretchBendForce *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::AmoebaStretchBendForce * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AmoebaStretchBendForce_setStretchBendParameters" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "AmoebaStretchBendForce_setStretchBendParameters" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "AmoebaStretchBendForce_setStretchBendParameters" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  ecode5 = SWIG_AsVal_int(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "AmoebaStretchBendForce_setStretchBendParameters" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  ecode6 = SWIG_AsVal_double(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "AmoebaStretchBendForce_setStretchBendParameters" "', argument " "6"" of type '" "double""'");
  } 
  arg6 = static_cast< double >(val6);
  ecode7 = SWIG_AsVal_double(obj6, &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "AmoebaStretchBendForce_setStretchBendParameters" "', argument " "7"" of type '" "double""'");
  } 
  arg7 = static_cast< double >(val7);
  ecode8 = SWIG_AsVal_double(obj7, &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "AmoebaStretchBendForce_setStretchBendParameters" "', argument " "8"" of type '" "double""'");
  } 
  arg8 = static_cast< double >(val8);
  ecode9 = SWIG_AsVal_double(obj8, &val9);
  if (!SWIG_IsOK(ecode9)) {
    SWIG_exception_fail(SWIG_ArgError(ecode9), "in method '" "AmoebaStretchBendForce_setStretchBendParameters" "', argument " "9"" of type '" "double""'");
  } 
  arg9 = static_cast< double >(val9);
  {
    try {
      (arg1)->setStretchBendParameters(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_AmoebaStretchBendForce__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::AmoebaStretchBendForce *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  OpenMM::AmoebaStretchBendForce *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_AmoebaStretchBendForce",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_OpenMM__AmoebaStretchBendForce,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_AmoebaStretchBendForce" "', argument " "1"" of type '" "OpenMM::AmoebaStretchBendForce const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_AmoebaStretchBendForce" "', argument " "1"" of type '" "OpenMM::AmoebaStretchBendForce const &""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::AmoebaStretchBendForce * >(argp1);
  {
    try {
      result = (OpenMM::AmoebaStretchBendForce *)new OpenMM::AmoebaStretchBendForce((OpenMM::AmoebaStretchBendForce const &)*arg1);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_OpenMM__AmoebaStretchBendForce, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_AmoebaStretchBendForce(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 1); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_AmoebaStretchBendForce__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_OpenMM__AmoebaStretchBendForce, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_AmoebaStretchBendForce__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_AmoebaStretchBendForce'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    OpenMM::AmoebaStretchBendForce()\n"
    "    OpenMM::AmoebaStretchBendForce::AmoebaStretchBendForce(OpenMM::AmoebaStretchBendForce const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_AmoebaStretchBendForce(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::AmoebaStretchBendForce *arg1 = (OpenMM::AmoebaStretchBendForce *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_AmoebaStretchBendForce",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__AmoebaStretchBendForce, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_AmoebaStretchBendForce" "', argument " "1"" of type '" "OpenMM::AmoebaStretchBendForce *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::AmoebaStretchBendForce * >(argp1);
  {
    try {
      delete arg1;
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *AmoebaStretchBendForce_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_OpenMM__AmoebaStretchBendForce, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_AmoebaTorsionForce__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::AmoebaTorsionForce *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_AmoebaTorsionForce")) SWIG_fail;
  {
    try {
      result = (OpenMM::AmoebaTorsionForce *)new OpenMM::AmoebaTorsionForce();
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_OpenMM__AmoebaTorsionForce, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AmoebaTorsionForce_getNumTorsions(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::AmoebaTorsionForce *arg1 = (OpenMM::AmoebaTorsionForce *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:AmoebaTorsionForce_getNumTorsions",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__AmoebaTorsionForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AmoebaTorsionForce_getNumTorsions" "', argument " "1"" of type '" "OpenMM::AmoebaTorsionForce const *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::AmoebaTorsionForce * >(argp1);
  {
    try {
      result = (int)((OpenMM::AmoebaTorsionForce const *)arg1)->getNumTorsions();
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AmoebaTorsionForce_addTorsion(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::AmoebaTorsionForce *arg1 = (OpenMM::AmoebaTorsionForce *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  std::vector< double,std::allocator< double > > *arg6 = 0 ;
  std::vector< double,std::allocator< double > > *arg7 = 0 ;
  std::vector< double,std::allocator< double > > *arg8 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  int res6 = SWIG_OLDOBJ ;
  int res7 = SWIG_OLDOBJ ;
  int res8 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOOO:AmoebaTorsionForce_addTorsion",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__AmoebaTorsionForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AmoebaTorsionForce_addTorsion" "', argument " "1"" of type '" "OpenMM::AmoebaTorsionForce *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::AmoebaTorsionForce * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AmoebaTorsionForce_addTorsion" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "AmoebaTorsionForce_addTorsion" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "AmoebaTorsionForce_addTorsion" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  ecode5 = SWIG_AsVal_int(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "AmoebaTorsionForce_addTorsion" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  {
    std::vector<double,std::allocator< double > > *ptr = (std::vector<double,std::allocator< double > > *)0;
    res6 = swig::asptr(obj5, &ptr);
    if (!SWIG_IsOK(res6)) {
      SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "AmoebaTorsionForce_addTorsion" "', argument " "6"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AmoebaTorsionForce_addTorsion" "', argument " "6"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    arg6 = ptr;
  }
  {
    std::vector<double,std::allocator< double > > *ptr = (std::vector<double,std::allocator< double > > *)0;
    res7 = swig::asptr(obj6, &ptr);
    if (!SWIG_IsOK(res7)) {
      SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "AmoebaTorsionForce_addTorsion" "', argument " "7"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AmoebaTorsionForce_addTorsion" "', argument " "7"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    arg7 = ptr;
  }
  {
    std::vector<double,std::allocator< double > > *ptr = (std::vector<double,std::allocator< double > > *)0;
    res8 = swig::asptr(obj7, &ptr);
    if (!SWIG_IsOK(res8)) {
      SWIG_exception_fail(SWIG_ArgError(res8), "in method '" "AmoebaTorsionForce_addTorsion" "', argument " "8"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AmoebaTorsionForce_addTorsion" "', argument " "8"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    arg8 = ptr;
  }
  {
    try {
      result = (int)(arg1)->addTorsion(arg2,arg3,arg4,arg5,(std::vector< double,std::allocator< double > > const &)*arg6,(std::vector< double,std::allocator< double > > const &)*arg7,(std::vector< double,std::allocator< double > > const &)*arg8);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (SWIG_IsNewObj(res6)) delete arg6;
  if (SWIG_IsNewObj(res7)) delete arg7;
  if (SWIG_IsNewObj(res8)) delete arg8;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res6)) delete arg6;
  if (SWIG_IsNewObj(res7)) delete arg7;
  if (SWIG_IsNewObj(res8)) delete arg8;
  return NULL;
}


SWIGINTERN PyObject *_wrap_AmoebaTorsionForce_getTorsionParameters(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::AmoebaTorsionForce *arg1 = (OpenMM::AmoebaTorsionForce *) 0 ;
  int arg2 ;
  int *arg3 = 0 ;
  int *arg4 = 0 ;
  int *arg5 = 0 ;
  int *arg6 = 0 ;
  std::vector< double,std::allocator< double > > *arg7 = 0 ;
  std::vector< double,std::allocator< double > > *arg8 = 0 ;
  std::vector< double,std::allocator< double > > *arg9 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int temp3 ;
  int res3 = SWIG_TMPOBJ ;
  int temp4 ;
  int res4 = SWIG_TMPOBJ ;
  int temp5 ;
  int res5 = SWIG_TMPOBJ ;
  int temp6 ;
  int res6 = SWIG_TMPOBJ ;
  std::vector< double,std::allocator< double > > temp7 ;
  int res7 = SWIG_TMPOBJ ;
  std::vector< double,std::allocator< double > > temp8 ;
  int res8 = SWIG_TMPOBJ ;
  std::vector< double,std::allocator< double > > temp9 ;
  int res9 = SWIG_TMPOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  arg3 = &temp3;
  arg4 = &temp4;
  arg5 = &temp5;
  arg6 = &temp6;
  arg7 = &temp7;
  arg8 = &temp8;
  arg9 = &temp9;
  if (!PyArg_ParseTuple(args,(char *)"OO:AmoebaTorsionForce_getTorsionParameters",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__AmoebaTorsionForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AmoebaTorsionForce_getTorsionParameters" "', argument " "1"" of type '" "OpenMM::AmoebaTorsionForce const *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::AmoebaTorsionForce * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AmoebaTorsionForce_getTorsionParameters" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      ((OpenMM::AmoebaTorsionForce const *)arg1)->getTorsionParameters(arg2,*arg3,*arg4,*arg5,*arg6,*arg7,*arg8,*arg9);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsTmpObj(res3)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_From_int((*arg3)));
  } else {
    int new_flags = SWIG_IsNewObj(res3) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg3), SWIGTYPE_p_int, new_flags));
  }
  if (SWIG_IsTmpObj(res4)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_From_int((*arg4)));
  } else {
    int new_flags = SWIG_IsNewObj(res4) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg4), SWIGTYPE_p_int, new_flags));
  }
  if (SWIG_IsTmpObj(res5)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_From_int((*arg5)));
  } else {
    int new_flags = SWIG_IsNewObj(res5) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg5), SWIGTYPE_p_int, new_flags));
  }
  if (SWIG_IsTmpObj(res6)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_From_int((*arg6)));
  } else {
    int new_flags = SWIG_IsNewObj(res6) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg6), SWIGTYPE_p_int, new_flags));
  }
  if (SWIG_IsTmpObj(res7)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, swig::from((*arg7)));
  } else {
    int new_flags = SWIG_IsNewObj(res7) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg7), SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, new_flags));
  }
  if (SWIG_IsTmpObj(res8)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, swig::from((*arg8)));
  } else {
    int new_flags = SWIG_IsNewObj(res8) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg8), SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, new_flags));
  }
  if (SWIG_IsTmpObj(res9)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, swig::from((*arg9)));
  } else {
    int new_flags = SWIG_IsNewObj(res9) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg9), SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, new_flags));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AmoebaTorsionForce_setTorsionParameters(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::AmoebaTorsionForce *arg1 = (OpenMM::AmoebaTorsionForce *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  std::vector< double,std::allocator< double > > *arg7 = 0 ;
  std::vector< double,std::allocator< double > > *arg8 = 0 ;
  std::vector< double,std::allocator< double > > *arg9 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  int val6 ;
  int ecode6 = 0 ;
  int res7 = SWIG_OLDOBJ ;
  int res8 = SWIG_OLDOBJ ;
  int res9 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  PyObject * obj8 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOOOO:AmoebaTorsionForce_setTorsionParameters",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7,&obj8)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__AmoebaTorsionForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AmoebaTorsionForce_setTorsionParameters" "', argument " "1"" of type '" "OpenMM::AmoebaTorsionForce *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::AmoebaTorsionForce * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AmoebaTorsionForce_setTorsionParameters" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "AmoebaTorsionForce_setTorsionParameters" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "AmoebaTorsionForce_setTorsionParameters" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  ecode5 = SWIG_AsVal_int(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "AmoebaTorsionForce_setTorsionParameters" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  ecode6 = SWIG_AsVal_int(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "AmoebaTorsionForce_setTorsionParameters" "', argument " "6"" of type '" "int""'");
  } 
  arg6 = static_cast< int >(val6);
  {
    std::vector<double,std::allocator< double > > *ptr = (std::vector<double,std::allocator< double > > *)0;
    res7 = swig::asptr(obj6, &ptr);
    if (!SWIG_IsOK(res7)) {
      SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "AmoebaTorsionForce_setTorsionParameters" "', argument " "7"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AmoebaTorsionForce_setTorsionParameters" "', argument " "7"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    arg7 = ptr;
  }
  {
    std::vector<double,std::allocator< double > > *ptr = (std::vector<double,std::allocator< double > > *)0;
    res8 = swig::asptr(obj7, &ptr);
    if (!SWIG_IsOK(res8)) {
      SWIG_exception_fail(SWIG_ArgError(res8), "in method '" "AmoebaTorsionForce_setTorsionParameters" "', argument " "8"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AmoebaTorsionForce_setTorsionParameters" "', argument " "8"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    arg8 = ptr;
  }
  {
    std::vector<double,std::allocator< double > > *ptr = (std::vector<double,std::allocator< double > > *)0;
    res9 = swig::asptr(obj8, &ptr);
    if (!SWIG_IsOK(res9)) {
      SWIG_exception_fail(SWIG_ArgError(res9), "in method '" "AmoebaTorsionForce_setTorsionParameters" "', argument " "9"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AmoebaTorsionForce_setTorsionParameters" "', argument " "9"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    arg9 = ptr;
  }
  {
    try {
      (arg1)->setTorsionParameters(arg2,arg3,arg4,arg5,arg6,(std::vector< double,std::allocator< double > > const &)*arg7,(std::vector< double,std::allocator< double > > const &)*arg8,(std::vector< double,std::allocator< double > > const &)*arg9);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res7)) delete arg7;
  if (SWIG_IsNewObj(res8)) delete arg8;
  if (SWIG_IsNewObj(res9)) delete arg9;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res7)) delete arg7;
  if (SWIG_IsNewObj(res8)) delete arg8;
  if (SWIG_IsNewObj(res9)) delete arg9;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_AmoebaTorsionForce__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::AmoebaTorsionForce *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  OpenMM::AmoebaTorsionForce *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_AmoebaTorsionForce",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_OpenMM__AmoebaTorsionForce,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_AmoebaTorsionForce" "', argument " "1"" of type '" "OpenMM::AmoebaTorsionForce const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_AmoebaTorsionForce" "', argument " "1"" of type '" "OpenMM::AmoebaTorsionForce const &""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::AmoebaTorsionForce * >(argp1);
  {
    try {
      result = (OpenMM::AmoebaTorsionForce *)new OpenMM::AmoebaTorsionForce((OpenMM::AmoebaTorsionForce const &)*arg1);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_OpenMM__AmoebaTorsionForce, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_AmoebaTorsionForce(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 1); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_AmoebaTorsionForce__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_OpenMM__AmoebaTorsionForce, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_AmoebaTorsionForce__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_AmoebaTorsionForce'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    OpenMM::AmoebaTorsionForce()\n"
    "    OpenMM::AmoebaTorsionForce::AmoebaTorsionForce(OpenMM::AmoebaTorsionForce const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_AmoebaTorsionForce(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::AmoebaTorsionForce *arg1 = (OpenMM::AmoebaTorsionForce *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_AmoebaTorsionForce",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__AmoebaTorsionForce, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_AmoebaTorsionForce" "', argument " "1"" of type '" "OpenMM::AmoebaTorsionForce *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::AmoebaTorsionForce * >(argp1);
  {
    try {
      delete arg1;
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *AmoebaTorsionForce_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_OpenMM__AmoebaTorsionForce, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_AmoebaTorsionTorsionForce__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::AmoebaTorsionTorsionForce *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_AmoebaTorsionTorsionForce")) SWIG_fail;
  {
    try {
      result = (OpenMM::AmoebaTorsionTorsionForce *)new OpenMM::AmoebaTorsionTorsionForce();
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_OpenMM__AmoebaTorsionTorsionForce, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AmoebaTorsionTorsionForce_getNumTorsionTorsions(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::AmoebaTorsionTorsionForce *arg1 = (OpenMM::AmoebaTorsionTorsionForce *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:AmoebaTorsionTorsionForce_getNumTorsionTorsions",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__AmoebaTorsionTorsionForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AmoebaTorsionTorsionForce_getNumTorsionTorsions" "', argument " "1"" of type '" "OpenMM::AmoebaTorsionTorsionForce const *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::AmoebaTorsionTorsionForce * >(argp1);
  {
    try {
      result = (int)((OpenMM::AmoebaTorsionTorsionForce const *)arg1)->getNumTorsionTorsions();
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AmoebaTorsionTorsionForce_getNumTorsionTorsionGrids(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::AmoebaTorsionTorsionForce *arg1 = (OpenMM::AmoebaTorsionTorsionForce *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:AmoebaTorsionTorsionForce_getNumTorsionTorsionGrids",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__AmoebaTorsionTorsionForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AmoebaTorsionTorsionForce_getNumTorsionTorsionGrids" "', argument " "1"" of type '" "OpenMM::AmoebaTorsionTorsionForce const *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::AmoebaTorsionTorsionForce * >(argp1);
  {
    try {
      result = (int)((OpenMM::AmoebaTorsionTorsionForce const *)arg1)->getNumTorsionTorsionGrids();
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AmoebaTorsionTorsionForce_addTorsionTorsion(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::AmoebaTorsionTorsionForce *arg1 = (OpenMM::AmoebaTorsionTorsionForce *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  int arg7 ;
  int arg8 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  int val6 ;
  int ecode6 = 0 ;
  int val7 ;
  int ecode7 = 0 ;
  int val8 ;
  int ecode8 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOOO:AmoebaTorsionTorsionForce_addTorsionTorsion",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__AmoebaTorsionTorsionForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AmoebaTorsionTorsionForce_addTorsionTorsion" "', argument " "1"" of type '" "OpenMM::AmoebaTorsionTorsionForce *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::AmoebaTorsionTorsionForce * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AmoebaTorsionTorsionForce_addTorsionTorsion" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "AmoebaTorsionTorsionForce_addTorsionTorsion" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "AmoebaTorsionTorsionForce_addTorsionTorsion" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  ecode5 = SWIG_AsVal_int(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "AmoebaTorsionTorsionForce_addTorsionTorsion" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  ecode6 = SWIG_AsVal_int(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "AmoebaTorsionTorsionForce_addTorsionTorsion" "', argument " "6"" of type '" "int""'");
  } 
  arg6 = static_cast< int >(val6);
  ecode7 = SWIG_AsVal_int(obj6, &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "AmoebaTorsionTorsionForce_addTorsionTorsion" "', argument " "7"" of type '" "int""'");
  } 
  arg7 = static_cast< int >(val7);
  ecode8 = SWIG_AsVal_int(obj7, &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "AmoebaTorsionTorsionForce_addTorsionTorsion" "', argument " "8"" of type '" "int""'");
  } 
  arg8 = static_cast< int >(val8);
  {
    try {
      result = (int)(arg1)->addTorsionTorsion(arg2,arg3,arg4,arg5,arg6,arg7,arg8);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AmoebaTorsionTorsionForce_getTorsionTorsionParameters(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::AmoebaTorsionTorsionForce *arg1 = (OpenMM::AmoebaTorsionTorsionForce *) 0 ;
  int arg2 ;
  int *arg3 = 0 ;
  int *arg4 = 0 ;
  int *arg5 = 0 ;
  int *arg6 = 0 ;
  int *arg7 = 0 ;
  int *arg8 = 0 ;
  int *arg9 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int temp3 ;
  int res3 = SWIG_TMPOBJ ;
  int temp4 ;
  int res4 = SWIG_TMPOBJ ;
  int temp5 ;
  int res5 = SWIG_TMPOBJ ;
  int temp6 ;
  int res6 = SWIG_TMPOBJ ;
  int temp7 ;
  int res7 = SWIG_TMPOBJ ;
  int temp8 ;
  int res8 = SWIG_TMPOBJ ;
  int temp9 ;
  int res9 = SWIG_TMPOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  arg3 = &temp3;
  arg4 = &temp4;
  arg5 = &temp5;
  arg6 = &temp6;
  arg7 = &temp7;
  arg8 = &temp8;
  arg9 = &temp9;
  if (!PyArg_ParseTuple(args,(char *)"OO:AmoebaTorsionTorsionForce_getTorsionTorsionParameters",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__AmoebaTorsionTorsionForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AmoebaTorsionTorsionForce_getTorsionTorsionParameters" "', argument " "1"" of type '" "OpenMM::AmoebaTorsionTorsionForce const *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::AmoebaTorsionTorsionForce * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AmoebaTorsionTorsionForce_getTorsionTorsionParameters" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      ((OpenMM::AmoebaTorsionTorsionForce const *)arg1)->getTorsionTorsionParameters(arg2,*arg3,*arg4,*arg5,*arg6,*arg7,*arg8,*arg9);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsTmpObj(res3)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_From_int((*arg3)));
  } else {
    int new_flags = SWIG_IsNewObj(res3) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg3), SWIGTYPE_p_int, new_flags));
  }
  if (SWIG_IsTmpObj(res4)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_From_int((*arg4)));
  } else {
    int new_flags = SWIG_IsNewObj(res4) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg4), SWIGTYPE_p_int, new_flags));
  }
  if (SWIG_IsTmpObj(res5)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_From_int((*arg5)));
  } else {
    int new_flags = SWIG_IsNewObj(res5) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg5), SWIGTYPE_p_int, new_flags));
  }
  if (SWIG_IsTmpObj(res6)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_From_int((*arg6)));
  } else {
    int new_flags = SWIG_IsNewObj(res6) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg6), SWIGTYPE_p_int, new_flags));
  }
  if (SWIG_IsTmpObj(res7)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_From_int((*arg7)));
  } else {
    int new_flags = SWIG_IsNewObj(res7) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg7), SWIGTYPE_p_int, new_flags));
  }
  if (SWIG_IsTmpObj(res8)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_From_int((*arg8)));
  } else {
    int new_flags = SWIG_IsNewObj(res8) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg8), SWIGTYPE_p_int, new_flags));
  }
  if (SWIG_IsTmpObj(res9)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_From_int((*arg9)));
  } else {
    int new_flags = SWIG_IsNewObj(res9) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg9), SWIGTYPE_p_int, new_flags));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AmoebaTorsionTorsionForce_setTorsionTorsionParameters(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::AmoebaTorsionTorsionForce *arg1 = (OpenMM::AmoebaTorsionTorsionForce *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  int arg7 ;
  int arg8 ;
  int arg9 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  int val6 ;
  int ecode6 = 0 ;
  int val7 ;
  int ecode7 = 0 ;
  int val8 ;
  int ecode8 = 0 ;
  int val9 ;
  int ecode9 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  PyObject * obj8 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOOOO:AmoebaTorsionTorsionForce_setTorsionTorsionParameters",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7,&obj8)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__AmoebaTorsionTorsionForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AmoebaTorsionTorsionForce_setTorsionTorsionParameters" "', argument " "1"" of type '" "OpenMM::AmoebaTorsionTorsionForce *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::AmoebaTorsionTorsionForce * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AmoebaTorsionTorsionForce_setTorsionTorsionParameters" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "AmoebaTorsionTorsionForce_setTorsionTorsionParameters" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "AmoebaTorsionTorsionForce_setTorsionTorsionParameters" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  ecode5 = SWIG_AsVal_int(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "AmoebaTorsionTorsionForce_setTorsionTorsionParameters" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  ecode6 = SWIG_AsVal_int(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "AmoebaTorsionTorsionForce_setTorsionTorsionParameters" "', argument " "6"" of type '" "int""'");
  } 
  arg6 = static_cast< int >(val6);
  ecode7 = SWIG_AsVal_int(obj6, &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "AmoebaTorsionTorsionForce_setTorsionTorsionParameters" "', argument " "7"" of type '" "int""'");
  } 
  arg7 = static_cast< int >(val7);
  ecode8 = SWIG_AsVal_int(obj7, &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "AmoebaTorsionTorsionForce_setTorsionTorsionParameters" "', argument " "8"" of type '" "int""'");
  } 
  arg8 = static_cast< int >(val8);
  ecode9 = SWIG_AsVal_int(obj8, &val9);
  if (!SWIG_IsOK(ecode9)) {
    SWIG_exception_fail(SWIG_ArgError(ecode9), "in method '" "AmoebaTorsionTorsionForce_setTorsionTorsionParameters" "', argument " "9"" of type '" "int""'");
  } 
  arg9 = static_cast< int >(val9);
  {
    try {
      (arg1)->setTorsionTorsionParameters(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AmoebaTorsionTorsionForce_getTorsionTorsionGrid(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::AmoebaTorsionTorsionForce *arg1 = (OpenMM::AmoebaTorsionTorsionForce *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > >,std::allocator< std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:AmoebaTorsionTorsionForce_getTorsionTorsionGrid",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__AmoebaTorsionTorsionForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AmoebaTorsionTorsionForce_getTorsionTorsionGrid" "', argument " "1"" of type '" "OpenMM::AmoebaTorsionTorsionForce const *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::AmoebaTorsionTorsionForce * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AmoebaTorsionTorsionForce_getTorsionTorsionGrid" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (std::vector< std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > >,std::allocator< std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > > > *) &((OpenMM::AmoebaTorsionTorsionForce const *)arg1)->getTorsionTorsionGrid(arg2);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = swig::from(static_cast< std::vector<std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > >,std::allocator< std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > > > >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AmoebaTorsionTorsionForce_setTorsionTorsionGrid(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::AmoebaTorsionTorsionForce *arg1 = (OpenMM::AmoebaTorsionTorsionForce *) 0 ;
  int arg2 ;
  std::vector< std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > >,std::allocator< std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:AmoebaTorsionTorsionForce_setTorsionTorsionGrid",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__AmoebaTorsionTorsionForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AmoebaTorsionTorsionForce_setTorsionTorsionGrid" "', argument " "1"" of type '" "OpenMM::AmoebaTorsionTorsionForce *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::AmoebaTorsionTorsionForce * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AmoebaTorsionTorsionForce_setTorsionTorsionGrid" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    std::vector<std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > >,std::allocator< std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > > > *ptr = (std::vector<std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > >,std::allocator< std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "AmoebaTorsionTorsionForce_setTorsionTorsionGrid" "', argument " "3"" of type '" "std::vector< std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > >,std::allocator< std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AmoebaTorsionTorsionForce_setTorsionTorsionGrid" "', argument " "3"" of type '" "std::vector< std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > >,std::allocator< std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > > > const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      (arg1)->setTorsionTorsionGrid(arg2,(std::vector< std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > >,std::allocator< std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > > > const &)*arg3);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_AmoebaTorsionTorsionForce__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::AmoebaTorsionTorsionForce *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  OpenMM::AmoebaTorsionTorsionForce *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_AmoebaTorsionTorsionForce",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_OpenMM__AmoebaTorsionTorsionForce,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_AmoebaTorsionTorsionForce" "', argument " "1"" of type '" "OpenMM::AmoebaTorsionTorsionForce const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_AmoebaTorsionTorsionForce" "', argument " "1"" of type '" "OpenMM::AmoebaTorsionTorsionForce const &""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::AmoebaTorsionTorsionForce * >(argp1);
  {
    try {
      result = (OpenMM::AmoebaTorsionTorsionForce *)new OpenMM::AmoebaTorsionTorsionForce((OpenMM::AmoebaTorsionTorsionForce const &)*arg1);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_OpenMM__AmoebaTorsionTorsionForce, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_AmoebaTorsionTorsionForce(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 1); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_AmoebaTorsionTorsionForce__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_OpenMM__AmoebaTorsionTorsionForce, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_AmoebaTorsionTorsionForce__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_AmoebaTorsionTorsionForce'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    OpenMM::AmoebaTorsionTorsionForce()\n"
    "    OpenMM::AmoebaTorsionTorsionForce::AmoebaTorsionTorsionForce(OpenMM::AmoebaTorsionTorsionForce const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_AmoebaTorsionTorsionForce(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::AmoebaTorsionTorsionForce *arg1 = (OpenMM::AmoebaTorsionTorsionForce *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_AmoebaTorsionTorsionForce",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__AmoebaTorsionTorsionForce, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_AmoebaTorsionTorsionForce" "', argument " "1"" of type '" "OpenMM::AmoebaTorsionTorsionForce *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::AmoebaTorsionTorsionForce * >(argp1);
  {
    try {
      delete arg1;
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *AmoebaTorsionTorsionForce_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_OpenMM__AmoebaTorsionTorsionForce, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_AmoebaUreyBradleyForce__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::AmoebaUreyBradleyForce *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_AmoebaUreyBradleyForce")) SWIG_fail;
  {
    try {
      result = (OpenMM::AmoebaUreyBradleyForce *)new OpenMM::AmoebaUreyBradleyForce();
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_OpenMM__AmoebaUreyBradleyForce, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AmoebaUreyBradleyForce_getNumInteractions(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::AmoebaUreyBradleyForce *arg1 = (OpenMM::AmoebaUreyBradleyForce *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:AmoebaUreyBradleyForce_getNumInteractions",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__AmoebaUreyBradleyForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AmoebaUreyBradleyForce_getNumInteractions" "', argument " "1"" of type '" "OpenMM::AmoebaUreyBradleyForce const *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::AmoebaUreyBradleyForce * >(argp1);
  {
    try {
      result = (int)((OpenMM::AmoebaUreyBradleyForce const *)arg1)->getNumInteractions();
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AmoebaUreyBradleyForce_setAmoebaGlobalUreyBradleyCubic(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::AmoebaUreyBradleyForce *arg1 = (OpenMM::AmoebaUreyBradleyForce *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:AmoebaUreyBradleyForce_setAmoebaGlobalUreyBradleyCubic",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__AmoebaUreyBradleyForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AmoebaUreyBradleyForce_setAmoebaGlobalUreyBradleyCubic" "', argument " "1"" of type '" "OpenMM::AmoebaUreyBradleyForce *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::AmoebaUreyBradleyForce * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AmoebaUreyBradleyForce_setAmoebaGlobalUreyBradleyCubic" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->setAmoebaGlobalUreyBradleyCubic(arg2);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AmoebaUreyBradleyForce_getAmoebaGlobalUreyBradleyCubic(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::AmoebaUreyBradleyForce *arg1 = (OpenMM::AmoebaUreyBradleyForce *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:AmoebaUreyBradleyForce_getAmoebaGlobalUreyBradleyCubic",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__AmoebaUreyBradleyForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AmoebaUreyBradleyForce_getAmoebaGlobalUreyBradleyCubic" "', argument " "1"" of type '" "OpenMM::AmoebaUreyBradleyForce const *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::AmoebaUreyBradleyForce * >(argp1);
  {
    try {
      result = (double)((OpenMM::AmoebaUreyBradleyForce const *)arg1)->getAmoebaGlobalUreyBradleyCubic();
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AmoebaUreyBradleyForce_setAmoebaGlobalUreyBradleyQuartic(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::AmoebaUreyBradleyForce *arg1 = (OpenMM::AmoebaUreyBradleyForce *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:AmoebaUreyBradleyForce_setAmoebaGlobalUreyBradleyQuartic",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__AmoebaUreyBradleyForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AmoebaUreyBradleyForce_setAmoebaGlobalUreyBradleyQuartic" "', argument " "1"" of type '" "OpenMM::AmoebaUreyBradleyForce *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::AmoebaUreyBradleyForce * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AmoebaUreyBradleyForce_setAmoebaGlobalUreyBradleyQuartic" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->setAmoebaGlobalUreyBradleyQuartic(arg2);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AmoebaUreyBradleyForce_getAmoebaGlobalUreyBradleyQuartic(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::AmoebaUreyBradleyForce *arg1 = (OpenMM::AmoebaUreyBradleyForce *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:AmoebaUreyBradleyForce_getAmoebaGlobalUreyBradleyQuartic",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__AmoebaUreyBradleyForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AmoebaUreyBradleyForce_getAmoebaGlobalUreyBradleyQuartic" "', argument " "1"" of type '" "OpenMM::AmoebaUreyBradleyForce const *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::AmoebaUreyBradleyForce * >(argp1);
  {
    try {
      result = (double)((OpenMM::AmoebaUreyBradleyForce const *)arg1)->getAmoebaGlobalUreyBradleyQuartic();
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AmoebaUreyBradleyForce_addUreyBradley(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::AmoebaUreyBradleyForce *arg1 = (OpenMM::AmoebaUreyBradleyForce *) 0 ;
  int arg2 ;
  int arg3 ;
  double arg4 ;
  double arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:AmoebaUreyBradleyForce_addUreyBradley",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__AmoebaUreyBradleyForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AmoebaUreyBradleyForce_addUreyBradley" "', argument " "1"" of type '" "OpenMM::AmoebaUreyBradleyForce *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::AmoebaUreyBradleyForce * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AmoebaUreyBradleyForce_addUreyBradley" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "AmoebaUreyBradleyForce_addUreyBradley" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "AmoebaUreyBradleyForce_addUreyBradley" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  ecode5 = SWIG_AsVal_double(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "AmoebaUreyBradleyForce_addUreyBradley" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  {
    try {
      result = (int)(arg1)->addUreyBradley(arg2,arg3,arg4,arg5);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AmoebaUreyBradleyForce_getUreyBradleyParameters(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::AmoebaUreyBradleyForce *arg1 = (OpenMM::AmoebaUreyBradleyForce *) 0 ;
  int arg2 ;
  int *arg3 = 0 ;
  int *arg4 = 0 ;
  double *arg5 = 0 ;
  double *arg6 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int temp3 ;
  int res3 = SWIG_TMPOBJ ;
  int temp4 ;
  int res4 = SWIG_TMPOBJ ;
  double temp5 ;
  int res5 = SWIG_TMPOBJ ;
  double temp6 ;
  int res6 = SWIG_TMPOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  arg3 = &temp3;
  arg4 = &temp4;
  arg5 = &temp5;
  arg6 = &temp6;
  if (!PyArg_ParseTuple(args,(char *)"OO:AmoebaUreyBradleyForce_getUreyBradleyParameters",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__AmoebaUreyBradleyForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AmoebaUreyBradleyForce_getUreyBradleyParameters" "', argument " "1"" of type '" "OpenMM::AmoebaUreyBradleyForce const *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::AmoebaUreyBradleyForce * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AmoebaUreyBradleyForce_getUreyBradleyParameters" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      ((OpenMM::AmoebaUreyBradleyForce const *)arg1)->getUreyBradleyParameters(arg2,*arg3,*arg4,*arg5,*arg6);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsTmpObj(res3)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_From_int((*arg3)));
  } else {
    int new_flags = SWIG_IsNewObj(res3) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg3), SWIGTYPE_p_int, new_flags));
  }
  if (SWIG_IsTmpObj(res4)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_From_int((*arg4)));
  } else {
    int new_flags = SWIG_IsNewObj(res4) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg4), SWIGTYPE_p_int, new_flags));
  }
  if (SWIG_IsTmpObj(res5)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_From_double((*arg5)));
  } else {
    int new_flags = SWIG_IsNewObj(res5) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg5), SWIGTYPE_p_double, new_flags));
  }
  if (SWIG_IsTmpObj(res6)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_From_double((*arg6)));
  } else {
    int new_flags = SWIG_IsNewObj(res6) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg6), SWIGTYPE_p_double, new_flags));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AmoebaUreyBradleyForce_setUreyBradleyParameters(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::AmoebaUreyBradleyForce *arg1 = (OpenMM::AmoebaUreyBradleyForce *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  double arg5 ;
  double arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  double val6 ;
  int ecode6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:AmoebaUreyBradleyForce_setUreyBradleyParameters",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__AmoebaUreyBradleyForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AmoebaUreyBradleyForce_setUreyBradleyParameters" "', argument " "1"" of type '" "OpenMM::AmoebaUreyBradleyForce *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::AmoebaUreyBradleyForce * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AmoebaUreyBradleyForce_setUreyBradleyParameters" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "AmoebaUreyBradleyForce_setUreyBradleyParameters" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "AmoebaUreyBradleyForce_setUreyBradleyParameters" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  ecode5 = SWIG_AsVal_double(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "AmoebaUreyBradleyForce_setUreyBradleyParameters" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  ecode6 = SWIG_AsVal_double(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "AmoebaUreyBradleyForce_setUreyBradleyParameters" "', argument " "6"" of type '" "double""'");
  } 
  arg6 = static_cast< double >(val6);
  {
    try {
      (arg1)->setUreyBradleyParameters(arg2,arg3,arg4,arg5,arg6);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_AmoebaUreyBradleyForce__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::AmoebaUreyBradleyForce *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  OpenMM::AmoebaUreyBradleyForce *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_AmoebaUreyBradleyForce",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_OpenMM__AmoebaUreyBradleyForce,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_AmoebaUreyBradleyForce" "', argument " "1"" of type '" "OpenMM::AmoebaUreyBradleyForce const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_AmoebaUreyBradleyForce" "', argument " "1"" of type '" "OpenMM::AmoebaUreyBradleyForce const &""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::AmoebaUreyBradleyForce * >(argp1);
  {
    try {
      result = (OpenMM::AmoebaUreyBradleyForce *)new OpenMM::AmoebaUreyBradleyForce((OpenMM::AmoebaUreyBradleyForce const &)*arg1);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_OpenMM__AmoebaUreyBradleyForce, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_AmoebaUreyBradleyForce(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 1); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_AmoebaUreyBradleyForce__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_OpenMM__AmoebaUreyBradleyForce, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_AmoebaUreyBradleyForce__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_AmoebaUreyBradleyForce'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    OpenMM::AmoebaUreyBradleyForce()\n"
    "    OpenMM::AmoebaUreyBradleyForce::AmoebaUreyBradleyForce(OpenMM::AmoebaUreyBradleyForce const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_AmoebaUreyBradleyForce(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::AmoebaUreyBradleyForce *arg1 = (OpenMM::AmoebaUreyBradleyForce *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_AmoebaUreyBradleyForce",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__AmoebaUreyBradleyForce, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_AmoebaUreyBradleyForce" "', argument " "1"" of type '" "OpenMM::AmoebaUreyBradleyForce *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::AmoebaUreyBradleyForce * >(argp1);
  {
    try {
      delete arg1;
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *AmoebaUreyBradleyForce_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_OpenMM__AmoebaUreyBradleyForce, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_AmoebaVdwForce__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::AmoebaVdwForce *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_AmoebaVdwForce")) SWIG_fail;
  {
    try {
      result = (OpenMM::AmoebaVdwForce *)new OpenMM::AmoebaVdwForce();
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_OpenMM__AmoebaVdwForce, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AmoebaVdwForce_getNumParticles(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::AmoebaVdwForce *arg1 = (OpenMM::AmoebaVdwForce *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:AmoebaVdwForce_getNumParticles",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__AmoebaVdwForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AmoebaVdwForce_getNumParticles" "', argument " "1"" of type '" "OpenMM::AmoebaVdwForce const *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::AmoebaVdwForce * >(argp1);
  {
    try {
      result = (int)((OpenMM::AmoebaVdwForce const *)arg1)->getNumParticles();
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AmoebaVdwForce_setParticleParameters(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::AmoebaVdwForce *arg1 = (OpenMM::AmoebaVdwForce *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  double arg5 ;
  double arg6 ;
  double arg7 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  double val6 ;
  int ecode6 = 0 ;
  double val7 ;
  int ecode7 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOO:AmoebaVdwForce_setParticleParameters",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__AmoebaVdwForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AmoebaVdwForce_setParticleParameters" "', argument " "1"" of type '" "OpenMM::AmoebaVdwForce *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::AmoebaVdwForce * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AmoebaVdwForce_setParticleParameters" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "AmoebaVdwForce_setParticleParameters" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "AmoebaVdwForce_setParticleParameters" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  ecode5 = SWIG_AsVal_double(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "AmoebaVdwForce_setParticleParameters" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  ecode6 = SWIG_AsVal_double(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "AmoebaVdwForce_setParticleParameters" "', argument " "6"" of type '" "double""'");
  } 
  arg6 = static_cast< double >(val6);
  ecode7 = SWIG_AsVal_double(obj6, &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "AmoebaVdwForce_setParticleParameters" "', argument " "7"" of type '" "double""'");
  } 
  arg7 = static_cast< double >(val7);
  {
    try {
      (arg1)->setParticleParameters(arg2,arg3,arg4,arg5,arg6,arg7);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AmoebaVdwForce_getParticleParameters(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::AmoebaVdwForce *arg1 = (OpenMM::AmoebaVdwForce *) 0 ;
  int arg2 ;
  int *arg3 = 0 ;
  int *arg4 = 0 ;
  double *arg5 = 0 ;
  double *arg6 = 0 ;
  double *arg7 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int temp3 ;
  int res3 = SWIG_TMPOBJ ;
  int temp4 ;
  int res4 = SWIG_TMPOBJ ;
  double temp5 ;
  int res5 = SWIG_TMPOBJ ;
  double temp6 ;
  int res6 = SWIG_TMPOBJ ;
  double temp7 ;
  int res7 = SWIG_TMPOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  arg3 = &temp3;
  arg4 = &temp4;
  arg5 = &temp5;
  arg6 = &temp6;
  arg7 = &temp7;
  if (!PyArg_ParseTuple(args,(char *)"OO:AmoebaVdwForce_getParticleParameters",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__AmoebaVdwForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AmoebaVdwForce_getParticleParameters" "', argument " "1"" of type '" "OpenMM::AmoebaVdwForce const *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::AmoebaVdwForce * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AmoebaVdwForce_getParticleParameters" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      ((OpenMM::AmoebaVdwForce const *)arg1)->getParticleParameters(arg2,*arg3,*arg4,*arg5,*arg6,*arg7);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsTmpObj(res3)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_From_int((*arg3)));
  } else {
    int new_flags = SWIG_IsNewObj(res3) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg3), SWIGTYPE_p_int, new_flags));
  }
  if (SWIG_IsTmpObj(res4)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_From_int((*arg4)));
  } else {
    int new_flags = SWIG_IsNewObj(res4) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg4), SWIGTYPE_p_int, new_flags));
  }
  if (SWIG_IsTmpObj(res5)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_From_double((*arg5)));
  } else {
    int new_flags = SWIG_IsNewObj(res5) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg5), SWIGTYPE_p_double, new_flags));
  }
  if (SWIG_IsTmpObj(res6)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_From_double((*arg6)));
  } else {
    int new_flags = SWIG_IsNewObj(res6) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg6), SWIGTYPE_p_double, new_flags));
  }
  if (SWIG_IsTmpObj(res7)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_From_double((*arg7)));
  } else {
    int new_flags = SWIG_IsNewObj(res7) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg7), SWIGTYPE_p_double, new_flags));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AmoebaVdwForce_addParticle(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::AmoebaVdwForce *arg1 = (OpenMM::AmoebaVdwForce *) 0 ;
  int arg2 ;
  int arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  double val6 ;
  int ecode6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:AmoebaVdwForce_addParticle",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__AmoebaVdwForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AmoebaVdwForce_addParticle" "', argument " "1"" of type '" "OpenMM::AmoebaVdwForce *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::AmoebaVdwForce * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AmoebaVdwForce_addParticle" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "AmoebaVdwForce_addParticle" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "AmoebaVdwForce_addParticle" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  ecode5 = SWIG_AsVal_double(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "AmoebaVdwForce_addParticle" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  ecode6 = SWIG_AsVal_double(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "AmoebaVdwForce_addParticle" "', argument " "6"" of type '" "double""'");
  } 
  arg6 = static_cast< double >(val6);
  {
    try {
      result = (int)(arg1)->addParticle(arg2,arg3,arg4,arg5,arg6);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AmoebaVdwForce_setSigmaCombiningRule(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::AmoebaVdwForce *arg1 = (OpenMM::AmoebaVdwForce *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:AmoebaVdwForce_setSigmaCombiningRule",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__AmoebaVdwForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AmoebaVdwForce_setSigmaCombiningRule" "', argument " "1"" of type '" "OpenMM::AmoebaVdwForce *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::AmoebaVdwForce * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AmoebaVdwForce_setSigmaCombiningRule" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AmoebaVdwForce_setSigmaCombiningRule" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      (arg1)->setSigmaCombiningRule((std::string const &)*arg2);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_AmoebaVdwForce_getSigmaCombiningRule(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::AmoebaVdwForce *arg1 = (OpenMM::AmoebaVdwForce *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:AmoebaVdwForce_getSigmaCombiningRule",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__AmoebaVdwForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AmoebaVdwForce_getSigmaCombiningRule" "', argument " "1"" of type '" "OpenMM::AmoebaVdwForce const *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::AmoebaVdwForce * >(argp1);
  {
    try {
      result = (std::string *) &((OpenMM::AmoebaVdwForce const *)arg1)->getSigmaCombiningRule();
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AmoebaVdwForce_setEpsilonCombiningRule(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::AmoebaVdwForce *arg1 = (OpenMM::AmoebaVdwForce *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:AmoebaVdwForce_setEpsilonCombiningRule",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__AmoebaVdwForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AmoebaVdwForce_setEpsilonCombiningRule" "', argument " "1"" of type '" "OpenMM::AmoebaVdwForce *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::AmoebaVdwForce * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AmoebaVdwForce_setEpsilonCombiningRule" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AmoebaVdwForce_setEpsilonCombiningRule" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      (arg1)->setEpsilonCombiningRule((std::string const &)*arg2);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_AmoebaVdwForce_getEpsilonCombiningRule(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::AmoebaVdwForce *arg1 = (OpenMM::AmoebaVdwForce *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:AmoebaVdwForce_getEpsilonCombiningRule",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__AmoebaVdwForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AmoebaVdwForce_getEpsilonCombiningRule" "', argument " "1"" of type '" "OpenMM::AmoebaVdwForce const *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::AmoebaVdwForce * >(argp1);
  {
    try {
      result = (std::string *) &((OpenMM::AmoebaVdwForce const *)arg1)->getEpsilonCombiningRule();
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AmoebaVdwForce_setParticleExclusions(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::AmoebaVdwForce *arg1 = (OpenMM::AmoebaVdwForce *) 0 ;
  int arg2 ;
  std::vector< int,std::allocator< int > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:AmoebaVdwForce_setParticleExclusions",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__AmoebaVdwForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AmoebaVdwForce_setParticleExclusions" "', argument " "1"" of type '" "OpenMM::AmoebaVdwForce *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::AmoebaVdwForce * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AmoebaVdwForce_setParticleExclusions" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    std::vector<int,std::allocator< int > > *ptr = (std::vector<int,std::allocator< int > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "AmoebaVdwForce_setParticleExclusions" "', argument " "3"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AmoebaVdwForce_setParticleExclusions" "', argument " "3"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      (arg1)->setParticleExclusions(arg2,(std::vector< int,std::allocator< int > > const &)*arg3);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_AmoebaVdwForce_getParticleExclusions(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::AmoebaVdwForce *arg1 = (OpenMM::AmoebaVdwForce *) 0 ;
  int arg2 ;
  std::vector< int,std::allocator< int > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  std::vector< int,std::allocator< int > > temp3 ;
  int res3 = SWIG_TMPOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  arg3 = &temp3;
  if (!PyArg_ParseTuple(args,(char *)"OO:AmoebaVdwForce_getParticleExclusions",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__AmoebaVdwForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AmoebaVdwForce_getParticleExclusions" "', argument " "1"" of type '" "OpenMM::AmoebaVdwForce const *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::AmoebaVdwForce * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AmoebaVdwForce_getParticleExclusions" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      ((OpenMM::AmoebaVdwForce const *)arg1)->getParticleExclusions(arg2,*arg3);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsTmpObj(res3)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, swig::from((*arg3)));
  } else {
    int new_flags = SWIG_IsNewObj(res3) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg3), SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, new_flags));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AmoebaVdwForce_setCutoff(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::AmoebaVdwForce *arg1 = (OpenMM::AmoebaVdwForce *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:AmoebaVdwForce_setCutoff",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__AmoebaVdwForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AmoebaVdwForce_setCutoff" "', argument " "1"" of type '" "OpenMM::AmoebaVdwForce *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::AmoebaVdwForce * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AmoebaVdwForce_setCutoff" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->setCutoff(arg2);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AmoebaVdwForce_getCutoff(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::AmoebaVdwForce *arg1 = (OpenMM::AmoebaVdwForce *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:AmoebaVdwForce_getCutoff",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__AmoebaVdwForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AmoebaVdwForce_getCutoff" "', argument " "1"" of type '" "OpenMM::AmoebaVdwForce const *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::AmoebaVdwForce * >(argp1);
  {
    try {
      result = (double)((OpenMM::AmoebaVdwForce const *)arg1)->getCutoff();
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AmoebaVdwForce_setUseNeighborList(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::AmoebaVdwForce *arg1 = (OpenMM::AmoebaVdwForce *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:AmoebaVdwForce_setUseNeighborList",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__AmoebaVdwForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AmoebaVdwForce_setUseNeighborList" "', argument " "1"" of type '" "OpenMM::AmoebaVdwForce *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::AmoebaVdwForce * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AmoebaVdwForce_setUseNeighborList" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      (arg1)->setUseNeighborList(arg2);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AmoebaVdwForce_getUseNeighborList(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::AmoebaVdwForce *arg1 = (OpenMM::AmoebaVdwForce *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:AmoebaVdwForce_getUseNeighborList",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__AmoebaVdwForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AmoebaVdwForce_getUseNeighborList" "', argument " "1"" of type '" "OpenMM::AmoebaVdwForce const *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::AmoebaVdwForce * >(argp1);
  {
    try {
      result = (int)((OpenMM::AmoebaVdwForce const *)arg1)->getUseNeighborList();
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AmoebaVdwForce_setPBC(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::AmoebaVdwForce *arg1 = (OpenMM::AmoebaVdwForce *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:AmoebaVdwForce_setPBC",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__AmoebaVdwForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AmoebaVdwForce_setPBC" "', argument " "1"" of type '" "OpenMM::AmoebaVdwForce *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::AmoebaVdwForce * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AmoebaVdwForce_setPBC" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      (arg1)->setPBC(arg2);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AmoebaVdwForce_getPBC(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::AmoebaVdwForce *arg1 = (OpenMM::AmoebaVdwForce *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:AmoebaVdwForce_getPBC",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__AmoebaVdwForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AmoebaVdwForce_getPBC" "', argument " "1"" of type '" "OpenMM::AmoebaVdwForce const *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::AmoebaVdwForce * >(argp1);
  {
    try {
      result = (int)((OpenMM::AmoebaVdwForce const *)arg1)->getPBC();
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_AmoebaVdwForce__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::AmoebaVdwForce *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  OpenMM::AmoebaVdwForce *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_AmoebaVdwForce",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_OpenMM__AmoebaVdwForce,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_AmoebaVdwForce" "', argument " "1"" of type '" "OpenMM::AmoebaVdwForce const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_AmoebaVdwForce" "', argument " "1"" of type '" "OpenMM::AmoebaVdwForce const &""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::AmoebaVdwForce * >(argp1);
  {
    try {
      result = (OpenMM::AmoebaVdwForce *)new OpenMM::AmoebaVdwForce((OpenMM::AmoebaVdwForce const &)*arg1);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_OpenMM__AmoebaVdwForce, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_AmoebaVdwForce(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 1); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_AmoebaVdwForce__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_OpenMM__AmoebaVdwForce, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_AmoebaVdwForce__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_AmoebaVdwForce'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    OpenMM::AmoebaVdwForce()\n"
    "    OpenMM::AmoebaVdwForce::AmoebaVdwForce(OpenMM::AmoebaVdwForce const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_AmoebaVdwForce(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::AmoebaVdwForce *arg1 = (OpenMM::AmoebaVdwForce *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_AmoebaVdwForce",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__AmoebaVdwForce, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_AmoebaVdwForce" "', argument " "1"" of type '" "OpenMM::AmoebaVdwForce *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::AmoebaVdwForce * >(argp1);
  {
    try {
      delete arg1;
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *AmoebaVdwForce_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_OpenMM__AmoebaVdwForce, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_AmoebaWcaDispersionForce__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::AmoebaWcaDispersionForce *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_AmoebaWcaDispersionForce")) SWIG_fail;
  {
    try {
      result = (OpenMM::AmoebaWcaDispersionForce *)new OpenMM::AmoebaWcaDispersionForce();
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_OpenMM__AmoebaWcaDispersionForce, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AmoebaWcaDispersionForce_getNumParticles(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::AmoebaWcaDispersionForce *arg1 = (OpenMM::AmoebaWcaDispersionForce *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:AmoebaWcaDispersionForce_getNumParticles",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__AmoebaWcaDispersionForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AmoebaWcaDispersionForce_getNumParticles" "', argument " "1"" of type '" "OpenMM::AmoebaWcaDispersionForce const *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::AmoebaWcaDispersionForce * >(argp1);
  {
    try {
      result = (int)((OpenMM::AmoebaWcaDispersionForce const *)arg1)->getNumParticles();
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AmoebaWcaDispersionForce_setParticleParameters(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::AmoebaWcaDispersionForce *arg1 = (OpenMM::AmoebaWcaDispersionForce *) 0 ;
  int arg2 ;
  double arg3 ;
  double arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:AmoebaWcaDispersionForce_setParticleParameters",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__AmoebaWcaDispersionForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AmoebaWcaDispersionForce_setParticleParameters" "', argument " "1"" of type '" "OpenMM::AmoebaWcaDispersionForce *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::AmoebaWcaDispersionForce * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AmoebaWcaDispersionForce_setParticleParameters" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "AmoebaWcaDispersionForce_setParticleParameters" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "AmoebaWcaDispersionForce_setParticleParameters" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  {
    try {
      (arg1)->setParticleParameters(arg2,arg3,arg4);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AmoebaWcaDispersionForce_getParticleParameters(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::AmoebaWcaDispersionForce *arg1 = (OpenMM::AmoebaWcaDispersionForce *) 0 ;
  int arg2 ;
  double *arg3 = 0 ;
  double *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  double temp3 ;
  int res3 = SWIG_TMPOBJ ;
  double temp4 ;
  int res4 = SWIG_TMPOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  arg3 = &temp3;
  arg4 = &temp4;
  if (!PyArg_ParseTuple(args,(char *)"OO:AmoebaWcaDispersionForce_getParticleParameters",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__AmoebaWcaDispersionForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AmoebaWcaDispersionForce_getParticleParameters" "', argument " "1"" of type '" "OpenMM::AmoebaWcaDispersionForce const *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::AmoebaWcaDispersionForce * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AmoebaWcaDispersionForce_getParticleParameters" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      ((OpenMM::AmoebaWcaDispersionForce const *)arg1)->getParticleParameters(arg2,*arg3,*arg4);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsTmpObj(res3)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_From_double((*arg3)));
  } else {
    int new_flags = SWIG_IsNewObj(res3) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg3), SWIGTYPE_p_double, new_flags));
  }
  if (SWIG_IsTmpObj(res4)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_From_double((*arg4)));
  } else {
    int new_flags = SWIG_IsNewObj(res4) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg4), SWIGTYPE_p_double, new_flags));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AmoebaWcaDispersionForce_addParticle(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::AmoebaWcaDispersionForce *arg1 = (OpenMM::AmoebaWcaDispersionForce *) 0 ;
  double arg2 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:AmoebaWcaDispersionForce_addParticle",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__AmoebaWcaDispersionForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AmoebaWcaDispersionForce_addParticle" "', argument " "1"" of type '" "OpenMM::AmoebaWcaDispersionForce *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::AmoebaWcaDispersionForce * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AmoebaWcaDispersionForce_addParticle" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "AmoebaWcaDispersionForce_addParticle" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      result = (int)(arg1)->addParticle(arg2,arg3);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AmoebaWcaDispersionForce_getEpso(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::AmoebaWcaDispersionForce *arg1 = (OpenMM::AmoebaWcaDispersionForce *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:AmoebaWcaDispersionForce_getEpso",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__AmoebaWcaDispersionForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AmoebaWcaDispersionForce_getEpso" "', argument " "1"" of type '" "OpenMM::AmoebaWcaDispersionForce const *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::AmoebaWcaDispersionForce * >(argp1);
  {
    try {
      result = (double)((OpenMM::AmoebaWcaDispersionForce const *)arg1)->getEpso();
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AmoebaWcaDispersionForce_getEpsh(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::AmoebaWcaDispersionForce *arg1 = (OpenMM::AmoebaWcaDispersionForce *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:AmoebaWcaDispersionForce_getEpsh",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__AmoebaWcaDispersionForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AmoebaWcaDispersionForce_getEpsh" "', argument " "1"" of type '" "OpenMM::AmoebaWcaDispersionForce const *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::AmoebaWcaDispersionForce * >(argp1);
  {
    try {
      result = (double)((OpenMM::AmoebaWcaDispersionForce const *)arg1)->getEpsh();
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AmoebaWcaDispersionForce_getRmino(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::AmoebaWcaDispersionForce *arg1 = (OpenMM::AmoebaWcaDispersionForce *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:AmoebaWcaDispersionForce_getRmino",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__AmoebaWcaDispersionForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AmoebaWcaDispersionForce_getRmino" "', argument " "1"" of type '" "OpenMM::AmoebaWcaDispersionForce const *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::AmoebaWcaDispersionForce * >(argp1);
  {
    try {
      result = (double)((OpenMM::AmoebaWcaDispersionForce const *)arg1)->getRmino();
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AmoebaWcaDispersionForce_getRminh(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::AmoebaWcaDispersionForce *arg1 = (OpenMM::AmoebaWcaDispersionForce *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:AmoebaWcaDispersionForce_getRminh",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__AmoebaWcaDispersionForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AmoebaWcaDispersionForce_getRminh" "', argument " "1"" of type '" "OpenMM::AmoebaWcaDispersionForce const *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::AmoebaWcaDispersionForce * >(argp1);
  {
    try {
      result = (double)((OpenMM::AmoebaWcaDispersionForce const *)arg1)->getRminh();
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AmoebaWcaDispersionForce_getAwater(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::AmoebaWcaDispersionForce *arg1 = (OpenMM::AmoebaWcaDispersionForce *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:AmoebaWcaDispersionForce_getAwater",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__AmoebaWcaDispersionForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AmoebaWcaDispersionForce_getAwater" "', argument " "1"" of type '" "OpenMM::AmoebaWcaDispersionForce const *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::AmoebaWcaDispersionForce * >(argp1);
  {
    try {
      result = (double)((OpenMM::AmoebaWcaDispersionForce const *)arg1)->getAwater();
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AmoebaWcaDispersionForce_getShctd(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::AmoebaWcaDispersionForce *arg1 = (OpenMM::AmoebaWcaDispersionForce *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:AmoebaWcaDispersionForce_getShctd",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__AmoebaWcaDispersionForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AmoebaWcaDispersionForce_getShctd" "', argument " "1"" of type '" "OpenMM::AmoebaWcaDispersionForce const *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::AmoebaWcaDispersionForce * >(argp1);
  {
    try {
      result = (double)((OpenMM::AmoebaWcaDispersionForce const *)arg1)->getShctd();
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AmoebaWcaDispersionForce_getDispoff(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::AmoebaWcaDispersionForce *arg1 = (OpenMM::AmoebaWcaDispersionForce *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:AmoebaWcaDispersionForce_getDispoff",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__AmoebaWcaDispersionForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AmoebaWcaDispersionForce_getDispoff" "', argument " "1"" of type '" "OpenMM::AmoebaWcaDispersionForce const *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::AmoebaWcaDispersionForce * >(argp1);
  {
    try {
      result = (double)((OpenMM::AmoebaWcaDispersionForce const *)arg1)->getDispoff();
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AmoebaWcaDispersionForce_getSlevy(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::AmoebaWcaDispersionForce *arg1 = (OpenMM::AmoebaWcaDispersionForce *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:AmoebaWcaDispersionForce_getSlevy",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__AmoebaWcaDispersionForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AmoebaWcaDispersionForce_getSlevy" "', argument " "1"" of type '" "OpenMM::AmoebaWcaDispersionForce const *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::AmoebaWcaDispersionForce * >(argp1);
  {
    try {
      result = (double)((OpenMM::AmoebaWcaDispersionForce const *)arg1)->getSlevy();
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AmoebaWcaDispersionForce_setEpso(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::AmoebaWcaDispersionForce *arg1 = (OpenMM::AmoebaWcaDispersionForce *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:AmoebaWcaDispersionForce_setEpso",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__AmoebaWcaDispersionForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AmoebaWcaDispersionForce_setEpso" "', argument " "1"" of type '" "OpenMM::AmoebaWcaDispersionForce *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::AmoebaWcaDispersionForce * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AmoebaWcaDispersionForce_setEpso" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->setEpso(arg2);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AmoebaWcaDispersionForce_setEpsh(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::AmoebaWcaDispersionForce *arg1 = (OpenMM::AmoebaWcaDispersionForce *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:AmoebaWcaDispersionForce_setEpsh",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__AmoebaWcaDispersionForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AmoebaWcaDispersionForce_setEpsh" "', argument " "1"" of type '" "OpenMM::AmoebaWcaDispersionForce *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::AmoebaWcaDispersionForce * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AmoebaWcaDispersionForce_setEpsh" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->setEpsh(arg2);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AmoebaWcaDispersionForce_setRmino(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::AmoebaWcaDispersionForce *arg1 = (OpenMM::AmoebaWcaDispersionForce *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:AmoebaWcaDispersionForce_setRmino",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__AmoebaWcaDispersionForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AmoebaWcaDispersionForce_setRmino" "', argument " "1"" of type '" "OpenMM::AmoebaWcaDispersionForce *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::AmoebaWcaDispersionForce * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AmoebaWcaDispersionForce_setRmino" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->setRmino(arg2);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AmoebaWcaDispersionForce_setRminh(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::AmoebaWcaDispersionForce *arg1 = (OpenMM::AmoebaWcaDispersionForce *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:AmoebaWcaDispersionForce_setRminh",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__AmoebaWcaDispersionForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AmoebaWcaDispersionForce_setRminh" "', argument " "1"" of type '" "OpenMM::AmoebaWcaDispersionForce *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::AmoebaWcaDispersionForce * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AmoebaWcaDispersionForce_setRminh" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->setRminh(arg2);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AmoebaWcaDispersionForce_setAwater(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::AmoebaWcaDispersionForce *arg1 = (OpenMM::AmoebaWcaDispersionForce *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:AmoebaWcaDispersionForce_setAwater",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__AmoebaWcaDispersionForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AmoebaWcaDispersionForce_setAwater" "', argument " "1"" of type '" "OpenMM::AmoebaWcaDispersionForce *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::AmoebaWcaDispersionForce * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AmoebaWcaDispersionForce_setAwater" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->setAwater(arg2);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AmoebaWcaDispersionForce_setShctd(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::AmoebaWcaDispersionForce *arg1 = (OpenMM::AmoebaWcaDispersionForce *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:AmoebaWcaDispersionForce_setShctd",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__AmoebaWcaDispersionForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AmoebaWcaDispersionForce_setShctd" "', argument " "1"" of type '" "OpenMM::AmoebaWcaDispersionForce *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::AmoebaWcaDispersionForce * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AmoebaWcaDispersionForce_setShctd" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->setShctd(arg2);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AmoebaWcaDispersionForce_setDispoff(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::AmoebaWcaDispersionForce *arg1 = (OpenMM::AmoebaWcaDispersionForce *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:AmoebaWcaDispersionForce_setDispoff",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__AmoebaWcaDispersionForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AmoebaWcaDispersionForce_setDispoff" "', argument " "1"" of type '" "OpenMM::AmoebaWcaDispersionForce *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::AmoebaWcaDispersionForce * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AmoebaWcaDispersionForce_setDispoff" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->setDispoff(arg2);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AmoebaWcaDispersionForce_setSlevy(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::AmoebaWcaDispersionForce *arg1 = (OpenMM::AmoebaWcaDispersionForce *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:AmoebaWcaDispersionForce_setSlevy",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__AmoebaWcaDispersionForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AmoebaWcaDispersionForce_setSlevy" "', argument " "1"" of type '" "OpenMM::AmoebaWcaDispersionForce *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::AmoebaWcaDispersionForce * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AmoebaWcaDispersionForce_setSlevy" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->setSlevy(arg2);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_AmoebaWcaDispersionForce__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::AmoebaWcaDispersionForce *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  OpenMM::AmoebaWcaDispersionForce *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_AmoebaWcaDispersionForce",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_OpenMM__AmoebaWcaDispersionForce,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_AmoebaWcaDispersionForce" "', argument " "1"" of type '" "OpenMM::AmoebaWcaDispersionForce const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_AmoebaWcaDispersionForce" "', argument " "1"" of type '" "OpenMM::AmoebaWcaDispersionForce const &""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::AmoebaWcaDispersionForce * >(argp1);
  {
    try {
      result = (OpenMM::AmoebaWcaDispersionForce *)new OpenMM::AmoebaWcaDispersionForce((OpenMM::AmoebaWcaDispersionForce const &)*arg1);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_OpenMM__AmoebaWcaDispersionForce, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_AmoebaWcaDispersionForce(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 1); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_AmoebaWcaDispersionForce__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_OpenMM__AmoebaWcaDispersionForce, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_AmoebaWcaDispersionForce__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_AmoebaWcaDispersionForce'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    OpenMM::AmoebaWcaDispersionForce()\n"
    "    OpenMM::AmoebaWcaDispersionForce::AmoebaWcaDispersionForce(OpenMM::AmoebaWcaDispersionForce const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_AmoebaWcaDispersionForce(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::AmoebaWcaDispersionForce *arg1 = (OpenMM::AmoebaWcaDispersionForce *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_AmoebaWcaDispersionForce",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__AmoebaWcaDispersionForce, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_AmoebaWcaDispersionForce" "', argument " "1"" of type '" "OpenMM::AmoebaWcaDispersionForce *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::AmoebaWcaDispersionForce * >(argp1);
  {
    try {
      delete arg1;
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *AmoebaWcaDispersionForce_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_OpenMM__AmoebaWcaDispersionForce, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_AndersenThermostat__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  OpenMM::AndersenThermostat *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_AndersenThermostat",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_AndersenThermostat" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_AndersenThermostat" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (OpenMM::AndersenThermostat *)new OpenMM::AndersenThermostat(arg1,arg2);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_OpenMM__AndersenThermostat, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AndersenThermostat_Temperature(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":AndersenThermostat_Temperature")) SWIG_fail;
  {
    try {
      result = (std::string *) &OpenMM::AndersenThermostat::Temperature();
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AndersenThermostat_CollisionFrequency(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":AndersenThermostat_CollisionFrequency")) SWIG_fail;
  {
    try {
      result = (std::string *) &OpenMM::AndersenThermostat::CollisionFrequency();
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AndersenThermostat_getDefaultTemperature(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::AndersenThermostat *arg1 = (OpenMM::AndersenThermostat *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:AndersenThermostat_getDefaultTemperature",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__AndersenThermostat, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AndersenThermostat_getDefaultTemperature" "', argument " "1"" of type '" "OpenMM::AndersenThermostat const *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::AndersenThermostat * >(argp1);
  {
    try {
      result = (double)((OpenMM::AndersenThermostat const *)arg1)->getDefaultTemperature();
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AndersenThermostat_getDefaultCollisionFrequency(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::AndersenThermostat *arg1 = (OpenMM::AndersenThermostat *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:AndersenThermostat_getDefaultCollisionFrequency",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__AndersenThermostat, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AndersenThermostat_getDefaultCollisionFrequency" "', argument " "1"" of type '" "OpenMM::AndersenThermostat const *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::AndersenThermostat * >(argp1);
  {
    try {
      result = (double)((OpenMM::AndersenThermostat const *)arg1)->getDefaultCollisionFrequency();
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AndersenThermostat_getRandomNumberSeed(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::AndersenThermostat *arg1 = (OpenMM::AndersenThermostat *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:AndersenThermostat_getRandomNumberSeed",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__AndersenThermostat, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AndersenThermostat_getRandomNumberSeed" "', argument " "1"" of type '" "OpenMM::AndersenThermostat const *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::AndersenThermostat * >(argp1);
  {
    try {
      result = (int)((OpenMM::AndersenThermostat const *)arg1)->getRandomNumberSeed();
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AndersenThermostat_setRandomNumberSeed(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::AndersenThermostat *arg1 = (OpenMM::AndersenThermostat *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:AndersenThermostat_setRandomNumberSeed",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__AndersenThermostat, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AndersenThermostat_setRandomNumberSeed" "', argument " "1"" of type '" "OpenMM::AndersenThermostat *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::AndersenThermostat * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AndersenThermostat_setRandomNumberSeed" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      (arg1)->setRandomNumberSeed(arg2);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_AndersenThermostat__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::AndersenThermostat *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  OpenMM::AndersenThermostat *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_AndersenThermostat",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_OpenMM__AndersenThermostat,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_AndersenThermostat" "', argument " "1"" of type '" "OpenMM::AndersenThermostat const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_AndersenThermostat" "', argument " "1"" of type '" "OpenMM::AndersenThermostat const &""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::AndersenThermostat * >(argp1);
  {
    try {
      result = (OpenMM::AndersenThermostat *)new OpenMM::AndersenThermostat((OpenMM::AndersenThermostat const &)*arg1);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_OpenMM__AndersenThermostat, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_AndersenThermostat(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_OpenMM__AndersenThermostat, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_AndersenThermostat__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_AndersenThermostat__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_AndersenThermostat'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    OpenMM::AndersenThermostat(double,double)\n"
    "    OpenMM::AndersenThermostat::AndersenThermostat(OpenMM::AndersenThermostat const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_AndersenThermostat(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::AndersenThermostat *arg1 = (OpenMM::AndersenThermostat *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_AndersenThermostat",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__AndersenThermostat, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_AndersenThermostat" "', argument " "1"" of type '" "OpenMM::AndersenThermostat *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::AndersenThermostat * >(argp1);
  {
    try {
      delete arg1;
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *AndersenThermostat_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_OpenMM__AndersenThermostat, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_delete_Integrator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::Integrator *arg1 = (OpenMM::Integrator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_Integrator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__Integrator, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Integrator" "', argument " "1"" of type '" "OpenMM::Integrator *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::Integrator * >(argp1);
  {
    try {
      delete arg1;
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Integrator_getStepSize(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::Integrator *arg1 = (OpenMM::Integrator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Integrator_getStepSize",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__Integrator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Integrator_getStepSize" "', argument " "1"" of type '" "OpenMM::Integrator const *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::Integrator * >(argp1);
  {
    try {
      result = (double)((OpenMM::Integrator const *)arg1)->getStepSize();
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Integrator_setStepSize(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::Integrator *arg1 = (OpenMM::Integrator *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Integrator_setStepSize",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__Integrator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Integrator_setStepSize" "', argument " "1"" of type '" "OpenMM::Integrator *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::Integrator * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Integrator_setStepSize" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->setStepSize(arg2);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Integrator_getConstraintTolerance(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::Integrator *arg1 = (OpenMM::Integrator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Integrator_getConstraintTolerance",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__Integrator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Integrator_getConstraintTolerance" "', argument " "1"" of type '" "OpenMM::Integrator const *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::Integrator * >(argp1);
  {
    try {
      result = (double)((OpenMM::Integrator const *)arg1)->getConstraintTolerance();
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Integrator_setConstraintTolerance(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::Integrator *arg1 = (OpenMM::Integrator *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Integrator_setConstraintTolerance",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__Integrator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Integrator_setConstraintTolerance" "', argument " "1"" of type '" "OpenMM::Integrator *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::Integrator * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Integrator_setConstraintTolerance" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->setConstraintTolerance(arg2);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Integrator_step(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::Integrator *arg1 = (OpenMM::Integrator *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Integrator_step",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__Integrator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Integrator_step" "', argument " "1"" of type '" "OpenMM::Integrator *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::Integrator * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Integrator_step" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      (arg1)->step(arg2);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Integrator_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_OpenMM__Integrator, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_BrownianIntegrator__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  OpenMM::BrownianIntegrator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_BrownianIntegrator",&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_BrownianIntegrator" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_BrownianIntegrator" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_BrownianIntegrator" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      result = (OpenMM::BrownianIntegrator *)new OpenMM::BrownianIntegrator(arg1,arg2,arg3);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_OpenMM__BrownianIntegrator, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BrownianIntegrator_getTemperature(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::BrownianIntegrator *arg1 = (OpenMM::BrownianIntegrator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BrownianIntegrator_getTemperature",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__BrownianIntegrator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BrownianIntegrator_getTemperature" "', argument " "1"" of type '" "OpenMM::BrownianIntegrator const *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::BrownianIntegrator * >(argp1);
  {
    try {
      result = (double)((OpenMM::BrownianIntegrator const *)arg1)->getTemperature();
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BrownianIntegrator_setTemperature(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::BrownianIntegrator *arg1 = (OpenMM::BrownianIntegrator *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BrownianIntegrator_setTemperature",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__BrownianIntegrator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BrownianIntegrator_setTemperature" "', argument " "1"" of type '" "OpenMM::BrownianIntegrator *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::BrownianIntegrator * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BrownianIntegrator_setTemperature" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->setTemperature(arg2);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BrownianIntegrator_getFriction(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::BrownianIntegrator *arg1 = (OpenMM::BrownianIntegrator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BrownianIntegrator_getFriction",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__BrownianIntegrator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BrownianIntegrator_getFriction" "', argument " "1"" of type '" "OpenMM::BrownianIntegrator const *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::BrownianIntegrator * >(argp1);
  {
    try {
      result = (double)((OpenMM::BrownianIntegrator const *)arg1)->getFriction();
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BrownianIntegrator_setFriction(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::BrownianIntegrator *arg1 = (OpenMM::BrownianIntegrator *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BrownianIntegrator_setFriction",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__BrownianIntegrator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BrownianIntegrator_setFriction" "', argument " "1"" of type '" "OpenMM::BrownianIntegrator *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::BrownianIntegrator * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BrownianIntegrator_setFriction" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->setFriction(arg2);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BrownianIntegrator_getRandomNumberSeed(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::BrownianIntegrator *arg1 = (OpenMM::BrownianIntegrator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BrownianIntegrator_getRandomNumberSeed",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__BrownianIntegrator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BrownianIntegrator_getRandomNumberSeed" "', argument " "1"" of type '" "OpenMM::BrownianIntegrator const *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::BrownianIntegrator * >(argp1);
  {
    try {
      result = (int)((OpenMM::BrownianIntegrator const *)arg1)->getRandomNumberSeed();
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BrownianIntegrator_setRandomNumberSeed(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::BrownianIntegrator *arg1 = (OpenMM::BrownianIntegrator *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BrownianIntegrator_setRandomNumberSeed",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__BrownianIntegrator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BrownianIntegrator_setRandomNumberSeed" "', argument " "1"" of type '" "OpenMM::BrownianIntegrator *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::BrownianIntegrator * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BrownianIntegrator_setRandomNumberSeed" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      (arg1)->setRandomNumberSeed(arg2);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BrownianIntegrator_step(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::BrownianIntegrator *arg1 = (OpenMM::BrownianIntegrator *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BrownianIntegrator_step",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__BrownianIntegrator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BrownianIntegrator_step" "', argument " "1"" of type '" "OpenMM::BrownianIntegrator *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::BrownianIntegrator * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BrownianIntegrator_step" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      (arg1)->step(arg2);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_BrownianIntegrator__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::BrownianIntegrator *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  OpenMM::BrownianIntegrator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_BrownianIntegrator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_OpenMM__BrownianIntegrator,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_BrownianIntegrator" "', argument " "1"" of type '" "OpenMM::BrownianIntegrator const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_BrownianIntegrator" "', argument " "1"" of type '" "OpenMM::BrownianIntegrator const &""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::BrownianIntegrator * >(argp1);
  {
    try {
      result = (OpenMM::BrownianIntegrator *)new OpenMM::BrownianIntegrator((OpenMM::BrownianIntegrator const &)*arg1);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_OpenMM__BrownianIntegrator, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_BrownianIntegrator(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_OpenMM__BrownianIntegrator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_BrownianIntegrator__SWIG_1(self, args);
    }
  }
  if (argc == 3) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_BrownianIntegrator__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_BrownianIntegrator'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    OpenMM::BrownianIntegrator(double,double,double)\n"
    "    OpenMM::BrownianIntegrator::BrownianIntegrator(OpenMM::BrownianIntegrator const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_BrownianIntegrator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::BrownianIntegrator *arg1 = (OpenMM::BrownianIntegrator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_BrownianIntegrator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__BrownianIntegrator, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_BrownianIntegrator" "', argument " "1"" of type '" "OpenMM::BrownianIntegrator *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::BrownianIntegrator * >(argp1);
  {
    try {
      delete arg1;
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *BrownianIntegrator_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_OpenMM__BrownianIntegrator, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_CMAPTorsionForce__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::CMAPTorsionForce *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_CMAPTorsionForce")) SWIG_fail;
  {
    try {
      result = (OpenMM::CMAPTorsionForce *)new OpenMM::CMAPTorsionForce();
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_OpenMM__CMAPTorsionForce, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMAPTorsionForce_getNumMaps(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::CMAPTorsionForce *arg1 = (OpenMM::CMAPTorsionForce *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CMAPTorsionForce_getNumMaps",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__CMAPTorsionForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CMAPTorsionForce_getNumMaps" "', argument " "1"" of type '" "OpenMM::CMAPTorsionForce const *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::CMAPTorsionForce * >(argp1);
  {
    try {
      result = (int)((OpenMM::CMAPTorsionForce const *)arg1)->getNumMaps();
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMAPTorsionForce_getNumTorsions(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::CMAPTorsionForce *arg1 = (OpenMM::CMAPTorsionForce *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CMAPTorsionForce_getNumTorsions",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__CMAPTorsionForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CMAPTorsionForce_getNumTorsions" "', argument " "1"" of type '" "OpenMM::CMAPTorsionForce const *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::CMAPTorsionForce * >(argp1);
  {
    try {
      result = (int)((OpenMM::CMAPTorsionForce const *)arg1)->getNumTorsions();
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMAPTorsionForce_addMap(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::CMAPTorsionForce *arg1 = (OpenMM::CMAPTorsionForce *) 0 ;
  int arg2 ;
  std::vector< double,std::allocator< double > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:CMAPTorsionForce_addMap",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__CMAPTorsionForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CMAPTorsionForce_addMap" "', argument " "1"" of type '" "OpenMM::CMAPTorsionForce *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::CMAPTorsionForce * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CMAPTorsionForce_addMap" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    std::vector<double,std::allocator< double > > *ptr = (std::vector<double,std::allocator< double > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CMAPTorsionForce_addMap" "', argument " "3"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CMAPTorsionForce_addMap" "', argument " "3"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      result = (int)(arg1)->addMap(arg2,(std::vector< double,std::allocator< double > > const &)*arg3);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMAPTorsionForce_getMapParameters(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::CMAPTorsionForce *arg1 = (OpenMM::CMAPTorsionForce *) 0 ;
  int arg2 ;
  int *arg3 = 0 ;
  std::vector< double,std::allocator< double > > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int temp3 ;
  int res3 = SWIG_TMPOBJ ;
  std::vector< double,std::allocator< double > > temp4 ;
  int res4 = SWIG_TMPOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  arg3 = &temp3;
  arg4 = &temp4;
  if (!PyArg_ParseTuple(args,(char *)"OO:CMAPTorsionForce_getMapParameters",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__CMAPTorsionForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CMAPTorsionForce_getMapParameters" "', argument " "1"" of type '" "OpenMM::CMAPTorsionForce const *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::CMAPTorsionForce * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CMAPTorsionForce_getMapParameters" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      ((OpenMM::CMAPTorsionForce const *)arg1)->getMapParameters(arg2,*arg3,*arg4);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsTmpObj(res3)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_From_int((*arg3)));
  } else {
    int new_flags = SWIG_IsNewObj(res3) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg3), SWIGTYPE_p_int, new_flags));
  }
  if (SWIG_IsTmpObj(res4)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, swig::from((*arg4)));
  } else {
    int new_flags = SWIG_IsNewObj(res4) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg4), SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, new_flags));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMAPTorsionForce_setMapParameters(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::CMAPTorsionForce *arg1 = (OpenMM::CMAPTorsionForce *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< double,std::allocator< double > > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:CMAPTorsionForce_setMapParameters",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__CMAPTorsionForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CMAPTorsionForce_setMapParameters" "', argument " "1"" of type '" "OpenMM::CMAPTorsionForce *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::CMAPTorsionForce * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CMAPTorsionForce_setMapParameters" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CMAPTorsionForce_setMapParameters" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    std::vector<double,std::allocator< double > > *ptr = (std::vector<double,std::allocator< double > > *)0;
    res4 = swig::asptr(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "CMAPTorsionForce_setMapParameters" "', argument " "4"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CMAPTorsionForce_setMapParameters" "', argument " "4"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    arg4 = ptr;
  }
  {
    try {
      (arg1)->setMapParameters(arg2,arg3,(std::vector< double,std::allocator< double > > const &)*arg4);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMAPTorsionForce_addTorsion(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::CMAPTorsionForce *arg1 = (OpenMM::CMAPTorsionForce *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  int arg7 ;
  int arg8 ;
  int arg9 ;
  int arg10 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  int val6 ;
  int ecode6 = 0 ;
  int val7 ;
  int ecode7 = 0 ;
  int val8 ;
  int ecode8 = 0 ;
  int val9 ;
  int ecode9 = 0 ;
  int val10 ;
  int ecode10 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  PyObject * obj8 = 0 ;
  PyObject * obj9 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOOOOO:CMAPTorsionForce_addTorsion",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7,&obj8,&obj9)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__CMAPTorsionForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CMAPTorsionForce_addTorsion" "', argument " "1"" of type '" "OpenMM::CMAPTorsionForce *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::CMAPTorsionForce * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CMAPTorsionForce_addTorsion" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CMAPTorsionForce_addTorsion" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "CMAPTorsionForce_addTorsion" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  ecode5 = SWIG_AsVal_int(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "CMAPTorsionForce_addTorsion" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  ecode6 = SWIG_AsVal_int(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "CMAPTorsionForce_addTorsion" "', argument " "6"" of type '" "int""'");
  } 
  arg6 = static_cast< int >(val6);
  ecode7 = SWIG_AsVal_int(obj6, &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "CMAPTorsionForce_addTorsion" "', argument " "7"" of type '" "int""'");
  } 
  arg7 = static_cast< int >(val7);
  ecode8 = SWIG_AsVal_int(obj7, &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "CMAPTorsionForce_addTorsion" "', argument " "8"" of type '" "int""'");
  } 
  arg8 = static_cast< int >(val8);
  ecode9 = SWIG_AsVal_int(obj8, &val9);
  if (!SWIG_IsOK(ecode9)) {
    SWIG_exception_fail(SWIG_ArgError(ecode9), "in method '" "CMAPTorsionForce_addTorsion" "', argument " "9"" of type '" "int""'");
  } 
  arg9 = static_cast< int >(val9);
  ecode10 = SWIG_AsVal_int(obj9, &val10);
  if (!SWIG_IsOK(ecode10)) {
    SWIG_exception_fail(SWIG_ArgError(ecode10), "in method '" "CMAPTorsionForce_addTorsion" "', argument " "10"" of type '" "int""'");
  } 
  arg10 = static_cast< int >(val10);
  {
    try {
      result = (int)(arg1)->addTorsion(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMAPTorsionForce_getTorsionParameters(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::CMAPTorsionForce *arg1 = (OpenMM::CMAPTorsionForce *) 0 ;
  int arg2 ;
  int *arg3 = 0 ;
  int *arg4 = 0 ;
  int *arg5 = 0 ;
  int *arg6 = 0 ;
  int *arg7 = 0 ;
  int *arg8 = 0 ;
  int *arg9 = 0 ;
  int *arg10 = 0 ;
  int *arg11 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int temp3 ;
  int res3 = SWIG_TMPOBJ ;
  int temp4 ;
  int res4 = SWIG_TMPOBJ ;
  int temp5 ;
  int res5 = SWIG_TMPOBJ ;
  int temp6 ;
  int res6 = SWIG_TMPOBJ ;
  int temp7 ;
  int res7 = SWIG_TMPOBJ ;
  int temp8 ;
  int res8 = SWIG_TMPOBJ ;
  int temp9 ;
  int res9 = SWIG_TMPOBJ ;
  int temp10 ;
  int res10 = SWIG_TMPOBJ ;
  int temp11 ;
  int res11 = SWIG_TMPOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  arg3 = &temp3;
  arg4 = &temp4;
  arg5 = &temp5;
  arg6 = &temp6;
  arg7 = &temp7;
  arg8 = &temp8;
  arg9 = &temp9;
  arg10 = &temp10;
  arg11 = &temp11;
  if (!PyArg_ParseTuple(args,(char *)"OO:CMAPTorsionForce_getTorsionParameters",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__CMAPTorsionForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CMAPTorsionForce_getTorsionParameters" "', argument " "1"" of type '" "OpenMM::CMAPTorsionForce const *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::CMAPTorsionForce * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CMAPTorsionForce_getTorsionParameters" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      ((OpenMM::CMAPTorsionForce const *)arg1)->getTorsionParameters(arg2,*arg3,*arg4,*arg5,*arg6,*arg7,*arg8,*arg9,*arg10,*arg11);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsTmpObj(res3)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_From_int((*arg3)));
  } else {
    int new_flags = SWIG_IsNewObj(res3) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg3), SWIGTYPE_p_int, new_flags));
  }
  if (SWIG_IsTmpObj(res4)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_From_int((*arg4)));
  } else {
    int new_flags = SWIG_IsNewObj(res4) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg4), SWIGTYPE_p_int, new_flags));
  }
  if (SWIG_IsTmpObj(res5)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_From_int((*arg5)));
  } else {
    int new_flags = SWIG_IsNewObj(res5) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg5), SWIGTYPE_p_int, new_flags));
  }
  if (SWIG_IsTmpObj(res6)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_From_int((*arg6)));
  } else {
    int new_flags = SWIG_IsNewObj(res6) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg6), SWIGTYPE_p_int, new_flags));
  }
  if (SWIG_IsTmpObj(res7)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_From_int((*arg7)));
  } else {
    int new_flags = SWIG_IsNewObj(res7) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg7), SWIGTYPE_p_int, new_flags));
  }
  if (SWIG_IsTmpObj(res8)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_From_int((*arg8)));
  } else {
    int new_flags = SWIG_IsNewObj(res8) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg8), SWIGTYPE_p_int, new_flags));
  }
  if (SWIG_IsTmpObj(res9)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_From_int((*arg9)));
  } else {
    int new_flags = SWIG_IsNewObj(res9) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg9), SWIGTYPE_p_int, new_flags));
  }
  if (SWIG_IsTmpObj(res10)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_From_int((*arg10)));
  } else {
    int new_flags = SWIG_IsNewObj(res10) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg10), SWIGTYPE_p_int, new_flags));
  }
  if (SWIG_IsTmpObj(res11)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_From_int((*arg11)));
  } else {
    int new_flags = SWIG_IsNewObj(res11) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg11), SWIGTYPE_p_int, new_flags));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMAPTorsionForce_setTorsionParameters(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::CMAPTorsionForce *arg1 = (OpenMM::CMAPTorsionForce *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  int arg7 ;
  int arg8 ;
  int arg9 ;
  int arg10 ;
  int arg11 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  int val6 ;
  int ecode6 = 0 ;
  int val7 ;
  int ecode7 = 0 ;
  int val8 ;
  int ecode8 = 0 ;
  int val9 ;
  int ecode9 = 0 ;
  int val10 ;
  int ecode10 = 0 ;
  int val11 ;
  int ecode11 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  PyObject * obj8 = 0 ;
  PyObject * obj9 = 0 ;
  PyObject * obj10 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOOOOOO:CMAPTorsionForce_setTorsionParameters",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7,&obj8,&obj9,&obj10)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__CMAPTorsionForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CMAPTorsionForce_setTorsionParameters" "', argument " "1"" of type '" "OpenMM::CMAPTorsionForce *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::CMAPTorsionForce * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CMAPTorsionForce_setTorsionParameters" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CMAPTorsionForce_setTorsionParameters" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "CMAPTorsionForce_setTorsionParameters" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  ecode5 = SWIG_AsVal_int(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "CMAPTorsionForce_setTorsionParameters" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  ecode6 = SWIG_AsVal_int(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "CMAPTorsionForce_setTorsionParameters" "', argument " "6"" of type '" "int""'");
  } 
  arg6 = static_cast< int >(val6);
  ecode7 = SWIG_AsVal_int(obj6, &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "CMAPTorsionForce_setTorsionParameters" "', argument " "7"" of type '" "int""'");
  } 
  arg7 = static_cast< int >(val7);
  ecode8 = SWIG_AsVal_int(obj7, &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "CMAPTorsionForce_setTorsionParameters" "', argument " "8"" of type '" "int""'");
  } 
  arg8 = static_cast< int >(val8);
  ecode9 = SWIG_AsVal_int(obj8, &val9);
  if (!SWIG_IsOK(ecode9)) {
    SWIG_exception_fail(SWIG_ArgError(ecode9), "in method '" "CMAPTorsionForce_setTorsionParameters" "', argument " "9"" of type '" "int""'");
  } 
  arg9 = static_cast< int >(val9);
  ecode10 = SWIG_AsVal_int(obj9, &val10);
  if (!SWIG_IsOK(ecode10)) {
    SWIG_exception_fail(SWIG_ArgError(ecode10), "in method '" "CMAPTorsionForce_setTorsionParameters" "', argument " "10"" of type '" "int""'");
  } 
  arg10 = static_cast< int >(val10);
  ecode11 = SWIG_AsVal_int(obj10, &val11);
  if (!SWIG_IsOK(ecode11)) {
    SWIG_exception_fail(SWIG_ArgError(ecode11), "in method '" "CMAPTorsionForce_setTorsionParameters" "', argument " "11"" of type '" "int""'");
  } 
  arg11 = static_cast< int >(val11);
  {
    try {
      (arg1)->setTorsionParameters(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_CMAPTorsionForce__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::CMAPTorsionForce *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  OpenMM::CMAPTorsionForce *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_CMAPTorsionForce",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_OpenMM__CMAPTorsionForce,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_CMAPTorsionForce" "', argument " "1"" of type '" "OpenMM::CMAPTorsionForce const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_CMAPTorsionForce" "', argument " "1"" of type '" "OpenMM::CMAPTorsionForce const &""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::CMAPTorsionForce * >(argp1);
  {
    try {
      result = (OpenMM::CMAPTorsionForce *)new OpenMM::CMAPTorsionForce((OpenMM::CMAPTorsionForce const &)*arg1);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_OpenMM__CMAPTorsionForce, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_CMAPTorsionForce(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 1); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_CMAPTorsionForce__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_OpenMM__CMAPTorsionForce, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_CMAPTorsionForce__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_CMAPTorsionForce'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    OpenMM::CMAPTorsionForce()\n"
    "    OpenMM::CMAPTorsionForce::CMAPTorsionForce(OpenMM::CMAPTorsionForce const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_CMAPTorsionForce(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::CMAPTorsionForce *arg1 = (OpenMM::CMAPTorsionForce *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_CMAPTorsionForce",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__CMAPTorsionForce, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_CMAPTorsionForce" "', argument " "1"" of type '" "OpenMM::CMAPTorsionForce *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::CMAPTorsionForce * >(argp1);
  {
    try {
      delete arg1;
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *CMAPTorsionForce_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_OpenMM__CMAPTorsionForce, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_CMMotionRemover__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  OpenMM::CMMotionRemover *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_CMMotionRemover",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_CMMotionRemover" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    try {
      result = (OpenMM::CMMotionRemover *)new OpenMM::CMMotionRemover(arg1);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_OpenMM__CMMotionRemover, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_CMMotionRemover__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::CMMotionRemover *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_CMMotionRemover")) SWIG_fail;
  {
    try {
      result = (OpenMM::CMMotionRemover *)new OpenMM::CMMotionRemover();
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_OpenMM__CMMotionRemover, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMMotionRemover_getFrequency(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::CMMotionRemover *arg1 = (OpenMM::CMMotionRemover *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CMMotionRemover_getFrequency",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__CMMotionRemover, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CMMotionRemover_getFrequency" "', argument " "1"" of type '" "OpenMM::CMMotionRemover const *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::CMMotionRemover * >(argp1);
  {
    try {
      result = (int)((OpenMM::CMMotionRemover const *)arg1)->getFrequency();
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMMotionRemover_setFrequency(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::CMMotionRemover *arg1 = (OpenMM::CMMotionRemover *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CMMotionRemover_setFrequency",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__CMMotionRemover, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CMMotionRemover_setFrequency" "', argument " "1"" of type '" "OpenMM::CMMotionRemover *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::CMMotionRemover * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CMMotionRemover_setFrequency" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      (arg1)->setFrequency(arg2);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_CMMotionRemover__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::CMMotionRemover *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  OpenMM::CMMotionRemover *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_CMMotionRemover",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_OpenMM__CMMotionRemover,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_CMMotionRemover" "', argument " "1"" of type '" "OpenMM::CMMotionRemover const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_CMMotionRemover" "', argument " "1"" of type '" "OpenMM::CMMotionRemover const &""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::CMMotionRemover * >(argp1);
  {
    try {
      result = (OpenMM::CMMotionRemover *)new OpenMM::CMMotionRemover((OpenMM::CMMotionRemover const &)*arg1);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_OpenMM__CMMotionRemover, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_CMMotionRemover(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 1); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_CMMotionRemover__SWIG_1(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_OpenMM__CMMotionRemover, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_CMMotionRemover__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_CMMotionRemover__SWIG_0(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_CMMotionRemover'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    OpenMM::CMMotionRemover(int)\n"
    "    OpenMM::CMMotionRemover()\n"
    "    OpenMM::CMMotionRemover::CMMotionRemover(OpenMM::CMMotionRemover const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_CMMotionRemover(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::CMMotionRemover *arg1 = (OpenMM::CMMotionRemover *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_CMMotionRemover",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__CMMotionRemover, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_CMMotionRemover" "', argument " "1"" of type '" "OpenMM::CMMotionRemover *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::CMMotionRemover * >(argp1);
  {
    try {
      delete arg1;
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *CMMotionRemover_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_OpenMM__CMMotionRemover, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_Context__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::System *arg1 = 0 ;
  OpenMM::Integrator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  OpenMM::Context *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_Context",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_OpenMM__System,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Context" "', argument " "1"" of type '" "OpenMM::System &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Context" "', argument " "1"" of type '" "OpenMM::System &""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::System * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_OpenMM__Integrator,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_Context" "', argument " "2"" of type '" "OpenMM::Integrator &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Context" "', argument " "2"" of type '" "OpenMM::Integrator &""'"); 
  }
  arg2 = reinterpret_cast< OpenMM::Integrator * >(argp2);
  {
    try {
      result = (OpenMM::Context *)new OpenMM::Context(*arg1,*arg2);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_OpenMM__Context, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Context__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::System *arg1 = 0 ;
  OpenMM::Integrator *arg2 = 0 ;
  OpenMM::Platform *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  OpenMM::Context *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_Context",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_OpenMM__System,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Context" "', argument " "1"" of type '" "OpenMM::System &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Context" "', argument " "1"" of type '" "OpenMM::System &""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::System * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_OpenMM__Integrator,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_Context" "', argument " "2"" of type '" "OpenMM::Integrator &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Context" "', argument " "2"" of type '" "OpenMM::Integrator &""'"); 
  }
  arg2 = reinterpret_cast< OpenMM::Integrator * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_OpenMM__Platform,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_Context" "', argument " "3"" of type '" "OpenMM::Platform &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Context" "', argument " "3"" of type '" "OpenMM::Platform &""'"); 
  }
  arg3 = reinterpret_cast< OpenMM::Platform * >(argp3);
  {
    try {
      result = (OpenMM::Context *)new OpenMM::Context(*arg1,*arg2,*arg3);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_OpenMM__Context, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Context__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::System *arg1 = 0 ;
  OpenMM::Integrator *arg2 = 0 ;
  OpenMM::Platform *arg3 = 0 ;
  std::map< std::string,std::string,std::less< std::string >,std::allocator< std::pair< std::string const,std::string > > > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  OpenMM::Context *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:new_Context",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_OpenMM__System,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Context" "', argument " "1"" of type '" "OpenMM::System &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Context" "', argument " "1"" of type '" "OpenMM::System &""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::System * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_OpenMM__Integrator,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_Context" "', argument " "2"" of type '" "OpenMM::Integrator &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Context" "', argument " "2"" of type '" "OpenMM::Integrator &""'"); 
  }
  arg2 = reinterpret_cast< OpenMM::Integrator * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_OpenMM__Platform,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_Context" "', argument " "3"" of type '" "OpenMM::Platform &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Context" "', argument " "3"" of type '" "OpenMM::Platform &""'"); 
  }
  arg3 = reinterpret_cast< OpenMM::Platform * >(argp3);
  {
    std::map<std::string,std::string,std::less< std::string >,std::allocator< std::pair< std::string const,std::string > > > *ptr = (std::map<std::string,std::string,std::less< std::string >,std::allocator< std::pair< std::string const,std::string > > > *)0;
    res4 = swig::asptr(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "new_Context" "', argument " "4"" of type '" "std::map< std::string,std::string,std::less< std::string >,std::allocator< std::pair< std::string const,std::string > > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Context" "', argument " "4"" of type '" "std::map< std::string,std::string,std::less< std::string >,std::allocator< std::pair< std::string const,std::string > > > const &""'"); 
    }
    arg4 = ptr;
  }
  {
    try {
      result = (OpenMM::Context *)new OpenMM::Context(*arg1,*arg2,*arg3,(std::map< std::string,std::string,std::less< std::string >,std::allocator< std::pair< std::string const,std::string > > > const &)*arg4);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_OpenMM__Context, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Context(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::Context *arg1 = (OpenMM::Context *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_Context",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__Context, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Context" "', argument " "1"" of type '" "OpenMM::Context *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::Context * >(argp1);
  {
    try {
      delete arg1;
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Context_getSystem__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::Context *arg1 = (OpenMM::Context *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  OpenMM::System *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Context_getSystem",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__Context, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Context_getSystem" "', argument " "1"" of type '" "OpenMM::Context const *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::Context * >(argp1);
  {
    try {
      result = (OpenMM::System *) &((OpenMM::Context const *)arg1)->getSystem();
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_OpenMM__System, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Context_getSystem__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::Context *arg1 = (OpenMM::Context *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  OpenMM::System *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Context_getSystem",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__Context, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Context_getSystem" "', argument " "1"" of type '" "OpenMM::Context *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::Context * >(argp1);
  {
    try {
      result = (OpenMM::System *) &(arg1)->getSystem();
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_OpenMM__System, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Context_getSystem(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 1); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_OpenMM__Context, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Context_getSystem__SWIG_1(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_OpenMM__Context, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Context_getSystem__SWIG_0(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Context_getSystem'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    getSystem(OpenMM::Context const *)\n"
    "    getSystem(OpenMM::Context *)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Context_getIntegrator__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::Context *arg1 = (OpenMM::Context *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  OpenMM::Integrator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Context_getIntegrator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__Context, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Context_getIntegrator" "', argument " "1"" of type '" "OpenMM::Context const *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::Context * >(argp1);
  {
    try {
      result = (OpenMM::Integrator *) &((OpenMM::Context const *)arg1)->getIntegrator();
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_OpenMM__Integrator, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Context_getIntegrator__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::Context *arg1 = (OpenMM::Context *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  OpenMM::Integrator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Context_getIntegrator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__Context, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Context_getIntegrator" "', argument " "1"" of type '" "OpenMM::Context *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::Context * >(argp1);
  {
    try {
      result = (OpenMM::Integrator *) &(arg1)->getIntegrator();
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_OpenMM__Integrator, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Context_getIntegrator(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 1); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_OpenMM__Context, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Context_getIntegrator__SWIG_1(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_OpenMM__Context, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Context_getIntegrator__SWIG_0(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Context_getIntegrator'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    getIntegrator(OpenMM::Context const *)\n"
    "    getIntegrator(OpenMM::Context *)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Context_getPlatform__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::Context *arg1 = (OpenMM::Context *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  OpenMM::Platform *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Context_getPlatform",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__Context, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Context_getPlatform" "', argument " "1"" of type '" "OpenMM::Context const *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::Context * >(argp1);
  {
    try {
      result = (OpenMM::Platform *) &((OpenMM::Context const *)arg1)->getPlatform();
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_OpenMM__Platform, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Context_getPlatform__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::Context *arg1 = (OpenMM::Context *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  OpenMM::Platform *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Context_getPlatform",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__Context, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Context_getPlatform" "', argument " "1"" of type '" "OpenMM::Context *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::Context * >(argp1);
  {
    try {
      result = (OpenMM::Platform *) &(arg1)->getPlatform();
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_OpenMM__Platform, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Context_getPlatform(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 1); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_OpenMM__Context, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Context_getPlatform__SWIG_1(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_OpenMM__Context, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Context_getPlatform__SWIG_0(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Context_getPlatform'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    getPlatform(OpenMM::Context const *)\n"
    "    getPlatform(OpenMM::Context *)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Context_setTime(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::Context *arg1 = (OpenMM::Context *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Context_setTime",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__Context, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Context_setTime" "', argument " "1"" of type '" "OpenMM::Context *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::Context * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Context_setTime" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->setTime(arg2);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Context_setPositions(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::Context *arg1 = (OpenMM::Context *) 0 ;
  std::vector< Vec3,std::allocator< Vec3 > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< OpenMM::Vec3 > vVec2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Context_setPositions",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__Context, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Context_setPositions" "', argument " "1"" of type '" "OpenMM::Context *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::Context * >(argp1);
  {
    // typemap -- %typemap(in) std::vector<Vec3>& (std::vector<OpenMM::Vec3> vVec2)
    int i, pLength;
    double x, y, z;
    PyObject *o;
    PyObject *o1;
    
    pLength=(int)PySequence_Length(obj1);
    for (i=0; i<pLength; i++) {
      o=PySequence_GetItem(obj1, i);
      
      o1=PySequence_GetItem(o, 0);
      x=PyFloat_AsDouble(o1);
      Py_DECREF(o1);
      
      o1=PySequence_GetItem(o, 1);
      y=PyFloat_AsDouble(o1);
      Py_DECREF(o1);
      
      o1=PySequence_GetItem(o, 2);
      z=PyFloat_AsDouble(o1);
      Py_DECREF(o1);
      
      Py_DECREF(o);
      vVec2.push_back( OpenMM::Vec3(x, y, z) );
    }
    arg2 = &vVec2;
  }
  {
    try {
      (arg1)->setPositions((std::vector< Vec3,std::allocator< Vec3 > > const &)*arg2);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Context_setVelocities(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::Context *arg1 = (OpenMM::Context *) 0 ;
  std::vector< Vec3,std::allocator< Vec3 > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< OpenMM::Vec3 > vVec2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Context_setVelocities",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__Context, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Context_setVelocities" "', argument " "1"" of type '" "OpenMM::Context *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::Context * >(argp1);
  {
    // typemap -- %typemap(in) std::vector<Vec3>& (std::vector<OpenMM::Vec3> vVec2)
    int i, pLength;
    double x, y, z;
    PyObject *o;
    PyObject *o1;
    
    pLength=(int)PySequence_Length(obj1);
    for (i=0; i<pLength; i++) {
      o=PySequence_GetItem(obj1, i);
      
      o1=PySequence_GetItem(o, 0);
      x=PyFloat_AsDouble(o1);
      Py_DECREF(o1);
      
      o1=PySequence_GetItem(o, 1);
      y=PyFloat_AsDouble(o1);
      Py_DECREF(o1);
      
      o1=PySequence_GetItem(o, 2);
      z=PyFloat_AsDouble(o1);
      Py_DECREF(o1);
      
      Py_DECREF(o);
      vVec2.push_back( OpenMM::Vec3(x, y, z) );
    }
    arg2 = &vVec2;
  }
  {
    try {
      (arg1)->setVelocities((std::vector< Vec3,std::allocator< Vec3 > > const &)*arg2);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Context_getParameter(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::Context *arg1 = (OpenMM::Context *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Context_getParameter",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__Context, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Context_getParameter" "', argument " "1"" of type '" "OpenMM::Context *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::Context * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Context_getParameter" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Context_getParameter" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (double)(arg1)->getParameter((std::string const &)*arg2);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Context_setParameter(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::Context *arg1 = (OpenMM::Context *) 0 ;
  std::string *arg2 = 0 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Context_setParameter",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__Context, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Context_setParameter" "', argument " "1"" of type '" "OpenMM::Context *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::Context * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Context_setParameter" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Context_setParameter" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Context_setParameter" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      (arg1)->setParameter((std::string const &)*arg2,arg3);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Context_setPeriodicBoxVectors(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::Context *arg1 = (OpenMM::Context *) 0 ;
  Vec3 *arg2 = 0 ;
  Vec3 *arg3 = 0 ;
  Vec3 *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  OpenMM::Vec3 myVec2 ;
  OpenMM::Vec3 myVec3 ;
  OpenMM::Vec3 myVec4 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:Context_setPeriodicBoxVectors",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__Context, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Context_setPeriodicBoxVectors" "', argument " "1"" of type '" "OpenMM::Context *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::Context * >(argp1);
  {
    // typemap -- %typemap(in) Vec3
    double x, y, z;
    PyObject *o;
    
    o=PySequence_GetItem(obj1, 0);
    x=PyFloat_AsDouble(o);
    Py_DECREF(o);
    
    o=PySequence_GetItem(obj1, 1);
    y=PyFloat_AsDouble(o);
    Py_DECREF(o);
    
    o=PySequence_GetItem(obj1, 2);
    z=PyFloat_AsDouble(o);
    Py_DECREF(o);
    
    myVec2 = OpenMM::Vec3(x, y, z);
    arg2 = &myVec2;
  }
  {
    // typemap -- %typemap(in) Vec3
    double x, y, z;
    PyObject *o;
    
    o=PySequence_GetItem(obj2, 0);
    x=PyFloat_AsDouble(o);
    Py_DECREF(o);
    
    o=PySequence_GetItem(obj2, 1);
    y=PyFloat_AsDouble(o);
    Py_DECREF(o);
    
    o=PySequence_GetItem(obj2, 2);
    z=PyFloat_AsDouble(o);
    Py_DECREF(o);
    
    myVec3 = OpenMM::Vec3(x, y, z);
    arg3 = &myVec3;
  }
  {
    // typemap -- %typemap(in) Vec3
    double x, y, z;
    PyObject *o;
    
    o=PySequence_GetItem(obj3, 0);
    x=PyFloat_AsDouble(o);
    Py_DECREF(o);
    
    o=PySequence_GetItem(obj3, 1);
    y=PyFloat_AsDouble(o);
    Py_DECREF(o);
    
    o=PySequence_GetItem(obj3, 2);
    z=PyFloat_AsDouble(o);
    Py_DECREF(o);
    
    myVec4 = OpenMM::Vec3(x, y, z);
    arg4 = &myVec4;
  }
  {
    try {
      (arg1)->setPeriodicBoxVectors((Vec3 const &)*arg2,(Vec3 const &)*arg3,(Vec3 const &)*arg4);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Context_applyConstraints(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::Context *arg1 = (OpenMM::Context *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Context_applyConstraints",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__Context, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Context_applyConstraints" "', argument " "1"" of type '" "OpenMM::Context *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::Context * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Context_applyConstraints" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->applyConstraints(arg2);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Context_computeVirtualSites(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::Context *arg1 = (OpenMM::Context *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Context_computeVirtualSites",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__Context, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Context_computeVirtualSites" "', argument " "1"" of type '" "OpenMM::Context *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::Context * >(argp1);
  {
    try {
      (arg1)->computeVirtualSites();
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Context_reinitialize(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::Context *arg1 = (OpenMM::Context *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Context_reinitialize",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__Context, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Context_reinitialize" "', argument " "1"" of type '" "OpenMM::Context *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::Context * >(argp1);
  {
    try {
      (arg1)->reinitialize();
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Context__getStateAsLists(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::Context *arg1 = (OpenMM::Context *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  int arg7 ;
  int arg8 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  int val6 ;
  int ecode6 = 0 ;
  int val7 ;
  int ecode7 = 0 ;
  int val8 ;
  int ecode8 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  PyObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOOO:Context__getStateAsLists",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__Context, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Context__getStateAsLists" "', argument " "1"" of type '" "OpenMM::Context *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::Context * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Context__getStateAsLists" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Context__getStateAsLists" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Context__getStateAsLists" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  ecode5 = SWIG_AsVal_int(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "Context__getStateAsLists" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  ecode6 = SWIG_AsVal_int(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "Context__getStateAsLists" "', argument " "6"" of type '" "int""'");
  } 
  arg6 = static_cast< int >(val6);
  ecode7 = SWIG_AsVal_int(obj6, &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "Context__getStateAsLists" "', argument " "7"" of type '" "int""'");
  } 
  arg7 = static_cast< int >(val7);
  ecode8 = SWIG_AsVal_int(obj7, &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "Context__getStateAsLists" "', argument " "8"" of type '" "int""'");
  } 
  arg8 = static_cast< int >(val8);
  {
    try {
      result = (PyObject *)OpenMM_Context__getStateAsLists(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Context__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::Context *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  OpenMM::Context *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_Context",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_OpenMM__Context,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Context" "', argument " "1"" of type '" "OpenMM::Context const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Context" "', argument " "1"" of type '" "OpenMM::Context const &""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::Context * >(argp1);
  {
    try {
      result = (OpenMM::Context *)new OpenMM::Context((OpenMM::Context const &)*arg1);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_OpenMM__Context, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Context(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 4); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_OpenMM__Context, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Context__SWIG_3(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_OpenMM__System, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_OpenMM__Integrator, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_Context__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_OpenMM__System, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_OpenMM__Integrator, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_OpenMM__Platform, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_new_Context__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_OpenMM__System, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_OpenMM__Integrator, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_OpenMM__Platform, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = swig::asptr(argv[3], (std::map<std::string,std::string,std::less< std::string >,std::allocator< std::pair< std::string const,std::string > > >**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_new_Context__SWIG_2(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_Context'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    OpenMM::Context(OpenMM::System &,OpenMM::Integrator &)\n"
    "    OpenMM::Context(OpenMM::System &,OpenMM::Integrator &,OpenMM::Platform &)\n"
    "    OpenMM::Context(OpenMM::System &,OpenMM::Integrator &,OpenMM::Platform &,std::map< std::string,std::string,std::less< std::string >,std::allocator< std::pair< std::string const,std::string > > > const &)\n"
    "    OpenMM::Context::Context(OpenMM::Context const &)\n");
  return NULL;
}


SWIGINTERN PyObject *Context_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_OpenMM__Context, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_CustomAngleForce__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  OpenMM::CustomAngleForce *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_CustomAngleForce",&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_CustomAngleForce" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_CustomAngleForce" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  {
    try {
      result = (OpenMM::CustomAngleForce *)new OpenMM::CustomAngleForce((std::string const &)*arg1);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_OpenMM__CustomAngleForce, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CustomAngleForce_getNumAngles(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::CustomAngleForce *arg1 = (OpenMM::CustomAngleForce *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CustomAngleForce_getNumAngles",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__CustomAngleForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CustomAngleForce_getNumAngles" "', argument " "1"" of type '" "OpenMM::CustomAngleForce const *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::CustomAngleForce * >(argp1);
  {
    try {
      result = (int)((OpenMM::CustomAngleForce const *)arg1)->getNumAngles();
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CustomAngleForce_getNumPerAngleParameters(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::CustomAngleForce *arg1 = (OpenMM::CustomAngleForce *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CustomAngleForce_getNumPerAngleParameters",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__CustomAngleForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CustomAngleForce_getNumPerAngleParameters" "', argument " "1"" of type '" "OpenMM::CustomAngleForce const *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::CustomAngleForce * >(argp1);
  {
    try {
      result = (int)((OpenMM::CustomAngleForce const *)arg1)->getNumPerAngleParameters();
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CustomAngleForce_getNumGlobalParameters(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::CustomAngleForce *arg1 = (OpenMM::CustomAngleForce *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CustomAngleForce_getNumGlobalParameters",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__CustomAngleForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CustomAngleForce_getNumGlobalParameters" "', argument " "1"" of type '" "OpenMM::CustomAngleForce const *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::CustomAngleForce * >(argp1);
  {
    try {
      result = (int)((OpenMM::CustomAngleForce const *)arg1)->getNumGlobalParameters();
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CustomAngleForce_getEnergyFunction(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::CustomAngleForce *arg1 = (OpenMM::CustomAngleForce *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CustomAngleForce_getEnergyFunction",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__CustomAngleForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CustomAngleForce_getEnergyFunction" "', argument " "1"" of type '" "OpenMM::CustomAngleForce const *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::CustomAngleForce * >(argp1);
  {
    try {
      result = (std::string *) &((OpenMM::CustomAngleForce const *)arg1)->getEnergyFunction();
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CustomAngleForce_setEnergyFunction(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::CustomAngleForce *arg1 = (OpenMM::CustomAngleForce *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CustomAngleForce_setEnergyFunction",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__CustomAngleForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CustomAngleForce_setEnergyFunction" "', argument " "1"" of type '" "OpenMM::CustomAngleForce *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::CustomAngleForce * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CustomAngleForce_setEnergyFunction" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CustomAngleForce_setEnergyFunction" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      (arg1)->setEnergyFunction((std::string const &)*arg2);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CustomAngleForce_addPerAngleParameter(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::CustomAngleForce *arg1 = (OpenMM::CustomAngleForce *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CustomAngleForce_addPerAngleParameter",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__CustomAngleForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CustomAngleForce_addPerAngleParameter" "', argument " "1"" of type '" "OpenMM::CustomAngleForce *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::CustomAngleForce * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CustomAngleForce_addPerAngleParameter" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CustomAngleForce_addPerAngleParameter" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (int)(arg1)->addPerAngleParameter((std::string const &)*arg2);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CustomAngleForce_getPerAngleParameterName(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::CustomAngleForce *arg1 = (OpenMM::CustomAngleForce *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::string *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CustomAngleForce_getPerAngleParameterName",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__CustomAngleForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CustomAngleForce_getPerAngleParameterName" "', argument " "1"" of type '" "OpenMM::CustomAngleForce const *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::CustomAngleForce * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CustomAngleForce_getPerAngleParameterName" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (std::string *) &((OpenMM::CustomAngleForce const *)arg1)->getPerAngleParameterName(arg2);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CustomAngleForce_setPerAngleParameterName(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::CustomAngleForce *arg1 = (OpenMM::CustomAngleForce *) 0 ;
  int arg2 ;
  std::string *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:CustomAngleForce_setPerAngleParameterName",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__CustomAngleForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CustomAngleForce_setPerAngleParameterName" "', argument " "1"" of type '" "OpenMM::CustomAngleForce *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::CustomAngleForce * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CustomAngleForce_setPerAngleParameterName" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CustomAngleForce_setPerAngleParameterName" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CustomAngleForce_setPerAngleParameterName" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      (arg1)->setPerAngleParameterName(arg2,(std::string const &)*arg3);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CustomAngleForce_addGlobalParameter(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::CustomAngleForce *arg1 = (OpenMM::CustomAngleForce *) 0 ;
  std::string *arg2 = 0 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:CustomAngleForce_addGlobalParameter",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__CustomAngleForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CustomAngleForce_addGlobalParameter" "', argument " "1"" of type '" "OpenMM::CustomAngleForce *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::CustomAngleForce * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CustomAngleForce_addGlobalParameter" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CustomAngleForce_addGlobalParameter" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CustomAngleForce_addGlobalParameter" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      result = (int)(arg1)->addGlobalParameter((std::string const &)*arg2,arg3);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CustomAngleForce_getGlobalParameterName(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::CustomAngleForce *arg1 = (OpenMM::CustomAngleForce *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::string *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CustomAngleForce_getGlobalParameterName",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__CustomAngleForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CustomAngleForce_getGlobalParameterName" "', argument " "1"" of type '" "OpenMM::CustomAngleForce const *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::CustomAngleForce * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CustomAngleForce_getGlobalParameterName" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (std::string *) &((OpenMM::CustomAngleForce const *)arg1)->getGlobalParameterName(arg2);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CustomAngleForce_setGlobalParameterName(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::CustomAngleForce *arg1 = (OpenMM::CustomAngleForce *) 0 ;
  int arg2 ;
  std::string *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:CustomAngleForce_setGlobalParameterName",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__CustomAngleForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CustomAngleForce_setGlobalParameterName" "', argument " "1"" of type '" "OpenMM::CustomAngleForce *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::CustomAngleForce * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CustomAngleForce_setGlobalParameterName" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CustomAngleForce_setGlobalParameterName" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CustomAngleForce_setGlobalParameterName" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      (arg1)->setGlobalParameterName(arg2,(std::string const &)*arg3);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CustomAngleForce_getGlobalParameterDefaultValue(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::CustomAngleForce *arg1 = (OpenMM::CustomAngleForce *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CustomAngleForce_getGlobalParameterDefaultValue",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__CustomAngleForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CustomAngleForce_getGlobalParameterDefaultValue" "', argument " "1"" of type '" "OpenMM::CustomAngleForce const *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::CustomAngleForce * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CustomAngleForce_getGlobalParameterDefaultValue" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (double)((OpenMM::CustomAngleForce const *)arg1)->getGlobalParameterDefaultValue(arg2);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CustomAngleForce_setGlobalParameterDefaultValue(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::CustomAngleForce *arg1 = (OpenMM::CustomAngleForce *) 0 ;
  int arg2 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:CustomAngleForce_setGlobalParameterDefaultValue",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__CustomAngleForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CustomAngleForce_setGlobalParameterDefaultValue" "', argument " "1"" of type '" "OpenMM::CustomAngleForce *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::CustomAngleForce * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CustomAngleForce_setGlobalParameterDefaultValue" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CustomAngleForce_setGlobalParameterDefaultValue" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      (arg1)->setGlobalParameterDefaultValue(arg2,arg3);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CustomAngleForce_addAngle(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::CustomAngleForce *arg1 = (OpenMM::CustomAngleForce *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  std::vector< double,std::allocator< double > > *arg5 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int res5 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:CustomAngleForce_addAngle",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__CustomAngleForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CustomAngleForce_addAngle" "', argument " "1"" of type '" "OpenMM::CustomAngleForce *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::CustomAngleForce * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CustomAngleForce_addAngle" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CustomAngleForce_addAngle" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "CustomAngleForce_addAngle" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  {
    std::vector<double,std::allocator< double > > *ptr = (std::vector<double,std::allocator< double > > *)0;
    res5 = swig::asptr(obj4, &ptr);
    if (!SWIG_IsOK(res5)) {
      SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "CustomAngleForce_addAngle" "', argument " "5"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CustomAngleForce_addAngle" "', argument " "5"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    arg5 = ptr;
  }
  {
    try {
      result = (int)(arg1)->addAngle(arg2,arg3,arg4,(std::vector< double,std::allocator< double > > const &)*arg5);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (SWIG_IsNewObj(res5)) delete arg5;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res5)) delete arg5;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CustomAngleForce_getAngleParameters(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::CustomAngleForce *arg1 = (OpenMM::CustomAngleForce *) 0 ;
  int arg2 ;
  int *arg3 = 0 ;
  int *arg4 = 0 ;
  int *arg5 = 0 ;
  std::vector< double,std::allocator< double > > *arg6 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int temp3 ;
  int res3 = SWIG_TMPOBJ ;
  int temp4 ;
  int res4 = SWIG_TMPOBJ ;
  int temp5 ;
  int res5 = SWIG_TMPOBJ ;
  std::vector< double,std::allocator< double > > temp6 ;
  int res6 = SWIG_TMPOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  arg3 = &temp3;
  arg4 = &temp4;
  arg5 = &temp5;
  arg6 = &temp6;
  if (!PyArg_ParseTuple(args,(char *)"OO:CustomAngleForce_getAngleParameters",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__CustomAngleForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CustomAngleForce_getAngleParameters" "', argument " "1"" of type '" "OpenMM::CustomAngleForce const *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::CustomAngleForce * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CustomAngleForce_getAngleParameters" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      ((OpenMM::CustomAngleForce const *)arg1)->getAngleParameters(arg2,*arg3,*arg4,*arg5,*arg6);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsTmpObj(res3)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_From_int((*arg3)));
  } else {
    int new_flags = SWIG_IsNewObj(res3) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg3), SWIGTYPE_p_int, new_flags));
  }
  if (SWIG_IsTmpObj(res4)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_From_int((*arg4)));
  } else {
    int new_flags = SWIG_IsNewObj(res4) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg4), SWIGTYPE_p_int, new_flags));
  }
  if (SWIG_IsTmpObj(res5)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_From_int((*arg5)));
  } else {
    int new_flags = SWIG_IsNewObj(res5) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg5), SWIGTYPE_p_int, new_flags));
  }
  if (SWIG_IsTmpObj(res6)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, swig::from((*arg6)));
  } else {
    int new_flags = SWIG_IsNewObj(res6) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg6), SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, new_flags));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CustomAngleForce_setAngleParameters(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::CustomAngleForce *arg1 = (OpenMM::CustomAngleForce *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  std::vector< double,std::allocator< double > > *arg6 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  int res6 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:CustomAngleForce_setAngleParameters",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__CustomAngleForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CustomAngleForce_setAngleParameters" "', argument " "1"" of type '" "OpenMM::CustomAngleForce *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::CustomAngleForce * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CustomAngleForce_setAngleParameters" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CustomAngleForce_setAngleParameters" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "CustomAngleForce_setAngleParameters" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  ecode5 = SWIG_AsVal_int(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "CustomAngleForce_setAngleParameters" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  {
    std::vector<double,std::allocator< double > > *ptr = (std::vector<double,std::allocator< double > > *)0;
    res6 = swig::asptr(obj5, &ptr);
    if (!SWIG_IsOK(res6)) {
      SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "CustomAngleForce_setAngleParameters" "', argument " "6"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CustomAngleForce_setAngleParameters" "', argument " "6"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    arg6 = ptr;
  }
  {
    try {
      (arg1)->setAngleParameters(arg2,arg3,arg4,arg5,(std::vector< double,std::allocator< double > > const &)*arg6);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res6)) delete arg6;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res6)) delete arg6;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_CustomAngleForce__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::CustomAngleForce *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  OpenMM::CustomAngleForce *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_CustomAngleForce",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_OpenMM__CustomAngleForce,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_CustomAngleForce" "', argument " "1"" of type '" "OpenMM::CustomAngleForce const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_CustomAngleForce" "', argument " "1"" of type '" "OpenMM::CustomAngleForce const &""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::CustomAngleForce * >(argp1);
  {
    try {
      result = (OpenMM::CustomAngleForce *)new OpenMM::CustomAngleForce((OpenMM::CustomAngleForce const &)*arg1);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_OpenMM__CustomAngleForce, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_CustomAngleForce(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 1); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_OpenMM__CustomAngleForce, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_CustomAngleForce__SWIG_1(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_CustomAngleForce__SWIG_0(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_CustomAngleForce'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    OpenMM::CustomAngleForce(std::string const &)\n"
    "    OpenMM::CustomAngleForce::CustomAngleForce(OpenMM::CustomAngleForce const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_CustomAngleForce(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::CustomAngleForce *arg1 = (OpenMM::CustomAngleForce *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_CustomAngleForce",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__CustomAngleForce, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_CustomAngleForce" "', argument " "1"" of type '" "OpenMM::CustomAngleForce *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::CustomAngleForce * >(argp1);
  {
    try {
      delete arg1;
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *CustomAngleForce_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_OpenMM__CustomAngleForce, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_CustomBondForce__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  OpenMM::CustomBondForce *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_CustomBondForce",&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_CustomBondForce" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_CustomBondForce" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  {
    try {
      result = (OpenMM::CustomBondForce *)new OpenMM::CustomBondForce((std::string const &)*arg1);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_OpenMM__CustomBondForce, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CustomBondForce_getNumBonds(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::CustomBondForce *arg1 = (OpenMM::CustomBondForce *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CustomBondForce_getNumBonds",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__CustomBondForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CustomBondForce_getNumBonds" "', argument " "1"" of type '" "OpenMM::CustomBondForce const *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::CustomBondForce * >(argp1);
  {
    try {
      result = (int)((OpenMM::CustomBondForce const *)arg1)->getNumBonds();
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CustomBondForce_getNumPerBondParameters(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::CustomBondForce *arg1 = (OpenMM::CustomBondForce *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CustomBondForce_getNumPerBondParameters",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__CustomBondForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CustomBondForce_getNumPerBondParameters" "', argument " "1"" of type '" "OpenMM::CustomBondForce const *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::CustomBondForce * >(argp1);
  {
    try {
      result = (int)((OpenMM::CustomBondForce const *)arg1)->getNumPerBondParameters();
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CustomBondForce_getNumGlobalParameters(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::CustomBondForce *arg1 = (OpenMM::CustomBondForce *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CustomBondForce_getNumGlobalParameters",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__CustomBondForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CustomBondForce_getNumGlobalParameters" "', argument " "1"" of type '" "OpenMM::CustomBondForce const *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::CustomBondForce * >(argp1);
  {
    try {
      result = (int)((OpenMM::CustomBondForce const *)arg1)->getNumGlobalParameters();
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CustomBondForce_getEnergyFunction(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::CustomBondForce *arg1 = (OpenMM::CustomBondForce *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CustomBondForce_getEnergyFunction",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__CustomBondForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CustomBondForce_getEnergyFunction" "', argument " "1"" of type '" "OpenMM::CustomBondForce const *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::CustomBondForce * >(argp1);
  {
    try {
      result = (std::string *) &((OpenMM::CustomBondForce const *)arg1)->getEnergyFunction();
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CustomBondForce_setEnergyFunction(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::CustomBondForce *arg1 = (OpenMM::CustomBondForce *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CustomBondForce_setEnergyFunction",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__CustomBondForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CustomBondForce_setEnergyFunction" "', argument " "1"" of type '" "OpenMM::CustomBondForce *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::CustomBondForce * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CustomBondForce_setEnergyFunction" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CustomBondForce_setEnergyFunction" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      (arg1)->setEnergyFunction((std::string const &)*arg2);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CustomBondForce_addPerBondParameter(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::CustomBondForce *arg1 = (OpenMM::CustomBondForce *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CustomBondForce_addPerBondParameter",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__CustomBondForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CustomBondForce_addPerBondParameter" "', argument " "1"" of type '" "OpenMM::CustomBondForce *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::CustomBondForce * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CustomBondForce_addPerBondParameter" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CustomBondForce_addPerBondParameter" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (int)(arg1)->addPerBondParameter((std::string const &)*arg2);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CustomBondForce_getPerBondParameterName(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::CustomBondForce *arg1 = (OpenMM::CustomBondForce *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::string *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CustomBondForce_getPerBondParameterName",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__CustomBondForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CustomBondForce_getPerBondParameterName" "', argument " "1"" of type '" "OpenMM::CustomBondForce const *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::CustomBondForce * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CustomBondForce_getPerBondParameterName" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (std::string *) &((OpenMM::CustomBondForce const *)arg1)->getPerBondParameterName(arg2);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CustomBondForce_setPerBondParameterName(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::CustomBondForce *arg1 = (OpenMM::CustomBondForce *) 0 ;
  int arg2 ;
  std::string *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:CustomBondForce_setPerBondParameterName",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__CustomBondForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CustomBondForce_setPerBondParameterName" "', argument " "1"" of type '" "OpenMM::CustomBondForce *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::CustomBondForce * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CustomBondForce_setPerBondParameterName" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CustomBondForce_setPerBondParameterName" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CustomBondForce_setPerBondParameterName" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      (arg1)->setPerBondParameterName(arg2,(std::string const &)*arg3);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CustomBondForce_addGlobalParameter(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::CustomBondForce *arg1 = (OpenMM::CustomBondForce *) 0 ;
  std::string *arg2 = 0 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:CustomBondForce_addGlobalParameter",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__CustomBondForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CustomBondForce_addGlobalParameter" "', argument " "1"" of type '" "OpenMM::CustomBondForce *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::CustomBondForce * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CustomBondForce_addGlobalParameter" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CustomBondForce_addGlobalParameter" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CustomBondForce_addGlobalParameter" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      result = (int)(arg1)->addGlobalParameter((std::string const &)*arg2,arg3);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CustomBondForce_getGlobalParameterName(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::CustomBondForce *arg1 = (OpenMM::CustomBondForce *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::string *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CustomBondForce_getGlobalParameterName",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__CustomBondForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CustomBondForce_getGlobalParameterName" "', argument " "1"" of type '" "OpenMM::CustomBondForce const *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::CustomBondForce * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CustomBondForce_getGlobalParameterName" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (std::string *) &((OpenMM::CustomBondForce const *)arg1)->getGlobalParameterName(arg2);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CustomBondForce_setGlobalParameterName(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::CustomBondForce *arg1 = (OpenMM::CustomBondForce *) 0 ;
  int arg2 ;
  std::string *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:CustomBondForce_setGlobalParameterName",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__CustomBondForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CustomBondForce_setGlobalParameterName" "', argument " "1"" of type '" "OpenMM::CustomBondForce *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::CustomBondForce * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CustomBondForce_setGlobalParameterName" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CustomBondForce_setGlobalParameterName" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CustomBondForce_setGlobalParameterName" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      (arg1)->setGlobalParameterName(arg2,(std::string const &)*arg3);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CustomBondForce_getGlobalParameterDefaultValue(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::CustomBondForce *arg1 = (OpenMM::CustomBondForce *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CustomBondForce_getGlobalParameterDefaultValue",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__CustomBondForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CustomBondForce_getGlobalParameterDefaultValue" "', argument " "1"" of type '" "OpenMM::CustomBondForce const *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::CustomBondForce * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CustomBondForce_getGlobalParameterDefaultValue" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (double)((OpenMM::CustomBondForce const *)arg1)->getGlobalParameterDefaultValue(arg2);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CustomBondForce_setGlobalParameterDefaultValue(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::CustomBondForce *arg1 = (OpenMM::CustomBondForce *) 0 ;
  int arg2 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:CustomBondForce_setGlobalParameterDefaultValue",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__CustomBondForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CustomBondForce_setGlobalParameterDefaultValue" "', argument " "1"" of type '" "OpenMM::CustomBondForce *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::CustomBondForce * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CustomBondForce_setGlobalParameterDefaultValue" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CustomBondForce_setGlobalParameterDefaultValue" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      (arg1)->setGlobalParameterDefaultValue(arg2,arg3);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CustomBondForce_addBond(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::CustomBondForce *arg1 = (OpenMM::CustomBondForce *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< double,std::allocator< double > > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:CustomBondForce_addBond",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__CustomBondForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CustomBondForce_addBond" "', argument " "1"" of type '" "OpenMM::CustomBondForce *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::CustomBondForce * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CustomBondForce_addBond" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CustomBondForce_addBond" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    std::vector<double,std::allocator< double > > *ptr = (std::vector<double,std::allocator< double > > *)0;
    res4 = swig::asptr(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "CustomBondForce_addBond" "', argument " "4"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CustomBondForce_addBond" "', argument " "4"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    arg4 = ptr;
  }
  {
    try {
      result = (int)(arg1)->addBond(arg2,arg3,(std::vector< double,std::allocator< double > > const &)*arg4);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CustomBondForce_getBondParameters(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::CustomBondForce *arg1 = (OpenMM::CustomBondForce *) 0 ;
  int arg2 ;
  int *arg3 = 0 ;
  int *arg4 = 0 ;
  std::vector< double,std::allocator< double > > *arg5 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int temp3 ;
  int res3 = SWIG_TMPOBJ ;
  int temp4 ;
  int res4 = SWIG_TMPOBJ ;
  std::vector< double,std::allocator< double > > temp5 ;
  int res5 = SWIG_TMPOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  arg3 = &temp3;
  arg4 = &temp4;
  arg5 = &temp5;
  if (!PyArg_ParseTuple(args,(char *)"OO:CustomBondForce_getBondParameters",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__CustomBondForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CustomBondForce_getBondParameters" "', argument " "1"" of type '" "OpenMM::CustomBondForce const *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::CustomBondForce * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CustomBondForce_getBondParameters" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      ((OpenMM::CustomBondForce const *)arg1)->getBondParameters(arg2,*arg3,*arg4,*arg5);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsTmpObj(res3)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_From_int((*arg3)));
  } else {
    int new_flags = SWIG_IsNewObj(res3) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg3), SWIGTYPE_p_int, new_flags));
  }
  if (SWIG_IsTmpObj(res4)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_From_int((*arg4)));
  } else {
    int new_flags = SWIG_IsNewObj(res4) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg4), SWIGTYPE_p_int, new_flags));
  }
  if (SWIG_IsTmpObj(res5)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, swig::from((*arg5)));
  } else {
    int new_flags = SWIG_IsNewObj(res5) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg5), SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, new_flags));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CustomBondForce_setBondParameters(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::CustomBondForce *arg1 = (OpenMM::CustomBondForce *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  std::vector< double,std::allocator< double > > *arg5 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int res5 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:CustomBondForce_setBondParameters",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__CustomBondForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CustomBondForce_setBondParameters" "', argument " "1"" of type '" "OpenMM::CustomBondForce *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::CustomBondForce * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CustomBondForce_setBondParameters" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CustomBondForce_setBondParameters" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "CustomBondForce_setBondParameters" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  {
    std::vector<double,std::allocator< double > > *ptr = (std::vector<double,std::allocator< double > > *)0;
    res5 = swig::asptr(obj4, &ptr);
    if (!SWIG_IsOK(res5)) {
      SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "CustomBondForce_setBondParameters" "', argument " "5"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CustomBondForce_setBondParameters" "', argument " "5"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    arg5 = ptr;
  }
  {
    try {
      (arg1)->setBondParameters(arg2,arg3,arg4,(std::vector< double,std::allocator< double > > const &)*arg5);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res5)) delete arg5;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res5)) delete arg5;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_CustomBondForce__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::CustomBondForce *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  OpenMM::CustomBondForce *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_CustomBondForce",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_OpenMM__CustomBondForce,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_CustomBondForce" "', argument " "1"" of type '" "OpenMM::CustomBondForce const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_CustomBondForce" "', argument " "1"" of type '" "OpenMM::CustomBondForce const &""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::CustomBondForce * >(argp1);
  {
    try {
      result = (OpenMM::CustomBondForce *)new OpenMM::CustomBondForce((OpenMM::CustomBondForce const &)*arg1);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_OpenMM__CustomBondForce, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_CustomBondForce(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 1); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_OpenMM__CustomBondForce, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_CustomBondForce__SWIG_1(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_CustomBondForce__SWIG_0(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_CustomBondForce'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    OpenMM::CustomBondForce(std::string const &)\n"
    "    OpenMM::CustomBondForce::CustomBondForce(OpenMM::CustomBondForce const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_CustomBondForce(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::CustomBondForce *arg1 = (OpenMM::CustomBondForce *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_CustomBondForce",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__CustomBondForce, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_CustomBondForce" "', argument " "1"" of type '" "OpenMM::CustomBondForce *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::CustomBondForce * >(argp1);
  {
    try {
      delete arg1;
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *CustomBondForce_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_OpenMM__CustomBondForce, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_CustomExternalForce__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  OpenMM::CustomExternalForce *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_CustomExternalForce",&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_CustomExternalForce" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_CustomExternalForce" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  {
    try {
      result = (OpenMM::CustomExternalForce *)new OpenMM::CustomExternalForce((std::string const &)*arg1);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_OpenMM__CustomExternalForce, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CustomExternalForce_getNumParticles(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::CustomExternalForce *arg1 = (OpenMM::CustomExternalForce *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CustomExternalForce_getNumParticles",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__CustomExternalForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CustomExternalForce_getNumParticles" "', argument " "1"" of type '" "OpenMM::CustomExternalForce const *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::CustomExternalForce * >(argp1);
  {
    try {
      result = (int)((OpenMM::CustomExternalForce const *)arg1)->getNumParticles();
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CustomExternalForce_getNumPerParticleParameters(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::CustomExternalForce *arg1 = (OpenMM::CustomExternalForce *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CustomExternalForce_getNumPerParticleParameters",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__CustomExternalForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CustomExternalForce_getNumPerParticleParameters" "', argument " "1"" of type '" "OpenMM::CustomExternalForce const *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::CustomExternalForce * >(argp1);
  {
    try {
      result = (int)((OpenMM::CustomExternalForce const *)arg1)->getNumPerParticleParameters();
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CustomExternalForce_getNumGlobalParameters(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::CustomExternalForce *arg1 = (OpenMM::CustomExternalForce *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CustomExternalForce_getNumGlobalParameters",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__CustomExternalForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CustomExternalForce_getNumGlobalParameters" "', argument " "1"" of type '" "OpenMM::CustomExternalForce const *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::CustomExternalForce * >(argp1);
  {
    try {
      result = (int)((OpenMM::CustomExternalForce const *)arg1)->getNumGlobalParameters();
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CustomExternalForce_getEnergyFunction(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::CustomExternalForce *arg1 = (OpenMM::CustomExternalForce *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CustomExternalForce_getEnergyFunction",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__CustomExternalForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CustomExternalForce_getEnergyFunction" "', argument " "1"" of type '" "OpenMM::CustomExternalForce const *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::CustomExternalForce * >(argp1);
  {
    try {
      result = (std::string *) &((OpenMM::CustomExternalForce const *)arg1)->getEnergyFunction();
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CustomExternalForce_setEnergyFunction(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::CustomExternalForce *arg1 = (OpenMM::CustomExternalForce *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CustomExternalForce_setEnergyFunction",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__CustomExternalForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CustomExternalForce_setEnergyFunction" "', argument " "1"" of type '" "OpenMM::CustomExternalForce *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::CustomExternalForce * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CustomExternalForce_setEnergyFunction" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CustomExternalForce_setEnergyFunction" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      (arg1)->setEnergyFunction((std::string const &)*arg2);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CustomExternalForce_addPerParticleParameter(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::CustomExternalForce *arg1 = (OpenMM::CustomExternalForce *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CustomExternalForce_addPerParticleParameter",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__CustomExternalForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CustomExternalForce_addPerParticleParameter" "', argument " "1"" of type '" "OpenMM::CustomExternalForce *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::CustomExternalForce * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CustomExternalForce_addPerParticleParameter" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CustomExternalForce_addPerParticleParameter" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (int)(arg1)->addPerParticleParameter((std::string const &)*arg2);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CustomExternalForce_getPerParticleParameterName(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::CustomExternalForce *arg1 = (OpenMM::CustomExternalForce *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::string *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CustomExternalForce_getPerParticleParameterName",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__CustomExternalForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CustomExternalForce_getPerParticleParameterName" "', argument " "1"" of type '" "OpenMM::CustomExternalForce const *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::CustomExternalForce * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CustomExternalForce_getPerParticleParameterName" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (std::string *) &((OpenMM::CustomExternalForce const *)arg1)->getPerParticleParameterName(arg2);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CustomExternalForce_setPerParticleParameterName(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::CustomExternalForce *arg1 = (OpenMM::CustomExternalForce *) 0 ;
  int arg2 ;
  std::string *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:CustomExternalForce_setPerParticleParameterName",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__CustomExternalForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CustomExternalForce_setPerParticleParameterName" "', argument " "1"" of type '" "OpenMM::CustomExternalForce *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::CustomExternalForce * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CustomExternalForce_setPerParticleParameterName" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CustomExternalForce_setPerParticleParameterName" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CustomExternalForce_setPerParticleParameterName" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      (arg1)->setPerParticleParameterName(arg2,(std::string const &)*arg3);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CustomExternalForce_addGlobalParameter(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::CustomExternalForce *arg1 = (OpenMM::CustomExternalForce *) 0 ;
  std::string *arg2 = 0 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:CustomExternalForce_addGlobalParameter",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__CustomExternalForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CustomExternalForce_addGlobalParameter" "', argument " "1"" of type '" "OpenMM::CustomExternalForce *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::CustomExternalForce * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CustomExternalForce_addGlobalParameter" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CustomExternalForce_addGlobalParameter" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CustomExternalForce_addGlobalParameter" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      result = (int)(arg1)->addGlobalParameter((std::string const &)*arg2,arg3);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CustomExternalForce_getGlobalParameterName(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::CustomExternalForce *arg1 = (OpenMM::CustomExternalForce *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::string *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CustomExternalForce_getGlobalParameterName",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__CustomExternalForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CustomExternalForce_getGlobalParameterName" "', argument " "1"" of type '" "OpenMM::CustomExternalForce const *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::CustomExternalForce * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CustomExternalForce_getGlobalParameterName" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (std::string *) &((OpenMM::CustomExternalForce const *)arg1)->getGlobalParameterName(arg2);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CustomExternalForce_setGlobalParameterName(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::CustomExternalForce *arg1 = (OpenMM::CustomExternalForce *) 0 ;
  int arg2 ;
  std::string *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:CustomExternalForce_setGlobalParameterName",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__CustomExternalForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CustomExternalForce_setGlobalParameterName" "', argument " "1"" of type '" "OpenMM::CustomExternalForce *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::CustomExternalForce * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CustomExternalForce_setGlobalParameterName" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CustomExternalForce_setGlobalParameterName" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CustomExternalForce_setGlobalParameterName" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      (arg1)->setGlobalParameterName(arg2,(std::string const &)*arg3);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CustomExternalForce_getGlobalParameterDefaultValue(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::CustomExternalForce *arg1 = (OpenMM::CustomExternalForce *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CustomExternalForce_getGlobalParameterDefaultValue",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__CustomExternalForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CustomExternalForce_getGlobalParameterDefaultValue" "', argument " "1"" of type '" "OpenMM::CustomExternalForce const *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::CustomExternalForce * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CustomExternalForce_getGlobalParameterDefaultValue" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (double)((OpenMM::CustomExternalForce const *)arg1)->getGlobalParameterDefaultValue(arg2);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CustomExternalForce_setGlobalParameterDefaultValue(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::CustomExternalForce *arg1 = (OpenMM::CustomExternalForce *) 0 ;
  int arg2 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:CustomExternalForce_setGlobalParameterDefaultValue",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__CustomExternalForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CustomExternalForce_setGlobalParameterDefaultValue" "', argument " "1"" of type '" "OpenMM::CustomExternalForce *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::CustomExternalForce * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CustomExternalForce_setGlobalParameterDefaultValue" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CustomExternalForce_setGlobalParameterDefaultValue" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      (arg1)->setGlobalParameterDefaultValue(arg2,arg3);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CustomExternalForce_addParticle(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::CustomExternalForce *arg1 = (OpenMM::CustomExternalForce *) 0 ;
  int arg2 ;
  std::vector< double,std::allocator< double > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:CustomExternalForce_addParticle",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__CustomExternalForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CustomExternalForce_addParticle" "', argument " "1"" of type '" "OpenMM::CustomExternalForce *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::CustomExternalForce * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CustomExternalForce_addParticle" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    std::vector<double,std::allocator< double > > *ptr = (std::vector<double,std::allocator< double > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CustomExternalForce_addParticle" "', argument " "3"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CustomExternalForce_addParticle" "', argument " "3"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      result = (int)(arg1)->addParticle(arg2,(std::vector< double,std::allocator< double > > const &)*arg3);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CustomExternalForce_getParticleParameters(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::CustomExternalForce *arg1 = (OpenMM::CustomExternalForce *) 0 ;
  int arg2 ;
  int *arg3 = 0 ;
  std::vector< double,std::allocator< double > > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int temp3 ;
  int res3 = SWIG_TMPOBJ ;
  std::vector< double,std::allocator< double > > temp4 ;
  int res4 = SWIG_TMPOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  arg3 = &temp3;
  arg4 = &temp4;
  if (!PyArg_ParseTuple(args,(char *)"OO:CustomExternalForce_getParticleParameters",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__CustomExternalForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CustomExternalForce_getParticleParameters" "', argument " "1"" of type '" "OpenMM::CustomExternalForce const *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::CustomExternalForce * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CustomExternalForce_getParticleParameters" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      ((OpenMM::CustomExternalForce const *)arg1)->getParticleParameters(arg2,*arg3,*arg4);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsTmpObj(res3)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_From_int((*arg3)));
  } else {
    int new_flags = SWIG_IsNewObj(res3) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg3), SWIGTYPE_p_int, new_flags));
  }
  if (SWIG_IsTmpObj(res4)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, swig::from((*arg4)));
  } else {
    int new_flags = SWIG_IsNewObj(res4) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg4), SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, new_flags));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CustomExternalForce_setParticleParameters(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::CustomExternalForce *arg1 = (OpenMM::CustomExternalForce *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< double,std::allocator< double > > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:CustomExternalForce_setParticleParameters",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__CustomExternalForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CustomExternalForce_setParticleParameters" "', argument " "1"" of type '" "OpenMM::CustomExternalForce *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::CustomExternalForce * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CustomExternalForce_setParticleParameters" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CustomExternalForce_setParticleParameters" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    std::vector<double,std::allocator< double > > *ptr = (std::vector<double,std::allocator< double > > *)0;
    res4 = swig::asptr(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "CustomExternalForce_setParticleParameters" "', argument " "4"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CustomExternalForce_setParticleParameters" "', argument " "4"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    arg4 = ptr;
  }
  {
    try {
      (arg1)->setParticleParameters(arg2,arg3,(std::vector< double,std::allocator< double > > const &)*arg4);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_CustomExternalForce__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::CustomExternalForce *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  OpenMM::CustomExternalForce *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_CustomExternalForce",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_OpenMM__CustomExternalForce,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_CustomExternalForce" "', argument " "1"" of type '" "OpenMM::CustomExternalForce const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_CustomExternalForce" "', argument " "1"" of type '" "OpenMM::CustomExternalForce const &""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::CustomExternalForce * >(argp1);
  {
    try {
      result = (OpenMM::CustomExternalForce *)new OpenMM::CustomExternalForce((OpenMM::CustomExternalForce const &)*arg1);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_OpenMM__CustomExternalForce, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_CustomExternalForce(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 1); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_OpenMM__CustomExternalForce, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_CustomExternalForce__SWIG_1(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_CustomExternalForce__SWIG_0(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_CustomExternalForce'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    OpenMM::CustomExternalForce(std::string const &)\n"
    "    OpenMM::CustomExternalForce::CustomExternalForce(OpenMM::CustomExternalForce const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_CustomExternalForce(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::CustomExternalForce *arg1 = (OpenMM::CustomExternalForce *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_CustomExternalForce",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__CustomExternalForce, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_CustomExternalForce" "', argument " "1"" of type '" "OpenMM::CustomExternalForce *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::CustomExternalForce * >(argp1);
  {
    try {
      delete arg1;
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *CustomExternalForce_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_OpenMM__CustomExternalForce, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_CustomGBForce__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::CustomGBForce *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_CustomGBForce")) SWIG_fail;
  {
    try {
      result = (OpenMM::CustomGBForce *)new OpenMM::CustomGBForce();
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_OpenMM__CustomGBForce, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CustomGBForce_getNumParticles(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::CustomGBForce *arg1 = (OpenMM::CustomGBForce *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CustomGBForce_getNumParticles",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__CustomGBForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CustomGBForce_getNumParticles" "', argument " "1"" of type '" "OpenMM::CustomGBForce const *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::CustomGBForce * >(argp1);
  {
    try {
      result = (int)((OpenMM::CustomGBForce const *)arg1)->getNumParticles();
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CustomGBForce_getNumExclusions(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::CustomGBForce *arg1 = (OpenMM::CustomGBForce *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CustomGBForce_getNumExclusions",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__CustomGBForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CustomGBForce_getNumExclusions" "', argument " "1"" of type '" "OpenMM::CustomGBForce const *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::CustomGBForce * >(argp1);
  {
    try {
      result = (int)((OpenMM::CustomGBForce const *)arg1)->getNumExclusions();
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CustomGBForce_getNumPerParticleParameters(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::CustomGBForce *arg1 = (OpenMM::CustomGBForce *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CustomGBForce_getNumPerParticleParameters",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__CustomGBForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CustomGBForce_getNumPerParticleParameters" "', argument " "1"" of type '" "OpenMM::CustomGBForce const *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::CustomGBForce * >(argp1);
  {
    try {
      result = (int)((OpenMM::CustomGBForce const *)arg1)->getNumPerParticleParameters();
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CustomGBForce_getNumGlobalParameters(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::CustomGBForce *arg1 = (OpenMM::CustomGBForce *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CustomGBForce_getNumGlobalParameters",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__CustomGBForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CustomGBForce_getNumGlobalParameters" "', argument " "1"" of type '" "OpenMM::CustomGBForce const *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::CustomGBForce * >(argp1);
  {
    try {
      result = (int)((OpenMM::CustomGBForce const *)arg1)->getNumGlobalParameters();
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CustomGBForce_getNumFunctions(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::CustomGBForce *arg1 = (OpenMM::CustomGBForce *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CustomGBForce_getNumFunctions",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__CustomGBForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CustomGBForce_getNumFunctions" "', argument " "1"" of type '" "OpenMM::CustomGBForce const *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::CustomGBForce * >(argp1);
  {
    try {
      result = (int)((OpenMM::CustomGBForce const *)arg1)->getNumFunctions();
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CustomGBForce_getNumComputedValues(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::CustomGBForce *arg1 = (OpenMM::CustomGBForce *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CustomGBForce_getNumComputedValues",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__CustomGBForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CustomGBForce_getNumComputedValues" "', argument " "1"" of type '" "OpenMM::CustomGBForce const *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::CustomGBForce * >(argp1);
  {
    try {
      result = (int)((OpenMM::CustomGBForce const *)arg1)->getNumComputedValues();
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CustomGBForce_getNumEnergyTerms(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::CustomGBForce *arg1 = (OpenMM::CustomGBForce *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CustomGBForce_getNumEnergyTerms",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__CustomGBForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CustomGBForce_getNumEnergyTerms" "', argument " "1"" of type '" "OpenMM::CustomGBForce const *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::CustomGBForce * >(argp1);
  {
    try {
      result = (int)((OpenMM::CustomGBForce const *)arg1)->getNumEnergyTerms();
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CustomGBForce_getNonbondedMethod(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::CustomGBForce *arg1 = (OpenMM::CustomGBForce *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  OpenMM::CustomGBForce::NonbondedMethod result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CustomGBForce_getNonbondedMethod",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__CustomGBForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CustomGBForce_getNonbondedMethod" "', argument " "1"" of type '" "OpenMM::CustomGBForce const *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::CustomGBForce * >(argp1);
  {
    try {
      result = (OpenMM::CustomGBForce::NonbondedMethod)((OpenMM::CustomGBForce const *)arg1)->getNonbondedMethod();
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CustomGBForce_setNonbondedMethod(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::CustomGBForce *arg1 = (OpenMM::CustomGBForce *) 0 ;
  OpenMM::CustomGBForce::NonbondedMethod arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CustomGBForce_setNonbondedMethod",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__CustomGBForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CustomGBForce_setNonbondedMethod" "', argument " "1"" of type '" "OpenMM::CustomGBForce *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::CustomGBForce * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CustomGBForce_setNonbondedMethod" "', argument " "2"" of type '" "OpenMM::CustomGBForce::NonbondedMethod""'");
  } 
  arg2 = static_cast< OpenMM::CustomGBForce::NonbondedMethod >(val2);
  {
    try {
      (arg1)->setNonbondedMethod(arg2);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CustomGBForce_getCutoffDistance(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::CustomGBForce *arg1 = (OpenMM::CustomGBForce *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CustomGBForce_getCutoffDistance",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__CustomGBForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CustomGBForce_getCutoffDistance" "', argument " "1"" of type '" "OpenMM::CustomGBForce const *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::CustomGBForce * >(argp1);
  {
    try {
      result = (double)((OpenMM::CustomGBForce const *)arg1)->getCutoffDistance();
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CustomGBForce_setCutoffDistance(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::CustomGBForce *arg1 = (OpenMM::CustomGBForce *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CustomGBForce_setCutoffDistance",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__CustomGBForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CustomGBForce_setCutoffDistance" "', argument " "1"" of type '" "OpenMM::CustomGBForce *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::CustomGBForce * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CustomGBForce_setCutoffDistance" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->setCutoffDistance(arg2);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CustomGBForce_addPerParticleParameter(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::CustomGBForce *arg1 = (OpenMM::CustomGBForce *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CustomGBForce_addPerParticleParameter",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__CustomGBForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CustomGBForce_addPerParticleParameter" "', argument " "1"" of type '" "OpenMM::CustomGBForce *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::CustomGBForce * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CustomGBForce_addPerParticleParameter" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CustomGBForce_addPerParticleParameter" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (int)(arg1)->addPerParticleParameter((std::string const &)*arg2);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CustomGBForce_getPerParticleParameterName(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::CustomGBForce *arg1 = (OpenMM::CustomGBForce *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::string *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CustomGBForce_getPerParticleParameterName",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__CustomGBForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CustomGBForce_getPerParticleParameterName" "', argument " "1"" of type '" "OpenMM::CustomGBForce const *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::CustomGBForce * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CustomGBForce_getPerParticleParameterName" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (std::string *) &((OpenMM::CustomGBForce const *)arg1)->getPerParticleParameterName(arg2);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CustomGBForce_setPerParticleParameterName(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::CustomGBForce *arg1 = (OpenMM::CustomGBForce *) 0 ;
  int arg2 ;
  std::string *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:CustomGBForce_setPerParticleParameterName",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__CustomGBForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CustomGBForce_setPerParticleParameterName" "', argument " "1"" of type '" "OpenMM::CustomGBForce *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::CustomGBForce * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CustomGBForce_setPerParticleParameterName" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CustomGBForce_setPerParticleParameterName" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CustomGBForce_setPerParticleParameterName" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      (arg1)->setPerParticleParameterName(arg2,(std::string const &)*arg3);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CustomGBForce_addGlobalParameter(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::CustomGBForce *arg1 = (OpenMM::CustomGBForce *) 0 ;
  std::string *arg2 = 0 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:CustomGBForce_addGlobalParameter",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__CustomGBForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CustomGBForce_addGlobalParameter" "', argument " "1"" of type '" "OpenMM::CustomGBForce *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::CustomGBForce * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CustomGBForce_addGlobalParameter" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CustomGBForce_addGlobalParameter" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CustomGBForce_addGlobalParameter" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      result = (int)(arg1)->addGlobalParameter((std::string const &)*arg2,arg3);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CustomGBForce_getGlobalParameterName(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::CustomGBForce *arg1 = (OpenMM::CustomGBForce *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::string *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CustomGBForce_getGlobalParameterName",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__CustomGBForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CustomGBForce_getGlobalParameterName" "', argument " "1"" of type '" "OpenMM::CustomGBForce const *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::CustomGBForce * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CustomGBForce_getGlobalParameterName" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (std::string *) &((OpenMM::CustomGBForce const *)arg1)->getGlobalParameterName(arg2);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CustomGBForce_setGlobalParameterName(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::CustomGBForce *arg1 = (OpenMM::CustomGBForce *) 0 ;
  int arg2 ;
  std::string *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:CustomGBForce_setGlobalParameterName",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__CustomGBForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CustomGBForce_setGlobalParameterName" "', argument " "1"" of type '" "OpenMM::CustomGBForce *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::CustomGBForce * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CustomGBForce_setGlobalParameterName" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CustomGBForce_setGlobalParameterName" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CustomGBForce_setGlobalParameterName" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      (arg1)->setGlobalParameterName(arg2,(std::string const &)*arg3);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CustomGBForce_getGlobalParameterDefaultValue(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::CustomGBForce *arg1 = (OpenMM::CustomGBForce *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CustomGBForce_getGlobalParameterDefaultValue",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__CustomGBForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CustomGBForce_getGlobalParameterDefaultValue" "', argument " "1"" of type '" "OpenMM::CustomGBForce const *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::CustomGBForce * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CustomGBForce_getGlobalParameterDefaultValue" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (double)((OpenMM::CustomGBForce const *)arg1)->getGlobalParameterDefaultValue(arg2);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CustomGBForce_setGlobalParameterDefaultValue(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::CustomGBForce *arg1 = (OpenMM::CustomGBForce *) 0 ;
  int arg2 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:CustomGBForce_setGlobalParameterDefaultValue",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__CustomGBForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CustomGBForce_setGlobalParameterDefaultValue" "', argument " "1"" of type '" "OpenMM::CustomGBForce *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::CustomGBForce * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CustomGBForce_setGlobalParameterDefaultValue" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CustomGBForce_setGlobalParameterDefaultValue" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      (arg1)->setGlobalParameterDefaultValue(arg2,arg3);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CustomGBForce_addParticle(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::CustomGBForce *arg1 = (OpenMM::CustomGBForce *) 0 ;
  std::vector< double,std::allocator< double > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CustomGBForce_addParticle",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__CustomGBForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CustomGBForce_addParticle" "', argument " "1"" of type '" "OpenMM::CustomGBForce *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::CustomGBForce * >(argp1);
  {
    std::vector<double,std::allocator< double > > *ptr = (std::vector<double,std::allocator< double > > *)0;
    res2 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CustomGBForce_addParticle" "', argument " "2"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CustomGBForce_addParticle" "', argument " "2"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (int)(arg1)->addParticle((std::vector< double,std::allocator< double > > const &)*arg2);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CustomGBForce_getParticleParameters(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::CustomGBForce *arg1 = (OpenMM::CustomGBForce *) 0 ;
  int arg2 ;
  std::vector< double,std::allocator< double > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  std::vector< double,std::allocator< double > > temp3 ;
  int res3 = SWIG_TMPOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  arg3 = &temp3;
  if (!PyArg_ParseTuple(args,(char *)"OO:CustomGBForce_getParticleParameters",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__CustomGBForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CustomGBForce_getParticleParameters" "', argument " "1"" of type '" "OpenMM::CustomGBForce const *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::CustomGBForce * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CustomGBForce_getParticleParameters" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      ((OpenMM::CustomGBForce const *)arg1)->getParticleParameters(arg2,*arg3);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsTmpObj(res3)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, swig::from((*arg3)));
  } else {
    int new_flags = SWIG_IsNewObj(res3) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg3), SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, new_flags));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CustomGBForce_setParticleParameters(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::CustomGBForce *arg1 = (OpenMM::CustomGBForce *) 0 ;
  int arg2 ;
  std::vector< double,std::allocator< double > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:CustomGBForce_setParticleParameters",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__CustomGBForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CustomGBForce_setParticleParameters" "', argument " "1"" of type '" "OpenMM::CustomGBForce *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::CustomGBForce * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CustomGBForce_setParticleParameters" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    std::vector<double,std::allocator< double > > *ptr = (std::vector<double,std::allocator< double > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CustomGBForce_setParticleParameters" "', argument " "3"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CustomGBForce_setParticleParameters" "', argument " "3"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      (arg1)->setParticleParameters(arg2,(std::vector< double,std::allocator< double > > const &)*arg3);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CustomGBForce_addComputedValue(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::CustomGBForce *arg1 = (OpenMM::CustomGBForce *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  OpenMM::CustomGBForce::ComputationType arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int res3 = SWIG_OLDOBJ ;
  int val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:CustomGBForce_addComputedValue",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__CustomGBForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CustomGBForce_addComputedValue" "', argument " "1"" of type '" "OpenMM::CustomGBForce *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::CustomGBForce * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CustomGBForce_addComputedValue" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CustomGBForce_addComputedValue" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CustomGBForce_addComputedValue" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CustomGBForce_addComputedValue" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "CustomGBForce_addComputedValue" "', argument " "4"" of type '" "OpenMM::CustomGBForce::ComputationType""'");
  } 
  arg4 = static_cast< OpenMM::CustomGBForce::ComputationType >(val4);
  {
    try {
      result = (int)(arg1)->addComputedValue((std::string const &)*arg2,(std::string const &)*arg3,arg4);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CustomGBForce_getComputedValueParameters(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::CustomGBForce *arg1 = (OpenMM::CustomGBForce *) 0 ;
  int arg2 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  OpenMM::CustomGBForce::ComputationType *arg5 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  std::string temp3 ;
  int res3 = SWIG_TMPOBJ ;
  std::string temp4 ;
  int res4 = SWIG_TMPOBJ ;
  OpenMM::CustomGBForce::ComputationType temp5 ;
  int res5 = SWIG_TMPOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  arg3 = &temp3;
  arg4 = &temp4;
  arg5 = &temp5;
  if (!PyArg_ParseTuple(args,(char *)"OO:CustomGBForce_getComputedValueParameters",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__CustomGBForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CustomGBForce_getComputedValueParameters" "', argument " "1"" of type '" "OpenMM::CustomGBForce const *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::CustomGBForce * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CustomGBForce_getComputedValueParameters" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      ((OpenMM::CustomGBForce const *)arg1)->getComputedValueParameters(arg2,*arg3,*arg4,*arg5);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsTmpObj(res3)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_From_std_string((*arg3)));
  } else {
    int new_flags = SWIG_IsNewObj(res3) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg3), SWIGTYPE_p_std__string, new_flags));
  }
  if (SWIG_IsTmpObj(res4)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_From_std_string((*arg4)));
  } else {
    int new_flags = SWIG_IsNewObj(res4) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg4), SWIGTYPE_p_std__string, new_flags));
  }
  if (SWIG_IsTmpObj(res5)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_From_int((*arg5)));
  } else {
    int new_flags = SWIG_IsNewObj(res5) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg5), SWIGTYPE_p_OpenMM__CustomGBForce__ComputationType, new_flags));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CustomGBForce_setComputedValueParameters(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::CustomGBForce *arg1 = (OpenMM::CustomGBForce *) 0 ;
  int arg2 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  OpenMM::CustomGBForce::ComputationType arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  int res4 = SWIG_OLDOBJ ;
  int val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:CustomGBForce_setComputedValueParameters",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__CustomGBForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CustomGBForce_setComputedValueParameters" "', argument " "1"" of type '" "OpenMM::CustomGBForce *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::CustomGBForce * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CustomGBForce_setComputedValueParameters" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CustomGBForce_setComputedValueParameters" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CustomGBForce_setComputedValueParameters" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res4 = SWIG_AsPtr_std_string(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "CustomGBForce_setComputedValueParameters" "', argument " "4"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CustomGBForce_setComputedValueParameters" "', argument " "4"" of type '" "std::string const &""'"); 
    }
    arg4 = ptr;
  }
  ecode5 = SWIG_AsVal_int(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "CustomGBForce_setComputedValueParameters" "', argument " "5"" of type '" "OpenMM::CustomGBForce::ComputationType""'");
  } 
  arg5 = static_cast< OpenMM::CustomGBForce::ComputationType >(val5);
  {
    try {
      (arg1)->setComputedValueParameters(arg2,(std::string const &)*arg3,(std::string const &)*arg4,arg5);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CustomGBForce_addEnergyTerm(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::CustomGBForce *arg1 = (OpenMM::CustomGBForce *) 0 ;
  std::string *arg2 = 0 ;
  OpenMM::CustomGBForce::ComputationType arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:CustomGBForce_addEnergyTerm",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__CustomGBForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CustomGBForce_addEnergyTerm" "', argument " "1"" of type '" "OpenMM::CustomGBForce *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::CustomGBForce * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CustomGBForce_addEnergyTerm" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CustomGBForce_addEnergyTerm" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CustomGBForce_addEnergyTerm" "', argument " "3"" of type '" "OpenMM::CustomGBForce::ComputationType""'");
  } 
  arg3 = static_cast< OpenMM::CustomGBForce::ComputationType >(val3);
  {
    try {
      result = (int)(arg1)->addEnergyTerm((std::string const &)*arg2,arg3);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CustomGBForce_getEnergyTermParameters(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::CustomGBForce *arg1 = (OpenMM::CustomGBForce *) 0 ;
  int arg2 ;
  std::string *arg3 = 0 ;
  OpenMM::CustomGBForce::ComputationType *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  std::string temp3 ;
  int res3 = SWIG_TMPOBJ ;
  OpenMM::CustomGBForce::ComputationType temp4 ;
  int res4 = SWIG_TMPOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  arg3 = &temp3;
  arg4 = &temp4;
  if (!PyArg_ParseTuple(args,(char *)"OO:CustomGBForce_getEnergyTermParameters",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__CustomGBForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CustomGBForce_getEnergyTermParameters" "', argument " "1"" of type '" "OpenMM::CustomGBForce const *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::CustomGBForce * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CustomGBForce_getEnergyTermParameters" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      ((OpenMM::CustomGBForce const *)arg1)->getEnergyTermParameters(arg2,*arg3,*arg4);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsTmpObj(res3)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_From_std_string((*arg3)));
  } else {
    int new_flags = SWIG_IsNewObj(res3) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg3), SWIGTYPE_p_std__string, new_flags));
  }
  if (SWIG_IsTmpObj(res4)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_From_int((*arg4)));
  } else {
    int new_flags = SWIG_IsNewObj(res4) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg4), SWIGTYPE_p_OpenMM__CustomGBForce__ComputationType, new_flags));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CustomGBForce_setEnergyTermParameters(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::CustomGBForce *arg1 = (OpenMM::CustomGBForce *) 0 ;
  int arg2 ;
  std::string *arg3 = 0 ;
  OpenMM::CustomGBForce::ComputationType arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  int val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:CustomGBForce_setEnergyTermParameters",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__CustomGBForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CustomGBForce_setEnergyTermParameters" "', argument " "1"" of type '" "OpenMM::CustomGBForce *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::CustomGBForce * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CustomGBForce_setEnergyTermParameters" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CustomGBForce_setEnergyTermParameters" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CustomGBForce_setEnergyTermParameters" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "CustomGBForce_setEnergyTermParameters" "', argument " "4"" of type '" "OpenMM::CustomGBForce::ComputationType""'");
  } 
  arg4 = static_cast< OpenMM::CustomGBForce::ComputationType >(val4);
  {
    try {
      (arg1)->setEnergyTermParameters(arg2,(std::string const &)*arg3,arg4);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CustomGBForce_addExclusion(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::CustomGBForce *arg1 = (OpenMM::CustomGBForce *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:CustomGBForce_addExclusion",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__CustomGBForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CustomGBForce_addExclusion" "', argument " "1"" of type '" "OpenMM::CustomGBForce *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::CustomGBForce * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CustomGBForce_addExclusion" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CustomGBForce_addExclusion" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      result = (int)(arg1)->addExclusion(arg2,arg3);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CustomGBForce_getExclusionParticles(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::CustomGBForce *arg1 = (OpenMM::CustomGBForce *) 0 ;
  int arg2 ;
  int *arg3 = 0 ;
  int *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int temp3 ;
  int res3 = SWIG_TMPOBJ ;
  int temp4 ;
  int res4 = SWIG_TMPOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  arg3 = &temp3;
  arg4 = &temp4;
  if (!PyArg_ParseTuple(args,(char *)"OO:CustomGBForce_getExclusionParticles",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__CustomGBForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CustomGBForce_getExclusionParticles" "', argument " "1"" of type '" "OpenMM::CustomGBForce const *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::CustomGBForce * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CustomGBForce_getExclusionParticles" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      ((OpenMM::CustomGBForce const *)arg1)->getExclusionParticles(arg2,*arg3,*arg4);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsTmpObj(res3)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_From_int((*arg3)));
  } else {
    int new_flags = SWIG_IsNewObj(res3) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg3), SWIGTYPE_p_int, new_flags));
  }
  if (SWIG_IsTmpObj(res4)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_From_int((*arg4)));
  } else {
    int new_flags = SWIG_IsNewObj(res4) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg4), SWIGTYPE_p_int, new_flags));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CustomGBForce_setExclusionParticles(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::CustomGBForce *arg1 = (OpenMM::CustomGBForce *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:CustomGBForce_setExclusionParticles",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__CustomGBForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CustomGBForce_setExclusionParticles" "', argument " "1"" of type '" "OpenMM::CustomGBForce *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::CustomGBForce * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CustomGBForce_setExclusionParticles" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CustomGBForce_setExclusionParticles" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "CustomGBForce_setExclusionParticles" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  {
    try {
      (arg1)->setExclusionParticles(arg2,arg3,arg4);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CustomGBForce_addFunction(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::CustomGBForce *arg1 = (OpenMM::CustomGBForce *) 0 ;
  std::string *arg2 = 0 ;
  std::vector< double,std::allocator< double > > *arg3 = 0 ;
  double arg4 ;
  double arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int res3 = SWIG_OLDOBJ ;
  double val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:CustomGBForce_addFunction",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__CustomGBForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CustomGBForce_addFunction" "', argument " "1"" of type '" "OpenMM::CustomGBForce *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::CustomGBForce * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CustomGBForce_addFunction" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CustomGBForce_addFunction" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    std::vector<double,std::allocator< double > > *ptr = (std::vector<double,std::allocator< double > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CustomGBForce_addFunction" "', argument " "3"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CustomGBForce_addFunction" "', argument " "3"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    arg3 = ptr;
  }
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "CustomGBForce_addFunction" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  ecode5 = SWIG_AsVal_double(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "CustomGBForce_addFunction" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  {
    try {
      result = (int)(arg1)->addFunction((std::string const &)*arg2,(std::vector< double,std::allocator< double > > const &)*arg3,arg4,arg5);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CustomGBForce_getFunctionParameters(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::CustomGBForce *arg1 = (OpenMM::CustomGBForce *) 0 ;
  int arg2 ;
  std::string *arg3 = 0 ;
  std::vector< double,std::allocator< double > > *arg4 = 0 ;
  double *arg5 = 0 ;
  double *arg6 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  std::string temp3 ;
  int res3 = SWIG_TMPOBJ ;
  std::vector< double,std::allocator< double > > temp4 ;
  int res4 = SWIG_TMPOBJ ;
  double temp5 ;
  int res5 = SWIG_TMPOBJ ;
  double temp6 ;
  int res6 = SWIG_TMPOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  arg3 = &temp3;
  arg4 = &temp4;
  arg5 = &temp5;
  arg6 = &temp6;
  if (!PyArg_ParseTuple(args,(char *)"OO:CustomGBForce_getFunctionParameters",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__CustomGBForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CustomGBForce_getFunctionParameters" "', argument " "1"" of type '" "OpenMM::CustomGBForce const *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::CustomGBForce * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CustomGBForce_getFunctionParameters" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      ((OpenMM::CustomGBForce const *)arg1)->getFunctionParameters(arg2,*arg3,*arg4,*arg5,*arg6);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsTmpObj(res3)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_From_std_string((*arg3)));
  } else {
    int new_flags = SWIG_IsNewObj(res3) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg3), SWIGTYPE_p_std__string, new_flags));
  }
  if (SWIG_IsTmpObj(res4)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, swig::from((*arg4)));
  } else {
    int new_flags = SWIG_IsNewObj(res4) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg4), SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, new_flags));
  }
  if (SWIG_IsTmpObj(res5)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_From_double((*arg5)));
  } else {
    int new_flags = SWIG_IsNewObj(res5) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg5), SWIGTYPE_p_double, new_flags));
  }
  if (SWIG_IsTmpObj(res6)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_From_double((*arg6)));
  } else {
    int new_flags = SWIG_IsNewObj(res6) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg6), SWIGTYPE_p_double, new_flags));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CustomGBForce_setFunctionParameters(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::CustomGBForce *arg1 = (OpenMM::CustomGBForce *) 0 ;
  int arg2 ;
  std::string *arg3 = 0 ;
  std::vector< double,std::allocator< double > > *arg4 = 0 ;
  double arg5 ;
  double arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  int res4 = SWIG_OLDOBJ ;
  double val5 ;
  int ecode5 = 0 ;
  double val6 ;
  int ecode6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:CustomGBForce_setFunctionParameters",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__CustomGBForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CustomGBForce_setFunctionParameters" "', argument " "1"" of type '" "OpenMM::CustomGBForce *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::CustomGBForce * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CustomGBForce_setFunctionParameters" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CustomGBForce_setFunctionParameters" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CustomGBForce_setFunctionParameters" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  {
    std::vector<double,std::allocator< double > > *ptr = (std::vector<double,std::allocator< double > > *)0;
    res4 = swig::asptr(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "CustomGBForce_setFunctionParameters" "', argument " "4"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CustomGBForce_setFunctionParameters" "', argument " "4"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    arg4 = ptr;
  }
  ecode5 = SWIG_AsVal_double(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "CustomGBForce_setFunctionParameters" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  ecode6 = SWIG_AsVal_double(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "CustomGBForce_setFunctionParameters" "', argument " "6"" of type '" "double""'");
  } 
  arg6 = static_cast< double >(val6);
  {
    try {
      (arg1)->setFunctionParameters(arg2,(std::string const &)*arg3,(std::vector< double,std::allocator< double > > const &)*arg4,arg5,arg6);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_CustomGBForce__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::CustomGBForce *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  OpenMM::CustomGBForce *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_CustomGBForce",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_OpenMM__CustomGBForce,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_CustomGBForce" "', argument " "1"" of type '" "OpenMM::CustomGBForce const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_CustomGBForce" "', argument " "1"" of type '" "OpenMM::CustomGBForce const &""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::CustomGBForce * >(argp1);
  {
    try {
      result = (OpenMM::CustomGBForce *)new OpenMM::CustomGBForce((OpenMM::CustomGBForce const &)*arg1);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_OpenMM__CustomGBForce, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_CustomGBForce(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 1); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_CustomGBForce__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_OpenMM__CustomGBForce, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_CustomGBForce__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_CustomGBForce'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    OpenMM::CustomGBForce()\n"
    "    OpenMM::CustomGBForce::CustomGBForce(OpenMM::CustomGBForce const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_CustomGBForce(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::CustomGBForce *arg1 = (OpenMM::CustomGBForce *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_CustomGBForce",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__CustomGBForce, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_CustomGBForce" "', argument " "1"" of type '" "OpenMM::CustomGBForce *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::CustomGBForce * >(argp1);
  {
    try {
      delete arg1;
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *CustomGBForce_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_OpenMM__CustomGBForce, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_CustomHbondForce__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  OpenMM::CustomHbondForce *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_CustomHbondForce",&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_CustomHbondForce" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_CustomHbondForce" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  {
    try {
      result = (OpenMM::CustomHbondForce *)new OpenMM::CustomHbondForce((std::string const &)*arg1);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_OpenMM__CustomHbondForce, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CustomHbondForce_getNumDonors(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::CustomHbondForce *arg1 = (OpenMM::CustomHbondForce *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CustomHbondForce_getNumDonors",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__CustomHbondForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CustomHbondForce_getNumDonors" "', argument " "1"" of type '" "OpenMM::CustomHbondForce const *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::CustomHbondForce * >(argp1);
  {
    try {
      result = (int)((OpenMM::CustomHbondForce const *)arg1)->getNumDonors();
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CustomHbondForce_getNumAcceptors(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::CustomHbondForce *arg1 = (OpenMM::CustomHbondForce *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CustomHbondForce_getNumAcceptors",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__CustomHbondForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CustomHbondForce_getNumAcceptors" "', argument " "1"" of type '" "OpenMM::CustomHbondForce const *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::CustomHbondForce * >(argp1);
  {
    try {
      result = (int)((OpenMM::CustomHbondForce const *)arg1)->getNumAcceptors();
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CustomHbondForce_getNumExclusions(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::CustomHbondForce *arg1 = (OpenMM::CustomHbondForce *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CustomHbondForce_getNumExclusions",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__CustomHbondForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CustomHbondForce_getNumExclusions" "', argument " "1"" of type '" "OpenMM::CustomHbondForce const *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::CustomHbondForce * >(argp1);
  {
    try {
      result = (int)((OpenMM::CustomHbondForce const *)arg1)->getNumExclusions();
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CustomHbondForce_getNumPerDonorParameters(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::CustomHbondForce *arg1 = (OpenMM::CustomHbondForce *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CustomHbondForce_getNumPerDonorParameters",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__CustomHbondForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CustomHbondForce_getNumPerDonorParameters" "', argument " "1"" of type '" "OpenMM::CustomHbondForce const *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::CustomHbondForce * >(argp1);
  {
    try {
      result = (int)((OpenMM::CustomHbondForce const *)arg1)->getNumPerDonorParameters();
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CustomHbondForce_getNumPerAcceptorParameters(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::CustomHbondForce *arg1 = (OpenMM::CustomHbondForce *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CustomHbondForce_getNumPerAcceptorParameters",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__CustomHbondForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CustomHbondForce_getNumPerAcceptorParameters" "', argument " "1"" of type '" "OpenMM::CustomHbondForce const *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::CustomHbondForce * >(argp1);
  {
    try {
      result = (int)((OpenMM::CustomHbondForce const *)arg1)->getNumPerAcceptorParameters();
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CustomHbondForce_getNumGlobalParameters(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::CustomHbondForce *arg1 = (OpenMM::CustomHbondForce *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CustomHbondForce_getNumGlobalParameters",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__CustomHbondForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CustomHbondForce_getNumGlobalParameters" "', argument " "1"" of type '" "OpenMM::CustomHbondForce const *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::CustomHbondForce * >(argp1);
  {
    try {
      result = (int)((OpenMM::CustomHbondForce const *)arg1)->getNumGlobalParameters();
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CustomHbondForce_getNumFunctions(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::CustomHbondForce *arg1 = (OpenMM::CustomHbondForce *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CustomHbondForce_getNumFunctions",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__CustomHbondForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CustomHbondForce_getNumFunctions" "', argument " "1"" of type '" "OpenMM::CustomHbondForce const *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::CustomHbondForce * >(argp1);
  {
    try {
      result = (int)((OpenMM::CustomHbondForce const *)arg1)->getNumFunctions();
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CustomHbondForce_getEnergyFunction(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::CustomHbondForce *arg1 = (OpenMM::CustomHbondForce *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CustomHbondForce_getEnergyFunction",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__CustomHbondForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CustomHbondForce_getEnergyFunction" "', argument " "1"" of type '" "OpenMM::CustomHbondForce const *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::CustomHbondForce * >(argp1);
  {
    try {
      result = (std::string *) &((OpenMM::CustomHbondForce const *)arg1)->getEnergyFunction();
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CustomHbondForce_setEnergyFunction(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::CustomHbondForce *arg1 = (OpenMM::CustomHbondForce *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CustomHbondForce_setEnergyFunction",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__CustomHbondForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CustomHbondForce_setEnergyFunction" "', argument " "1"" of type '" "OpenMM::CustomHbondForce *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::CustomHbondForce * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CustomHbondForce_setEnergyFunction" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CustomHbondForce_setEnergyFunction" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      (arg1)->setEnergyFunction((std::string const &)*arg2);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CustomHbondForce_getNonbondedMethod(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::CustomHbondForce *arg1 = (OpenMM::CustomHbondForce *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  OpenMM::CustomHbondForce::NonbondedMethod result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CustomHbondForce_getNonbondedMethod",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__CustomHbondForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CustomHbondForce_getNonbondedMethod" "', argument " "1"" of type '" "OpenMM::CustomHbondForce const *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::CustomHbondForce * >(argp1);
  {
    try {
      result = (OpenMM::CustomHbondForce::NonbondedMethod)((OpenMM::CustomHbondForce const *)arg1)->getNonbondedMethod();
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CustomHbondForce_setNonbondedMethod(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::CustomHbondForce *arg1 = (OpenMM::CustomHbondForce *) 0 ;
  OpenMM::CustomHbondForce::NonbondedMethod arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CustomHbondForce_setNonbondedMethod",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__CustomHbondForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CustomHbondForce_setNonbondedMethod" "', argument " "1"" of type '" "OpenMM::CustomHbondForce *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::CustomHbondForce * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CustomHbondForce_setNonbondedMethod" "', argument " "2"" of type '" "OpenMM::CustomHbondForce::NonbondedMethod""'");
  } 
  arg2 = static_cast< OpenMM::CustomHbondForce::NonbondedMethod >(val2);
  {
    try {
      (arg1)->setNonbondedMethod(arg2);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CustomHbondForce_getCutoffDistance(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::CustomHbondForce *arg1 = (OpenMM::CustomHbondForce *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CustomHbondForce_getCutoffDistance",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__CustomHbondForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CustomHbondForce_getCutoffDistance" "', argument " "1"" of type '" "OpenMM::CustomHbondForce const *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::CustomHbondForce * >(argp1);
  {
    try {
      result = (double)((OpenMM::CustomHbondForce const *)arg1)->getCutoffDistance();
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CustomHbondForce_setCutoffDistance(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::CustomHbondForce *arg1 = (OpenMM::CustomHbondForce *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CustomHbondForce_setCutoffDistance",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__CustomHbondForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CustomHbondForce_setCutoffDistance" "', argument " "1"" of type '" "OpenMM::CustomHbondForce *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::CustomHbondForce * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CustomHbondForce_setCutoffDistance" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->setCutoffDistance(arg2);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CustomHbondForce_addPerDonorParameter(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::CustomHbondForce *arg1 = (OpenMM::CustomHbondForce *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CustomHbondForce_addPerDonorParameter",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__CustomHbondForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CustomHbondForce_addPerDonorParameter" "', argument " "1"" of type '" "OpenMM::CustomHbondForce *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::CustomHbondForce * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CustomHbondForce_addPerDonorParameter" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CustomHbondForce_addPerDonorParameter" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (int)(arg1)->addPerDonorParameter((std::string const &)*arg2);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CustomHbondForce_getPerDonorParameterName(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::CustomHbondForce *arg1 = (OpenMM::CustomHbondForce *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::string *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CustomHbondForce_getPerDonorParameterName",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__CustomHbondForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CustomHbondForce_getPerDonorParameterName" "', argument " "1"" of type '" "OpenMM::CustomHbondForce const *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::CustomHbondForce * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CustomHbondForce_getPerDonorParameterName" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (std::string *) &((OpenMM::CustomHbondForce const *)arg1)->getPerDonorParameterName(arg2);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CustomHbondForce_setPerDonorParameterName(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::CustomHbondForce *arg1 = (OpenMM::CustomHbondForce *) 0 ;
  int arg2 ;
  std::string *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:CustomHbondForce_setPerDonorParameterName",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__CustomHbondForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CustomHbondForce_setPerDonorParameterName" "', argument " "1"" of type '" "OpenMM::CustomHbondForce *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::CustomHbondForce * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CustomHbondForce_setPerDonorParameterName" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CustomHbondForce_setPerDonorParameterName" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CustomHbondForce_setPerDonorParameterName" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      (arg1)->setPerDonorParameterName(arg2,(std::string const &)*arg3);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CustomHbondForce_addPerAcceptorParameter(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::CustomHbondForce *arg1 = (OpenMM::CustomHbondForce *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CustomHbondForce_addPerAcceptorParameter",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__CustomHbondForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CustomHbondForce_addPerAcceptorParameter" "', argument " "1"" of type '" "OpenMM::CustomHbondForce *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::CustomHbondForce * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CustomHbondForce_addPerAcceptorParameter" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CustomHbondForce_addPerAcceptorParameter" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (int)(arg1)->addPerAcceptorParameter((std::string const &)*arg2);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CustomHbondForce_getPerAcceptorParameterName(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::CustomHbondForce *arg1 = (OpenMM::CustomHbondForce *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::string *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CustomHbondForce_getPerAcceptorParameterName",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__CustomHbondForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CustomHbondForce_getPerAcceptorParameterName" "', argument " "1"" of type '" "OpenMM::CustomHbondForce const *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::CustomHbondForce * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CustomHbondForce_getPerAcceptorParameterName" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (std::string *) &((OpenMM::CustomHbondForce const *)arg1)->getPerAcceptorParameterName(arg2);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CustomHbondForce_setPerAcceptorParameterName(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::CustomHbondForce *arg1 = (OpenMM::CustomHbondForce *) 0 ;
  int arg2 ;
  std::string *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:CustomHbondForce_setPerAcceptorParameterName",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__CustomHbondForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CustomHbondForce_setPerAcceptorParameterName" "', argument " "1"" of type '" "OpenMM::CustomHbondForce *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::CustomHbondForce * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CustomHbondForce_setPerAcceptorParameterName" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CustomHbondForce_setPerAcceptorParameterName" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CustomHbondForce_setPerAcceptorParameterName" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      (arg1)->setPerAcceptorParameterName(arg2,(std::string const &)*arg3);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CustomHbondForce_addGlobalParameter(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::CustomHbondForce *arg1 = (OpenMM::CustomHbondForce *) 0 ;
  std::string *arg2 = 0 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:CustomHbondForce_addGlobalParameter",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__CustomHbondForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CustomHbondForce_addGlobalParameter" "', argument " "1"" of type '" "OpenMM::CustomHbondForce *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::CustomHbondForce * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CustomHbondForce_addGlobalParameter" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CustomHbondForce_addGlobalParameter" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CustomHbondForce_addGlobalParameter" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      result = (int)(arg1)->addGlobalParameter((std::string const &)*arg2,arg3);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CustomHbondForce_getGlobalParameterName(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::CustomHbondForce *arg1 = (OpenMM::CustomHbondForce *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::string *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CustomHbondForce_getGlobalParameterName",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__CustomHbondForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CustomHbondForce_getGlobalParameterName" "', argument " "1"" of type '" "OpenMM::CustomHbondForce const *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::CustomHbondForce * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CustomHbondForce_getGlobalParameterName" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (std::string *) &((OpenMM::CustomHbondForce const *)arg1)->getGlobalParameterName(arg2);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CustomHbondForce_setGlobalParameterName(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::CustomHbondForce *arg1 = (OpenMM::CustomHbondForce *) 0 ;
  int arg2 ;
  std::string *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:CustomHbondForce_setGlobalParameterName",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__CustomHbondForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CustomHbondForce_setGlobalParameterName" "', argument " "1"" of type '" "OpenMM::CustomHbondForce *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::CustomHbondForce * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CustomHbondForce_setGlobalParameterName" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CustomHbondForce_setGlobalParameterName" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CustomHbondForce_setGlobalParameterName" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      (arg1)->setGlobalParameterName(arg2,(std::string const &)*arg3);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CustomHbondForce_getGlobalParameterDefaultValue(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::CustomHbondForce *arg1 = (OpenMM::CustomHbondForce *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CustomHbondForce_getGlobalParameterDefaultValue",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__CustomHbondForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CustomHbondForce_getGlobalParameterDefaultValue" "', argument " "1"" of type '" "OpenMM::CustomHbondForce const *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::CustomHbondForce * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CustomHbondForce_getGlobalParameterDefaultValue" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (double)((OpenMM::CustomHbondForce const *)arg1)->getGlobalParameterDefaultValue(arg2);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CustomHbondForce_setGlobalParameterDefaultValue(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::CustomHbondForce *arg1 = (OpenMM::CustomHbondForce *) 0 ;
  int arg2 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:CustomHbondForce_setGlobalParameterDefaultValue",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__CustomHbondForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CustomHbondForce_setGlobalParameterDefaultValue" "', argument " "1"" of type '" "OpenMM::CustomHbondForce *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::CustomHbondForce * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CustomHbondForce_setGlobalParameterDefaultValue" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CustomHbondForce_setGlobalParameterDefaultValue" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      (arg1)->setGlobalParameterDefaultValue(arg2,arg3);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CustomHbondForce_addDonor(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::CustomHbondForce *arg1 = (OpenMM::CustomHbondForce *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  std::vector< double,std::allocator< double > > *arg5 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int res5 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:CustomHbondForce_addDonor",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__CustomHbondForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CustomHbondForce_addDonor" "', argument " "1"" of type '" "OpenMM::CustomHbondForce *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::CustomHbondForce * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CustomHbondForce_addDonor" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CustomHbondForce_addDonor" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "CustomHbondForce_addDonor" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  {
    std::vector<double,std::allocator< double > > *ptr = (std::vector<double,std::allocator< double > > *)0;
    res5 = swig::asptr(obj4, &ptr);
    if (!SWIG_IsOK(res5)) {
      SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "CustomHbondForce_addDonor" "', argument " "5"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CustomHbondForce_addDonor" "', argument " "5"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    arg5 = ptr;
  }
  {
    try {
      result = (int)(arg1)->addDonor(arg2,arg3,arg4,(std::vector< double,std::allocator< double > > const &)*arg5);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (SWIG_IsNewObj(res5)) delete arg5;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res5)) delete arg5;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CustomHbondForce_getDonorParameters(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::CustomHbondForce *arg1 = (OpenMM::CustomHbondForce *) 0 ;
  int arg2 ;
  int *arg3 = 0 ;
  int *arg4 = 0 ;
  int *arg5 = 0 ;
  std::vector< double,std::allocator< double > > *arg6 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int temp3 ;
  int res3 = SWIG_TMPOBJ ;
  int temp4 ;
  int res4 = SWIG_TMPOBJ ;
  int temp5 ;
  int res5 = SWIG_TMPOBJ ;
  std::vector< double,std::allocator< double > > temp6 ;
  int res6 = SWIG_TMPOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  arg3 = &temp3;
  arg4 = &temp4;
  arg5 = &temp5;
  arg6 = &temp6;
  if (!PyArg_ParseTuple(args,(char *)"OO:CustomHbondForce_getDonorParameters",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__CustomHbondForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CustomHbondForce_getDonorParameters" "', argument " "1"" of type '" "OpenMM::CustomHbondForce const *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::CustomHbondForce * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CustomHbondForce_getDonorParameters" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      ((OpenMM::CustomHbondForce const *)arg1)->getDonorParameters(arg2,*arg3,*arg4,*arg5,*arg6);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsTmpObj(res3)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_From_int((*arg3)));
  } else {
    int new_flags = SWIG_IsNewObj(res3) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg3), SWIGTYPE_p_int, new_flags));
  }
  if (SWIG_IsTmpObj(res4)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_From_int((*arg4)));
  } else {
    int new_flags = SWIG_IsNewObj(res4) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg4), SWIGTYPE_p_int, new_flags));
  }
  if (SWIG_IsTmpObj(res5)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_From_int((*arg5)));
  } else {
    int new_flags = SWIG_IsNewObj(res5) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg5), SWIGTYPE_p_int, new_flags));
  }
  if (SWIG_IsTmpObj(res6)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, swig::from((*arg6)));
  } else {
    int new_flags = SWIG_IsNewObj(res6) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg6), SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, new_flags));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CustomHbondForce_setDonorParameters(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::CustomHbondForce *arg1 = (OpenMM::CustomHbondForce *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  std::vector< double,std::allocator< double > > *arg6 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  int res6 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:CustomHbondForce_setDonorParameters",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__CustomHbondForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CustomHbondForce_setDonorParameters" "', argument " "1"" of type '" "OpenMM::CustomHbondForce *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::CustomHbondForce * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CustomHbondForce_setDonorParameters" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CustomHbondForce_setDonorParameters" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "CustomHbondForce_setDonorParameters" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  ecode5 = SWIG_AsVal_int(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "CustomHbondForce_setDonorParameters" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  {
    std::vector<double,std::allocator< double > > *ptr = (std::vector<double,std::allocator< double > > *)0;
    res6 = swig::asptr(obj5, &ptr);
    if (!SWIG_IsOK(res6)) {
      SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "CustomHbondForce_setDonorParameters" "', argument " "6"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CustomHbondForce_setDonorParameters" "', argument " "6"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    arg6 = ptr;
  }
  {
    try {
      (arg1)->setDonorParameters(arg2,arg3,arg4,arg5,(std::vector< double,std::allocator< double > > const &)*arg6);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res6)) delete arg6;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res6)) delete arg6;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CustomHbondForce_addAcceptor(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::CustomHbondForce *arg1 = (OpenMM::CustomHbondForce *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  std::vector< double,std::allocator< double > > *arg5 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int res5 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:CustomHbondForce_addAcceptor",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__CustomHbondForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CustomHbondForce_addAcceptor" "', argument " "1"" of type '" "OpenMM::CustomHbondForce *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::CustomHbondForce * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CustomHbondForce_addAcceptor" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CustomHbondForce_addAcceptor" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "CustomHbondForce_addAcceptor" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  {
    std::vector<double,std::allocator< double > > *ptr = (std::vector<double,std::allocator< double > > *)0;
    res5 = swig::asptr(obj4, &ptr);
    if (!SWIG_IsOK(res5)) {
      SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "CustomHbondForce_addAcceptor" "', argument " "5"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CustomHbondForce_addAcceptor" "', argument " "5"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    arg5 = ptr;
  }
  {
    try {
      result = (int)(arg1)->addAcceptor(arg2,arg3,arg4,(std::vector< double,std::allocator< double > > const &)*arg5);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (SWIG_IsNewObj(res5)) delete arg5;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res5)) delete arg5;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CustomHbondForce_getAcceptorParameters(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::CustomHbondForce *arg1 = (OpenMM::CustomHbondForce *) 0 ;
  int arg2 ;
  int *arg3 = 0 ;
  int *arg4 = 0 ;
  int *arg5 = 0 ;
  std::vector< double,std::allocator< double > > *arg6 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int temp3 ;
  int res3 = SWIG_TMPOBJ ;
  int temp4 ;
  int res4 = SWIG_TMPOBJ ;
  int temp5 ;
  int res5 = SWIG_TMPOBJ ;
  std::vector< double,std::allocator< double > > temp6 ;
  int res6 = SWIG_TMPOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  arg3 = &temp3;
  arg4 = &temp4;
  arg5 = &temp5;
  arg6 = &temp6;
  if (!PyArg_ParseTuple(args,(char *)"OO:CustomHbondForce_getAcceptorParameters",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__CustomHbondForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CustomHbondForce_getAcceptorParameters" "', argument " "1"" of type '" "OpenMM::CustomHbondForce const *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::CustomHbondForce * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CustomHbondForce_getAcceptorParameters" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      ((OpenMM::CustomHbondForce const *)arg1)->getAcceptorParameters(arg2,*arg3,*arg4,*arg5,*arg6);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsTmpObj(res3)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_From_int((*arg3)));
  } else {
    int new_flags = SWIG_IsNewObj(res3) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg3), SWIGTYPE_p_int, new_flags));
  }
  if (SWIG_IsTmpObj(res4)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_From_int((*arg4)));
  } else {
    int new_flags = SWIG_IsNewObj(res4) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg4), SWIGTYPE_p_int, new_flags));
  }
  if (SWIG_IsTmpObj(res5)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_From_int((*arg5)));
  } else {
    int new_flags = SWIG_IsNewObj(res5) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg5), SWIGTYPE_p_int, new_flags));
  }
  if (SWIG_IsTmpObj(res6)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, swig::from((*arg6)));
  } else {
    int new_flags = SWIG_IsNewObj(res6) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg6), SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, new_flags));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CustomHbondForce_setAcceptorParameters(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::CustomHbondForce *arg1 = (OpenMM::CustomHbondForce *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  std::vector< double,std::allocator< double > > *arg6 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  int res6 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:CustomHbondForce_setAcceptorParameters",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__CustomHbondForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CustomHbondForce_setAcceptorParameters" "', argument " "1"" of type '" "OpenMM::CustomHbondForce *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::CustomHbondForce * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CustomHbondForce_setAcceptorParameters" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CustomHbondForce_setAcceptorParameters" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "CustomHbondForce_setAcceptorParameters" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  ecode5 = SWIG_AsVal_int(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "CustomHbondForce_setAcceptorParameters" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  {
    std::vector<double,std::allocator< double > > *ptr = (std::vector<double,std::allocator< double > > *)0;
    res6 = swig::asptr(obj5, &ptr);
    if (!SWIG_IsOK(res6)) {
      SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "CustomHbondForce_setAcceptorParameters" "', argument " "6"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CustomHbondForce_setAcceptorParameters" "', argument " "6"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    arg6 = ptr;
  }
  {
    try {
      (arg1)->setAcceptorParameters(arg2,arg3,arg4,arg5,(std::vector< double,std::allocator< double > > const &)*arg6);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res6)) delete arg6;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res6)) delete arg6;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CustomHbondForce_addExclusion(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::CustomHbondForce *arg1 = (OpenMM::CustomHbondForce *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:CustomHbondForce_addExclusion",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__CustomHbondForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CustomHbondForce_addExclusion" "', argument " "1"" of type '" "OpenMM::CustomHbondForce *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::CustomHbondForce * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CustomHbondForce_addExclusion" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CustomHbondForce_addExclusion" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      result = (int)(arg1)->addExclusion(arg2,arg3);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CustomHbondForce_getExclusionParticles(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::CustomHbondForce *arg1 = (OpenMM::CustomHbondForce *) 0 ;
  int arg2 ;
  int *arg3 = 0 ;
  int *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int temp3 ;
  int res3 = SWIG_TMPOBJ ;
  int temp4 ;
  int res4 = SWIG_TMPOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  arg3 = &temp3;
  arg4 = &temp4;
  if (!PyArg_ParseTuple(args,(char *)"OO:CustomHbondForce_getExclusionParticles",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__CustomHbondForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CustomHbondForce_getExclusionParticles" "', argument " "1"" of type '" "OpenMM::CustomHbondForce const *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::CustomHbondForce * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CustomHbondForce_getExclusionParticles" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      ((OpenMM::CustomHbondForce const *)arg1)->getExclusionParticles(arg2,*arg3,*arg4);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsTmpObj(res3)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_From_int((*arg3)));
  } else {
    int new_flags = SWIG_IsNewObj(res3) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg3), SWIGTYPE_p_int, new_flags));
  }
  if (SWIG_IsTmpObj(res4)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_From_int((*arg4)));
  } else {
    int new_flags = SWIG_IsNewObj(res4) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg4), SWIGTYPE_p_int, new_flags));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CustomHbondForce_setExclusionParticles(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::CustomHbondForce *arg1 = (OpenMM::CustomHbondForce *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:CustomHbondForce_setExclusionParticles",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__CustomHbondForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CustomHbondForce_setExclusionParticles" "', argument " "1"" of type '" "OpenMM::CustomHbondForce *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::CustomHbondForce * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CustomHbondForce_setExclusionParticles" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CustomHbondForce_setExclusionParticles" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "CustomHbondForce_setExclusionParticles" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  {
    try {
      (arg1)->setExclusionParticles(arg2,arg3,arg4);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CustomHbondForce_addFunction(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::CustomHbondForce *arg1 = (OpenMM::CustomHbondForce *) 0 ;
  std::string *arg2 = 0 ;
  std::vector< double,std::allocator< double > > *arg3 = 0 ;
  double arg4 ;
  double arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int res3 = SWIG_OLDOBJ ;
  double val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:CustomHbondForce_addFunction",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__CustomHbondForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CustomHbondForce_addFunction" "', argument " "1"" of type '" "OpenMM::CustomHbondForce *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::CustomHbondForce * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CustomHbondForce_addFunction" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CustomHbondForce_addFunction" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    std::vector<double,std::allocator< double > > *ptr = (std::vector<double,std::allocator< double > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CustomHbondForce_addFunction" "', argument " "3"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CustomHbondForce_addFunction" "', argument " "3"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    arg3 = ptr;
  }
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "CustomHbondForce_addFunction" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  ecode5 = SWIG_AsVal_double(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "CustomHbondForce_addFunction" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  {
    try {
      result = (int)(arg1)->addFunction((std::string const &)*arg2,(std::vector< double,std::allocator< double > > const &)*arg3,arg4,arg5);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CustomHbondForce_getFunctionParameters(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::CustomHbondForce *arg1 = (OpenMM::CustomHbondForce *) 0 ;
  int arg2 ;
  std::string *arg3 = 0 ;
  std::vector< double,std::allocator< double > > *arg4 = 0 ;
  double *arg5 = 0 ;
  double *arg6 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  std::string temp3 ;
  int res3 = SWIG_TMPOBJ ;
  std::vector< double,std::allocator< double > > temp4 ;
  int res4 = SWIG_TMPOBJ ;
  double temp5 ;
  int res5 = SWIG_TMPOBJ ;
  double temp6 ;
  int res6 = SWIG_TMPOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  arg3 = &temp3;
  arg4 = &temp4;
  arg5 = &temp5;
  arg6 = &temp6;
  if (!PyArg_ParseTuple(args,(char *)"OO:CustomHbondForce_getFunctionParameters",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__CustomHbondForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CustomHbondForce_getFunctionParameters" "', argument " "1"" of type '" "OpenMM::CustomHbondForce const *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::CustomHbondForce * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CustomHbondForce_getFunctionParameters" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      ((OpenMM::CustomHbondForce const *)arg1)->getFunctionParameters(arg2,*arg3,*arg4,*arg5,*arg6);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsTmpObj(res3)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_From_std_string((*arg3)));
  } else {
    int new_flags = SWIG_IsNewObj(res3) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg3), SWIGTYPE_p_std__string, new_flags));
  }
  if (SWIG_IsTmpObj(res4)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, swig::from((*arg4)));
  } else {
    int new_flags = SWIG_IsNewObj(res4) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg4), SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, new_flags));
  }
  if (SWIG_IsTmpObj(res5)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_From_double((*arg5)));
  } else {
    int new_flags = SWIG_IsNewObj(res5) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg5), SWIGTYPE_p_double, new_flags));
  }
  if (SWIG_IsTmpObj(res6)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_From_double((*arg6)));
  } else {
    int new_flags = SWIG_IsNewObj(res6) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg6), SWIGTYPE_p_double, new_flags));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CustomHbondForce_setFunctionParameters(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::CustomHbondForce *arg1 = (OpenMM::CustomHbondForce *) 0 ;
  int arg2 ;
  std::string *arg3 = 0 ;
  std::vector< double,std::allocator< double > > *arg4 = 0 ;
  double arg5 ;
  double arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  int res4 = SWIG_OLDOBJ ;
  double val5 ;
  int ecode5 = 0 ;
  double val6 ;
  int ecode6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:CustomHbondForce_setFunctionParameters",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__CustomHbondForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CustomHbondForce_setFunctionParameters" "', argument " "1"" of type '" "OpenMM::CustomHbondForce *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::CustomHbondForce * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CustomHbondForce_setFunctionParameters" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CustomHbondForce_setFunctionParameters" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CustomHbondForce_setFunctionParameters" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  {
    std::vector<double,std::allocator< double > > *ptr = (std::vector<double,std::allocator< double > > *)0;
    res4 = swig::asptr(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "CustomHbondForce_setFunctionParameters" "', argument " "4"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CustomHbondForce_setFunctionParameters" "', argument " "4"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    arg4 = ptr;
  }
  ecode5 = SWIG_AsVal_double(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "CustomHbondForce_setFunctionParameters" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  ecode6 = SWIG_AsVal_double(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "CustomHbondForce_setFunctionParameters" "', argument " "6"" of type '" "double""'");
  } 
  arg6 = static_cast< double >(val6);
  {
    try {
      (arg1)->setFunctionParameters(arg2,(std::string const &)*arg3,(std::vector< double,std::allocator< double > > const &)*arg4,arg5,arg6);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_CustomHbondForce__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::CustomHbondForce *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  OpenMM::CustomHbondForce *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_CustomHbondForce",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_OpenMM__CustomHbondForce,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_CustomHbondForce" "', argument " "1"" of type '" "OpenMM::CustomHbondForce const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_CustomHbondForce" "', argument " "1"" of type '" "OpenMM::CustomHbondForce const &""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::CustomHbondForce * >(argp1);
  {
    try {
      result = (OpenMM::CustomHbondForce *)new OpenMM::CustomHbondForce((OpenMM::CustomHbondForce const &)*arg1);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_OpenMM__CustomHbondForce, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_CustomHbondForce(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 1); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_OpenMM__CustomHbondForce, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_CustomHbondForce__SWIG_1(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_CustomHbondForce__SWIG_0(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_CustomHbondForce'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    OpenMM::CustomHbondForce(std::string const &)\n"
    "    OpenMM::CustomHbondForce::CustomHbondForce(OpenMM::CustomHbondForce const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_CustomHbondForce(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::CustomHbondForce *arg1 = (OpenMM::CustomHbondForce *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_CustomHbondForce",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__CustomHbondForce, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_CustomHbondForce" "', argument " "1"" of type '" "OpenMM::CustomHbondForce *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::CustomHbondForce * >(argp1);
  {
    try {
      delete arg1;
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *CustomHbondForce_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_OpenMM__CustomHbondForce, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_CustomIntegrator__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  OpenMM::CustomIntegrator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_CustomIntegrator",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_CustomIntegrator" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  {
    try {
      result = (OpenMM::CustomIntegrator *)new OpenMM::CustomIntegrator(arg1);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_OpenMM__CustomIntegrator, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CustomIntegrator_getNumGlobalVariables(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::CustomIntegrator *arg1 = (OpenMM::CustomIntegrator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CustomIntegrator_getNumGlobalVariables",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__CustomIntegrator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CustomIntegrator_getNumGlobalVariables" "', argument " "1"" of type '" "OpenMM::CustomIntegrator const *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::CustomIntegrator * >(argp1);
  {
    try {
      result = (int)((OpenMM::CustomIntegrator const *)arg1)->getNumGlobalVariables();
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CustomIntegrator_getNumPerDofVariables(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::CustomIntegrator *arg1 = (OpenMM::CustomIntegrator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CustomIntegrator_getNumPerDofVariables",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__CustomIntegrator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CustomIntegrator_getNumPerDofVariables" "', argument " "1"" of type '" "OpenMM::CustomIntegrator const *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::CustomIntegrator * >(argp1);
  {
    try {
      result = (int)((OpenMM::CustomIntegrator const *)arg1)->getNumPerDofVariables();
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CustomIntegrator_getNumComputations(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::CustomIntegrator *arg1 = (OpenMM::CustomIntegrator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CustomIntegrator_getNumComputations",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__CustomIntegrator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CustomIntegrator_getNumComputations" "', argument " "1"" of type '" "OpenMM::CustomIntegrator const *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::CustomIntegrator * >(argp1);
  {
    try {
      result = (int)((OpenMM::CustomIntegrator const *)arg1)->getNumComputations();
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CustomIntegrator_addGlobalVariable(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::CustomIntegrator *arg1 = (OpenMM::CustomIntegrator *) 0 ;
  std::string *arg2 = 0 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:CustomIntegrator_addGlobalVariable",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__CustomIntegrator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CustomIntegrator_addGlobalVariable" "', argument " "1"" of type '" "OpenMM::CustomIntegrator *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::CustomIntegrator * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CustomIntegrator_addGlobalVariable" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CustomIntegrator_addGlobalVariable" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CustomIntegrator_addGlobalVariable" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      result = (int)(arg1)->addGlobalVariable((std::string const &)*arg2,arg3);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CustomIntegrator_getGlobalVariableName(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::CustomIntegrator *arg1 = (OpenMM::CustomIntegrator *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::string *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CustomIntegrator_getGlobalVariableName",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__CustomIntegrator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CustomIntegrator_getGlobalVariableName" "', argument " "1"" of type '" "OpenMM::CustomIntegrator const *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::CustomIntegrator * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CustomIntegrator_getGlobalVariableName" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (std::string *) &((OpenMM::CustomIntegrator const *)arg1)->getGlobalVariableName(arg2);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CustomIntegrator_addPerDofVariable(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::CustomIntegrator *arg1 = (OpenMM::CustomIntegrator *) 0 ;
  std::string *arg2 = 0 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:CustomIntegrator_addPerDofVariable",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__CustomIntegrator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CustomIntegrator_addPerDofVariable" "', argument " "1"" of type '" "OpenMM::CustomIntegrator *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::CustomIntegrator * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CustomIntegrator_addPerDofVariable" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CustomIntegrator_addPerDofVariable" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CustomIntegrator_addPerDofVariable" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      result = (int)(arg1)->addPerDofVariable((std::string const &)*arg2,arg3);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CustomIntegrator_getPerDofVariableName(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::CustomIntegrator *arg1 = (OpenMM::CustomIntegrator *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::string *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CustomIntegrator_getPerDofVariableName",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__CustomIntegrator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CustomIntegrator_getPerDofVariableName" "', argument " "1"" of type '" "OpenMM::CustomIntegrator const *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::CustomIntegrator * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CustomIntegrator_getPerDofVariableName" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (std::string *) &((OpenMM::CustomIntegrator const *)arg1)->getPerDofVariableName(arg2);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CustomIntegrator_getGlobalVariable(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::CustomIntegrator *arg1 = (OpenMM::CustomIntegrator *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CustomIntegrator_getGlobalVariable",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__CustomIntegrator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CustomIntegrator_getGlobalVariable" "', argument " "1"" of type '" "OpenMM::CustomIntegrator const *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::CustomIntegrator * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CustomIntegrator_getGlobalVariable" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (double)((OpenMM::CustomIntegrator const *)arg1)->getGlobalVariable(arg2);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CustomIntegrator_setGlobalVariable(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::CustomIntegrator *arg1 = (OpenMM::CustomIntegrator *) 0 ;
  int arg2 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:CustomIntegrator_setGlobalVariable",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__CustomIntegrator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CustomIntegrator_setGlobalVariable" "', argument " "1"" of type '" "OpenMM::CustomIntegrator *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::CustomIntegrator * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CustomIntegrator_setGlobalVariable" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CustomIntegrator_setGlobalVariable" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      (arg1)->setGlobalVariable(arg2,arg3);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CustomIntegrator_setGlobalVariableByName(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::CustomIntegrator *arg1 = (OpenMM::CustomIntegrator *) 0 ;
  std::string *arg2 = 0 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:CustomIntegrator_setGlobalVariableByName",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__CustomIntegrator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CustomIntegrator_setGlobalVariableByName" "', argument " "1"" of type '" "OpenMM::CustomIntegrator *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::CustomIntegrator * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CustomIntegrator_setGlobalVariableByName" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CustomIntegrator_setGlobalVariableByName" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CustomIntegrator_setGlobalVariableByName" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      (arg1)->setGlobalVariableByName((std::string const &)*arg2,arg3);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CustomIntegrator_getPerDofVariable__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::CustomIntegrator *arg1 = (OpenMM::CustomIntegrator *) 0 ;
  int arg2 ;
  std::vector< Vec3,std::allocator< Vec3 > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  std::vector< OpenMM::Vec3 > vVec3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:CustomIntegrator_getPerDofVariable",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__CustomIntegrator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CustomIntegrator_getPerDofVariable" "', argument " "1"" of type '" "OpenMM::CustomIntegrator const *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::CustomIntegrator * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CustomIntegrator_getPerDofVariable" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    // typemap -- %typemap(in) std::vector<Vec3>& (std::vector<OpenMM::Vec3> vVec3)
    int i, pLength;
    double x, y, z;
    PyObject *o;
    PyObject *o1;
    
    pLength=(int)PySequence_Length(obj2);
    for (i=0; i<pLength; i++) {
      o=PySequence_GetItem(obj2, i);
      
      o1=PySequence_GetItem(o, 0);
      x=PyFloat_AsDouble(o1);
      Py_DECREF(o1);
      
      o1=PySequence_GetItem(o, 1);
      y=PyFloat_AsDouble(o1);
      Py_DECREF(o1);
      
      o1=PySequence_GetItem(o, 2);
      z=PyFloat_AsDouble(o1);
      Py_DECREF(o1);
      
      Py_DECREF(o);
      vVec3.push_back( OpenMM::Vec3(x, y, z) );
    }
    arg3 = &vVec3;
  }
  {
    try {
      ((OpenMM::CustomIntegrator const *)arg1)->getPerDofVariable(arg2,*arg3);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CustomIntegrator_setPerDofVariable(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::CustomIntegrator *arg1 = (OpenMM::CustomIntegrator *) 0 ;
  int arg2 ;
  std::vector< Vec3,std::allocator< Vec3 > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  std::vector< OpenMM::Vec3 > vVec3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:CustomIntegrator_setPerDofVariable",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__CustomIntegrator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CustomIntegrator_setPerDofVariable" "', argument " "1"" of type '" "OpenMM::CustomIntegrator *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::CustomIntegrator * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CustomIntegrator_setPerDofVariable" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    // typemap -- %typemap(in) std::vector<Vec3>& (std::vector<OpenMM::Vec3> vVec3)
    int i, pLength;
    double x, y, z;
    PyObject *o;
    PyObject *o1;
    
    pLength=(int)PySequence_Length(obj2);
    for (i=0; i<pLength; i++) {
      o=PySequence_GetItem(obj2, i);
      
      o1=PySequence_GetItem(o, 0);
      x=PyFloat_AsDouble(o1);
      Py_DECREF(o1);
      
      o1=PySequence_GetItem(o, 1);
      y=PyFloat_AsDouble(o1);
      Py_DECREF(o1);
      
      o1=PySequence_GetItem(o, 2);
      z=PyFloat_AsDouble(o1);
      Py_DECREF(o1);
      
      Py_DECREF(o);
      vVec3.push_back( OpenMM::Vec3(x, y, z) );
    }
    arg3 = &vVec3;
  }
  {
    try {
      (arg1)->setPerDofVariable(arg2,(std::vector< Vec3,std::allocator< Vec3 > > const &)*arg3);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CustomIntegrator_setPerDofVariableByName(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::CustomIntegrator *arg1 = (OpenMM::CustomIntegrator *) 0 ;
  std::string *arg2 = 0 ;
  std::vector< Vec3,std::allocator< Vec3 > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  std::vector< OpenMM::Vec3 > vVec3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:CustomIntegrator_setPerDofVariableByName",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__CustomIntegrator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CustomIntegrator_setPerDofVariableByName" "', argument " "1"" of type '" "OpenMM::CustomIntegrator *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::CustomIntegrator * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CustomIntegrator_setPerDofVariableByName" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CustomIntegrator_setPerDofVariableByName" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    // typemap -- %typemap(in) std::vector<Vec3>& (std::vector<OpenMM::Vec3> vVec3)
    int i, pLength;
    double x, y, z;
    PyObject *o;
    PyObject *o1;
    
    pLength=(int)PySequence_Length(obj2);
    for (i=0; i<pLength; i++) {
      o=PySequence_GetItem(obj2, i);
      
      o1=PySequence_GetItem(o, 0);
      x=PyFloat_AsDouble(o1);
      Py_DECREF(o1);
      
      o1=PySequence_GetItem(o, 1);
      y=PyFloat_AsDouble(o1);
      Py_DECREF(o1);
      
      o1=PySequence_GetItem(o, 2);
      z=PyFloat_AsDouble(o1);
      Py_DECREF(o1);
      
      Py_DECREF(o);
      vVec3.push_back( OpenMM::Vec3(x, y, z) );
    }
    arg3 = &vVec3;
  }
  {
    try {
      (arg1)->setPerDofVariableByName((std::string const &)*arg2,(std::vector< Vec3,std::allocator< Vec3 > > const &)*arg3);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CustomIntegrator_addComputeGlobal(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::CustomIntegrator *arg1 = (OpenMM::CustomIntegrator *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:CustomIntegrator_addComputeGlobal",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__CustomIntegrator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CustomIntegrator_addComputeGlobal" "', argument " "1"" of type '" "OpenMM::CustomIntegrator *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::CustomIntegrator * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CustomIntegrator_addComputeGlobal" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CustomIntegrator_addComputeGlobal" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CustomIntegrator_addComputeGlobal" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CustomIntegrator_addComputeGlobal" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      result = (int)(arg1)->addComputeGlobal((std::string const &)*arg2,(std::string const &)*arg3);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CustomIntegrator_addComputePerDof(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::CustomIntegrator *arg1 = (OpenMM::CustomIntegrator *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:CustomIntegrator_addComputePerDof",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__CustomIntegrator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CustomIntegrator_addComputePerDof" "', argument " "1"" of type '" "OpenMM::CustomIntegrator *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::CustomIntegrator * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CustomIntegrator_addComputePerDof" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CustomIntegrator_addComputePerDof" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CustomIntegrator_addComputePerDof" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CustomIntegrator_addComputePerDof" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      result = (int)(arg1)->addComputePerDof((std::string const &)*arg2,(std::string const &)*arg3);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CustomIntegrator_addComputeSum(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::CustomIntegrator *arg1 = (OpenMM::CustomIntegrator *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:CustomIntegrator_addComputeSum",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__CustomIntegrator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CustomIntegrator_addComputeSum" "', argument " "1"" of type '" "OpenMM::CustomIntegrator *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::CustomIntegrator * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CustomIntegrator_addComputeSum" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CustomIntegrator_addComputeSum" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CustomIntegrator_addComputeSum" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CustomIntegrator_addComputeSum" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      result = (int)(arg1)->addComputeSum((std::string const &)*arg2,(std::string const &)*arg3);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CustomIntegrator_addConstrainPositions(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::CustomIntegrator *arg1 = (OpenMM::CustomIntegrator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CustomIntegrator_addConstrainPositions",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__CustomIntegrator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CustomIntegrator_addConstrainPositions" "', argument " "1"" of type '" "OpenMM::CustomIntegrator *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::CustomIntegrator * >(argp1);
  {
    try {
      result = (int)(arg1)->addConstrainPositions();
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CustomIntegrator_addConstrainVelocities(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::CustomIntegrator *arg1 = (OpenMM::CustomIntegrator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CustomIntegrator_addConstrainVelocities",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__CustomIntegrator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CustomIntegrator_addConstrainVelocities" "', argument " "1"" of type '" "OpenMM::CustomIntegrator *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::CustomIntegrator * >(argp1);
  {
    try {
      result = (int)(arg1)->addConstrainVelocities();
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CustomIntegrator_addUpdateContextState(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::CustomIntegrator *arg1 = (OpenMM::CustomIntegrator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CustomIntegrator_addUpdateContextState",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__CustomIntegrator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CustomIntegrator_addUpdateContextState" "', argument " "1"" of type '" "OpenMM::CustomIntegrator *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::CustomIntegrator * >(argp1);
  {
    try {
      result = (int)(arg1)->addUpdateContextState();
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CustomIntegrator_getComputationStep(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::CustomIntegrator *arg1 = (OpenMM::CustomIntegrator *) 0 ;
  int arg2 ;
  OpenMM::CustomIntegrator::ComputationType *arg3 = 0 ;
  std::string *arg4 = 0 ;
  std::string *arg5 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  OpenMM::CustomIntegrator::ComputationType temp3 ;
  int res3 = SWIG_TMPOBJ ;
  std::string temp4 ;
  int res4 = SWIG_TMPOBJ ;
  std::string temp5 ;
  int res5 = SWIG_TMPOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  arg3 = &temp3;
  arg4 = &temp4;
  arg5 = &temp5;
  if (!PyArg_ParseTuple(args,(char *)"OO:CustomIntegrator_getComputationStep",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__CustomIntegrator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CustomIntegrator_getComputationStep" "', argument " "1"" of type '" "OpenMM::CustomIntegrator const *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::CustomIntegrator * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CustomIntegrator_getComputationStep" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      ((OpenMM::CustomIntegrator const *)arg1)->getComputationStep(arg2,*arg3,*arg4,*arg5);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsTmpObj(res3)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_From_int((*arg3)));
  } else {
    int new_flags = SWIG_IsNewObj(res3) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg3), SWIGTYPE_p_OpenMM__CustomIntegrator__ComputationType, new_flags));
  }
  if (SWIG_IsTmpObj(res4)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_From_std_string((*arg4)));
  } else {
    int new_flags = SWIG_IsNewObj(res4) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg4), SWIGTYPE_p_std__string, new_flags));
  }
  if (SWIG_IsTmpObj(res5)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_From_std_string((*arg5)));
  } else {
    int new_flags = SWIG_IsNewObj(res5) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg5), SWIGTYPE_p_std__string, new_flags));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CustomIntegrator_getRandomNumberSeed(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::CustomIntegrator *arg1 = (OpenMM::CustomIntegrator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CustomIntegrator_getRandomNumberSeed",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__CustomIntegrator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CustomIntegrator_getRandomNumberSeed" "', argument " "1"" of type '" "OpenMM::CustomIntegrator const *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::CustomIntegrator * >(argp1);
  {
    try {
      result = (int)((OpenMM::CustomIntegrator const *)arg1)->getRandomNumberSeed();
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CustomIntegrator_setRandomNumberSeed(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::CustomIntegrator *arg1 = (OpenMM::CustomIntegrator *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CustomIntegrator_setRandomNumberSeed",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__CustomIntegrator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CustomIntegrator_setRandomNumberSeed" "', argument " "1"" of type '" "OpenMM::CustomIntegrator *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::CustomIntegrator * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CustomIntegrator_setRandomNumberSeed" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      (arg1)->setRandomNumberSeed(arg2);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CustomIntegrator_step(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::CustomIntegrator *arg1 = (OpenMM::CustomIntegrator *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CustomIntegrator_step",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__CustomIntegrator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CustomIntegrator_step" "', argument " "1"" of type '" "OpenMM::CustomIntegrator *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::CustomIntegrator * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CustomIntegrator_step" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      (arg1)->step(arg2);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CustomIntegrator_getPerDofVariable__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::CustomIntegrator *arg1 = (OpenMM::CustomIntegrator *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CustomIntegrator_getPerDofVariable",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__CustomIntegrator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CustomIntegrator_getPerDofVariable" "', argument " "1"" of type '" "OpenMM::CustomIntegrator const *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::CustomIntegrator * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CustomIntegrator_getPerDofVariable" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (PyObject *)OpenMM_CustomIntegrator_getPerDofVariable__SWIG_1((OpenMM::CustomIntegrator const *)arg1,arg2);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CustomIntegrator_getPerDofVariable(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_OpenMM__CustomIntegrator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_CustomIntegrator_getPerDofVariable__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_OpenMM__CustomIntegrator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_std__vectorT_Vec3_std__allocatorT_Vec3_t_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_CustomIntegrator_getPerDofVariable__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'CustomIntegrator_getPerDofVariable'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    getPerDofVariable(OpenMM::CustomIntegrator const *,int,std::vector< Vec3,std::allocator< Vec3 > > &)\n"
    "    getPerDofVariable(OpenMM::CustomIntegrator const *,int)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_CustomIntegrator__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::CustomIntegrator *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  OpenMM::CustomIntegrator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_CustomIntegrator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_OpenMM__CustomIntegrator,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_CustomIntegrator" "', argument " "1"" of type '" "OpenMM::CustomIntegrator const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_CustomIntegrator" "', argument " "1"" of type '" "OpenMM::CustomIntegrator const &""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::CustomIntegrator * >(argp1);
  {
    try {
      result = (OpenMM::CustomIntegrator *)new OpenMM::CustomIntegrator((OpenMM::CustomIntegrator const &)*arg1);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_OpenMM__CustomIntegrator, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_CustomIntegrator(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 1); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_OpenMM__CustomIntegrator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_CustomIntegrator__SWIG_1(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_CustomIntegrator__SWIG_0(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_CustomIntegrator'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    OpenMM::CustomIntegrator(double)\n"
    "    OpenMM::CustomIntegrator::CustomIntegrator(OpenMM::CustomIntegrator const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_CustomIntegrator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::CustomIntegrator *arg1 = (OpenMM::CustomIntegrator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_CustomIntegrator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__CustomIntegrator, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_CustomIntegrator" "', argument " "1"" of type '" "OpenMM::CustomIntegrator *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::CustomIntegrator * >(argp1);
  {
    try {
      delete arg1;
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *CustomIntegrator_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_OpenMM__CustomIntegrator, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_CustomNonbondedForce__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  OpenMM::CustomNonbondedForce *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_CustomNonbondedForce",&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_CustomNonbondedForce" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_CustomNonbondedForce" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  {
    try {
      result = (OpenMM::CustomNonbondedForce *)new OpenMM::CustomNonbondedForce((std::string const &)*arg1);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_OpenMM__CustomNonbondedForce, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CustomNonbondedForce_getNumParticles(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::CustomNonbondedForce *arg1 = (OpenMM::CustomNonbondedForce *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CustomNonbondedForce_getNumParticles",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__CustomNonbondedForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CustomNonbondedForce_getNumParticles" "', argument " "1"" of type '" "OpenMM::CustomNonbondedForce const *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::CustomNonbondedForce * >(argp1);
  {
    try {
      result = (int)((OpenMM::CustomNonbondedForce const *)arg1)->getNumParticles();
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CustomNonbondedForce_getNumExclusions(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::CustomNonbondedForce *arg1 = (OpenMM::CustomNonbondedForce *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CustomNonbondedForce_getNumExclusions",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__CustomNonbondedForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CustomNonbondedForce_getNumExclusions" "', argument " "1"" of type '" "OpenMM::CustomNonbondedForce const *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::CustomNonbondedForce * >(argp1);
  {
    try {
      result = (int)((OpenMM::CustomNonbondedForce const *)arg1)->getNumExclusions();
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CustomNonbondedForce_getNumPerParticleParameters(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::CustomNonbondedForce *arg1 = (OpenMM::CustomNonbondedForce *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CustomNonbondedForce_getNumPerParticleParameters",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__CustomNonbondedForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CustomNonbondedForce_getNumPerParticleParameters" "', argument " "1"" of type '" "OpenMM::CustomNonbondedForce const *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::CustomNonbondedForce * >(argp1);
  {
    try {
      result = (int)((OpenMM::CustomNonbondedForce const *)arg1)->getNumPerParticleParameters();
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CustomNonbondedForce_getNumGlobalParameters(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::CustomNonbondedForce *arg1 = (OpenMM::CustomNonbondedForce *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CustomNonbondedForce_getNumGlobalParameters",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__CustomNonbondedForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CustomNonbondedForce_getNumGlobalParameters" "', argument " "1"" of type '" "OpenMM::CustomNonbondedForce const *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::CustomNonbondedForce * >(argp1);
  {
    try {
      result = (int)((OpenMM::CustomNonbondedForce const *)arg1)->getNumGlobalParameters();
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CustomNonbondedForce_getNumFunctions(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::CustomNonbondedForce *arg1 = (OpenMM::CustomNonbondedForce *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CustomNonbondedForce_getNumFunctions",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__CustomNonbondedForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CustomNonbondedForce_getNumFunctions" "', argument " "1"" of type '" "OpenMM::CustomNonbondedForce const *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::CustomNonbondedForce * >(argp1);
  {
    try {
      result = (int)((OpenMM::CustomNonbondedForce const *)arg1)->getNumFunctions();
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CustomNonbondedForce_getEnergyFunction(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::CustomNonbondedForce *arg1 = (OpenMM::CustomNonbondedForce *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CustomNonbondedForce_getEnergyFunction",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__CustomNonbondedForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CustomNonbondedForce_getEnergyFunction" "', argument " "1"" of type '" "OpenMM::CustomNonbondedForce const *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::CustomNonbondedForce * >(argp1);
  {
    try {
      result = (std::string *) &((OpenMM::CustomNonbondedForce const *)arg1)->getEnergyFunction();
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CustomNonbondedForce_setEnergyFunction(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::CustomNonbondedForce *arg1 = (OpenMM::CustomNonbondedForce *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CustomNonbondedForce_setEnergyFunction",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__CustomNonbondedForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CustomNonbondedForce_setEnergyFunction" "', argument " "1"" of type '" "OpenMM::CustomNonbondedForce *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::CustomNonbondedForce * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CustomNonbondedForce_setEnergyFunction" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CustomNonbondedForce_setEnergyFunction" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      (arg1)->setEnergyFunction((std::string const &)*arg2);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CustomNonbondedForce_getNonbondedMethod(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::CustomNonbondedForce *arg1 = (OpenMM::CustomNonbondedForce *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  OpenMM::CustomNonbondedForce::NonbondedMethod result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CustomNonbondedForce_getNonbondedMethod",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__CustomNonbondedForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CustomNonbondedForce_getNonbondedMethod" "', argument " "1"" of type '" "OpenMM::CustomNonbondedForce const *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::CustomNonbondedForce * >(argp1);
  {
    try {
      result = (OpenMM::CustomNonbondedForce::NonbondedMethod)((OpenMM::CustomNonbondedForce const *)arg1)->getNonbondedMethod();
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CustomNonbondedForce_setNonbondedMethod(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::CustomNonbondedForce *arg1 = (OpenMM::CustomNonbondedForce *) 0 ;
  OpenMM::CustomNonbondedForce::NonbondedMethod arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CustomNonbondedForce_setNonbondedMethod",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__CustomNonbondedForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CustomNonbondedForce_setNonbondedMethod" "', argument " "1"" of type '" "OpenMM::CustomNonbondedForce *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::CustomNonbondedForce * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CustomNonbondedForce_setNonbondedMethod" "', argument " "2"" of type '" "OpenMM::CustomNonbondedForce::NonbondedMethod""'");
  } 
  arg2 = static_cast< OpenMM::CustomNonbondedForce::NonbondedMethod >(val2);
  {
    try {
      (arg1)->setNonbondedMethod(arg2);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CustomNonbondedForce_getCutoffDistance(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::CustomNonbondedForce *arg1 = (OpenMM::CustomNonbondedForce *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CustomNonbondedForce_getCutoffDistance",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__CustomNonbondedForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CustomNonbondedForce_getCutoffDistance" "', argument " "1"" of type '" "OpenMM::CustomNonbondedForce const *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::CustomNonbondedForce * >(argp1);
  {
    try {
      result = (double)((OpenMM::CustomNonbondedForce const *)arg1)->getCutoffDistance();
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CustomNonbondedForce_setCutoffDistance(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::CustomNonbondedForce *arg1 = (OpenMM::CustomNonbondedForce *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CustomNonbondedForce_setCutoffDistance",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__CustomNonbondedForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CustomNonbondedForce_setCutoffDistance" "', argument " "1"" of type '" "OpenMM::CustomNonbondedForce *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::CustomNonbondedForce * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CustomNonbondedForce_setCutoffDistance" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->setCutoffDistance(arg2);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CustomNonbondedForce_addPerParticleParameter(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::CustomNonbondedForce *arg1 = (OpenMM::CustomNonbondedForce *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CustomNonbondedForce_addPerParticleParameter",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__CustomNonbondedForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CustomNonbondedForce_addPerParticleParameter" "', argument " "1"" of type '" "OpenMM::CustomNonbondedForce *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::CustomNonbondedForce * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CustomNonbondedForce_addPerParticleParameter" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CustomNonbondedForce_addPerParticleParameter" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (int)(arg1)->addPerParticleParameter((std::string const &)*arg2);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CustomNonbondedForce_getPerParticleParameterName(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::CustomNonbondedForce *arg1 = (OpenMM::CustomNonbondedForce *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::string *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CustomNonbondedForce_getPerParticleParameterName",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__CustomNonbondedForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CustomNonbondedForce_getPerParticleParameterName" "', argument " "1"" of type '" "OpenMM::CustomNonbondedForce const *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::CustomNonbondedForce * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CustomNonbondedForce_getPerParticleParameterName" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (std::string *) &((OpenMM::CustomNonbondedForce const *)arg1)->getPerParticleParameterName(arg2);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CustomNonbondedForce_setPerParticleParameterName(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::CustomNonbondedForce *arg1 = (OpenMM::CustomNonbondedForce *) 0 ;
  int arg2 ;
  std::string *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:CustomNonbondedForce_setPerParticleParameterName",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__CustomNonbondedForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CustomNonbondedForce_setPerParticleParameterName" "', argument " "1"" of type '" "OpenMM::CustomNonbondedForce *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::CustomNonbondedForce * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CustomNonbondedForce_setPerParticleParameterName" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CustomNonbondedForce_setPerParticleParameterName" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CustomNonbondedForce_setPerParticleParameterName" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      (arg1)->setPerParticleParameterName(arg2,(std::string const &)*arg3);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CustomNonbondedForce_addGlobalParameter(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::CustomNonbondedForce *arg1 = (OpenMM::CustomNonbondedForce *) 0 ;
  std::string *arg2 = 0 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:CustomNonbondedForce_addGlobalParameter",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__CustomNonbondedForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CustomNonbondedForce_addGlobalParameter" "', argument " "1"" of type '" "OpenMM::CustomNonbondedForce *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::CustomNonbondedForce * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CustomNonbondedForce_addGlobalParameter" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CustomNonbondedForce_addGlobalParameter" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CustomNonbondedForce_addGlobalParameter" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      result = (int)(arg1)->addGlobalParameter((std::string const &)*arg2,arg3);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CustomNonbondedForce_getGlobalParameterName(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::CustomNonbondedForce *arg1 = (OpenMM::CustomNonbondedForce *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::string *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CustomNonbondedForce_getGlobalParameterName",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__CustomNonbondedForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CustomNonbondedForce_getGlobalParameterName" "', argument " "1"" of type '" "OpenMM::CustomNonbondedForce const *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::CustomNonbondedForce * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CustomNonbondedForce_getGlobalParameterName" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (std::string *) &((OpenMM::CustomNonbondedForce const *)arg1)->getGlobalParameterName(arg2);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CustomNonbondedForce_setGlobalParameterName(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::CustomNonbondedForce *arg1 = (OpenMM::CustomNonbondedForce *) 0 ;
  int arg2 ;
  std::string *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:CustomNonbondedForce_setGlobalParameterName",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__CustomNonbondedForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CustomNonbondedForce_setGlobalParameterName" "', argument " "1"" of type '" "OpenMM::CustomNonbondedForce *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::CustomNonbondedForce * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CustomNonbondedForce_setGlobalParameterName" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CustomNonbondedForce_setGlobalParameterName" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CustomNonbondedForce_setGlobalParameterName" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      (arg1)->setGlobalParameterName(arg2,(std::string const &)*arg3);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CustomNonbondedForce_getGlobalParameterDefaultValue(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::CustomNonbondedForce *arg1 = (OpenMM::CustomNonbondedForce *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CustomNonbondedForce_getGlobalParameterDefaultValue",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__CustomNonbondedForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CustomNonbondedForce_getGlobalParameterDefaultValue" "', argument " "1"" of type '" "OpenMM::CustomNonbondedForce const *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::CustomNonbondedForce * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CustomNonbondedForce_getGlobalParameterDefaultValue" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (double)((OpenMM::CustomNonbondedForce const *)arg1)->getGlobalParameterDefaultValue(arg2);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CustomNonbondedForce_setGlobalParameterDefaultValue(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::CustomNonbondedForce *arg1 = (OpenMM::CustomNonbondedForce *) 0 ;
  int arg2 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:CustomNonbondedForce_setGlobalParameterDefaultValue",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__CustomNonbondedForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CustomNonbondedForce_setGlobalParameterDefaultValue" "', argument " "1"" of type '" "OpenMM::CustomNonbondedForce *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::CustomNonbondedForce * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CustomNonbondedForce_setGlobalParameterDefaultValue" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CustomNonbondedForce_setGlobalParameterDefaultValue" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      (arg1)->setGlobalParameterDefaultValue(arg2,arg3);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CustomNonbondedForce_addParticle(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::CustomNonbondedForce *arg1 = (OpenMM::CustomNonbondedForce *) 0 ;
  std::vector< double,std::allocator< double > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CustomNonbondedForce_addParticle",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__CustomNonbondedForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CustomNonbondedForce_addParticle" "', argument " "1"" of type '" "OpenMM::CustomNonbondedForce *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::CustomNonbondedForce * >(argp1);
  {
    std::vector<double,std::allocator< double > > *ptr = (std::vector<double,std::allocator< double > > *)0;
    res2 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CustomNonbondedForce_addParticle" "', argument " "2"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CustomNonbondedForce_addParticle" "', argument " "2"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (int)(arg1)->addParticle((std::vector< double,std::allocator< double > > const &)*arg2);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CustomNonbondedForce_getParticleParameters(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::CustomNonbondedForce *arg1 = (OpenMM::CustomNonbondedForce *) 0 ;
  int arg2 ;
  std::vector< double,std::allocator< double > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  std::vector< double,std::allocator< double > > temp3 ;
  int res3 = SWIG_TMPOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  arg3 = &temp3;
  if (!PyArg_ParseTuple(args,(char *)"OO:CustomNonbondedForce_getParticleParameters",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__CustomNonbondedForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CustomNonbondedForce_getParticleParameters" "', argument " "1"" of type '" "OpenMM::CustomNonbondedForce const *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::CustomNonbondedForce * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CustomNonbondedForce_getParticleParameters" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      ((OpenMM::CustomNonbondedForce const *)arg1)->getParticleParameters(arg2,*arg3);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsTmpObj(res3)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, swig::from((*arg3)));
  } else {
    int new_flags = SWIG_IsNewObj(res3) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg3), SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, new_flags));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CustomNonbondedForce_setParticleParameters(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::CustomNonbondedForce *arg1 = (OpenMM::CustomNonbondedForce *) 0 ;
  int arg2 ;
  std::vector< double,std::allocator< double > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:CustomNonbondedForce_setParticleParameters",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__CustomNonbondedForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CustomNonbondedForce_setParticleParameters" "', argument " "1"" of type '" "OpenMM::CustomNonbondedForce *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::CustomNonbondedForce * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CustomNonbondedForce_setParticleParameters" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    std::vector<double,std::allocator< double > > *ptr = (std::vector<double,std::allocator< double > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CustomNonbondedForce_setParticleParameters" "', argument " "3"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CustomNonbondedForce_setParticleParameters" "', argument " "3"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      (arg1)->setParticleParameters(arg2,(std::vector< double,std::allocator< double > > const &)*arg3);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CustomNonbondedForce_addExclusion(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::CustomNonbondedForce *arg1 = (OpenMM::CustomNonbondedForce *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:CustomNonbondedForce_addExclusion",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__CustomNonbondedForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CustomNonbondedForce_addExclusion" "', argument " "1"" of type '" "OpenMM::CustomNonbondedForce *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::CustomNonbondedForce * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CustomNonbondedForce_addExclusion" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CustomNonbondedForce_addExclusion" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      result = (int)(arg1)->addExclusion(arg2,arg3);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CustomNonbondedForce_getExclusionParticles(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::CustomNonbondedForce *arg1 = (OpenMM::CustomNonbondedForce *) 0 ;
  int arg2 ;
  int *arg3 = 0 ;
  int *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int temp3 ;
  int res3 = SWIG_TMPOBJ ;
  int temp4 ;
  int res4 = SWIG_TMPOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  arg3 = &temp3;
  arg4 = &temp4;
  if (!PyArg_ParseTuple(args,(char *)"OO:CustomNonbondedForce_getExclusionParticles",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__CustomNonbondedForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CustomNonbondedForce_getExclusionParticles" "', argument " "1"" of type '" "OpenMM::CustomNonbondedForce const *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::CustomNonbondedForce * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CustomNonbondedForce_getExclusionParticles" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      ((OpenMM::CustomNonbondedForce const *)arg1)->getExclusionParticles(arg2,*arg3,*arg4);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsTmpObj(res3)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_From_int((*arg3)));
  } else {
    int new_flags = SWIG_IsNewObj(res3) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg3), SWIGTYPE_p_int, new_flags));
  }
  if (SWIG_IsTmpObj(res4)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_From_int((*arg4)));
  } else {
    int new_flags = SWIG_IsNewObj(res4) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg4), SWIGTYPE_p_int, new_flags));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CustomNonbondedForce_setExclusionParticles(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::CustomNonbondedForce *arg1 = (OpenMM::CustomNonbondedForce *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:CustomNonbondedForce_setExclusionParticles",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__CustomNonbondedForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CustomNonbondedForce_setExclusionParticles" "', argument " "1"" of type '" "OpenMM::CustomNonbondedForce *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::CustomNonbondedForce * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CustomNonbondedForce_setExclusionParticles" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CustomNonbondedForce_setExclusionParticles" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "CustomNonbondedForce_setExclusionParticles" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  {
    try {
      (arg1)->setExclusionParticles(arg2,arg3,arg4);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CustomNonbondedForce_addFunction(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::CustomNonbondedForce *arg1 = (OpenMM::CustomNonbondedForce *) 0 ;
  std::string *arg2 = 0 ;
  std::vector< double,std::allocator< double > > *arg3 = 0 ;
  double arg4 ;
  double arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int res3 = SWIG_OLDOBJ ;
  double val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:CustomNonbondedForce_addFunction",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__CustomNonbondedForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CustomNonbondedForce_addFunction" "', argument " "1"" of type '" "OpenMM::CustomNonbondedForce *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::CustomNonbondedForce * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CustomNonbondedForce_addFunction" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CustomNonbondedForce_addFunction" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    std::vector<double,std::allocator< double > > *ptr = (std::vector<double,std::allocator< double > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CustomNonbondedForce_addFunction" "', argument " "3"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CustomNonbondedForce_addFunction" "', argument " "3"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    arg3 = ptr;
  }
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "CustomNonbondedForce_addFunction" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  ecode5 = SWIG_AsVal_double(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "CustomNonbondedForce_addFunction" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  {
    try {
      result = (int)(arg1)->addFunction((std::string const &)*arg2,(std::vector< double,std::allocator< double > > const &)*arg3,arg4,arg5);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CustomNonbondedForce_getFunctionParameters(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::CustomNonbondedForce *arg1 = (OpenMM::CustomNonbondedForce *) 0 ;
  int arg2 ;
  std::string *arg3 = 0 ;
  std::vector< double,std::allocator< double > > *arg4 = 0 ;
  double *arg5 = 0 ;
  double *arg6 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  std::string temp3 ;
  int res3 = SWIG_TMPOBJ ;
  std::vector< double,std::allocator< double > > temp4 ;
  int res4 = SWIG_TMPOBJ ;
  double temp5 ;
  int res5 = SWIG_TMPOBJ ;
  double temp6 ;
  int res6 = SWIG_TMPOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  arg3 = &temp3;
  arg4 = &temp4;
  arg5 = &temp5;
  arg6 = &temp6;
  if (!PyArg_ParseTuple(args,(char *)"OO:CustomNonbondedForce_getFunctionParameters",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__CustomNonbondedForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CustomNonbondedForce_getFunctionParameters" "', argument " "1"" of type '" "OpenMM::CustomNonbondedForce const *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::CustomNonbondedForce * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CustomNonbondedForce_getFunctionParameters" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      ((OpenMM::CustomNonbondedForce const *)arg1)->getFunctionParameters(arg2,*arg3,*arg4,*arg5,*arg6);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsTmpObj(res3)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_From_std_string((*arg3)));
  } else {
    int new_flags = SWIG_IsNewObj(res3) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg3), SWIGTYPE_p_std__string, new_flags));
  }
  if (SWIG_IsTmpObj(res4)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, swig::from((*arg4)));
  } else {
    int new_flags = SWIG_IsNewObj(res4) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg4), SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, new_flags));
  }
  if (SWIG_IsTmpObj(res5)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_From_double((*arg5)));
  } else {
    int new_flags = SWIG_IsNewObj(res5) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg5), SWIGTYPE_p_double, new_flags));
  }
  if (SWIG_IsTmpObj(res6)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_From_double((*arg6)));
  } else {
    int new_flags = SWIG_IsNewObj(res6) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg6), SWIGTYPE_p_double, new_flags));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CustomNonbondedForce_setFunctionParameters(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::CustomNonbondedForce *arg1 = (OpenMM::CustomNonbondedForce *) 0 ;
  int arg2 ;
  std::string *arg3 = 0 ;
  std::vector< double,std::allocator< double > > *arg4 = 0 ;
  double arg5 ;
  double arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  int res4 = SWIG_OLDOBJ ;
  double val5 ;
  int ecode5 = 0 ;
  double val6 ;
  int ecode6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:CustomNonbondedForce_setFunctionParameters",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__CustomNonbondedForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CustomNonbondedForce_setFunctionParameters" "', argument " "1"" of type '" "OpenMM::CustomNonbondedForce *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::CustomNonbondedForce * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CustomNonbondedForce_setFunctionParameters" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CustomNonbondedForce_setFunctionParameters" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CustomNonbondedForce_setFunctionParameters" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  {
    std::vector<double,std::allocator< double > > *ptr = (std::vector<double,std::allocator< double > > *)0;
    res4 = swig::asptr(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "CustomNonbondedForce_setFunctionParameters" "', argument " "4"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CustomNonbondedForce_setFunctionParameters" "', argument " "4"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    arg4 = ptr;
  }
  ecode5 = SWIG_AsVal_double(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "CustomNonbondedForce_setFunctionParameters" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  ecode6 = SWIG_AsVal_double(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "CustomNonbondedForce_setFunctionParameters" "', argument " "6"" of type '" "double""'");
  } 
  arg6 = static_cast< double >(val6);
  {
    try {
      (arg1)->setFunctionParameters(arg2,(std::string const &)*arg3,(std::vector< double,std::allocator< double > > const &)*arg4,arg5,arg6);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_CustomNonbondedForce__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::CustomNonbondedForce *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  OpenMM::CustomNonbondedForce *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_CustomNonbondedForce",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_OpenMM__CustomNonbondedForce,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_CustomNonbondedForce" "', argument " "1"" of type '" "OpenMM::CustomNonbondedForce const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_CustomNonbondedForce" "', argument " "1"" of type '" "OpenMM::CustomNonbondedForce const &""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::CustomNonbondedForce * >(argp1);
  {
    try {
      result = (OpenMM::CustomNonbondedForce *)new OpenMM::CustomNonbondedForce((OpenMM::CustomNonbondedForce const &)*arg1);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_OpenMM__CustomNonbondedForce, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_CustomNonbondedForce(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 1); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_OpenMM__CustomNonbondedForce, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_CustomNonbondedForce__SWIG_1(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_CustomNonbondedForce__SWIG_0(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_CustomNonbondedForce'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    OpenMM::CustomNonbondedForce(std::string const &)\n"
    "    OpenMM::CustomNonbondedForce::CustomNonbondedForce(OpenMM::CustomNonbondedForce const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_CustomNonbondedForce(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::CustomNonbondedForce *arg1 = (OpenMM::CustomNonbondedForce *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_CustomNonbondedForce",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__CustomNonbondedForce, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_CustomNonbondedForce" "', argument " "1"" of type '" "OpenMM::CustomNonbondedForce *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::CustomNonbondedForce * >(argp1);
  {
    try {
      delete arg1;
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *CustomNonbondedForce_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_OpenMM__CustomNonbondedForce, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_CustomTorsionForce__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  OpenMM::CustomTorsionForce *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_CustomTorsionForce",&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_CustomTorsionForce" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_CustomTorsionForce" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  {
    try {
      result = (OpenMM::CustomTorsionForce *)new OpenMM::CustomTorsionForce((std::string const &)*arg1);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_OpenMM__CustomTorsionForce, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CustomTorsionForce_getNumTorsions(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::CustomTorsionForce *arg1 = (OpenMM::CustomTorsionForce *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CustomTorsionForce_getNumTorsions",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__CustomTorsionForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CustomTorsionForce_getNumTorsions" "', argument " "1"" of type '" "OpenMM::CustomTorsionForce const *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::CustomTorsionForce * >(argp1);
  {
    try {
      result = (int)((OpenMM::CustomTorsionForce const *)arg1)->getNumTorsions();
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CustomTorsionForce_getNumPerTorsionParameters(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::CustomTorsionForce *arg1 = (OpenMM::CustomTorsionForce *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CustomTorsionForce_getNumPerTorsionParameters",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__CustomTorsionForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CustomTorsionForce_getNumPerTorsionParameters" "', argument " "1"" of type '" "OpenMM::CustomTorsionForce const *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::CustomTorsionForce * >(argp1);
  {
    try {
      result = (int)((OpenMM::CustomTorsionForce const *)arg1)->getNumPerTorsionParameters();
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CustomTorsionForce_getNumGlobalParameters(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::CustomTorsionForce *arg1 = (OpenMM::CustomTorsionForce *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CustomTorsionForce_getNumGlobalParameters",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__CustomTorsionForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CustomTorsionForce_getNumGlobalParameters" "', argument " "1"" of type '" "OpenMM::CustomTorsionForce const *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::CustomTorsionForce * >(argp1);
  {
    try {
      result = (int)((OpenMM::CustomTorsionForce const *)arg1)->getNumGlobalParameters();
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CustomTorsionForce_getEnergyFunction(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::CustomTorsionForce *arg1 = (OpenMM::CustomTorsionForce *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CustomTorsionForce_getEnergyFunction",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__CustomTorsionForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CustomTorsionForce_getEnergyFunction" "', argument " "1"" of type '" "OpenMM::CustomTorsionForce const *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::CustomTorsionForce * >(argp1);
  {
    try {
      result = (std::string *) &((OpenMM::CustomTorsionForce const *)arg1)->getEnergyFunction();
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CustomTorsionForce_setEnergyFunction(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::CustomTorsionForce *arg1 = (OpenMM::CustomTorsionForce *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CustomTorsionForce_setEnergyFunction",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__CustomTorsionForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CustomTorsionForce_setEnergyFunction" "', argument " "1"" of type '" "OpenMM::CustomTorsionForce *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::CustomTorsionForce * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CustomTorsionForce_setEnergyFunction" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CustomTorsionForce_setEnergyFunction" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      (arg1)->setEnergyFunction((std::string const &)*arg2);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CustomTorsionForce_addPerTorsionParameter(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::CustomTorsionForce *arg1 = (OpenMM::CustomTorsionForce *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CustomTorsionForce_addPerTorsionParameter",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__CustomTorsionForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CustomTorsionForce_addPerTorsionParameter" "', argument " "1"" of type '" "OpenMM::CustomTorsionForce *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::CustomTorsionForce * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CustomTorsionForce_addPerTorsionParameter" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CustomTorsionForce_addPerTorsionParameter" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (int)(arg1)->addPerTorsionParameter((std::string const &)*arg2);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CustomTorsionForce_getPerTorsionParameterName(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::CustomTorsionForce *arg1 = (OpenMM::CustomTorsionForce *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::string *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CustomTorsionForce_getPerTorsionParameterName",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__CustomTorsionForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CustomTorsionForce_getPerTorsionParameterName" "', argument " "1"" of type '" "OpenMM::CustomTorsionForce const *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::CustomTorsionForce * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CustomTorsionForce_getPerTorsionParameterName" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (std::string *) &((OpenMM::CustomTorsionForce const *)arg1)->getPerTorsionParameterName(arg2);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CustomTorsionForce_setPerTorsionParameterName(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::CustomTorsionForce *arg1 = (OpenMM::CustomTorsionForce *) 0 ;
  int arg2 ;
  std::string *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:CustomTorsionForce_setPerTorsionParameterName",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__CustomTorsionForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CustomTorsionForce_setPerTorsionParameterName" "', argument " "1"" of type '" "OpenMM::CustomTorsionForce *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::CustomTorsionForce * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CustomTorsionForce_setPerTorsionParameterName" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CustomTorsionForce_setPerTorsionParameterName" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CustomTorsionForce_setPerTorsionParameterName" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      (arg1)->setPerTorsionParameterName(arg2,(std::string const &)*arg3);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CustomTorsionForce_addGlobalParameter(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::CustomTorsionForce *arg1 = (OpenMM::CustomTorsionForce *) 0 ;
  std::string *arg2 = 0 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:CustomTorsionForce_addGlobalParameter",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__CustomTorsionForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CustomTorsionForce_addGlobalParameter" "', argument " "1"" of type '" "OpenMM::CustomTorsionForce *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::CustomTorsionForce * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CustomTorsionForce_addGlobalParameter" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CustomTorsionForce_addGlobalParameter" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CustomTorsionForce_addGlobalParameter" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      result = (int)(arg1)->addGlobalParameter((std::string const &)*arg2,arg3);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CustomTorsionForce_getGlobalParameterName(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::CustomTorsionForce *arg1 = (OpenMM::CustomTorsionForce *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::string *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CustomTorsionForce_getGlobalParameterName",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__CustomTorsionForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CustomTorsionForce_getGlobalParameterName" "', argument " "1"" of type '" "OpenMM::CustomTorsionForce const *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::CustomTorsionForce * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CustomTorsionForce_getGlobalParameterName" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (std::string *) &((OpenMM::CustomTorsionForce const *)arg1)->getGlobalParameterName(arg2);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CustomTorsionForce_setGlobalParameterName(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::CustomTorsionForce *arg1 = (OpenMM::CustomTorsionForce *) 0 ;
  int arg2 ;
  std::string *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:CustomTorsionForce_setGlobalParameterName",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__CustomTorsionForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CustomTorsionForce_setGlobalParameterName" "', argument " "1"" of type '" "OpenMM::CustomTorsionForce *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::CustomTorsionForce * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CustomTorsionForce_setGlobalParameterName" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CustomTorsionForce_setGlobalParameterName" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CustomTorsionForce_setGlobalParameterName" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      (arg1)->setGlobalParameterName(arg2,(std::string const &)*arg3);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CustomTorsionForce_getGlobalParameterDefaultValue(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::CustomTorsionForce *arg1 = (OpenMM::CustomTorsionForce *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CustomTorsionForce_getGlobalParameterDefaultValue",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__CustomTorsionForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CustomTorsionForce_getGlobalParameterDefaultValue" "', argument " "1"" of type '" "OpenMM::CustomTorsionForce const *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::CustomTorsionForce * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CustomTorsionForce_getGlobalParameterDefaultValue" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (double)((OpenMM::CustomTorsionForce const *)arg1)->getGlobalParameterDefaultValue(arg2);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CustomTorsionForce_setGlobalParameterDefaultValue(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::CustomTorsionForce *arg1 = (OpenMM::CustomTorsionForce *) 0 ;
  int arg2 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:CustomTorsionForce_setGlobalParameterDefaultValue",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__CustomTorsionForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CustomTorsionForce_setGlobalParameterDefaultValue" "', argument " "1"" of type '" "OpenMM::CustomTorsionForce *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::CustomTorsionForce * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CustomTorsionForce_setGlobalParameterDefaultValue" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CustomTorsionForce_setGlobalParameterDefaultValue" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      (arg1)->setGlobalParameterDefaultValue(arg2,arg3);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CustomTorsionForce_addTorsion(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::CustomTorsionForce *arg1 = (OpenMM::CustomTorsionForce *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  std::vector< double,std::allocator< double > > *arg6 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  int res6 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:CustomTorsionForce_addTorsion",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__CustomTorsionForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CustomTorsionForce_addTorsion" "', argument " "1"" of type '" "OpenMM::CustomTorsionForce *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::CustomTorsionForce * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CustomTorsionForce_addTorsion" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CustomTorsionForce_addTorsion" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "CustomTorsionForce_addTorsion" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  ecode5 = SWIG_AsVal_int(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "CustomTorsionForce_addTorsion" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  {
    std::vector<double,std::allocator< double > > *ptr = (std::vector<double,std::allocator< double > > *)0;
    res6 = swig::asptr(obj5, &ptr);
    if (!SWIG_IsOK(res6)) {
      SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "CustomTorsionForce_addTorsion" "', argument " "6"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CustomTorsionForce_addTorsion" "', argument " "6"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    arg6 = ptr;
  }
  {
    try {
      result = (int)(arg1)->addTorsion(arg2,arg3,arg4,arg5,(std::vector< double,std::allocator< double > > const &)*arg6);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (SWIG_IsNewObj(res6)) delete arg6;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res6)) delete arg6;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CustomTorsionForce_getTorsionParameters(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::CustomTorsionForce *arg1 = (OpenMM::CustomTorsionForce *) 0 ;
  int arg2 ;
  int *arg3 = 0 ;
  int *arg4 = 0 ;
  int *arg5 = 0 ;
  int *arg6 = 0 ;
  std::vector< double,std::allocator< double > > *arg7 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int temp3 ;
  int res3 = SWIG_TMPOBJ ;
  int temp4 ;
  int res4 = SWIG_TMPOBJ ;
  int temp5 ;
  int res5 = SWIG_TMPOBJ ;
  int temp6 ;
  int res6 = SWIG_TMPOBJ ;
  std::vector< double,std::allocator< double > > temp7 ;
  int res7 = SWIG_TMPOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  arg3 = &temp3;
  arg4 = &temp4;
  arg5 = &temp5;
  arg6 = &temp6;
  arg7 = &temp7;
  if (!PyArg_ParseTuple(args,(char *)"OO:CustomTorsionForce_getTorsionParameters",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__CustomTorsionForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CustomTorsionForce_getTorsionParameters" "', argument " "1"" of type '" "OpenMM::CustomTorsionForce const *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::CustomTorsionForce * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CustomTorsionForce_getTorsionParameters" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      ((OpenMM::CustomTorsionForce const *)arg1)->getTorsionParameters(arg2,*arg3,*arg4,*arg5,*arg6,*arg7);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsTmpObj(res3)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_From_int((*arg3)));
  } else {
    int new_flags = SWIG_IsNewObj(res3) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg3), SWIGTYPE_p_int, new_flags));
  }
  if (SWIG_IsTmpObj(res4)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_From_int((*arg4)));
  } else {
    int new_flags = SWIG_IsNewObj(res4) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg4), SWIGTYPE_p_int, new_flags));
  }
  if (SWIG_IsTmpObj(res5)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_From_int((*arg5)));
  } else {
    int new_flags = SWIG_IsNewObj(res5) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg5), SWIGTYPE_p_int, new_flags));
  }
  if (SWIG_IsTmpObj(res6)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_From_int((*arg6)));
  } else {
    int new_flags = SWIG_IsNewObj(res6) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg6), SWIGTYPE_p_int, new_flags));
  }
  if (SWIG_IsTmpObj(res7)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, swig::from((*arg7)));
  } else {
    int new_flags = SWIG_IsNewObj(res7) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg7), SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, new_flags));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CustomTorsionForce_setTorsionParameters(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::CustomTorsionForce *arg1 = (OpenMM::CustomTorsionForce *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  std::vector< double,std::allocator< double > > *arg7 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  int val6 ;
  int ecode6 = 0 ;
  int res7 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOO:CustomTorsionForce_setTorsionParameters",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__CustomTorsionForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CustomTorsionForce_setTorsionParameters" "', argument " "1"" of type '" "OpenMM::CustomTorsionForce *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::CustomTorsionForce * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CustomTorsionForce_setTorsionParameters" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CustomTorsionForce_setTorsionParameters" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "CustomTorsionForce_setTorsionParameters" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  ecode5 = SWIG_AsVal_int(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "CustomTorsionForce_setTorsionParameters" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  ecode6 = SWIG_AsVal_int(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "CustomTorsionForce_setTorsionParameters" "', argument " "6"" of type '" "int""'");
  } 
  arg6 = static_cast< int >(val6);
  {
    std::vector<double,std::allocator< double > > *ptr = (std::vector<double,std::allocator< double > > *)0;
    res7 = swig::asptr(obj6, &ptr);
    if (!SWIG_IsOK(res7)) {
      SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "CustomTorsionForce_setTorsionParameters" "', argument " "7"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CustomTorsionForce_setTorsionParameters" "', argument " "7"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    arg7 = ptr;
  }
  {
    try {
      (arg1)->setTorsionParameters(arg2,arg3,arg4,arg5,arg6,(std::vector< double,std::allocator< double > > const &)*arg7);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res7)) delete arg7;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res7)) delete arg7;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_CustomTorsionForce__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::CustomTorsionForce *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  OpenMM::CustomTorsionForce *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_CustomTorsionForce",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_OpenMM__CustomTorsionForce,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_CustomTorsionForce" "', argument " "1"" of type '" "OpenMM::CustomTorsionForce const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_CustomTorsionForce" "', argument " "1"" of type '" "OpenMM::CustomTorsionForce const &""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::CustomTorsionForce * >(argp1);
  {
    try {
      result = (OpenMM::CustomTorsionForce *)new OpenMM::CustomTorsionForce((OpenMM::CustomTorsionForce const &)*arg1);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_OpenMM__CustomTorsionForce, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_CustomTorsionForce(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 1); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_OpenMM__CustomTorsionForce, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_CustomTorsionForce__SWIG_1(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_CustomTorsionForce__SWIG_0(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_CustomTorsionForce'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    OpenMM::CustomTorsionForce(std::string const &)\n"
    "    OpenMM::CustomTorsionForce::CustomTorsionForce(OpenMM::CustomTorsionForce const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_CustomTorsionForce(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::CustomTorsionForce *arg1 = (OpenMM::CustomTorsionForce *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_CustomTorsionForce",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__CustomTorsionForce, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_CustomTorsionForce" "', argument " "1"" of type '" "OpenMM::CustomTorsionForce *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::CustomTorsionForce * >(argp1);
  {
    try {
      delete arg1;
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *CustomTorsionForce_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_OpenMM__CustomTorsionForce, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_GBSAOBCForce__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::GBSAOBCForce *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_GBSAOBCForce")) SWIG_fail;
  {
    try {
      result = (OpenMM::GBSAOBCForce *)new OpenMM::GBSAOBCForce();
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_OpenMM__GBSAOBCForce, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GBSAOBCForce_getNumParticles(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::GBSAOBCForce *arg1 = (OpenMM::GBSAOBCForce *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GBSAOBCForce_getNumParticles",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__GBSAOBCForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GBSAOBCForce_getNumParticles" "', argument " "1"" of type '" "OpenMM::GBSAOBCForce const *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::GBSAOBCForce * >(argp1);
  {
    try {
      result = (int)((OpenMM::GBSAOBCForce const *)arg1)->getNumParticles();
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GBSAOBCForce_addParticle(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::GBSAOBCForce *arg1 = (OpenMM::GBSAOBCForce *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:GBSAOBCForce_addParticle",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__GBSAOBCForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GBSAOBCForce_addParticle" "', argument " "1"" of type '" "OpenMM::GBSAOBCForce *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::GBSAOBCForce * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GBSAOBCForce_addParticle" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "GBSAOBCForce_addParticle" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "GBSAOBCForce_addParticle" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  {
    try {
      result = (int)(arg1)->addParticle(arg2,arg3,arg4);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GBSAOBCForce_getParticleParameters(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::GBSAOBCForce *arg1 = (OpenMM::GBSAOBCForce *) 0 ;
  int arg2 ;
  double *arg3 = 0 ;
  double *arg4 = 0 ;
  double *arg5 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  double temp3 ;
  int res3 = SWIG_TMPOBJ ;
  double temp4 ;
  int res4 = SWIG_TMPOBJ ;
  double temp5 ;
  int res5 = SWIG_TMPOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  arg3 = &temp3;
  arg4 = &temp4;
  arg5 = &temp5;
  if (!PyArg_ParseTuple(args,(char *)"OO:GBSAOBCForce_getParticleParameters",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__GBSAOBCForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GBSAOBCForce_getParticleParameters" "', argument " "1"" of type '" "OpenMM::GBSAOBCForce const *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::GBSAOBCForce * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GBSAOBCForce_getParticleParameters" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      ((OpenMM::GBSAOBCForce const *)arg1)->getParticleParameters(arg2,*arg3,*arg4,*arg5);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsTmpObj(res3)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_From_double((*arg3)));
  } else {
    int new_flags = SWIG_IsNewObj(res3) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg3), SWIGTYPE_p_double, new_flags));
  }
  if (SWIG_IsTmpObj(res4)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_From_double((*arg4)));
  } else {
    int new_flags = SWIG_IsNewObj(res4) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg4), SWIGTYPE_p_double, new_flags));
  }
  if (SWIG_IsTmpObj(res5)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_From_double((*arg5)));
  } else {
    int new_flags = SWIG_IsNewObj(res5) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg5), SWIGTYPE_p_double, new_flags));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GBSAOBCForce_setParticleParameters(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::GBSAOBCForce *arg1 = (OpenMM::GBSAOBCForce *) 0 ;
  int arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:GBSAOBCForce_setParticleParameters",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__GBSAOBCForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GBSAOBCForce_setParticleParameters" "', argument " "1"" of type '" "OpenMM::GBSAOBCForce *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::GBSAOBCForce * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GBSAOBCForce_setParticleParameters" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "GBSAOBCForce_setParticleParameters" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "GBSAOBCForce_setParticleParameters" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  ecode5 = SWIG_AsVal_double(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "GBSAOBCForce_setParticleParameters" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  {
    try {
      (arg1)->setParticleParameters(arg2,arg3,arg4,arg5);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GBSAOBCForce_getSolventDielectric(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::GBSAOBCForce *arg1 = (OpenMM::GBSAOBCForce *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GBSAOBCForce_getSolventDielectric",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__GBSAOBCForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GBSAOBCForce_getSolventDielectric" "', argument " "1"" of type '" "OpenMM::GBSAOBCForce const *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::GBSAOBCForce * >(argp1);
  {
    try {
      result = (double)((OpenMM::GBSAOBCForce const *)arg1)->getSolventDielectric();
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GBSAOBCForce_setSolventDielectric(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::GBSAOBCForce *arg1 = (OpenMM::GBSAOBCForce *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GBSAOBCForce_setSolventDielectric",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__GBSAOBCForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GBSAOBCForce_setSolventDielectric" "', argument " "1"" of type '" "OpenMM::GBSAOBCForce *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::GBSAOBCForce * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GBSAOBCForce_setSolventDielectric" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->setSolventDielectric(arg2);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GBSAOBCForce_getSoluteDielectric(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::GBSAOBCForce *arg1 = (OpenMM::GBSAOBCForce *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GBSAOBCForce_getSoluteDielectric",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__GBSAOBCForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GBSAOBCForce_getSoluteDielectric" "', argument " "1"" of type '" "OpenMM::GBSAOBCForce const *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::GBSAOBCForce * >(argp1);
  {
    try {
      result = (double)((OpenMM::GBSAOBCForce const *)arg1)->getSoluteDielectric();
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GBSAOBCForce_setSoluteDielectric(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::GBSAOBCForce *arg1 = (OpenMM::GBSAOBCForce *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GBSAOBCForce_setSoluteDielectric",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__GBSAOBCForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GBSAOBCForce_setSoluteDielectric" "', argument " "1"" of type '" "OpenMM::GBSAOBCForce *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::GBSAOBCForce * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GBSAOBCForce_setSoluteDielectric" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->setSoluteDielectric(arg2);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GBSAOBCForce_getNonbondedMethod(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::GBSAOBCForce *arg1 = (OpenMM::GBSAOBCForce *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  OpenMM::GBSAOBCForce::NonbondedMethod result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GBSAOBCForce_getNonbondedMethod",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__GBSAOBCForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GBSAOBCForce_getNonbondedMethod" "', argument " "1"" of type '" "OpenMM::GBSAOBCForce const *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::GBSAOBCForce * >(argp1);
  {
    try {
      result = (OpenMM::GBSAOBCForce::NonbondedMethod)((OpenMM::GBSAOBCForce const *)arg1)->getNonbondedMethod();
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GBSAOBCForce_setNonbondedMethod(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::GBSAOBCForce *arg1 = (OpenMM::GBSAOBCForce *) 0 ;
  OpenMM::GBSAOBCForce::NonbondedMethod arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GBSAOBCForce_setNonbondedMethod",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__GBSAOBCForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GBSAOBCForce_setNonbondedMethod" "', argument " "1"" of type '" "OpenMM::GBSAOBCForce *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::GBSAOBCForce * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GBSAOBCForce_setNonbondedMethod" "', argument " "2"" of type '" "OpenMM::GBSAOBCForce::NonbondedMethod""'");
  } 
  arg2 = static_cast< OpenMM::GBSAOBCForce::NonbondedMethod >(val2);
  {
    try {
      (arg1)->setNonbondedMethod(arg2);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GBSAOBCForce_getCutoffDistance(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::GBSAOBCForce *arg1 = (OpenMM::GBSAOBCForce *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GBSAOBCForce_getCutoffDistance",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__GBSAOBCForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GBSAOBCForce_getCutoffDistance" "', argument " "1"" of type '" "OpenMM::GBSAOBCForce const *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::GBSAOBCForce * >(argp1);
  {
    try {
      result = (double)((OpenMM::GBSAOBCForce const *)arg1)->getCutoffDistance();
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GBSAOBCForce_setCutoffDistance(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::GBSAOBCForce *arg1 = (OpenMM::GBSAOBCForce *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GBSAOBCForce_setCutoffDistance",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__GBSAOBCForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GBSAOBCForce_setCutoffDistance" "', argument " "1"" of type '" "OpenMM::GBSAOBCForce *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::GBSAOBCForce * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GBSAOBCForce_setCutoffDistance" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->setCutoffDistance(arg2);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_GBSAOBCForce__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::GBSAOBCForce *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  OpenMM::GBSAOBCForce *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_GBSAOBCForce",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_OpenMM__GBSAOBCForce,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_GBSAOBCForce" "', argument " "1"" of type '" "OpenMM::GBSAOBCForce const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_GBSAOBCForce" "', argument " "1"" of type '" "OpenMM::GBSAOBCForce const &""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::GBSAOBCForce * >(argp1);
  {
    try {
      result = (OpenMM::GBSAOBCForce *)new OpenMM::GBSAOBCForce((OpenMM::GBSAOBCForce const &)*arg1);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_OpenMM__GBSAOBCForce, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_GBSAOBCForce(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 1); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_GBSAOBCForce__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_OpenMM__GBSAOBCForce, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_GBSAOBCForce__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_GBSAOBCForce'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    OpenMM::GBSAOBCForce()\n"
    "    OpenMM::GBSAOBCForce::GBSAOBCForce(OpenMM::GBSAOBCForce const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_GBSAOBCForce(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::GBSAOBCForce *arg1 = (OpenMM::GBSAOBCForce *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_GBSAOBCForce",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__GBSAOBCForce, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_GBSAOBCForce" "', argument " "1"" of type '" "OpenMM::GBSAOBCForce *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::GBSAOBCForce * >(argp1);
  {
    try {
      delete arg1;
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *GBSAOBCForce_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_OpenMM__GBSAOBCForce, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_GBSAOBCSoftcoreForce__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::GBSAOBCSoftcoreForce *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_GBSAOBCSoftcoreForce")) SWIG_fail;
  {
    try {
      result = (OpenMM::GBSAOBCSoftcoreForce *)new OpenMM::GBSAOBCSoftcoreForce();
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_OpenMM__GBSAOBCSoftcoreForce, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GBSAOBCSoftcoreForce_getNumParticles(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::GBSAOBCSoftcoreForce *arg1 = (OpenMM::GBSAOBCSoftcoreForce *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GBSAOBCSoftcoreForce_getNumParticles",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__GBSAOBCSoftcoreForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GBSAOBCSoftcoreForce_getNumParticles" "', argument " "1"" of type '" "OpenMM::GBSAOBCSoftcoreForce const *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::GBSAOBCSoftcoreForce * >(argp1);
  {
    try {
      result = (int)((OpenMM::GBSAOBCSoftcoreForce const *)arg1)->getNumParticles();
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GBSAOBCSoftcoreForce_addParticle__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::GBSAOBCSoftcoreForce *arg1 = (OpenMM::GBSAOBCSoftcoreForce *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:GBSAOBCSoftcoreForce_addParticle",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__GBSAOBCSoftcoreForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GBSAOBCSoftcoreForce_addParticle" "', argument " "1"" of type '" "OpenMM::GBSAOBCSoftcoreForce *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::GBSAOBCSoftcoreForce * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GBSAOBCSoftcoreForce_addParticle" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "GBSAOBCSoftcoreForce_addParticle" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "GBSAOBCSoftcoreForce_addParticle" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  ecode5 = SWIG_AsVal_double(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "GBSAOBCSoftcoreForce_addParticle" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  {
    try {
      result = (int)(arg1)->addParticle(arg2,arg3,arg4,arg5);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GBSAOBCSoftcoreForce_addParticle__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::GBSAOBCSoftcoreForce *arg1 = (OpenMM::GBSAOBCSoftcoreForce *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:GBSAOBCSoftcoreForce_addParticle",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__GBSAOBCSoftcoreForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GBSAOBCSoftcoreForce_addParticle" "', argument " "1"" of type '" "OpenMM::GBSAOBCSoftcoreForce *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::GBSAOBCSoftcoreForce * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GBSAOBCSoftcoreForce_addParticle" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "GBSAOBCSoftcoreForce_addParticle" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "GBSAOBCSoftcoreForce_addParticle" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  {
    try {
      result = (int)(arg1)->addParticle(arg2,arg3,arg4);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GBSAOBCSoftcoreForce_addParticle(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[6];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 5); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_OpenMM__GBSAOBCSoftcoreForce, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_GBSAOBCSoftcoreForce_addParticle__SWIG_1(self, args);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_OpenMM__GBSAOBCSoftcoreForce, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_double(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_GBSAOBCSoftcoreForce_addParticle__SWIG_0(self, args);
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'GBSAOBCSoftcoreForce_addParticle'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    addParticle(OpenMM::GBSAOBCSoftcoreForce *,double,double,double,double)\n"
    "    addParticle(OpenMM::GBSAOBCSoftcoreForce *,double,double,double)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_GBSAOBCSoftcoreForce_getParticleParameters(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::GBSAOBCSoftcoreForce *arg1 = (OpenMM::GBSAOBCSoftcoreForce *) 0 ;
  int arg2 ;
  double *arg3 = 0 ;
  double *arg4 = 0 ;
  double *arg5 = 0 ;
  double *arg6 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  double temp3 ;
  int res3 = SWIG_TMPOBJ ;
  double temp4 ;
  int res4 = SWIG_TMPOBJ ;
  double temp5 ;
  int res5 = SWIG_TMPOBJ ;
  double temp6 ;
  int res6 = SWIG_TMPOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  arg3 = &temp3;
  arg4 = &temp4;
  arg5 = &temp5;
  arg6 = &temp6;
  if (!PyArg_ParseTuple(args,(char *)"OO:GBSAOBCSoftcoreForce_getParticleParameters",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__GBSAOBCSoftcoreForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GBSAOBCSoftcoreForce_getParticleParameters" "', argument " "1"" of type '" "OpenMM::GBSAOBCSoftcoreForce const *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::GBSAOBCSoftcoreForce * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GBSAOBCSoftcoreForce_getParticleParameters" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      ((OpenMM::GBSAOBCSoftcoreForce const *)arg1)->getParticleParameters(arg2,*arg3,*arg4,*arg5,*arg6);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsTmpObj(res3)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_From_double((*arg3)));
  } else {
    int new_flags = SWIG_IsNewObj(res3) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg3), SWIGTYPE_p_double, new_flags));
  }
  if (SWIG_IsTmpObj(res4)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_From_double((*arg4)));
  } else {
    int new_flags = SWIG_IsNewObj(res4) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg4), SWIGTYPE_p_double, new_flags));
  }
  if (SWIG_IsTmpObj(res5)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_From_double((*arg5)));
  } else {
    int new_flags = SWIG_IsNewObj(res5) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg5), SWIGTYPE_p_double, new_flags));
  }
  if (SWIG_IsTmpObj(res6)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_From_double((*arg6)));
  } else {
    int new_flags = SWIG_IsNewObj(res6) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg6), SWIGTYPE_p_double, new_flags));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GBSAOBCSoftcoreForce_setParticleParameters__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::GBSAOBCSoftcoreForce *arg1 = (OpenMM::GBSAOBCSoftcoreForce *) 0 ;
  int arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  double val6 ;
  int ecode6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:GBSAOBCSoftcoreForce_setParticleParameters",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__GBSAOBCSoftcoreForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GBSAOBCSoftcoreForce_setParticleParameters" "', argument " "1"" of type '" "OpenMM::GBSAOBCSoftcoreForce *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::GBSAOBCSoftcoreForce * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GBSAOBCSoftcoreForce_setParticleParameters" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "GBSAOBCSoftcoreForce_setParticleParameters" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "GBSAOBCSoftcoreForce_setParticleParameters" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  ecode5 = SWIG_AsVal_double(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "GBSAOBCSoftcoreForce_setParticleParameters" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  ecode6 = SWIG_AsVal_double(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "GBSAOBCSoftcoreForce_setParticleParameters" "', argument " "6"" of type '" "double""'");
  } 
  arg6 = static_cast< double >(val6);
  {
    try {
      (arg1)->setParticleParameters(arg2,arg3,arg4,arg5,arg6);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GBSAOBCSoftcoreForce_setParticleParameters__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::GBSAOBCSoftcoreForce *arg1 = (OpenMM::GBSAOBCSoftcoreForce *) 0 ;
  int arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:GBSAOBCSoftcoreForce_setParticleParameters",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__GBSAOBCSoftcoreForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GBSAOBCSoftcoreForce_setParticleParameters" "', argument " "1"" of type '" "OpenMM::GBSAOBCSoftcoreForce *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::GBSAOBCSoftcoreForce * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GBSAOBCSoftcoreForce_setParticleParameters" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "GBSAOBCSoftcoreForce_setParticleParameters" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "GBSAOBCSoftcoreForce_setParticleParameters" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  ecode5 = SWIG_AsVal_double(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "GBSAOBCSoftcoreForce_setParticleParameters" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  {
    try {
      (arg1)->setParticleParameters(arg2,arg3,arg4,arg5);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GBSAOBCSoftcoreForce_setParticleParameters(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[7];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 6); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_OpenMM__GBSAOBCSoftcoreForce, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_double(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_GBSAOBCSoftcoreForce_setParticleParameters__SWIG_1(self, args);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_OpenMM__GBSAOBCSoftcoreForce, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_double(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_double(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                return _wrap_GBSAOBCSoftcoreForce_setParticleParameters__SWIG_0(self, args);
              }
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'GBSAOBCSoftcoreForce_setParticleParameters'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    setParticleParameters(OpenMM::GBSAOBCSoftcoreForce *,int,double,double,double,double)\n"
    "    setParticleParameters(OpenMM::GBSAOBCSoftcoreForce *,int,double,double,double)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_GBSAOBCSoftcoreForce_getSolventDielectric(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::GBSAOBCSoftcoreForce *arg1 = (OpenMM::GBSAOBCSoftcoreForce *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GBSAOBCSoftcoreForce_getSolventDielectric",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__GBSAOBCSoftcoreForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GBSAOBCSoftcoreForce_getSolventDielectric" "', argument " "1"" of type '" "OpenMM::GBSAOBCSoftcoreForce const *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::GBSAOBCSoftcoreForce * >(argp1);
  {
    try {
      result = (double)((OpenMM::GBSAOBCSoftcoreForce const *)arg1)->getSolventDielectric();
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GBSAOBCSoftcoreForce_setSolventDielectric(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::GBSAOBCSoftcoreForce *arg1 = (OpenMM::GBSAOBCSoftcoreForce *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GBSAOBCSoftcoreForce_setSolventDielectric",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__GBSAOBCSoftcoreForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GBSAOBCSoftcoreForce_setSolventDielectric" "', argument " "1"" of type '" "OpenMM::GBSAOBCSoftcoreForce *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::GBSAOBCSoftcoreForce * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GBSAOBCSoftcoreForce_setSolventDielectric" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->setSolventDielectric(arg2);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GBSAOBCSoftcoreForce_getSoluteDielectric(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::GBSAOBCSoftcoreForce *arg1 = (OpenMM::GBSAOBCSoftcoreForce *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GBSAOBCSoftcoreForce_getSoluteDielectric",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__GBSAOBCSoftcoreForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GBSAOBCSoftcoreForce_getSoluteDielectric" "', argument " "1"" of type '" "OpenMM::GBSAOBCSoftcoreForce const *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::GBSAOBCSoftcoreForce * >(argp1);
  {
    try {
      result = (double)((OpenMM::GBSAOBCSoftcoreForce const *)arg1)->getSoluteDielectric();
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GBSAOBCSoftcoreForce_setSoluteDielectric(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::GBSAOBCSoftcoreForce *arg1 = (OpenMM::GBSAOBCSoftcoreForce *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GBSAOBCSoftcoreForce_setSoluteDielectric",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__GBSAOBCSoftcoreForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GBSAOBCSoftcoreForce_setSoluteDielectric" "', argument " "1"" of type '" "OpenMM::GBSAOBCSoftcoreForce *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::GBSAOBCSoftcoreForce * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GBSAOBCSoftcoreForce_setSoluteDielectric" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->setSoluteDielectric(arg2);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GBSAOBCSoftcoreForce_getNonPolarPrefactor(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::GBSAOBCSoftcoreForce *arg1 = (OpenMM::GBSAOBCSoftcoreForce *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GBSAOBCSoftcoreForce_getNonPolarPrefactor",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__GBSAOBCSoftcoreForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GBSAOBCSoftcoreForce_getNonPolarPrefactor" "', argument " "1"" of type '" "OpenMM::GBSAOBCSoftcoreForce const *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::GBSAOBCSoftcoreForce * >(argp1);
  {
    try {
      result = (double)((OpenMM::GBSAOBCSoftcoreForce const *)arg1)->getNonPolarPrefactor();
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GBSAOBCSoftcoreForce_setNonPolarPrefactor(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::GBSAOBCSoftcoreForce *arg1 = (OpenMM::GBSAOBCSoftcoreForce *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GBSAOBCSoftcoreForce_setNonPolarPrefactor",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__GBSAOBCSoftcoreForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GBSAOBCSoftcoreForce_setNonPolarPrefactor" "', argument " "1"" of type '" "OpenMM::GBSAOBCSoftcoreForce *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::GBSAOBCSoftcoreForce * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GBSAOBCSoftcoreForce_setNonPolarPrefactor" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->setNonPolarPrefactor(arg2);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GBSAOBCSoftcoreForce_getNonbondedMethod(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::GBSAOBCSoftcoreForce *arg1 = (OpenMM::GBSAOBCSoftcoreForce *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  OpenMM::GBSAOBCSoftcoreForce::NonbondedSoftcoreMethod result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GBSAOBCSoftcoreForce_getNonbondedMethod",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__GBSAOBCSoftcoreForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GBSAOBCSoftcoreForce_getNonbondedMethod" "', argument " "1"" of type '" "OpenMM::GBSAOBCSoftcoreForce const *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::GBSAOBCSoftcoreForce * >(argp1);
  {
    try {
      result = (OpenMM::GBSAOBCSoftcoreForce::NonbondedSoftcoreMethod)((OpenMM::GBSAOBCSoftcoreForce const *)arg1)->getNonbondedMethod();
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GBSAOBCSoftcoreForce_setNonbondedMethod(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::GBSAOBCSoftcoreForce *arg1 = (OpenMM::GBSAOBCSoftcoreForce *) 0 ;
  OpenMM::GBSAOBCSoftcoreForce::NonbondedSoftcoreMethod arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GBSAOBCSoftcoreForce_setNonbondedMethod",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__GBSAOBCSoftcoreForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GBSAOBCSoftcoreForce_setNonbondedMethod" "', argument " "1"" of type '" "OpenMM::GBSAOBCSoftcoreForce *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::GBSAOBCSoftcoreForce * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GBSAOBCSoftcoreForce_setNonbondedMethod" "', argument " "2"" of type '" "OpenMM::GBSAOBCSoftcoreForce::NonbondedSoftcoreMethod""'");
  } 
  arg2 = static_cast< OpenMM::GBSAOBCSoftcoreForce::NonbondedSoftcoreMethod >(val2);
  {
    try {
      (arg1)->setNonbondedMethod(arg2);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GBSAOBCSoftcoreForce_getCutoffDistance(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::GBSAOBCSoftcoreForce *arg1 = (OpenMM::GBSAOBCSoftcoreForce *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GBSAOBCSoftcoreForce_getCutoffDistance",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__GBSAOBCSoftcoreForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GBSAOBCSoftcoreForce_getCutoffDistance" "', argument " "1"" of type '" "OpenMM::GBSAOBCSoftcoreForce const *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::GBSAOBCSoftcoreForce * >(argp1);
  {
    try {
      result = (double)((OpenMM::GBSAOBCSoftcoreForce const *)arg1)->getCutoffDistance();
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GBSAOBCSoftcoreForce_setCutoffDistance(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::GBSAOBCSoftcoreForce *arg1 = (OpenMM::GBSAOBCSoftcoreForce *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GBSAOBCSoftcoreForce_setCutoffDistance",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__GBSAOBCSoftcoreForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GBSAOBCSoftcoreForce_setCutoffDistance" "', argument " "1"" of type '" "OpenMM::GBSAOBCSoftcoreForce *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::GBSAOBCSoftcoreForce * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GBSAOBCSoftcoreForce_setCutoffDistance" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->setCutoffDistance(arg2);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_GBSAOBCSoftcoreForce__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::GBSAOBCSoftcoreForce *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  OpenMM::GBSAOBCSoftcoreForce *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_GBSAOBCSoftcoreForce",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_OpenMM__GBSAOBCSoftcoreForce,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_GBSAOBCSoftcoreForce" "', argument " "1"" of type '" "OpenMM::GBSAOBCSoftcoreForce const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_GBSAOBCSoftcoreForce" "', argument " "1"" of type '" "OpenMM::GBSAOBCSoftcoreForce const &""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::GBSAOBCSoftcoreForce * >(argp1);
  {
    try {
      result = (OpenMM::GBSAOBCSoftcoreForce *)new OpenMM::GBSAOBCSoftcoreForce((OpenMM::GBSAOBCSoftcoreForce const &)*arg1);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_OpenMM__GBSAOBCSoftcoreForce, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_GBSAOBCSoftcoreForce(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 1); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_GBSAOBCSoftcoreForce__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_OpenMM__GBSAOBCSoftcoreForce, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_GBSAOBCSoftcoreForce__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_GBSAOBCSoftcoreForce'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    OpenMM::GBSAOBCSoftcoreForce()\n"
    "    OpenMM::GBSAOBCSoftcoreForce::GBSAOBCSoftcoreForce(OpenMM::GBSAOBCSoftcoreForce const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_GBSAOBCSoftcoreForce(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::GBSAOBCSoftcoreForce *arg1 = (OpenMM::GBSAOBCSoftcoreForce *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_GBSAOBCSoftcoreForce",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__GBSAOBCSoftcoreForce, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_GBSAOBCSoftcoreForce" "', argument " "1"" of type '" "OpenMM::GBSAOBCSoftcoreForce *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::GBSAOBCSoftcoreForce * >(argp1);
  {
    try {
      delete arg1;
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *GBSAOBCSoftcoreForce_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_OpenMM__GBSAOBCSoftcoreForce, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_GBVIForce__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::GBVIForce *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_GBVIForce")) SWIG_fail;
  {
    try {
      result = (OpenMM::GBVIForce *)new OpenMM::GBVIForce();
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_OpenMM__GBVIForce, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GBVIForce_getNumParticles(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::GBVIForce *arg1 = (OpenMM::GBVIForce *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GBVIForce_getNumParticles",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__GBVIForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GBVIForce_getNumParticles" "', argument " "1"" of type '" "OpenMM::GBVIForce const *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::GBVIForce * >(argp1);
  {
    try {
      result = (int)((OpenMM::GBVIForce const *)arg1)->getNumParticles();
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GBVIForce_addParticle(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::GBVIForce *arg1 = (OpenMM::GBVIForce *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:GBVIForce_addParticle",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__GBVIForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GBVIForce_addParticle" "', argument " "1"" of type '" "OpenMM::GBVIForce *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::GBVIForce * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GBVIForce_addParticle" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "GBVIForce_addParticle" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "GBVIForce_addParticle" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  {
    try {
      result = (int)(arg1)->addParticle(arg2,arg3,arg4);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GBVIForce_getParticleParameters(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::GBVIForce *arg1 = (OpenMM::GBVIForce *) 0 ;
  int arg2 ;
  double *arg3 = 0 ;
  double *arg4 = 0 ;
  double *arg5 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  double temp3 ;
  int res3 = SWIG_TMPOBJ ;
  double temp4 ;
  int res4 = SWIG_TMPOBJ ;
  double temp5 ;
  int res5 = SWIG_TMPOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  arg3 = &temp3;
  arg4 = &temp4;
  arg5 = &temp5;
  if (!PyArg_ParseTuple(args,(char *)"OO:GBVIForce_getParticleParameters",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__GBVIForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GBVIForce_getParticleParameters" "', argument " "1"" of type '" "OpenMM::GBVIForce const *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::GBVIForce * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GBVIForce_getParticleParameters" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      ((OpenMM::GBVIForce const *)arg1)->getParticleParameters(arg2,*arg3,*arg4,*arg5);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsTmpObj(res3)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_From_double((*arg3)));
  } else {
    int new_flags = SWIG_IsNewObj(res3) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg3), SWIGTYPE_p_double, new_flags));
  }
  if (SWIG_IsTmpObj(res4)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_From_double((*arg4)));
  } else {
    int new_flags = SWIG_IsNewObj(res4) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg4), SWIGTYPE_p_double, new_flags));
  }
  if (SWIG_IsTmpObj(res5)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_From_double((*arg5)));
  } else {
    int new_flags = SWIG_IsNewObj(res5) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg5), SWIGTYPE_p_double, new_flags));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GBVIForce_setParticleParameters(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::GBVIForce *arg1 = (OpenMM::GBVIForce *) 0 ;
  int arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:GBVIForce_setParticleParameters",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__GBVIForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GBVIForce_setParticleParameters" "', argument " "1"" of type '" "OpenMM::GBVIForce *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::GBVIForce * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GBVIForce_setParticleParameters" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "GBVIForce_setParticleParameters" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "GBVIForce_setParticleParameters" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  ecode5 = SWIG_AsVal_double(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "GBVIForce_setParticleParameters" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  {
    try {
      (arg1)->setParticleParameters(arg2,arg3,arg4,arg5);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GBVIForce_addBond(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::GBVIForce *arg1 = (OpenMM::GBVIForce *) 0 ;
  int arg2 ;
  int arg3 ;
  double arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:GBVIForce_addBond",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__GBVIForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GBVIForce_addBond" "', argument " "1"" of type '" "OpenMM::GBVIForce *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::GBVIForce * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GBVIForce_addBond" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "GBVIForce_addBond" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "GBVIForce_addBond" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  {
    try {
      result = (int)(arg1)->addBond(arg2,arg3,arg4);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GBVIForce_getBondParameters(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::GBVIForce *arg1 = (OpenMM::GBVIForce *) 0 ;
  int arg2 ;
  int *arg3 = 0 ;
  int *arg4 = 0 ;
  double *arg5 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int temp3 ;
  int res3 = SWIG_TMPOBJ ;
  int temp4 ;
  int res4 = SWIG_TMPOBJ ;
  double temp5 ;
  int res5 = SWIG_TMPOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  arg3 = &temp3;
  arg4 = &temp4;
  arg5 = &temp5;
  if (!PyArg_ParseTuple(args,(char *)"OO:GBVIForce_getBondParameters",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__GBVIForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GBVIForce_getBondParameters" "', argument " "1"" of type '" "OpenMM::GBVIForce const *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::GBVIForce * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GBVIForce_getBondParameters" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      ((OpenMM::GBVIForce const *)arg1)->getBondParameters(arg2,*arg3,*arg4,*arg5);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsTmpObj(res3)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_From_int((*arg3)));
  } else {
    int new_flags = SWIG_IsNewObj(res3) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg3), SWIGTYPE_p_int, new_flags));
  }
  if (SWIG_IsTmpObj(res4)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_From_int((*arg4)));
  } else {
    int new_flags = SWIG_IsNewObj(res4) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg4), SWIGTYPE_p_int, new_flags));
  }
  if (SWIG_IsTmpObj(res5)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_From_double((*arg5)));
  } else {
    int new_flags = SWIG_IsNewObj(res5) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg5), SWIGTYPE_p_double, new_flags));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GBVIForce_setBondParameters(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::GBVIForce *arg1 = (OpenMM::GBVIForce *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  double arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:GBVIForce_setBondParameters",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__GBVIForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GBVIForce_setBondParameters" "', argument " "1"" of type '" "OpenMM::GBVIForce *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::GBVIForce * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GBVIForce_setBondParameters" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "GBVIForce_setBondParameters" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "GBVIForce_setBondParameters" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  ecode5 = SWIG_AsVal_double(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "GBVIForce_setBondParameters" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  {
    try {
      (arg1)->setBondParameters(arg2,arg3,arg4,arg5);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GBVIForce_getNumBonds(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::GBVIForce *arg1 = (OpenMM::GBVIForce *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GBVIForce_getNumBonds",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__GBVIForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GBVIForce_getNumBonds" "', argument " "1"" of type '" "OpenMM::GBVIForce const *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::GBVIForce * >(argp1);
  {
    try {
      result = (int)((OpenMM::GBVIForce const *)arg1)->getNumBonds();
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GBVIForce_getSolventDielectric(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::GBVIForce *arg1 = (OpenMM::GBVIForce *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GBVIForce_getSolventDielectric",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__GBVIForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GBVIForce_getSolventDielectric" "', argument " "1"" of type '" "OpenMM::GBVIForce const *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::GBVIForce * >(argp1);
  {
    try {
      result = (double)((OpenMM::GBVIForce const *)arg1)->getSolventDielectric();
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GBVIForce_setSolventDielectric(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::GBVIForce *arg1 = (OpenMM::GBVIForce *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GBVIForce_setSolventDielectric",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__GBVIForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GBVIForce_setSolventDielectric" "', argument " "1"" of type '" "OpenMM::GBVIForce *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::GBVIForce * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GBVIForce_setSolventDielectric" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->setSolventDielectric(arg2);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GBVIForce_getSoluteDielectric(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::GBVIForce *arg1 = (OpenMM::GBVIForce *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GBVIForce_getSoluteDielectric",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__GBVIForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GBVIForce_getSoluteDielectric" "', argument " "1"" of type '" "OpenMM::GBVIForce const *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::GBVIForce * >(argp1);
  {
    try {
      result = (double)((OpenMM::GBVIForce const *)arg1)->getSoluteDielectric();
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GBVIForce_setSoluteDielectric(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::GBVIForce *arg1 = (OpenMM::GBVIForce *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GBVIForce_setSoluteDielectric",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__GBVIForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GBVIForce_setSoluteDielectric" "', argument " "1"" of type '" "OpenMM::GBVIForce *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::GBVIForce * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GBVIForce_setSoluteDielectric" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->setSoluteDielectric(arg2);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GBVIForce_getNonbondedMethod(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::GBVIForce *arg1 = (OpenMM::GBVIForce *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  OpenMM::GBVIForce::NonbondedMethod result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GBVIForce_getNonbondedMethod",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__GBVIForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GBVIForce_getNonbondedMethod" "', argument " "1"" of type '" "OpenMM::GBVIForce const *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::GBVIForce * >(argp1);
  {
    try {
      result = (OpenMM::GBVIForce::NonbondedMethod)((OpenMM::GBVIForce const *)arg1)->getNonbondedMethod();
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GBVIForce_setNonbondedMethod(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::GBVIForce *arg1 = (OpenMM::GBVIForce *) 0 ;
  OpenMM::GBVIForce::NonbondedMethod arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GBVIForce_setNonbondedMethod",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__GBVIForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GBVIForce_setNonbondedMethod" "', argument " "1"" of type '" "OpenMM::GBVIForce *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::GBVIForce * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GBVIForce_setNonbondedMethod" "', argument " "2"" of type '" "OpenMM::GBVIForce::NonbondedMethod""'");
  } 
  arg2 = static_cast< OpenMM::GBVIForce::NonbondedMethod >(val2);
  {
    try {
      (arg1)->setNonbondedMethod(arg2);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GBVIForce_getCutoffDistance(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::GBVIForce *arg1 = (OpenMM::GBVIForce *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GBVIForce_getCutoffDistance",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__GBVIForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GBVIForce_getCutoffDistance" "', argument " "1"" of type '" "OpenMM::GBVIForce const *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::GBVIForce * >(argp1);
  {
    try {
      result = (double)((OpenMM::GBVIForce const *)arg1)->getCutoffDistance();
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GBVIForce_setCutoffDistance(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::GBVIForce *arg1 = (OpenMM::GBVIForce *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GBVIForce_setCutoffDistance",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__GBVIForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GBVIForce_setCutoffDistance" "', argument " "1"" of type '" "OpenMM::GBVIForce *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::GBVIForce * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GBVIForce_setCutoffDistance" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->setCutoffDistance(arg2);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GBVIForce_getBornRadiusScalingMethod(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::GBVIForce *arg1 = (OpenMM::GBVIForce *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  OpenMM::GBVIForce::BornRadiusScalingMethod result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GBVIForce_getBornRadiusScalingMethod",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__GBVIForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GBVIForce_getBornRadiusScalingMethod" "', argument " "1"" of type '" "OpenMM::GBVIForce const *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::GBVIForce * >(argp1);
  {
    try {
      result = (OpenMM::GBVIForce::BornRadiusScalingMethod)((OpenMM::GBVIForce const *)arg1)->getBornRadiusScalingMethod();
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GBVIForce_setBornRadiusScalingMethod(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::GBVIForce *arg1 = (OpenMM::GBVIForce *) 0 ;
  OpenMM::GBVIForce::BornRadiusScalingMethod arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GBVIForce_setBornRadiusScalingMethod",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__GBVIForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GBVIForce_setBornRadiusScalingMethod" "', argument " "1"" of type '" "OpenMM::GBVIForce *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::GBVIForce * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GBVIForce_setBornRadiusScalingMethod" "', argument " "2"" of type '" "OpenMM::GBVIForce::BornRadiusScalingMethod""'");
  } 
  arg2 = static_cast< OpenMM::GBVIForce::BornRadiusScalingMethod >(val2);
  {
    try {
      (arg1)->setBornRadiusScalingMethod(arg2);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GBVIForce_getQuinticLowerLimitFactor(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::GBVIForce *arg1 = (OpenMM::GBVIForce *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GBVIForce_getQuinticLowerLimitFactor",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__GBVIForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GBVIForce_getQuinticLowerLimitFactor" "', argument " "1"" of type '" "OpenMM::GBVIForce const *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::GBVIForce * >(argp1);
  {
    try {
      result = (double)((OpenMM::GBVIForce const *)arg1)->getQuinticLowerLimitFactor();
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GBVIForce_setQuinticLowerLimitFactor(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::GBVIForce *arg1 = (OpenMM::GBVIForce *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GBVIForce_setQuinticLowerLimitFactor",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__GBVIForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GBVIForce_setQuinticLowerLimitFactor" "', argument " "1"" of type '" "OpenMM::GBVIForce *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::GBVIForce * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GBVIForce_setQuinticLowerLimitFactor" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->setQuinticLowerLimitFactor(arg2);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GBVIForce_getQuinticUpperBornRadiusLimit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::GBVIForce *arg1 = (OpenMM::GBVIForce *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GBVIForce_getQuinticUpperBornRadiusLimit",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__GBVIForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GBVIForce_getQuinticUpperBornRadiusLimit" "', argument " "1"" of type '" "OpenMM::GBVIForce const *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::GBVIForce * >(argp1);
  {
    try {
      result = (double)((OpenMM::GBVIForce const *)arg1)->getQuinticUpperBornRadiusLimit();
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GBVIForce_setQuinticUpperBornRadiusLimit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::GBVIForce *arg1 = (OpenMM::GBVIForce *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GBVIForce_setQuinticUpperBornRadiusLimit",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__GBVIForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GBVIForce_setQuinticUpperBornRadiusLimit" "', argument " "1"" of type '" "OpenMM::GBVIForce *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::GBVIForce * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GBVIForce_setQuinticUpperBornRadiusLimit" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->setQuinticUpperBornRadiusLimit(arg2);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_GBVIForce__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::GBVIForce *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  OpenMM::GBVIForce *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_GBVIForce",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_OpenMM__GBVIForce,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_GBVIForce" "', argument " "1"" of type '" "OpenMM::GBVIForce const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_GBVIForce" "', argument " "1"" of type '" "OpenMM::GBVIForce const &""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::GBVIForce * >(argp1);
  {
    try {
      result = (OpenMM::GBVIForce *)new OpenMM::GBVIForce((OpenMM::GBVIForce const &)*arg1);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_OpenMM__GBVIForce, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_GBVIForce(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 1); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_GBVIForce__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_OpenMM__GBVIForce, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_GBVIForce__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_GBVIForce'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    OpenMM::GBVIForce()\n"
    "    OpenMM::GBVIForce::GBVIForce(OpenMM::GBVIForce const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_GBVIForce(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::GBVIForce *arg1 = (OpenMM::GBVIForce *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_GBVIForce",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__GBVIForce, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_GBVIForce" "', argument " "1"" of type '" "OpenMM::GBVIForce *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::GBVIForce * >(argp1);
  {
    try {
      delete arg1;
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *GBVIForce_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_OpenMM__GBVIForce, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_GBVISoftcoreForce__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::GBVISoftcoreForce *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_GBVISoftcoreForce")) SWIG_fail;
  {
    try {
      result = (OpenMM::GBVISoftcoreForce *)new OpenMM::GBVISoftcoreForce();
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_OpenMM__GBVISoftcoreForce, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GBVISoftcoreForce_getNumParticles(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::GBVISoftcoreForce *arg1 = (OpenMM::GBVISoftcoreForce *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GBVISoftcoreForce_getNumParticles",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__GBVISoftcoreForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GBVISoftcoreForce_getNumParticles" "', argument " "1"" of type '" "OpenMM::GBVISoftcoreForce const *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::GBVISoftcoreForce * >(argp1);
  {
    try {
      result = (int)((OpenMM::GBVISoftcoreForce const *)arg1)->getNumParticles();
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GBVISoftcoreForce_addParticle__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::GBVISoftcoreForce *arg1 = (OpenMM::GBVISoftcoreForce *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:GBVISoftcoreForce_addParticle",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__GBVISoftcoreForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GBVISoftcoreForce_addParticle" "', argument " "1"" of type '" "OpenMM::GBVISoftcoreForce *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::GBVISoftcoreForce * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GBVISoftcoreForce_addParticle" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "GBVISoftcoreForce_addParticle" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "GBVISoftcoreForce_addParticle" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  ecode5 = SWIG_AsVal_double(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "GBVISoftcoreForce_addParticle" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  {
    try {
      (arg1)->addParticle(arg2,arg3,arg4,arg5);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GBVISoftcoreForce_addParticle__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::GBVISoftcoreForce *arg1 = (OpenMM::GBVISoftcoreForce *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:GBVISoftcoreForce_addParticle",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__GBVISoftcoreForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GBVISoftcoreForce_addParticle" "', argument " "1"" of type '" "OpenMM::GBVISoftcoreForce *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::GBVISoftcoreForce * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GBVISoftcoreForce_addParticle" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "GBVISoftcoreForce_addParticle" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "GBVISoftcoreForce_addParticle" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  {
    try {
      (arg1)->addParticle(arg2,arg3,arg4);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GBVISoftcoreForce_addParticle(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[6];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 5); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_OpenMM__GBVISoftcoreForce, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_GBVISoftcoreForce_addParticle__SWIG_1(self, args);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_OpenMM__GBVISoftcoreForce, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_double(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_GBVISoftcoreForce_addParticle__SWIG_0(self, args);
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'GBVISoftcoreForce_addParticle'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    addParticle(OpenMM::GBVISoftcoreForce *,double,double,double,double)\n"
    "    addParticle(OpenMM::GBVISoftcoreForce *,double,double,double)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_GBVISoftcoreForce_getParticleParameters(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::GBVISoftcoreForce *arg1 = (OpenMM::GBVISoftcoreForce *) 0 ;
  int arg2 ;
  double *arg3 = 0 ;
  double *arg4 = 0 ;
  double *arg5 = 0 ;
  double *arg6 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  double temp3 ;
  int res3 = SWIG_TMPOBJ ;
  double temp4 ;
  int res4 = SWIG_TMPOBJ ;
  double temp5 ;
  int res5 = SWIG_TMPOBJ ;
  double temp6 ;
  int res6 = SWIG_TMPOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  arg3 = &temp3;
  arg4 = &temp4;
  arg5 = &temp5;
  arg6 = &temp6;
  if (!PyArg_ParseTuple(args,(char *)"OO:GBVISoftcoreForce_getParticleParameters",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__GBVISoftcoreForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GBVISoftcoreForce_getParticleParameters" "', argument " "1"" of type '" "OpenMM::GBVISoftcoreForce const *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::GBVISoftcoreForce * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GBVISoftcoreForce_getParticleParameters" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      ((OpenMM::GBVISoftcoreForce const *)arg1)->getParticleParameters(arg2,*arg3,*arg4,*arg5,*arg6);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsTmpObj(res3)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_From_double((*arg3)));
  } else {
    int new_flags = SWIG_IsNewObj(res3) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg3), SWIGTYPE_p_double, new_flags));
  }
  if (SWIG_IsTmpObj(res4)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_From_double((*arg4)));
  } else {
    int new_flags = SWIG_IsNewObj(res4) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg4), SWIGTYPE_p_double, new_flags));
  }
  if (SWIG_IsTmpObj(res5)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_From_double((*arg5)));
  } else {
    int new_flags = SWIG_IsNewObj(res5) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg5), SWIGTYPE_p_double, new_flags));
  }
  if (SWIG_IsTmpObj(res6)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_From_double((*arg6)));
  } else {
    int new_flags = SWIG_IsNewObj(res6) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg6), SWIGTYPE_p_double, new_flags));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GBVISoftcoreForce_setParticleParameters__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::GBVISoftcoreForce *arg1 = (OpenMM::GBVISoftcoreForce *) 0 ;
  int arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  double val6 ;
  int ecode6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:GBVISoftcoreForce_setParticleParameters",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__GBVISoftcoreForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GBVISoftcoreForce_setParticleParameters" "', argument " "1"" of type '" "OpenMM::GBVISoftcoreForce *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::GBVISoftcoreForce * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GBVISoftcoreForce_setParticleParameters" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "GBVISoftcoreForce_setParticleParameters" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "GBVISoftcoreForce_setParticleParameters" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  ecode5 = SWIG_AsVal_double(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "GBVISoftcoreForce_setParticleParameters" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  ecode6 = SWIG_AsVal_double(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "GBVISoftcoreForce_setParticleParameters" "', argument " "6"" of type '" "double""'");
  } 
  arg6 = static_cast< double >(val6);
  {
    try {
      (arg1)->setParticleParameters(arg2,arg3,arg4,arg5,arg6);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GBVISoftcoreForce_setParticleParameters__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::GBVISoftcoreForce *arg1 = (OpenMM::GBVISoftcoreForce *) 0 ;
  int arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:GBVISoftcoreForce_setParticleParameters",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__GBVISoftcoreForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GBVISoftcoreForce_setParticleParameters" "', argument " "1"" of type '" "OpenMM::GBVISoftcoreForce *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::GBVISoftcoreForce * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GBVISoftcoreForce_setParticleParameters" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "GBVISoftcoreForce_setParticleParameters" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "GBVISoftcoreForce_setParticleParameters" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  ecode5 = SWIG_AsVal_double(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "GBVISoftcoreForce_setParticleParameters" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  {
    try {
      (arg1)->setParticleParameters(arg2,arg3,arg4,arg5);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GBVISoftcoreForce_setParticleParameters(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[7];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 6); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_OpenMM__GBVISoftcoreForce, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_double(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_GBVISoftcoreForce_setParticleParameters__SWIG_1(self, args);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_OpenMM__GBVISoftcoreForce, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_double(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_double(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                return _wrap_GBVISoftcoreForce_setParticleParameters__SWIG_0(self, args);
              }
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'GBVISoftcoreForce_setParticleParameters'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    setParticleParameters(OpenMM::GBVISoftcoreForce *,int,double,double,double,double)\n"
    "    setParticleParameters(OpenMM::GBVISoftcoreForce *,int,double,double,double)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_GBVISoftcoreForce_addBond(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::GBVISoftcoreForce *arg1 = (OpenMM::GBVISoftcoreForce *) 0 ;
  int arg2 ;
  int arg3 ;
  double arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:GBVISoftcoreForce_addBond",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__GBVISoftcoreForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GBVISoftcoreForce_addBond" "', argument " "1"" of type '" "OpenMM::GBVISoftcoreForce *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::GBVISoftcoreForce * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GBVISoftcoreForce_addBond" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "GBVISoftcoreForce_addBond" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "GBVISoftcoreForce_addBond" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  {
    try {
      result = (int)(arg1)->addBond(arg2,arg3,arg4);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GBVISoftcoreForce_getBondParameters(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::GBVISoftcoreForce *arg1 = (OpenMM::GBVISoftcoreForce *) 0 ;
  int arg2 ;
  int *arg3 = 0 ;
  int *arg4 = 0 ;
  double *arg5 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int temp3 ;
  int res3 = SWIG_TMPOBJ ;
  int temp4 ;
  int res4 = SWIG_TMPOBJ ;
  double temp5 ;
  int res5 = SWIG_TMPOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  arg3 = &temp3;
  arg4 = &temp4;
  arg5 = &temp5;
  if (!PyArg_ParseTuple(args,(char *)"OO:GBVISoftcoreForce_getBondParameters",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__GBVISoftcoreForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GBVISoftcoreForce_getBondParameters" "', argument " "1"" of type '" "OpenMM::GBVISoftcoreForce const *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::GBVISoftcoreForce * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GBVISoftcoreForce_getBondParameters" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      ((OpenMM::GBVISoftcoreForce const *)arg1)->getBondParameters(arg2,*arg3,*arg4,*arg5);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsTmpObj(res3)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_From_int((*arg3)));
  } else {
    int new_flags = SWIG_IsNewObj(res3) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg3), SWIGTYPE_p_int, new_flags));
  }
  if (SWIG_IsTmpObj(res4)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_From_int((*arg4)));
  } else {
    int new_flags = SWIG_IsNewObj(res4) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg4), SWIGTYPE_p_int, new_flags));
  }
  if (SWIG_IsTmpObj(res5)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_From_double((*arg5)));
  } else {
    int new_flags = SWIG_IsNewObj(res5) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg5), SWIGTYPE_p_double, new_flags));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GBVISoftcoreForce_setBondParameters(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::GBVISoftcoreForce *arg1 = (OpenMM::GBVISoftcoreForce *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  double arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:GBVISoftcoreForce_setBondParameters",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__GBVISoftcoreForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GBVISoftcoreForce_setBondParameters" "', argument " "1"" of type '" "OpenMM::GBVISoftcoreForce *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::GBVISoftcoreForce * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GBVISoftcoreForce_setBondParameters" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "GBVISoftcoreForce_setBondParameters" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "GBVISoftcoreForce_setBondParameters" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  ecode5 = SWIG_AsVal_double(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "GBVISoftcoreForce_setBondParameters" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  {
    try {
      (arg1)->setBondParameters(arg2,arg3,arg4,arg5);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GBVISoftcoreForce_getNumBonds(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::GBVISoftcoreForce *arg1 = (OpenMM::GBVISoftcoreForce *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GBVISoftcoreForce_getNumBonds",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__GBVISoftcoreForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GBVISoftcoreForce_getNumBonds" "', argument " "1"" of type '" "OpenMM::GBVISoftcoreForce const *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::GBVISoftcoreForce * >(argp1);
  {
    try {
      result = (int)((OpenMM::GBVISoftcoreForce const *)arg1)->getNumBonds();
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GBVISoftcoreForce_getSolventDielectric(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::GBVISoftcoreForce *arg1 = (OpenMM::GBVISoftcoreForce *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GBVISoftcoreForce_getSolventDielectric",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__GBVISoftcoreForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GBVISoftcoreForce_getSolventDielectric" "', argument " "1"" of type '" "OpenMM::GBVISoftcoreForce const *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::GBVISoftcoreForce * >(argp1);
  {
    try {
      result = (double)((OpenMM::GBVISoftcoreForce const *)arg1)->getSolventDielectric();
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GBVISoftcoreForce_setSolventDielectric(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::GBVISoftcoreForce *arg1 = (OpenMM::GBVISoftcoreForce *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GBVISoftcoreForce_setSolventDielectric",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__GBVISoftcoreForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GBVISoftcoreForce_setSolventDielectric" "', argument " "1"" of type '" "OpenMM::GBVISoftcoreForce *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::GBVISoftcoreForce * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GBVISoftcoreForce_setSolventDielectric" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->setSolventDielectric(arg2);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GBVISoftcoreForce_getSoluteDielectric(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::GBVISoftcoreForce *arg1 = (OpenMM::GBVISoftcoreForce *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GBVISoftcoreForce_getSoluteDielectric",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__GBVISoftcoreForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GBVISoftcoreForce_getSoluteDielectric" "', argument " "1"" of type '" "OpenMM::GBVISoftcoreForce const *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::GBVISoftcoreForce * >(argp1);
  {
    try {
      result = (double)((OpenMM::GBVISoftcoreForce const *)arg1)->getSoluteDielectric();
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GBVISoftcoreForce_setSoluteDielectric(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::GBVISoftcoreForce *arg1 = (OpenMM::GBVISoftcoreForce *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GBVISoftcoreForce_setSoluteDielectric",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__GBVISoftcoreForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GBVISoftcoreForce_setSoluteDielectric" "', argument " "1"" of type '" "OpenMM::GBVISoftcoreForce *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::GBVISoftcoreForce * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GBVISoftcoreForce_setSoluteDielectric" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->setSoluteDielectric(arg2);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GBVISoftcoreForce_getNonbondedMethod(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::GBVISoftcoreForce *arg1 = (OpenMM::GBVISoftcoreForce *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  OpenMM::GBVISoftcoreForce::NonbondedSoftcoreMethod result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GBVISoftcoreForce_getNonbondedMethod",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__GBVISoftcoreForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GBVISoftcoreForce_getNonbondedMethod" "', argument " "1"" of type '" "OpenMM::GBVISoftcoreForce const *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::GBVISoftcoreForce * >(argp1);
  {
    try {
      result = (OpenMM::GBVISoftcoreForce::NonbondedSoftcoreMethod)((OpenMM::GBVISoftcoreForce const *)arg1)->getNonbondedMethod();
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GBVISoftcoreForce_setNonbondedMethod(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::GBVISoftcoreForce *arg1 = (OpenMM::GBVISoftcoreForce *) 0 ;
  OpenMM::GBVISoftcoreForce::NonbondedSoftcoreMethod arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GBVISoftcoreForce_setNonbondedMethod",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__GBVISoftcoreForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GBVISoftcoreForce_setNonbondedMethod" "', argument " "1"" of type '" "OpenMM::GBVISoftcoreForce *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::GBVISoftcoreForce * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GBVISoftcoreForce_setNonbondedMethod" "', argument " "2"" of type '" "OpenMM::GBVISoftcoreForce::NonbondedSoftcoreMethod""'");
  } 
  arg2 = static_cast< OpenMM::GBVISoftcoreForce::NonbondedSoftcoreMethod >(val2);
  {
    try {
      (arg1)->setNonbondedMethod(arg2);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GBVISoftcoreForce_getCutoffDistance(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::GBVISoftcoreForce *arg1 = (OpenMM::GBVISoftcoreForce *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GBVISoftcoreForce_getCutoffDistance",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__GBVISoftcoreForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GBVISoftcoreForce_getCutoffDistance" "', argument " "1"" of type '" "OpenMM::GBVISoftcoreForce const *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::GBVISoftcoreForce * >(argp1);
  {
    try {
      result = (double)((OpenMM::GBVISoftcoreForce const *)arg1)->getCutoffDistance();
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GBVISoftcoreForce_setCutoffDistance(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::GBVISoftcoreForce *arg1 = (OpenMM::GBVISoftcoreForce *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GBVISoftcoreForce_setCutoffDistance",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__GBVISoftcoreForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GBVISoftcoreForce_setCutoffDistance" "', argument " "1"" of type '" "OpenMM::GBVISoftcoreForce *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::GBVISoftcoreForce * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GBVISoftcoreForce_setCutoffDistance" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->setCutoffDistance(arg2);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GBVISoftcoreForce_getBornRadiusScalingMethod(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::GBVISoftcoreForce *arg1 = (OpenMM::GBVISoftcoreForce *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  OpenMM::GBVISoftcoreForce::BornRadiusScalingSoftcoreMethod result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GBVISoftcoreForce_getBornRadiusScalingMethod",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__GBVISoftcoreForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GBVISoftcoreForce_getBornRadiusScalingMethod" "', argument " "1"" of type '" "OpenMM::GBVISoftcoreForce const *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::GBVISoftcoreForce * >(argp1);
  {
    try {
      result = (OpenMM::GBVISoftcoreForce::BornRadiusScalingSoftcoreMethod)((OpenMM::GBVISoftcoreForce const *)arg1)->getBornRadiusScalingMethod();
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GBVISoftcoreForce_setBornRadiusScalingMethod(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::GBVISoftcoreForce *arg1 = (OpenMM::GBVISoftcoreForce *) 0 ;
  OpenMM::GBVISoftcoreForce::BornRadiusScalingSoftcoreMethod arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GBVISoftcoreForce_setBornRadiusScalingMethod",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__GBVISoftcoreForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GBVISoftcoreForce_setBornRadiusScalingMethod" "', argument " "1"" of type '" "OpenMM::GBVISoftcoreForce *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::GBVISoftcoreForce * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GBVISoftcoreForce_setBornRadiusScalingMethod" "', argument " "2"" of type '" "OpenMM::GBVISoftcoreForce::BornRadiusScalingSoftcoreMethod""'");
  } 
  arg2 = static_cast< OpenMM::GBVISoftcoreForce::BornRadiusScalingSoftcoreMethod >(val2);
  {
    try {
      (arg1)->setBornRadiusScalingMethod(arg2);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GBVISoftcoreForce_getQuinticLowerLimitFactor(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::GBVISoftcoreForce *arg1 = (OpenMM::GBVISoftcoreForce *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GBVISoftcoreForce_getQuinticLowerLimitFactor",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__GBVISoftcoreForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GBVISoftcoreForce_getQuinticLowerLimitFactor" "', argument " "1"" of type '" "OpenMM::GBVISoftcoreForce const *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::GBVISoftcoreForce * >(argp1);
  {
    try {
      result = (double)((OpenMM::GBVISoftcoreForce const *)arg1)->getQuinticLowerLimitFactor();
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GBVISoftcoreForce_setQuinticLowerLimitFactor(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::GBVISoftcoreForce *arg1 = (OpenMM::GBVISoftcoreForce *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GBVISoftcoreForce_setQuinticLowerLimitFactor",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__GBVISoftcoreForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GBVISoftcoreForce_setQuinticLowerLimitFactor" "', argument " "1"" of type '" "OpenMM::GBVISoftcoreForce *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::GBVISoftcoreForce * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GBVISoftcoreForce_setQuinticLowerLimitFactor" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->setQuinticLowerLimitFactor(arg2);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GBVISoftcoreForce_getQuinticUpperBornRadiusLimit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::GBVISoftcoreForce *arg1 = (OpenMM::GBVISoftcoreForce *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GBVISoftcoreForce_getQuinticUpperBornRadiusLimit",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__GBVISoftcoreForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GBVISoftcoreForce_getQuinticUpperBornRadiusLimit" "', argument " "1"" of type '" "OpenMM::GBVISoftcoreForce const *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::GBVISoftcoreForce * >(argp1);
  {
    try {
      result = (double)((OpenMM::GBVISoftcoreForce const *)arg1)->getQuinticUpperBornRadiusLimit();
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GBVISoftcoreForce_setQuinticUpperBornRadiusLimit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::GBVISoftcoreForce *arg1 = (OpenMM::GBVISoftcoreForce *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GBVISoftcoreForce_setQuinticUpperBornRadiusLimit",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__GBVISoftcoreForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GBVISoftcoreForce_setQuinticUpperBornRadiusLimit" "', argument " "1"" of type '" "OpenMM::GBVISoftcoreForce *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::GBVISoftcoreForce * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GBVISoftcoreForce_setQuinticUpperBornRadiusLimit" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->setQuinticUpperBornRadiusLimit(arg2);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_GBVISoftcoreForce__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::GBVISoftcoreForce *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  OpenMM::GBVISoftcoreForce *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_GBVISoftcoreForce",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_OpenMM__GBVISoftcoreForce,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_GBVISoftcoreForce" "', argument " "1"" of type '" "OpenMM::GBVISoftcoreForce const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_GBVISoftcoreForce" "', argument " "1"" of type '" "OpenMM::GBVISoftcoreForce const &""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::GBVISoftcoreForce * >(argp1);
  {
    try {
      result = (OpenMM::GBVISoftcoreForce *)new OpenMM::GBVISoftcoreForce((OpenMM::GBVISoftcoreForce const &)*arg1);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_OpenMM__GBVISoftcoreForce, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_GBVISoftcoreForce(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 1); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_GBVISoftcoreForce__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_OpenMM__GBVISoftcoreForce, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_GBVISoftcoreForce__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_GBVISoftcoreForce'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    OpenMM::GBVISoftcoreForce()\n"
    "    OpenMM::GBVISoftcoreForce::GBVISoftcoreForce(OpenMM::GBVISoftcoreForce const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_GBVISoftcoreForce(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::GBVISoftcoreForce *arg1 = (OpenMM::GBVISoftcoreForce *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_GBVISoftcoreForce",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__GBVISoftcoreForce, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_GBVISoftcoreForce" "', argument " "1"" of type '" "OpenMM::GBVISoftcoreForce *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::GBVISoftcoreForce * >(argp1);
  {
    try {
      delete arg1;
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *GBVISoftcoreForce_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_OpenMM__GBVISoftcoreForce, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_HarmonicAngleForce__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::HarmonicAngleForce *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_HarmonicAngleForce")) SWIG_fail;
  {
    try {
      result = (OpenMM::HarmonicAngleForce *)new OpenMM::HarmonicAngleForce();
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_OpenMM__HarmonicAngleForce, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HarmonicAngleForce_getNumAngles(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::HarmonicAngleForce *arg1 = (OpenMM::HarmonicAngleForce *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:HarmonicAngleForce_getNumAngles",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__HarmonicAngleForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HarmonicAngleForce_getNumAngles" "', argument " "1"" of type '" "OpenMM::HarmonicAngleForce const *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::HarmonicAngleForce * >(argp1);
  {
    try {
      result = (int)((OpenMM::HarmonicAngleForce const *)arg1)->getNumAngles();
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HarmonicAngleForce_addAngle(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::HarmonicAngleForce *arg1 = (OpenMM::HarmonicAngleForce *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  double arg5 ;
  double arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  double val6 ;
  int ecode6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:HarmonicAngleForce_addAngle",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__HarmonicAngleForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HarmonicAngleForce_addAngle" "', argument " "1"" of type '" "OpenMM::HarmonicAngleForce *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::HarmonicAngleForce * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "HarmonicAngleForce_addAngle" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "HarmonicAngleForce_addAngle" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "HarmonicAngleForce_addAngle" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  ecode5 = SWIG_AsVal_double(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "HarmonicAngleForce_addAngle" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  ecode6 = SWIG_AsVal_double(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "HarmonicAngleForce_addAngle" "', argument " "6"" of type '" "double""'");
  } 
  arg6 = static_cast< double >(val6);
  {
    try {
      result = (int)(arg1)->addAngle(arg2,arg3,arg4,arg5,arg6);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HarmonicAngleForce_getAngleParameters(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::HarmonicAngleForce *arg1 = (OpenMM::HarmonicAngleForce *) 0 ;
  int arg2 ;
  int *arg3 = 0 ;
  int *arg4 = 0 ;
  int *arg5 = 0 ;
  double *arg6 = 0 ;
  double *arg7 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int temp3 ;
  int res3 = SWIG_TMPOBJ ;
  int temp4 ;
  int res4 = SWIG_TMPOBJ ;
  int temp5 ;
  int res5 = SWIG_TMPOBJ ;
  double temp6 ;
  int res6 = SWIG_TMPOBJ ;
  double temp7 ;
  int res7 = SWIG_TMPOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  arg3 = &temp3;
  arg4 = &temp4;
  arg5 = &temp5;
  arg6 = &temp6;
  arg7 = &temp7;
  if (!PyArg_ParseTuple(args,(char *)"OO:HarmonicAngleForce_getAngleParameters",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__HarmonicAngleForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HarmonicAngleForce_getAngleParameters" "', argument " "1"" of type '" "OpenMM::HarmonicAngleForce const *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::HarmonicAngleForce * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "HarmonicAngleForce_getAngleParameters" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      ((OpenMM::HarmonicAngleForce const *)arg1)->getAngleParameters(arg2,*arg3,*arg4,*arg5,*arg6,*arg7);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsTmpObj(res3)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_From_int((*arg3)));
  } else {
    int new_flags = SWIG_IsNewObj(res3) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg3), SWIGTYPE_p_int, new_flags));
  }
  if (SWIG_IsTmpObj(res4)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_From_int((*arg4)));
  } else {
    int new_flags = SWIG_IsNewObj(res4) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg4), SWIGTYPE_p_int, new_flags));
  }
  if (SWIG_IsTmpObj(res5)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_From_int((*arg5)));
  } else {
    int new_flags = SWIG_IsNewObj(res5) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg5), SWIGTYPE_p_int, new_flags));
  }
  if (SWIG_IsTmpObj(res6)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_From_double((*arg6)));
  } else {
    int new_flags = SWIG_IsNewObj(res6) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg6), SWIGTYPE_p_double, new_flags));
  }
  if (SWIG_IsTmpObj(res7)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_From_double((*arg7)));
  } else {
    int new_flags = SWIG_IsNewObj(res7) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg7), SWIGTYPE_p_double, new_flags));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HarmonicAngleForce_setAngleParameters(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::HarmonicAngleForce *arg1 = (OpenMM::HarmonicAngleForce *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  double arg6 ;
  double arg7 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  double val6 ;
  int ecode6 = 0 ;
  double val7 ;
  int ecode7 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOO:HarmonicAngleForce_setAngleParameters",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__HarmonicAngleForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HarmonicAngleForce_setAngleParameters" "', argument " "1"" of type '" "OpenMM::HarmonicAngleForce *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::HarmonicAngleForce * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "HarmonicAngleForce_setAngleParameters" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "HarmonicAngleForce_setAngleParameters" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "HarmonicAngleForce_setAngleParameters" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  ecode5 = SWIG_AsVal_int(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "HarmonicAngleForce_setAngleParameters" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  ecode6 = SWIG_AsVal_double(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "HarmonicAngleForce_setAngleParameters" "', argument " "6"" of type '" "double""'");
  } 
  arg6 = static_cast< double >(val6);
  ecode7 = SWIG_AsVal_double(obj6, &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "HarmonicAngleForce_setAngleParameters" "', argument " "7"" of type '" "double""'");
  } 
  arg7 = static_cast< double >(val7);
  {
    try {
      (arg1)->setAngleParameters(arg2,arg3,arg4,arg5,arg6,arg7);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_HarmonicAngleForce__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::HarmonicAngleForce *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  OpenMM::HarmonicAngleForce *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_HarmonicAngleForce",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_OpenMM__HarmonicAngleForce,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_HarmonicAngleForce" "', argument " "1"" of type '" "OpenMM::HarmonicAngleForce const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_HarmonicAngleForce" "', argument " "1"" of type '" "OpenMM::HarmonicAngleForce const &""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::HarmonicAngleForce * >(argp1);
  {
    try {
      result = (OpenMM::HarmonicAngleForce *)new OpenMM::HarmonicAngleForce((OpenMM::HarmonicAngleForce const &)*arg1);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_OpenMM__HarmonicAngleForce, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_HarmonicAngleForce(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 1); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_HarmonicAngleForce__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_OpenMM__HarmonicAngleForce, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_HarmonicAngleForce__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_HarmonicAngleForce'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    OpenMM::HarmonicAngleForce()\n"
    "    OpenMM::HarmonicAngleForce::HarmonicAngleForce(OpenMM::HarmonicAngleForce const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_HarmonicAngleForce(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::HarmonicAngleForce *arg1 = (OpenMM::HarmonicAngleForce *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_HarmonicAngleForce",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__HarmonicAngleForce, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_HarmonicAngleForce" "', argument " "1"" of type '" "OpenMM::HarmonicAngleForce *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::HarmonicAngleForce * >(argp1);
  {
    try {
      delete arg1;
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *HarmonicAngleForce_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_OpenMM__HarmonicAngleForce, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_HarmonicBondForce__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::HarmonicBondForce *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_HarmonicBondForce")) SWIG_fail;
  {
    try {
      result = (OpenMM::HarmonicBondForce *)new OpenMM::HarmonicBondForce();
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_OpenMM__HarmonicBondForce, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HarmonicBondForce_getNumBonds(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::HarmonicBondForce *arg1 = (OpenMM::HarmonicBondForce *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:HarmonicBondForce_getNumBonds",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__HarmonicBondForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HarmonicBondForce_getNumBonds" "', argument " "1"" of type '" "OpenMM::HarmonicBondForce const *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::HarmonicBondForce * >(argp1);
  {
    try {
      result = (int)((OpenMM::HarmonicBondForce const *)arg1)->getNumBonds();
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HarmonicBondForce_addBond(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::HarmonicBondForce *arg1 = (OpenMM::HarmonicBondForce *) 0 ;
  int arg2 ;
  int arg3 ;
  double arg4 ;
  double arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:HarmonicBondForce_addBond",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__HarmonicBondForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HarmonicBondForce_addBond" "', argument " "1"" of type '" "OpenMM::HarmonicBondForce *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::HarmonicBondForce * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "HarmonicBondForce_addBond" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "HarmonicBondForce_addBond" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "HarmonicBondForce_addBond" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  ecode5 = SWIG_AsVal_double(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "HarmonicBondForce_addBond" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  {
    try {
      result = (int)(arg1)->addBond(arg2,arg3,arg4,arg5);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HarmonicBondForce_getBondParameters(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::HarmonicBondForce *arg1 = (OpenMM::HarmonicBondForce *) 0 ;
  int arg2 ;
  int *arg3 = 0 ;
  int *arg4 = 0 ;
  double *arg5 = 0 ;
  double *arg6 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int temp3 ;
  int res3 = SWIG_TMPOBJ ;
  int temp4 ;
  int res4 = SWIG_TMPOBJ ;
  double temp5 ;
  int res5 = SWIG_TMPOBJ ;
  double temp6 ;
  int res6 = SWIG_TMPOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  arg3 = &temp3;
  arg4 = &temp4;
  arg5 = &temp5;
  arg6 = &temp6;
  if (!PyArg_ParseTuple(args,(char *)"OO:HarmonicBondForce_getBondParameters",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__HarmonicBondForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HarmonicBondForce_getBondParameters" "', argument " "1"" of type '" "OpenMM::HarmonicBondForce const *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::HarmonicBondForce * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "HarmonicBondForce_getBondParameters" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      ((OpenMM::HarmonicBondForce const *)arg1)->getBondParameters(arg2,*arg3,*arg4,*arg5,*arg6);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsTmpObj(res3)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_From_int((*arg3)));
  } else {
    int new_flags = SWIG_IsNewObj(res3) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg3), SWIGTYPE_p_int, new_flags));
  }
  if (SWIG_IsTmpObj(res4)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_From_int((*arg4)));
  } else {
    int new_flags = SWIG_IsNewObj(res4) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg4), SWIGTYPE_p_int, new_flags));
  }
  if (SWIG_IsTmpObj(res5)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_From_double((*arg5)));
  } else {
    int new_flags = SWIG_IsNewObj(res5) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg5), SWIGTYPE_p_double, new_flags));
  }
  if (SWIG_IsTmpObj(res6)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_From_double((*arg6)));
  } else {
    int new_flags = SWIG_IsNewObj(res6) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg6), SWIGTYPE_p_double, new_flags));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HarmonicBondForce_setBondParameters(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::HarmonicBondForce *arg1 = (OpenMM::HarmonicBondForce *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  double arg5 ;
  double arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  double val6 ;
  int ecode6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:HarmonicBondForce_setBondParameters",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__HarmonicBondForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HarmonicBondForce_setBondParameters" "', argument " "1"" of type '" "OpenMM::HarmonicBondForce *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::HarmonicBondForce * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "HarmonicBondForce_setBondParameters" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "HarmonicBondForce_setBondParameters" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "HarmonicBondForce_setBondParameters" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  ecode5 = SWIG_AsVal_double(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "HarmonicBondForce_setBondParameters" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  ecode6 = SWIG_AsVal_double(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "HarmonicBondForce_setBondParameters" "', argument " "6"" of type '" "double""'");
  } 
  arg6 = static_cast< double >(val6);
  {
    try {
      (arg1)->setBondParameters(arg2,arg3,arg4,arg5,arg6);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_HarmonicBondForce__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::HarmonicBondForce *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  OpenMM::HarmonicBondForce *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_HarmonicBondForce",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_OpenMM__HarmonicBondForce,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_HarmonicBondForce" "', argument " "1"" of type '" "OpenMM::HarmonicBondForce const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_HarmonicBondForce" "', argument " "1"" of type '" "OpenMM::HarmonicBondForce const &""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::HarmonicBondForce * >(argp1);
  {
    try {
      result = (OpenMM::HarmonicBondForce *)new OpenMM::HarmonicBondForce((OpenMM::HarmonicBondForce const &)*arg1);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_OpenMM__HarmonicBondForce, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_HarmonicBondForce(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 1); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_HarmonicBondForce__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_OpenMM__HarmonicBondForce, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_HarmonicBondForce__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_HarmonicBondForce'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    OpenMM::HarmonicBondForce()\n"
    "    OpenMM::HarmonicBondForce::HarmonicBondForce(OpenMM::HarmonicBondForce const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_HarmonicBondForce(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::HarmonicBondForce *arg1 = (OpenMM::HarmonicBondForce *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_HarmonicBondForce",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__HarmonicBondForce, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_HarmonicBondForce" "', argument " "1"" of type '" "OpenMM::HarmonicBondForce *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::HarmonicBondForce * >(argp1);
  {
    try {
      delete arg1;
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *HarmonicBondForce_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_OpenMM__HarmonicBondForce, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_LangevinIntegrator__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  OpenMM::LangevinIntegrator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_LangevinIntegrator",&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_LangevinIntegrator" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_LangevinIntegrator" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_LangevinIntegrator" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      result = (OpenMM::LangevinIntegrator *)new OpenMM::LangevinIntegrator(arg1,arg2,arg3);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_OpenMM__LangevinIntegrator, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LangevinIntegrator_getTemperature(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::LangevinIntegrator *arg1 = (OpenMM::LangevinIntegrator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:LangevinIntegrator_getTemperature",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__LangevinIntegrator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LangevinIntegrator_getTemperature" "', argument " "1"" of type '" "OpenMM::LangevinIntegrator const *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::LangevinIntegrator * >(argp1);
  {
    try {
      result = (double)((OpenMM::LangevinIntegrator const *)arg1)->getTemperature();
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LangevinIntegrator_setTemperature(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::LangevinIntegrator *arg1 = (OpenMM::LangevinIntegrator *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:LangevinIntegrator_setTemperature",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__LangevinIntegrator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LangevinIntegrator_setTemperature" "', argument " "1"" of type '" "OpenMM::LangevinIntegrator *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::LangevinIntegrator * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LangevinIntegrator_setTemperature" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->setTemperature(arg2);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LangevinIntegrator_getFriction(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::LangevinIntegrator *arg1 = (OpenMM::LangevinIntegrator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:LangevinIntegrator_getFriction",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__LangevinIntegrator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LangevinIntegrator_getFriction" "', argument " "1"" of type '" "OpenMM::LangevinIntegrator const *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::LangevinIntegrator * >(argp1);
  {
    try {
      result = (double)((OpenMM::LangevinIntegrator const *)arg1)->getFriction();
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LangevinIntegrator_setFriction(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::LangevinIntegrator *arg1 = (OpenMM::LangevinIntegrator *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:LangevinIntegrator_setFriction",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__LangevinIntegrator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LangevinIntegrator_setFriction" "', argument " "1"" of type '" "OpenMM::LangevinIntegrator *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::LangevinIntegrator * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LangevinIntegrator_setFriction" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->setFriction(arg2);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LangevinIntegrator_getRandomNumberSeed(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::LangevinIntegrator *arg1 = (OpenMM::LangevinIntegrator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:LangevinIntegrator_getRandomNumberSeed",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__LangevinIntegrator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LangevinIntegrator_getRandomNumberSeed" "', argument " "1"" of type '" "OpenMM::LangevinIntegrator const *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::LangevinIntegrator * >(argp1);
  {
    try {
      result = (int)((OpenMM::LangevinIntegrator const *)arg1)->getRandomNumberSeed();
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LangevinIntegrator_setRandomNumberSeed(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::LangevinIntegrator *arg1 = (OpenMM::LangevinIntegrator *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:LangevinIntegrator_setRandomNumberSeed",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__LangevinIntegrator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LangevinIntegrator_setRandomNumberSeed" "', argument " "1"" of type '" "OpenMM::LangevinIntegrator *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::LangevinIntegrator * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LangevinIntegrator_setRandomNumberSeed" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      (arg1)->setRandomNumberSeed(arg2);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LangevinIntegrator_step(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::LangevinIntegrator *arg1 = (OpenMM::LangevinIntegrator *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:LangevinIntegrator_step",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__LangevinIntegrator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LangevinIntegrator_step" "', argument " "1"" of type '" "OpenMM::LangevinIntegrator *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::LangevinIntegrator * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LangevinIntegrator_step" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      (arg1)->step(arg2);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_LangevinIntegrator__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::LangevinIntegrator *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  OpenMM::LangevinIntegrator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_LangevinIntegrator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_OpenMM__LangevinIntegrator,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_LangevinIntegrator" "', argument " "1"" of type '" "OpenMM::LangevinIntegrator const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_LangevinIntegrator" "', argument " "1"" of type '" "OpenMM::LangevinIntegrator const &""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::LangevinIntegrator * >(argp1);
  {
    try {
      result = (OpenMM::LangevinIntegrator *)new OpenMM::LangevinIntegrator((OpenMM::LangevinIntegrator const &)*arg1);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_OpenMM__LangevinIntegrator, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_LangevinIntegrator(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_OpenMM__LangevinIntegrator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_LangevinIntegrator__SWIG_1(self, args);
    }
  }
  if (argc == 3) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_LangevinIntegrator__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_LangevinIntegrator'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    OpenMM::LangevinIntegrator(double,double,double)\n"
    "    OpenMM::LangevinIntegrator::LangevinIntegrator(OpenMM::LangevinIntegrator const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_LangevinIntegrator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::LangevinIntegrator *arg1 = (OpenMM::LangevinIntegrator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_LangevinIntegrator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__LangevinIntegrator, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_LangevinIntegrator" "', argument " "1"" of type '" "OpenMM::LangevinIntegrator *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::LangevinIntegrator * >(argp1);
  {
    try {
      delete arg1;
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *LangevinIntegrator_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_OpenMM__LangevinIntegrator, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_LocalEnergyMinimizer_minimize__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::Context *arg1 = 0 ;
  double arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:LocalEnergyMinimizer_minimize",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_OpenMM__Context,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LocalEnergyMinimizer_minimize" "', argument " "1"" of type '" "OpenMM::Context &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LocalEnergyMinimizer_minimize" "', argument " "1"" of type '" "OpenMM::Context &""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::Context * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LocalEnergyMinimizer_minimize" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "LocalEnergyMinimizer_minimize" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      OpenMM::LocalEnergyMinimizer::minimize(*arg1,arg2,arg3);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LocalEnergyMinimizer_minimize__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::Context *arg1 = 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:LocalEnergyMinimizer_minimize",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_OpenMM__Context,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LocalEnergyMinimizer_minimize" "', argument " "1"" of type '" "OpenMM::Context &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LocalEnergyMinimizer_minimize" "', argument " "1"" of type '" "OpenMM::Context &""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::Context * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LocalEnergyMinimizer_minimize" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      OpenMM::LocalEnergyMinimizer::minimize(*arg1,arg2);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LocalEnergyMinimizer_minimize__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::Context *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:LocalEnergyMinimizer_minimize",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_OpenMM__Context,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LocalEnergyMinimizer_minimize" "', argument " "1"" of type '" "OpenMM::Context &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LocalEnergyMinimizer_minimize" "', argument " "1"" of type '" "OpenMM::Context &""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::Context * >(argp1);
  {
    try {
      OpenMM::LocalEnergyMinimizer::minimize(*arg1);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LocalEnergyMinimizer_minimize(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_OpenMM__Context, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_LocalEnergyMinimizer_minimize__SWIG_2(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_OpenMM__Context, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_LocalEnergyMinimizer_minimize__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_OpenMM__Context, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_LocalEnergyMinimizer_minimize__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'LocalEnergyMinimizer_minimize'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    minimize(OpenMM::Context &,double,int)\n"
    "    minimize(OpenMM::Context &,double)\n"
    "    OpenMM::LocalEnergyMinimizer::minimize(OpenMM::Context &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_LocalEnergyMinimizer(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::LocalEnergyMinimizer *arg1 = (OpenMM::LocalEnergyMinimizer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_LocalEnergyMinimizer",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__LocalEnergyMinimizer, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_LocalEnergyMinimizer" "', argument " "1"" of type '" "OpenMM::LocalEnergyMinimizer *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::LocalEnergyMinimizer * >(argp1);
  {
    try {
      delete arg1;
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *LocalEnergyMinimizer_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_OpenMM__LocalEnergyMinimizer, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_MonteCarloBarostat__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  int arg3 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  OpenMM::MonteCarloBarostat *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_MonteCarloBarostat",&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_MonteCarloBarostat" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_MonteCarloBarostat" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_MonteCarloBarostat" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      result = (OpenMM::MonteCarloBarostat *)new OpenMM::MonteCarloBarostat(arg1,arg2,arg3);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_OpenMM__MonteCarloBarostat, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_MonteCarloBarostat__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  OpenMM::MonteCarloBarostat *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_MonteCarloBarostat",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_MonteCarloBarostat" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_MonteCarloBarostat" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (OpenMM::MonteCarloBarostat *)new OpenMM::MonteCarloBarostat(arg1,arg2);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_OpenMM__MonteCarloBarostat, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MonteCarloBarostat_Pressure(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":MonteCarloBarostat_Pressure")) SWIG_fail;
  {
    try {
      result = (std::string *) &OpenMM::MonteCarloBarostat::Pressure();
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MonteCarloBarostat_getDefaultPressure(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::MonteCarloBarostat *arg1 = (OpenMM::MonteCarloBarostat *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MonteCarloBarostat_getDefaultPressure",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__MonteCarloBarostat, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MonteCarloBarostat_getDefaultPressure" "', argument " "1"" of type '" "OpenMM::MonteCarloBarostat const *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::MonteCarloBarostat * >(argp1);
  {
    try {
      result = (double)((OpenMM::MonteCarloBarostat const *)arg1)->getDefaultPressure();
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MonteCarloBarostat_getFrequency(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::MonteCarloBarostat *arg1 = (OpenMM::MonteCarloBarostat *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MonteCarloBarostat_getFrequency",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__MonteCarloBarostat, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MonteCarloBarostat_getFrequency" "', argument " "1"" of type '" "OpenMM::MonteCarloBarostat const *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::MonteCarloBarostat * >(argp1);
  {
    try {
      result = (int)((OpenMM::MonteCarloBarostat const *)arg1)->getFrequency();
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MonteCarloBarostat_setFrequency(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::MonteCarloBarostat *arg1 = (OpenMM::MonteCarloBarostat *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MonteCarloBarostat_setFrequency",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__MonteCarloBarostat, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MonteCarloBarostat_setFrequency" "', argument " "1"" of type '" "OpenMM::MonteCarloBarostat *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::MonteCarloBarostat * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MonteCarloBarostat_setFrequency" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      (arg1)->setFrequency(arg2);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MonteCarloBarostat_getTemperature(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::MonteCarloBarostat *arg1 = (OpenMM::MonteCarloBarostat *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MonteCarloBarostat_getTemperature",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__MonteCarloBarostat, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MonteCarloBarostat_getTemperature" "', argument " "1"" of type '" "OpenMM::MonteCarloBarostat const *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::MonteCarloBarostat * >(argp1);
  {
    try {
      result = (double)((OpenMM::MonteCarloBarostat const *)arg1)->getTemperature();
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MonteCarloBarostat_setTemperature(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::MonteCarloBarostat *arg1 = (OpenMM::MonteCarloBarostat *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MonteCarloBarostat_setTemperature",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__MonteCarloBarostat, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MonteCarloBarostat_setTemperature" "', argument " "1"" of type '" "OpenMM::MonteCarloBarostat *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::MonteCarloBarostat * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MonteCarloBarostat_setTemperature" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->setTemperature(arg2);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MonteCarloBarostat_getRandomNumberSeed(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::MonteCarloBarostat *arg1 = (OpenMM::MonteCarloBarostat *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MonteCarloBarostat_getRandomNumberSeed",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__MonteCarloBarostat, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MonteCarloBarostat_getRandomNumberSeed" "', argument " "1"" of type '" "OpenMM::MonteCarloBarostat const *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::MonteCarloBarostat * >(argp1);
  {
    try {
      result = (int)((OpenMM::MonteCarloBarostat const *)arg1)->getRandomNumberSeed();
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MonteCarloBarostat_setRandomNumberSeed(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::MonteCarloBarostat *arg1 = (OpenMM::MonteCarloBarostat *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MonteCarloBarostat_setRandomNumberSeed",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__MonteCarloBarostat, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MonteCarloBarostat_setRandomNumberSeed" "', argument " "1"" of type '" "OpenMM::MonteCarloBarostat *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::MonteCarloBarostat * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MonteCarloBarostat_setRandomNumberSeed" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      (arg1)->setRandomNumberSeed(arg2);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_MonteCarloBarostat__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::MonteCarloBarostat *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  OpenMM::MonteCarloBarostat *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_MonteCarloBarostat",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_OpenMM__MonteCarloBarostat,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_MonteCarloBarostat" "', argument " "1"" of type '" "OpenMM::MonteCarloBarostat const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_MonteCarloBarostat" "', argument " "1"" of type '" "OpenMM::MonteCarloBarostat const &""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::MonteCarloBarostat * >(argp1);
  {
    try {
      result = (OpenMM::MonteCarloBarostat *)new OpenMM::MonteCarloBarostat((OpenMM::MonteCarloBarostat const &)*arg1);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_OpenMM__MonteCarloBarostat, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_MonteCarloBarostat(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_OpenMM__MonteCarloBarostat, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_MonteCarloBarostat__SWIG_2(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_MonteCarloBarostat__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_MonteCarloBarostat__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_MonteCarloBarostat'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    OpenMM::MonteCarloBarostat(double,double,int)\n"
    "    OpenMM::MonteCarloBarostat(double,double)\n"
    "    OpenMM::MonteCarloBarostat::MonteCarloBarostat(OpenMM::MonteCarloBarostat const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_MonteCarloBarostat(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::MonteCarloBarostat *arg1 = (OpenMM::MonteCarloBarostat *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_MonteCarloBarostat",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__MonteCarloBarostat, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_MonteCarloBarostat" "', argument " "1"" of type '" "OpenMM::MonteCarloBarostat *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::MonteCarloBarostat * >(argp1);
  {
    try {
      delete arg1;
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *MonteCarloBarostat_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_OpenMM__MonteCarloBarostat, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_NonbondedForce__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::NonbondedForce *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_NonbondedForce")) SWIG_fail;
  {
    try {
      result = (OpenMM::NonbondedForce *)new OpenMM::NonbondedForce();
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_OpenMM__NonbondedForce, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NonbondedForce_getNumParticles(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::NonbondedForce *arg1 = (OpenMM::NonbondedForce *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NonbondedForce_getNumParticles",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__NonbondedForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NonbondedForce_getNumParticles" "', argument " "1"" of type '" "OpenMM::NonbondedForce const *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::NonbondedForce * >(argp1);
  {
    try {
      result = (int)((OpenMM::NonbondedForce const *)arg1)->getNumParticles();
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NonbondedForce_getNumExceptions(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::NonbondedForce *arg1 = (OpenMM::NonbondedForce *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NonbondedForce_getNumExceptions",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__NonbondedForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NonbondedForce_getNumExceptions" "', argument " "1"" of type '" "OpenMM::NonbondedForce const *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::NonbondedForce * >(argp1);
  {
    try {
      result = (int)((OpenMM::NonbondedForce const *)arg1)->getNumExceptions();
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NonbondedForce_getNonbondedMethod(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::NonbondedForce *arg1 = (OpenMM::NonbondedForce *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  OpenMM::NonbondedForce::NonbondedMethod result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NonbondedForce_getNonbondedMethod",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__NonbondedForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NonbondedForce_getNonbondedMethod" "', argument " "1"" of type '" "OpenMM::NonbondedForce const *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::NonbondedForce * >(argp1);
  {
    try {
      result = (OpenMM::NonbondedForce::NonbondedMethod)((OpenMM::NonbondedForce const *)arg1)->getNonbondedMethod();
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NonbondedForce_setNonbondedMethod(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::NonbondedForce *arg1 = (OpenMM::NonbondedForce *) 0 ;
  OpenMM::NonbondedForce::NonbondedMethod arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NonbondedForce_setNonbondedMethod",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__NonbondedForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NonbondedForce_setNonbondedMethod" "', argument " "1"" of type '" "OpenMM::NonbondedForce *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::NonbondedForce * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "NonbondedForce_setNonbondedMethod" "', argument " "2"" of type '" "OpenMM::NonbondedForce::NonbondedMethod""'");
  } 
  arg2 = static_cast< OpenMM::NonbondedForce::NonbondedMethod >(val2);
  {
    try {
      (arg1)->setNonbondedMethod(arg2);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NonbondedForce_getCutoffDistance(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::NonbondedForce *arg1 = (OpenMM::NonbondedForce *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NonbondedForce_getCutoffDistance",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__NonbondedForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NonbondedForce_getCutoffDistance" "', argument " "1"" of type '" "OpenMM::NonbondedForce const *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::NonbondedForce * >(argp1);
  {
    try {
      result = (double)((OpenMM::NonbondedForce const *)arg1)->getCutoffDistance();
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NonbondedForce_setCutoffDistance(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::NonbondedForce *arg1 = (OpenMM::NonbondedForce *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NonbondedForce_setCutoffDistance",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__NonbondedForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NonbondedForce_setCutoffDistance" "', argument " "1"" of type '" "OpenMM::NonbondedForce *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::NonbondedForce * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "NonbondedForce_setCutoffDistance" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->setCutoffDistance(arg2);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NonbondedForce_getReactionFieldDielectric(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::NonbondedForce *arg1 = (OpenMM::NonbondedForce *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NonbondedForce_getReactionFieldDielectric",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__NonbondedForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NonbondedForce_getReactionFieldDielectric" "', argument " "1"" of type '" "OpenMM::NonbondedForce const *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::NonbondedForce * >(argp1);
  {
    try {
      result = (double)((OpenMM::NonbondedForce const *)arg1)->getReactionFieldDielectric();
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NonbondedForce_setReactionFieldDielectric(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::NonbondedForce *arg1 = (OpenMM::NonbondedForce *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NonbondedForce_setReactionFieldDielectric",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__NonbondedForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NonbondedForce_setReactionFieldDielectric" "', argument " "1"" of type '" "OpenMM::NonbondedForce *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::NonbondedForce * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "NonbondedForce_setReactionFieldDielectric" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->setReactionFieldDielectric(arg2);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NonbondedForce_getEwaldErrorTolerance(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::NonbondedForce *arg1 = (OpenMM::NonbondedForce *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NonbondedForce_getEwaldErrorTolerance",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__NonbondedForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NonbondedForce_getEwaldErrorTolerance" "', argument " "1"" of type '" "OpenMM::NonbondedForce const *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::NonbondedForce * >(argp1);
  {
    try {
      result = (double)((OpenMM::NonbondedForce const *)arg1)->getEwaldErrorTolerance();
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NonbondedForce_setEwaldErrorTolerance(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::NonbondedForce *arg1 = (OpenMM::NonbondedForce *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NonbondedForce_setEwaldErrorTolerance",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__NonbondedForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NonbondedForce_setEwaldErrorTolerance" "', argument " "1"" of type '" "OpenMM::NonbondedForce *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::NonbondedForce * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "NonbondedForce_setEwaldErrorTolerance" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->setEwaldErrorTolerance(arg2);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NonbondedForce_addParticle(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::NonbondedForce *arg1 = (OpenMM::NonbondedForce *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:NonbondedForce_addParticle",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__NonbondedForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NonbondedForce_addParticle" "', argument " "1"" of type '" "OpenMM::NonbondedForce *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::NonbondedForce * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "NonbondedForce_addParticle" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "NonbondedForce_addParticle" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "NonbondedForce_addParticle" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  {
    try {
      result = (int)(arg1)->addParticle(arg2,arg3,arg4);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NonbondedForce_getParticleParameters(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::NonbondedForce *arg1 = (OpenMM::NonbondedForce *) 0 ;
  int arg2 ;
  double *arg3 = 0 ;
  double *arg4 = 0 ;
  double *arg5 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  double temp3 ;
  int res3 = SWIG_TMPOBJ ;
  double temp4 ;
  int res4 = SWIG_TMPOBJ ;
  double temp5 ;
  int res5 = SWIG_TMPOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  arg3 = &temp3;
  arg4 = &temp4;
  arg5 = &temp5;
  if (!PyArg_ParseTuple(args,(char *)"OO:NonbondedForce_getParticleParameters",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__NonbondedForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NonbondedForce_getParticleParameters" "', argument " "1"" of type '" "OpenMM::NonbondedForce const *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::NonbondedForce * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "NonbondedForce_getParticleParameters" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      ((OpenMM::NonbondedForce const *)arg1)->getParticleParameters(arg2,*arg3,*arg4,*arg5);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsTmpObj(res3)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_From_double((*arg3)));
  } else {
    int new_flags = SWIG_IsNewObj(res3) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg3), SWIGTYPE_p_double, new_flags));
  }
  if (SWIG_IsTmpObj(res4)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_From_double((*arg4)));
  } else {
    int new_flags = SWIG_IsNewObj(res4) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg4), SWIGTYPE_p_double, new_flags));
  }
  if (SWIG_IsTmpObj(res5)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_From_double((*arg5)));
  } else {
    int new_flags = SWIG_IsNewObj(res5) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg5), SWIGTYPE_p_double, new_flags));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NonbondedForce_setParticleParameters(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::NonbondedForce *arg1 = (OpenMM::NonbondedForce *) 0 ;
  int arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:NonbondedForce_setParticleParameters",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__NonbondedForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NonbondedForce_setParticleParameters" "', argument " "1"" of type '" "OpenMM::NonbondedForce *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::NonbondedForce * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "NonbondedForce_setParticleParameters" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "NonbondedForce_setParticleParameters" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "NonbondedForce_setParticleParameters" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  ecode5 = SWIG_AsVal_double(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "NonbondedForce_setParticleParameters" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  {
    try {
      (arg1)->setParticleParameters(arg2,arg3,arg4,arg5);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NonbondedForce_addException__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::NonbondedForce *arg1 = (OpenMM::NonbondedForce *) 0 ;
  int arg2 ;
  int arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  bool arg7 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  double val6 ;
  int ecode6 = 0 ;
  bool val7 ;
  int ecode7 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOO:NonbondedForce_addException",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__NonbondedForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NonbondedForce_addException" "', argument " "1"" of type '" "OpenMM::NonbondedForce *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::NonbondedForce * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "NonbondedForce_addException" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "NonbondedForce_addException" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "NonbondedForce_addException" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  ecode5 = SWIG_AsVal_double(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "NonbondedForce_addException" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  ecode6 = SWIG_AsVal_double(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "NonbondedForce_addException" "', argument " "6"" of type '" "double""'");
  } 
  arg6 = static_cast< double >(val6);
  ecode7 = SWIG_AsVal_bool(obj6, &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "NonbondedForce_addException" "', argument " "7"" of type '" "bool""'");
  } 
  arg7 = static_cast< bool >(val7);
  {
    try {
      result = (int)(arg1)->addException(arg2,arg3,arg4,arg5,arg6,arg7);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NonbondedForce_addException__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::NonbondedForce *arg1 = (OpenMM::NonbondedForce *) 0 ;
  int arg2 ;
  int arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  double val6 ;
  int ecode6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:NonbondedForce_addException",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__NonbondedForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NonbondedForce_addException" "', argument " "1"" of type '" "OpenMM::NonbondedForce *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::NonbondedForce * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "NonbondedForce_addException" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "NonbondedForce_addException" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "NonbondedForce_addException" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  ecode5 = SWIG_AsVal_double(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "NonbondedForce_addException" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  ecode6 = SWIG_AsVal_double(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "NonbondedForce_addException" "', argument " "6"" of type '" "double""'");
  } 
  arg6 = static_cast< double >(val6);
  {
    try {
      result = (int)(arg1)->addException(arg2,arg3,arg4,arg5,arg6);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NonbondedForce_addException(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[8];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 7); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_OpenMM__NonbondedForce, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_double(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_double(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                return _wrap_NonbondedForce_addException__SWIG_1(self, args);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_OpenMM__NonbondedForce, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_double(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_double(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                {
                  int res = SWIG_AsVal_bool(argv[6], NULL);
                  _v = SWIG_CheckState(res);
                }
                if (_v) {
                  return _wrap_NonbondedForce_addException__SWIG_0(self, args);
                }
              }
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'NonbondedForce_addException'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    addException(OpenMM::NonbondedForce *,int,int,double,double,double,bool)\n"
    "    addException(OpenMM::NonbondedForce *,int,int,double,double,double)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_NonbondedForce_getExceptionParameters(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::NonbondedForce *arg1 = (OpenMM::NonbondedForce *) 0 ;
  int arg2 ;
  int *arg3 = 0 ;
  int *arg4 = 0 ;
  double *arg5 = 0 ;
  double *arg6 = 0 ;
  double *arg7 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int temp3 ;
  int res3 = SWIG_TMPOBJ ;
  int temp4 ;
  int res4 = SWIG_TMPOBJ ;
  double temp5 ;
  int res5 = SWIG_TMPOBJ ;
  double temp6 ;
  int res6 = SWIG_TMPOBJ ;
  double temp7 ;
  int res7 = SWIG_TMPOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  arg3 = &temp3;
  arg4 = &temp4;
  arg5 = &temp5;
  arg6 = &temp6;
  arg7 = &temp7;
  if (!PyArg_ParseTuple(args,(char *)"OO:NonbondedForce_getExceptionParameters",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__NonbondedForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NonbondedForce_getExceptionParameters" "', argument " "1"" of type '" "OpenMM::NonbondedForce const *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::NonbondedForce * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "NonbondedForce_getExceptionParameters" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      ((OpenMM::NonbondedForce const *)arg1)->getExceptionParameters(arg2,*arg3,*arg4,*arg5,*arg6,*arg7);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsTmpObj(res3)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_From_int((*arg3)));
  } else {
    int new_flags = SWIG_IsNewObj(res3) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg3), SWIGTYPE_p_int, new_flags));
  }
  if (SWIG_IsTmpObj(res4)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_From_int((*arg4)));
  } else {
    int new_flags = SWIG_IsNewObj(res4) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg4), SWIGTYPE_p_int, new_flags));
  }
  if (SWIG_IsTmpObj(res5)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_From_double((*arg5)));
  } else {
    int new_flags = SWIG_IsNewObj(res5) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg5), SWIGTYPE_p_double, new_flags));
  }
  if (SWIG_IsTmpObj(res6)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_From_double((*arg6)));
  } else {
    int new_flags = SWIG_IsNewObj(res6) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg6), SWIGTYPE_p_double, new_flags));
  }
  if (SWIG_IsTmpObj(res7)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_From_double((*arg7)));
  } else {
    int new_flags = SWIG_IsNewObj(res7) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg7), SWIGTYPE_p_double, new_flags));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NonbondedForce_setExceptionParameters(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::NonbondedForce *arg1 = (OpenMM::NonbondedForce *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  double arg5 ;
  double arg6 ;
  double arg7 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  double val6 ;
  int ecode6 = 0 ;
  double val7 ;
  int ecode7 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOO:NonbondedForce_setExceptionParameters",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__NonbondedForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NonbondedForce_setExceptionParameters" "', argument " "1"" of type '" "OpenMM::NonbondedForce *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::NonbondedForce * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "NonbondedForce_setExceptionParameters" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "NonbondedForce_setExceptionParameters" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "NonbondedForce_setExceptionParameters" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  ecode5 = SWIG_AsVal_double(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "NonbondedForce_setExceptionParameters" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  ecode6 = SWIG_AsVal_double(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "NonbondedForce_setExceptionParameters" "', argument " "6"" of type '" "double""'");
  } 
  arg6 = static_cast< double >(val6);
  ecode7 = SWIG_AsVal_double(obj6, &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "NonbondedForce_setExceptionParameters" "', argument " "7"" of type '" "double""'");
  } 
  arg7 = static_cast< double >(val7);
  {
    try {
      (arg1)->setExceptionParameters(arg2,arg3,arg4,arg5,arg6,arg7);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NonbondedForce_createExceptionsFromBonds(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::NonbondedForce *arg1 = (OpenMM::NonbondedForce *) 0 ;
  std::vector< std::pair< int,int >,std::allocator< std::pair< int,int > > > *arg2 = 0 ;
  double arg3 ;
  double arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:NonbondedForce_createExceptionsFromBonds",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__NonbondedForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NonbondedForce_createExceptionsFromBonds" "', argument " "1"" of type '" "OpenMM::NonbondedForce *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::NonbondedForce * >(argp1);
  {
    std::vector<std::pair< int,int >,std::allocator< std::pair< int,int > > > *ptr = (std::vector<std::pair< int,int >,std::allocator< std::pair< int,int > > > *)0;
    res2 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NonbondedForce_createExceptionsFromBonds" "', argument " "2"" of type '" "std::vector< std::pair< int,int >,std::allocator< std::pair< int,int > > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NonbondedForce_createExceptionsFromBonds" "', argument " "2"" of type '" "std::vector< std::pair< int,int >,std::allocator< std::pair< int,int > > > const &""'"); 
    }
    arg2 = ptr;
  }
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "NonbondedForce_createExceptionsFromBonds" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "NonbondedForce_createExceptionsFromBonds" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  {
    try {
      (arg1)->createExceptionsFromBonds((std::vector< std::pair< int,int >,std::allocator< std::pair< int,int > > > const &)*arg2,arg3,arg4);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_NonbondedForce_getUseDispersionCorrection(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::NonbondedForce *arg1 = (OpenMM::NonbondedForce *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NonbondedForce_getUseDispersionCorrection",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__NonbondedForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NonbondedForce_getUseDispersionCorrection" "', argument " "1"" of type '" "OpenMM::NonbondedForce const *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::NonbondedForce * >(argp1);
  {
    try {
      result = (bool)((OpenMM::NonbondedForce const *)arg1)->getUseDispersionCorrection();
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NonbondedForce_setUseDispersionCorrection(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::NonbondedForce *arg1 = (OpenMM::NonbondedForce *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NonbondedForce_setUseDispersionCorrection",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__NonbondedForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NonbondedForce_setUseDispersionCorrection" "', argument " "1"" of type '" "OpenMM::NonbondedForce *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::NonbondedForce * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "NonbondedForce_setUseDispersionCorrection" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  {
    try {
      (arg1)->setUseDispersionCorrection(arg2);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NonbondedForce_getReciprocalSpaceForceGroup(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::NonbondedForce *arg1 = (OpenMM::NonbondedForce *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NonbondedForce_getReciprocalSpaceForceGroup",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__NonbondedForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NonbondedForce_getReciprocalSpaceForceGroup" "', argument " "1"" of type '" "OpenMM::NonbondedForce const *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::NonbondedForce * >(argp1);
  {
    try {
      result = (int)((OpenMM::NonbondedForce const *)arg1)->getReciprocalSpaceForceGroup();
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NonbondedForce_setReciprocalSpaceForceGroup(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::NonbondedForce *arg1 = (OpenMM::NonbondedForce *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NonbondedForce_setReciprocalSpaceForceGroup",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__NonbondedForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NonbondedForce_setReciprocalSpaceForceGroup" "', argument " "1"" of type '" "OpenMM::NonbondedForce *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::NonbondedForce * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "NonbondedForce_setReciprocalSpaceForceGroup" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      (arg1)->setReciprocalSpaceForceGroup(arg2);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_NonbondedForce__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::NonbondedForce *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  OpenMM::NonbondedForce *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_NonbondedForce",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_OpenMM__NonbondedForce,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_NonbondedForce" "', argument " "1"" of type '" "OpenMM::NonbondedForce const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_NonbondedForce" "', argument " "1"" of type '" "OpenMM::NonbondedForce const &""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::NonbondedForce * >(argp1);
  {
    try {
      result = (OpenMM::NonbondedForce *)new OpenMM::NonbondedForce((OpenMM::NonbondedForce const &)*arg1);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_OpenMM__NonbondedForce, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_NonbondedForce(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 1); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_NonbondedForce__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_OpenMM__NonbondedForce, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_NonbondedForce__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_NonbondedForce'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    OpenMM::NonbondedForce()\n"
    "    OpenMM::NonbondedForce::NonbondedForce(OpenMM::NonbondedForce const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_NonbondedForce(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::NonbondedForce *arg1 = (OpenMM::NonbondedForce *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_NonbondedForce",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__NonbondedForce, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_NonbondedForce" "', argument " "1"" of type '" "OpenMM::NonbondedForce *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::NonbondedForce * >(argp1);
  {
    try {
      delete arg1;
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *NonbondedForce_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_OpenMM__NonbondedForce, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_NonbondedSoftcoreForce__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::NonbondedSoftcoreForce *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_NonbondedSoftcoreForce")) SWIG_fail;
  {
    try {
      result = (OpenMM::NonbondedSoftcoreForce *)new OpenMM::NonbondedSoftcoreForce();
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_OpenMM__NonbondedSoftcoreForce, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NonbondedSoftcoreForce_getNumParticles(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::NonbondedSoftcoreForce *arg1 = (OpenMM::NonbondedSoftcoreForce *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NonbondedSoftcoreForce_getNumParticles",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__NonbondedSoftcoreForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NonbondedSoftcoreForce_getNumParticles" "', argument " "1"" of type '" "OpenMM::NonbondedSoftcoreForce const *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::NonbondedSoftcoreForce * >(argp1);
  {
    try {
      result = (int)((OpenMM::NonbondedSoftcoreForce const *)arg1)->getNumParticles();
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NonbondedSoftcoreForce_getNumExceptions(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::NonbondedSoftcoreForce *arg1 = (OpenMM::NonbondedSoftcoreForce *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NonbondedSoftcoreForce_getNumExceptions",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__NonbondedSoftcoreForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NonbondedSoftcoreForce_getNumExceptions" "', argument " "1"" of type '" "OpenMM::NonbondedSoftcoreForce const *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::NonbondedSoftcoreForce * >(argp1);
  {
    try {
      result = (int)((OpenMM::NonbondedSoftcoreForce const *)arg1)->getNumExceptions();
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NonbondedSoftcoreForce_getNonbondedMethod(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::NonbondedSoftcoreForce *arg1 = (OpenMM::NonbondedSoftcoreForce *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  OpenMM::NonbondedSoftcoreForce::NonbondedSoftcoreMethod result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NonbondedSoftcoreForce_getNonbondedMethod",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__NonbondedSoftcoreForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NonbondedSoftcoreForce_getNonbondedMethod" "', argument " "1"" of type '" "OpenMM::NonbondedSoftcoreForce const *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::NonbondedSoftcoreForce * >(argp1);
  {
    try {
      result = (OpenMM::NonbondedSoftcoreForce::NonbondedSoftcoreMethod)((OpenMM::NonbondedSoftcoreForce const *)arg1)->getNonbondedMethod();
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NonbondedSoftcoreForce_setNonbondedMethod(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::NonbondedSoftcoreForce *arg1 = (OpenMM::NonbondedSoftcoreForce *) 0 ;
  OpenMM::NonbondedSoftcoreForce::NonbondedSoftcoreMethod arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NonbondedSoftcoreForce_setNonbondedMethod",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__NonbondedSoftcoreForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NonbondedSoftcoreForce_setNonbondedMethod" "', argument " "1"" of type '" "OpenMM::NonbondedSoftcoreForce *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::NonbondedSoftcoreForce * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "NonbondedSoftcoreForce_setNonbondedMethod" "', argument " "2"" of type '" "OpenMM::NonbondedSoftcoreForce::NonbondedSoftcoreMethod""'");
  } 
  arg2 = static_cast< OpenMM::NonbondedSoftcoreForce::NonbondedSoftcoreMethod >(val2);
  {
    try {
      (arg1)->setNonbondedMethod(arg2);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NonbondedSoftcoreForce_getCutoffDistance(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::NonbondedSoftcoreForce *arg1 = (OpenMM::NonbondedSoftcoreForce *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NonbondedSoftcoreForce_getCutoffDistance",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__NonbondedSoftcoreForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NonbondedSoftcoreForce_getCutoffDistance" "', argument " "1"" of type '" "OpenMM::NonbondedSoftcoreForce const *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::NonbondedSoftcoreForce * >(argp1);
  {
    try {
      result = (double)((OpenMM::NonbondedSoftcoreForce const *)arg1)->getCutoffDistance();
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NonbondedSoftcoreForce_setCutoffDistance(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::NonbondedSoftcoreForce *arg1 = (OpenMM::NonbondedSoftcoreForce *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NonbondedSoftcoreForce_setCutoffDistance",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__NonbondedSoftcoreForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NonbondedSoftcoreForce_setCutoffDistance" "', argument " "1"" of type '" "OpenMM::NonbondedSoftcoreForce *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::NonbondedSoftcoreForce * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "NonbondedSoftcoreForce_setCutoffDistance" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->setCutoffDistance(arg2);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NonbondedSoftcoreForce_getReactionFieldDielectric(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::NonbondedSoftcoreForce *arg1 = (OpenMM::NonbondedSoftcoreForce *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NonbondedSoftcoreForce_getReactionFieldDielectric",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__NonbondedSoftcoreForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NonbondedSoftcoreForce_getReactionFieldDielectric" "', argument " "1"" of type '" "OpenMM::NonbondedSoftcoreForce const *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::NonbondedSoftcoreForce * >(argp1);
  {
    try {
      result = (double)((OpenMM::NonbondedSoftcoreForce const *)arg1)->getReactionFieldDielectric();
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NonbondedSoftcoreForce_setReactionFieldDielectric(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::NonbondedSoftcoreForce *arg1 = (OpenMM::NonbondedSoftcoreForce *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NonbondedSoftcoreForce_setReactionFieldDielectric",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__NonbondedSoftcoreForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NonbondedSoftcoreForce_setReactionFieldDielectric" "', argument " "1"" of type '" "OpenMM::NonbondedSoftcoreForce *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::NonbondedSoftcoreForce * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "NonbondedSoftcoreForce_setReactionFieldDielectric" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->setReactionFieldDielectric(arg2);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NonbondedSoftcoreForce_addParticle__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::NonbondedSoftcoreForce *arg1 = (OpenMM::NonbondedSoftcoreForce *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:NonbondedSoftcoreForce_addParticle",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__NonbondedSoftcoreForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NonbondedSoftcoreForce_addParticle" "', argument " "1"" of type '" "OpenMM::NonbondedSoftcoreForce *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::NonbondedSoftcoreForce * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "NonbondedSoftcoreForce_addParticle" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "NonbondedSoftcoreForce_addParticle" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "NonbondedSoftcoreForce_addParticle" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  ecode5 = SWIG_AsVal_double(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "NonbondedSoftcoreForce_addParticle" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  {
    try {
      result = (int)(arg1)->addParticle(arg2,arg3,arg4,arg5);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NonbondedSoftcoreForce_addParticle__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::NonbondedSoftcoreForce *arg1 = (OpenMM::NonbondedSoftcoreForce *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:NonbondedSoftcoreForce_addParticle",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__NonbondedSoftcoreForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NonbondedSoftcoreForce_addParticle" "', argument " "1"" of type '" "OpenMM::NonbondedSoftcoreForce *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::NonbondedSoftcoreForce * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "NonbondedSoftcoreForce_addParticle" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "NonbondedSoftcoreForce_addParticle" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "NonbondedSoftcoreForce_addParticle" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  {
    try {
      result = (int)(arg1)->addParticle(arg2,arg3,arg4);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NonbondedSoftcoreForce_addParticle(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[6];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 5); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_OpenMM__NonbondedSoftcoreForce, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_NonbondedSoftcoreForce_addParticle__SWIG_1(self, args);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_OpenMM__NonbondedSoftcoreForce, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_double(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_NonbondedSoftcoreForce_addParticle__SWIG_0(self, args);
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'NonbondedSoftcoreForce_addParticle'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    addParticle(OpenMM::NonbondedSoftcoreForce *,double,double,double,double)\n"
    "    addParticle(OpenMM::NonbondedSoftcoreForce *,double,double,double)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_NonbondedSoftcoreForce_getParticleParameters(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::NonbondedSoftcoreForce *arg1 = (OpenMM::NonbondedSoftcoreForce *) 0 ;
  int arg2 ;
  double *arg3 = 0 ;
  double *arg4 = 0 ;
  double *arg5 = 0 ;
  double *arg6 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  double temp3 ;
  int res3 = SWIG_TMPOBJ ;
  double temp4 ;
  int res4 = SWIG_TMPOBJ ;
  double temp5 ;
  int res5 = SWIG_TMPOBJ ;
  double temp6 ;
  int res6 = SWIG_TMPOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  arg3 = &temp3;
  arg4 = &temp4;
  arg5 = &temp5;
  arg6 = &temp6;
  if (!PyArg_ParseTuple(args,(char *)"OO:NonbondedSoftcoreForce_getParticleParameters",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__NonbondedSoftcoreForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NonbondedSoftcoreForce_getParticleParameters" "', argument " "1"" of type '" "OpenMM::NonbondedSoftcoreForce const *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::NonbondedSoftcoreForce * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "NonbondedSoftcoreForce_getParticleParameters" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      ((OpenMM::NonbondedSoftcoreForce const *)arg1)->getParticleParameters(arg2,*arg3,*arg4,*arg5,*arg6);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsTmpObj(res3)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_From_double((*arg3)));
  } else {
    int new_flags = SWIG_IsNewObj(res3) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg3), SWIGTYPE_p_double, new_flags));
  }
  if (SWIG_IsTmpObj(res4)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_From_double((*arg4)));
  } else {
    int new_flags = SWIG_IsNewObj(res4) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg4), SWIGTYPE_p_double, new_flags));
  }
  if (SWIG_IsTmpObj(res5)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_From_double((*arg5)));
  } else {
    int new_flags = SWIG_IsNewObj(res5) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg5), SWIGTYPE_p_double, new_flags));
  }
  if (SWIG_IsTmpObj(res6)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_From_double((*arg6)));
  } else {
    int new_flags = SWIG_IsNewObj(res6) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg6), SWIGTYPE_p_double, new_flags));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NonbondedSoftcoreForce_setParticleParameters__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::NonbondedSoftcoreForce *arg1 = (OpenMM::NonbondedSoftcoreForce *) 0 ;
  int arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  double val6 ;
  int ecode6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:NonbondedSoftcoreForce_setParticleParameters",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__NonbondedSoftcoreForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NonbondedSoftcoreForce_setParticleParameters" "', argument " "1"" of type '" "OpenMM::NonbondedSoftcoreForce *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::NonbondedSoftcoreForce * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "NonbondedSoftcoreForce_setParticleParameters" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "NonbondedSoftcoreForce_setParticleParameters" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "NonbondedSoftcoreForce_setParticleParameters" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  ecode5 = SWIG_AsVal_double(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "NonbondedSoftcoreForce_setParticleParameters" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  ecode6 = SWIG_AsVal_double(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "NonbondedSoftcoreForce_setParticleParameters" "', argument " "6"" of type '" "double""'");
  } 
  arg6 = static_cast< double >(val6);
  {
    try {
      (arg1)->setParticleParameters(arg2,arg3,arg4,arg5,arg6);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NonbondedSoftcoreForce_setParticleParameters__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::NonbondedSoftcoreForce *arg1 = (OpenMM::NonbondedSoftcoreForce *) 0 ;
  int arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:NonbondedSoftcoreForce_setParticleParameters",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__NonbondedSoftcoreForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NonbondedSoftcoreForce_setParticleParameters" "', argument " "1"" of type '" "OpenMM::NonbondedSoftcoreForce *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::NonbondedSoftcoreForce * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "NonbondedSoftcoreForce_setParticleParameters" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "NonbondedSoftcoreForce_setParticleParameters" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "NonbondedSoftcoreForce_setParticleParameters" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  ecode5 = SWIG_AsVal_double(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "NonbondedSoftcoreForce_setParticleParameters" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  {
    try {
      (arg1)->setParticleParameters(arg2,arg3,arg4,arg5);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NonbondedSoftcoreForce_setParticleParameters(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[7];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 6); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_OpenMM__NonbondedSoftcoreForce, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_double(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_NonbondedSoftcoreForce_setParticleParameters__SWIG_1(self, args);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_OpenMM__NonbondedSoftcoreForce, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_double(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_double(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                return _wrap_NonbondedSoftcoreForce_setParticleParameters__SWIG_0(self, args);
              }
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'NonbondedSoftcoreForce_setParticleParameters'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    setParticleParameters(OpenMM::NonbondedSoftcoreForce *,int,double,double,double,double)\n"
    "    setParticleParameters(OpenMM::NonbondedSoftcoreForce *,int,double,double,double)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_NonbondedSoftcoreForce_addException__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::NonbondedSoftcoreForce *arg1 = (OpenMM::NonbondedSoftcoreForce *) 0 ;
  int arg2 ;
  int arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  bool arg7 ;
  double arg8 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  double val6 ;
  int ecode6 = 0 ;
  bool val7 ;
  int ecode7 = 0 ;
  double val8 ;
  int ecode8 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOOO:NonbondedSoftcoreForce_addException",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__NonbondedSoftcoreForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NonbondedSoftcoreForce_addException" "', argument " "1"" of type '" "OpenMM::NonbondedSoftcoreForce *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::NonbondedSoftcoreForce * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "NonbondedSoftcoreForce_addException" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "NonbondedSoftcoreForce_addException" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "NonbondedSoftcoreForce_addException" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  ecode5 = SWIG_AsVal_double(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "NonbondedSoftcoreForce_addException" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  ecode6 = SWIG_AsVal_double(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "NonbondedSoftcoreForce_addException" "', argument " "6"" of type '" "double""'");
  } 
  arg6 = static_cast< double >(val6);
  ecode7 = SWIG_AsVal_bool(obj6, &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "NonbondedSoftcoreForce_addException" "', argument " "7"" of type '" "bool""'");
  } 
  arg7 = static_cast< bool >(val7);
  ecode8 = SWIG_AsVal_double(obj7, &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "NonbondedSoftcoreForce_addException" "', argument " "8"" of type '" "double""'");
  } 
  arg8 = static_cast< double >(val8);
  {
    try {
      result = (int)(arg1)->addException(arg2,arg3,arg4,arg5,arg6,arg7,arg8);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NonbondedSoftcoreForce_addException__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::NonbondedSoftcoreForce *arg1 = (OpenMM::NonbondedSoftcoreForce *) 0 ;
  int arg2 ;
  int arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  bool arg7 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  double val6 ;
  int ecode6 = 0 ;
  bool val7 ;
  int ecode7 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOO:NonbondedSoftcoreForce_addException",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__NonbondedSoftcoreForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NonbondedSoftcoreForce_addException" "', argument " "1"" of type '" "OpenMM::NonbondedSoftcoreForce *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::NonbondedSoftcoreForce * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "NonbondedSoftcoreForce_addException" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "NonbondedSoftcoreForce_addException" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "NonbondedSoftcoreForce_addException" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  ecode5 = SWIG_AsVal_double(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "NonbondedSoftcoreForce_addException" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  ecode6 = SWIG_AsVal_double(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "NonbondedSoftcoreForce_addException" "', argument " "6"" of type '" "double""'");
  } 
  arg6 = static_cast< double >(val6);
  ecode7 = SWIG_AsVal_bool(obj6, &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "NonbondedSoftcoreForce_addException" "', argument " "7"" of type '" "bool""'");
  } 
  arg7 = static_cast< bool >(val7);
  {
    try {
      result = (int)(arg1)->addException(arg2,arg3,arg4,arg5,arg6,arg7);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NonbondedSoftcoreForce_addException__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::NonbondedSoftcoreForce *arg1 = (OpenMM::NonbondedSoftcoreForce *) 0 ;
  int arg2 ;
  int arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  double val6 ;
  int ecode6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:NonbondedSoftcoreForce_addException",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__NonbondedSoftcoreForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NonbondedSoftcoreForce_addException" "', argument " "1"" of type '" "OpenMM::NonbondedSoftcoreForce *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::NonbondedSoftcoreForce * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "NonbondedSoftcoreForce_addException" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "NonbondedSoftcoreForce_addException" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "NonbondedSoftcoreForce_addException" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  ecode5 = SWIG_AsVal_double(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "NonbondedSoftcoreForce_addException" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  ecode6 = SWIG_AsVal_double(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "NonbondedSoftcoreForce_addException" "', argument " "6"" of type '" "double""'");
  } 
  arg6 = static_cast< double >(val6);
  {
    try {
      result = (int)(arg1)->addException(arg2,arg3,arg4,arg5,arg6);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NonbondedSoftcoreForce_addException(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[9];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 8); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_OpenMM__NonbondedSoftcoreForce, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_double(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_double(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                return _wrap_NonbondedSoftcoreForce_addException__SWIG_2(self, args);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_OpenMM__NonbondedSoftcoreForce, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_double(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_double(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                {
                  int res = SWIG_AsVal_bool(argv[6], NULL);
                  _v = SWIG_CheckState(res);
                }
                if (_v) {
                  return _wrap_NonbondedSoftcoreForce_addException__SWIG_1(self, args);
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 8) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_OpenMM__NonbondedSoftcoreForce, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_double(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_double(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                {
                  int res = SWIG_AsVal_bool(argv[6], NULL);
                  _v = SWIG_CheckState(res);
                }
                if (_v) {
                  {
                    int res = SWIG_AsVal_double(argv[7], NULL);
                    _v = SWIG_CheckState(res);
                  }
                  if (_v) {
                    return _wrap_NonbondedSoftcoreForce_addException__SWIG_0(self, args);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'NonbondedSoftcoreForce_addException'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    addException(OpenMM::NonbondedSoftcoreForce *,int,int,double,double,double,bool,double)\n"
    "    addException(OpenMM::NonbondedSoftcoreForce *,int,int,double,double,double,bool)\n"
    "    addException(OpenMM::NonbondedSoftcoreForce *,int,int,double,double,double)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_NonbondedSoftcoreForce_getExceptionParameters(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::NonbondedSoftcoreForce *arg1 = (OpenMM::NonbondedSoftcoreForce *) 0 ;
  int arg2 ;
  int *arg3 = 0 ;
  int *arg4 = 0 ;
  double *arg5 = 0 ;
  double *arg6 = 0 ;
  double *arg7 = 0 ;
  double *arg8 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int temp3 ;
  int res3 = SWIG_TMPOBJ ;
  int temp4 ;
  int res4 = SWIG_TMPOBJ ;
  double temp5 ;
  int res5 = SWIG_TMPOBJ ;
  double temp6 ;
  int res6 = SWIG_TMPOBJ ;
  double temp7 ;
  int res7 = SWIG_TMPOBJ ;
  double temp8 ;
  int res8 = SWIG_TMPOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  arg3 = &temp3;
  arg4 = &temp4;
  arg5 = &temp5;
  arg6 = &temp6;
  arg7 = &temp7;
  arg8 = &temp8;
  if (!PyArg_ParseTuple(args,(char *)"OO:NonbondedSoftcoreForce_getExceptionParameters",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__NonbondedSoftcoreForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NonbondedSoftcoreForce_getExceptionParameters" "', argument " "1"" of type '" "OpenMM::NonbondedSoftcoreForce const *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::NonbondedSoftcoreForce * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "NonbondedSoftcoreForce_getExceptionParameters" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      ((OpenMM::NonbondedSoftcoreForce const *)arg1)->getExceptionParameters(arg2,*arg3,*arg4,*arg5,*arg6,*arg7,*arg8);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsTmpObj(res3)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_From_int((*arg3)));
  } else {
    int new_flags = SWIG_IsNewObj(res3) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg3), SWIGTYPE_p_int, new_flags));
  }
  if (SWIG_IsTmpObj(res4)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_From_int((*arg4)));
  } else {
    int new_flags = SWIG_IsNewObj(res4) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg4), SWIGTYPE_p_int, new_flags));
  }
  if (SWIG_IsTmpObj(res5)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_From_double((*arg5)));
  } else {
    int new_flags = SWIG_IsNewObj(res5) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg5), SWIGTYPE_p_double, new_flags));
  }
  if (SWIG_IsTmpObj(res6)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_From_double((*arg6)));
  } else {
    int new_flags = SWIG_IsNewObj(res6) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg6), SWIGTYPE_p_double, new_flags));
  }
  if (SWIG_IsTmpObj(res7)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_From_double((*arg7)));
  } else {
    int new_flags = SWIG_IsNewObj(res7) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg7), SWIGTYPE_p_double, new_flags));
  }
  if (SWIG_IsTmpObj(res8)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_From_double((*arg8)));
  } else {
    int new_flags = SWIG_IsNewObj(res8) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg8), SWIGTYPE_p_double, new_flags));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NonbondedSoftcoreForce_setExceptionParameters__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::NonbondedSoftcoreForce *arg1 = (OpenMM::NonbondedSoftcoreForce *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  double arg5 ;
  double arg6 ;
  double arg7 ;
  double arg8 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  double val6 ;
  int ecode6 = 0 ;
  double val7 ;
  int ecode7 = 0 ;
  double val8 ;
  int ecode8 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOOO:NonbondedSoftcoreForce_setExceptionParameters",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__NonbondedSoftcoreForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NonbondedSoftcoreForce_setExceptionParameters" "', argument " "1"" of type '" "OpenMM::NonbondedSoftcoreForce *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::NonbondedSoftcoreForce * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "NonbondedSoftcoreForce_setExceptionParameters" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "NonbondedSoftcoreForce_setExceptionParameters" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "NonbondedSoftcoreForce_setExceptionParameters" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  ecode5 = SWIG_AsVal_double(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "NonbondedSoftcoreForce_setExceptionParameters" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  ecode6 = SWIG_AsVal_double(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "NonbondedSoftcoreForce_setExceptionParameters" "', argument " "6"" of type '" "double""'");
  } 
  arg6 = static_cast< double >(val6);
  ecode7 = SWIG_AsVal_double(obj6, &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "NonbondedSoftcoreForce_setExceptionParameters" "', argument " "7"" of type '" "double""'");
  } 
  arg7 = static_cast< double >(val7);
  ecode8 = SWIG_AsVal_double(obj7, &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "NonbondedSoftcoreForce_setExceptionParameters" "', argument " "8"" of type '" "double""'");
  } 
  arg8 = static_cast< double >(val8);
  {
    try {
      (arg1)->setExceptionParameters(arg2,arg3,arg4,arg5,arg6,arg7,arg8);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NonbondedSoftcoreForce_setExceptionParameters__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::NonbondedSoftcoreForce *arg1 = (OpenMM::NonbondedSoftcoreForce *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  double arg5 ;
  double arg6 ;
  double arg7 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  double val6 ;
  int ecode6 = 0 ;
  double val7 ;
  int ecode7 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOO:NonbondedSoftcoreForce_setExceptionParameters",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__NonbondedSoftcoreForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NonbondedSoftcoreForce_setExceptionParameters" "', argument " "1"" of type '" "OpenMM::NonbondedSoftcoreForce *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::NonbondedSoftcoreForce * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "NonbondedSoftcoreForce_setExceptionParameters" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "NonbondedSoftcoreForce_setExceptionParameters" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "NonbondedSoftcoreForce_setExceptionParameters" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  ecode5 = SWIG_AsVal_double(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "NonbondedSoftcoreForce_setExceptionParameters" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  ecode6 = SWIG_AsVal_double(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "NonbondedSoftcoreForce_setExceptionParameters" "', argument " "6"" of type '" "double""'");
  } 
  arg6 = static_cast< double >(val6);
  ecode7 = SWIG_AsVal_double(obj6, &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "NonbondedSoftcoreForce_setExceptionParameters" "', argument " "7"" of type '" "double""'");
  } 
  arg7 = static_cast< double >(val7);
  {
    try {
      (arg1)->setExceptionParameters(arg2,arg3,arg4,arg5,arg6,arg7);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NonbondedSoftcoreForce_setExceptionParameters(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[9];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 8); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 7) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_OpenMM__NonbondedSoftcoreForce, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_double(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_double(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                {
                  int res = SWIG_AsVal_double(argv[6], NULL);
                  _v = SWIG_CheckState(res);
                }
                if (_v) {
                  return _wrap_NonbondedSoftcoreForce_setExceptionParameters__SWIG_1(self, args);
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 8) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_OpenMM__NonbondedSoftcoreForce, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_double(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_double(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                {
                  int res = SWIG_AsVal_double(argv[6], NULL);
                  _v = SWIG_CheckState(res);
                }
                if (_v) {
                  {
                    int res = SWIG_AsVal_double(argv[7], NULL);
                    _v = SWIG_CheckState(res);
                  }
                  if (_v) {
                    return _wrap_NonbondedSoftcoreForce_setExceptionParameters__SWIG_0(self, args);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'NonbondedSoftcoreForce_setExceptionParameters'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    setExceptionParameters(OpenMM::NonbondedSoftcoreForce *,int,int,int,double,double,double,double)\n"
    "    setExceptionParameters(OpenMM::NonbondedSoftcoreForce *,int,int,int,double,double,double)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_NonbondedSoftcoreForce_createExceptionsFromBonds(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::NonbondedSoftcoreForce *arg1 = (OpenMM::NonbondedSoftcoreForce *) 0 ;
  std::vector< std::pair< int,int >,std::allocator< std::pair< int,int > > > *arg2 = 0 ;
  double arg3 ;
  double arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:NonbondedSoftcoreForce_createExceptionsFromBonds",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__NonbondedSoftcoreForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NonbondedSoftcoreForce_createExceptionsFromBonds" "', argument " "1"" of type '" "OpenMM::NonbondedSoftcoreForce *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::NonbondedSoftcoreForce * >(argp1);
  {
    std::vector<std::pair< int,int >,std::allocator< std::pair< int,int > > > *ptr = (std::vector<std::pair< int,int >,std::allocator< std::pair< int,int > > > *)0;
    res2 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NonbondedSoftcoreForce_createExceptionsFromBonds" "', argument " "2"" of type '" "std::vector< std::pair< int,int >,std::allocator< std::pair< int,int > > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NonbondedSoftcoreForce_createExceptionsFromBonds" "', argument " "2"" of type '" "std::vector< std::pair< int,int >,std::allocator< std::pair< int,int > > > const &""'"); 
    }
    arg2 = ptr;
  }
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "NonbondedSoftcoreForce_createExceptionsFromBonds" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "NonbondedSoftcoreForce_createExceptionsFromBonds" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  {
    try {
      (arg1)->createExceptionsFromBonds((std::vector< std::pair< int,int >,std::allocator< std::pair< int,int > > > const &)*arg2,arg3,arg4);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_NonbondedSoftcoreForce__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::NonbondedSoftcoreForce *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  OpenMM::NonbondedSoftcoreForce *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_NonbondedSoftcoreForce",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_OpenMM__NonbondedSoftcoreForce,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_NonbondedSoftcoreForce" "', argument " "1"" of type '" "OpenMM::NonbondedSoftcoreForce const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_NonbondedSoftcoreForce" "', argument " "1"" of type '" "OpenMM::NonbondedSoftcoreForce const &""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::NonbondedSoftcoreForce * >(argp1);
  {
    try {
      result = (OpenMM::NonbondedSoftcoreForce *)new OpenMM::NonbondedSoftcoreForce((OpenMM::NonbondedSoftcoreForce const &)*arg1);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_OpenMM__NonbondedSoftcoreForce, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_NonbondedSoftcoreForce(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 1); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_NonbondedSoftcoreForce__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_OpenMM__NonbondedSoftcoreForce, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_NonbondedSoftcoreForce__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_NonbondedSoftcoreForce'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    OpenMM::NonbondedSoftcoreForce()\n"
    "    OpenMM::NonbondedSoftcoreForce::NonbondedSoftcoreForce(OpenMM::NonbondedSoftcoreForce const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_NonbondedSoftcoreForce(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::NonbondedSoftcoreForce *arg1 = (OpenMM::NonbondedSoftcoreForce *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_NonbondedSoftcoreForce",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__NonbondedSoftcoreForce, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_NonbondedSoftcoreForce" "', argument " "1"" of type '" "OpenMM::NonbondedSoftcoreForce *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::NonbondedSoftcoreForce * >(argp1);
  {
    try {
      delete arg1;
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *NonbondedSoftcoreForce_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_OpenMM__NonbondedSoftcoreForce, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_OpenMMException__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  OpenMM::OpenMMException *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_OpenMMException",&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_OpenMMException" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_OpenMMException" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  {
    try {
      result = (OpenMM::OpenMMException *)new OpenMM::OpenMMException((std::string const &)*arg1);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_OpenMM__OpenMMException, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_OpenMMException(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::OpenMMException *arg1 = (OpenMM::OpenMMException *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_OpenMMException",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__OpenMMException, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_OpenMMException" "', argument " "1"" of type '" "OpenMM::OpenMMException *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::OpenMMException * >(argp1);
  {
    try {
      delete arg1;
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_OpenMMException_what(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::OpenMMException *arg1 = (OpenMM::OpenMMException *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  char *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:OpenMMException_what",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__OpenMMException, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OpenMMException_what" "', argument " "1"" of type '" "OpenMM::OpenMMException const *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::OpenMMException * >(argp1);
  {
    try {
      result = (char *)((OpenMM::OpenMMException const *)arg1)->what();
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_OpenMMException__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::OpenMMException *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  OpenMM::OpenMMException *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_OpenMMException",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_OpenMM__OpenMMException,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_OpenMMException" "', argument " "1"" of type '" "OpenMM::OpenMMException const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_OpenMMException" "', argument " "1"" of type '" "OpenMM::OpenMMException const &""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::OpenMMException * >(argp1);
  {
    try {
      result = (OpenMM::OpenMMException *)new OpenMM::OpenMMException((OpenMM::OpenMMException const &)*arg1);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_OpenMM__OpenMMException, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_OpenMMException(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 1); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_OpenMM__OpenMMException, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_OpenMMException__SWIG_1(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_OpenMMException__SWIG_0(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_OpenMMException'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    OpenMM::OpenMMException(std::string const &)\n"
    "    OpenMM::OpenMMException::OpenMMException(OpenMM::OpenMMException const &)\n");
  return NULL;
}


SWIGINTERN PyObject *OpenMMException_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_OpenMM__OpenMMException, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_delete_VirtualSite(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::VirtualSite *arg1 = (OpenMM::VirtualSite *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_VirtualSite",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__VirtualSite, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_VirtualSite" "', argument " "1"" of type '" "OpenMM::VirtualSite *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::VirtualSite * >(argp1);
  {
    try {
      delete arg1;
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VirtualSite_getNumParticles(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::VirtualSite *arg1 = (OpenMM::VirtualSite *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VirtualSite_getNumParticles",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__VirtualSite, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VirtualSite_getNumParticles" "', argument " "1"" of type '" "OpenMM::VirtualSite const *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::VirtualSite * >(argp1);
  {
    try {
      result = (int)((OpenMM::VirtualSite const *)arg1)->getNumParticles();
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VirtualSite_getParticle(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::VirtualSite *arg1 = (OpenMM::VirtualSite *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VirtualSite_getParticle",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__VirtualSite, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VirtualSite_getParticle" "', argument " "1"" of type '" "OpenMM::VirtualSite const *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::VirtualSite * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VirtualSite_getParticle" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (int)((OpenMM::VirtualSite const *)arg1)->getParticle(arg2);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *VirtualSite_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_OpenMM__VirtualSite, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_OutOfPlaneSite__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  int arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  double val6 ;
  int ecode6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  OpenMM::OutOfPlaneSite *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:new_OutOfPlaneSite",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_OutOfPlaneSite" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_OutOfPlaneSite" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_OutOfPlaneSite" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_OutOfPlaneSite" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  ecode5 = SWIG_AsVal_double(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_OutOfPlaneSite" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  ecode6 = SWIG_AsVal_double(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "new_OutOfPlaneSite" "', argument " "6"" of type '" "double""'");
  } 
  arg6 = static_cast< double >(val6);
  {
    try {
      result = (OpenMM::OutOfPlaneSite *)new OpenMM::OutOfPlaneSite(arg1,arg2,arg3,arg4,arg5,arg6);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_OpenMM__OutOfPlaneSite, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_OutOfPlaneSite_getWeight12(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::OutOfPlaneSite *arg1 = (OpenMM::OutOfPlaneSite *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:OutOfPlaneSite_getWeight12",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__OutOfPlaneSite, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OutOfPlaneSite_getWeight12" "', argument " "1"" of type '" "OpenMM::OutOfPlaneSite const *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::OutOfPlaneSite * >(argp1);
  {
    try {
      result = (double)((OpenMM::OutOfPlaneSite const *)arg1)->getWeight12();
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_OutOfPlaneSite_getWeight13(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::OutOfPlaneSite *arg1 = (OpenMM::OutOfPlaneSite *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:OutOfPlaneSite_getWeight13",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__OutOfPlaneSite, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OutOfPlaneSite_getWeight13" "', argument " "1"" of type '" "OpenMM::OutOfPlaneSite const *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::OutOfPlaneSite * >(argp1);
  {
    try {
      result = (double)((OpenMM::OutOfPlaneSite const *)arg1)->getWeight13();
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_OutOfPlaneSite_getWeightCross(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::OutOfPlaneSite *arg1 = (OpenMM::OutOfPlaneSite *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:OutOfPlaneSite_getWeightCross",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__OutOfPlaneSite, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OutOfPlaneSite_getWeightCross" "', argument " "1"" of type '" "OpenMM::OutOfPlaneSite const *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::OutOfPlaneSite * >(argp1);
  {
    try {
      result = (double)((OpenMM::OutOfPlaneSite const *)arg1)->getWeightCross();
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_OutOfPlaneSite__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::OutOfPlaneSite *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  OpenMM::OutOfPlaneSite *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_OutOfPlaneSite",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_OpenMM__OutOfPlaneSite,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_OutOfPlaneSite" "', argument " "1"" of type '" "OpenMM::OutOfPlaneSite const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_OutOfPlaneSite" "', argument " "1"" of type '" "OpenMM::OutOfPlaneSite const &""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::OutOfPlaneSite * >(argp1);
  {
    try {
      result = (OpenMM::OutOfPlaneSite *)new OpenMM::OutOfPlaneSite((OpenMM::OutOfPlaneSite const &)*arg1);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_OpenMM__OutOfPlaneSite, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_OutOfPlaneSite(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[7];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 6); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_OpenMM__OutOfPlaneSite, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_OutOfPlaneSite__SWIG_1(self, args);
    }
  }
  if (argc == 6) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_double(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_double(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                return _wrap_new_OutOfPlaneSite__SWIG_0(self, args);
              }
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_OutOfPlaneSite'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    OpenMM::OutOfPlaneSite(int,int,int,double,double,double)\n"
    "    OpenMM::OutOfPlaneSite::OutOfPlaneSite(OpenMM::OutOfPlaneSite const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_OutOfPlaneSite(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::OutOfPlaneSite *arg1 = (OpenMM::OutOfPlaneSite *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_OutOfPlaneSite",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__OutOfPlaneSite, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_OutOfPlaneSite" "', argument " "1"" of type '" "OpenMM::OutOfPlaneSite *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::OutOfPlaneSite * >(argp1);
  {
    try {
      delete arg1;
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *OutOfPlaneSite_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_OpenMM__OutOfPlaneSite, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_PeriodicTorsionForce__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::PeriodicTorsionForce *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_PeriodicTorsionForce")) SWIG_fail;
  {
    try {
      result = (OpenMM::PeriodicTorsionForce *)new OpenMM::PeriodicTorsionForce();
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_OpenMM__PeriodicTorsionForce, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PeriodicTorsionForce_getNumTorsions(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::PeriodicTorsionForce *arg1 = (OpenMM::PeriodicTorsionForce *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PeriodicTorsionForce_getNumTorsions",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__PeriodicTorsionForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PeriodicTorsionForce_getNumTorsions" "', argument " "1"" of type '" "OpenMM::PeriodicTorsionForce const *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::PeriodicTorsionForce * >(argp1);
  {
    try {
      result = (int)((OpenMM::PeriodicTorsionForce const *)arg1)->getNumTorsions();
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PeriodicTorsionForce_addTorsion(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::PeriodicTorsionForce *arg1 = (OpenMM::PeriodicTorsionForce *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  double arg7 ;
  double arg8 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  int val6 ;
  int ecode6 = 0 ;
  double val7 ;
  int ecode7 = 0 ;
  double val8 ;
  int ecode8 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOOO:PeriodicTorsionForce_addTorsion",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__PeriodicTorsionForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PeriodicTorsionForce_addTorsion" "', argument " "1"" of type '" "OpenMM::PeriodicTorsionForce *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::PeriodicTorsionForce * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PeriodicTorsionForce_addTorsion" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "PeriodicTorsionForce_addTorsion" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "PeriodicTorsionForce_addTorsion" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  ecode5 = SWIG_AsVal_int(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "PeriodicTorsionForce_addTorsion" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  ecode6 = SWIG_AsVal_int(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "PeriodicTorsionForce_addTorsion" "', argument " "6"" of type '" "int""'");
  } 
  arg6 = static_cast< int >(val6);
  ecode7 = SWIG_AsVal_double(obj6, &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "PeriodicTorsionForce_addTorsion" "', argument " "7"" of type '" "double""'");
  } 
  arg7 = static_cast< double >(val7);
  ecode8 = SWIG_AsVal_double(obj7, &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "PeriodicTorsionForce_addTorsion" "', argument " "8"" of type '" "double""'");
  } 
  arg8 = static_cast< double >(val8);
  {
    try {
      result = (int)(arg1)->addTorsion(arg2,arg3,arg4,arg5,arg6,arg7,arg8);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PeriodicTorsionForce_getTorsionParameters(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::PeriodicTorsionForce *arg1 = (OpenMM::PeriodicTorsionForce *) 0 ;
  int arg2 ;
  int *arg3 = 0 ;
  int *arg4 = 0 ;
  int *arg5 = 0 ;
  int *arg6 = 0 ;
  int *arg7 = 0 ;
  double *arg8 = 0 ;
  double *arg9 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int temp3 ;
  int res3 = SWIG_TMPOBJ ;
  int temp4 ;
  int res4 = SWIG_TMPOBJ ;
  int temp5 ;
  int res5 = SWIG_TMPOBJ ;
  int temp6 ;
  int res6 = SWIG_TMPOBJ ;
  int temp7 ;
  int res7 = SWIG_TMPOBJ ;
  double temp8 ;
  int res8 = SWIG_TMPOBJ ;
  double temp9 ;
  int res9 = SWIG_TMPOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  arg3 = &temp3;
  arg4 = &temp4;
  arg5 = &temp5;
  arg6 = &temp6;
  arg7 = &temp7;
  arg8 = &temp8;
  arg9 = &temp9;
  if (!PyArg_ParseTuple(args,(char *)"OO:PeriodicTorsionForce_getTorsionParameters",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__PeriodicTorsionForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PeriodicTorsionForce_getTorsionParameters" "', argument " "1"" of type '" "OpenMM::PeriodicTorsionForce const *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::PeriodicTorsionForce * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PeriodicTorsionForce_getTorsionParameters" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      ((OpenMM::PeriodicTorsionForce const *)arg1)->getTorsionParameters(arg2,*arg3,*arg4,*arg5,*arg6,*arg7,*arg8,*arg9);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsTmpObj(res3)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_From_int((*arg3)));
  } else {
    int new_flags = SWIG_IsNewObj(res3) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg3), SWIGTYPE_p_int, new_flags));
  }
  if (SWIG_IsTmpObj(res4)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_From_int((*arg4)));
  } else {
    int new_flags = SWIG_IsNewObj(res4) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg4), SWIGTYPE_p_int, new_flags));
  }
  if (SWIG_IsTmpObj(res5)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_From_int((*arg5)));
  } else {
    int new_flags = SWIG_IsNewObj(res5) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg5), SWIGTYPE_p_int, new_flags));
  }
  if (SWIG_IsTmpObj(res6)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_From_int((*arg6)));
  } else {
    int new_flags = SWIG_IsNewObj(res6) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg6), SWIGTYPE_p_int, new_flags));
  }
  if (SWIG_IsTmpObj(res7)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_From_int((*arg7)));
  } else {
    int new_flags = SWIG_IsNewObj(res7) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg7), SWIGTYPE_p_int, new_flags));
  }
  if (SWIG_IsTmpObj(res8)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_From_double((*arg8)));
  } else {
    int new_flags = SWIG_IsNewObj(res8) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg8), SWIGTYPE_p_double, new_flags));
  }
  if (SWIG_IsTmpObj(res9)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_From_double((*arg9)));
  } else {
    int new_flags = SWIG_IsNewObj(res9) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg9), SWIGTYPE_p_double, new_flags));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PeriodicTorsionForce_setTorsionParameters(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::PeriodicTorsionForce *arg1 = (OpenMM::PeriodicTorsionForce *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  int arg7 ;
  double arg8 ;
  double arg9 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  int val6 ;
  int ecode6 = 0 ;
  int val7 ;
  int ecode7 = 0 ;
  double val8 ;
  int ecode8 = 0 ;
  double val9 ;
  int ecode9 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  PyObject * obj8 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOOOO:PeriodicTorsionForce_setTorsionParameters",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7,&obj8)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__PeriodicTorsionForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PeriodicTorsionForce_setTorsionParameters" "', argument " "1"" of type '" "OpenMM::PeriodicTorsionForce *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::PeriodicTorsionForce * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PeriodicTorsionForce_setTorsionParameters" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "PeriodicTorsionForce_setTorsionParameters" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "PeriodicTorsionForce_setTorsionParameters" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  ecode5 = SWIG_AsVal_int(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "PeriodicTorsionForce_setTorsionParameters" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  ecode6 = SWIG_AsVal_int(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "PeriodicTorsionForce_setTorsionParameters" "', argument " "6"" of type '" "int""'");
  } 
  arg6 = static_cast< int >(val6);
  ecode7 = SWIG_AsVal_int(obj6, &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "PeriodicTorsionForce_setTorsionParameters" "', argument " "7"" of type '" "int""'");
  } 
  arg7 = static_cast< int >(val7);
  ecode8 = SWIG_AsVal_double(obj7, &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "PeriodicTorsionForce_setTorsionParameters" "', argument " "8"" of type '" "double""'");
  } 
  arg8 = static_cast< double >(val8);
  ecode9 = SWIG_AsVal_double(obj8, &val9);
  if (!SWIG_IsOK(ecode9)) {
    SWIG_exception_fail(SWIG_ArgError(ecode9), "in method '" "PeriodicTorsionForce_setTorsionParameters" "', argument " "9"" of type '" "double""'");
  } 
  arg9 = static_cast< double >(val9);
  {
    try {
      (arg1)->setTorsionParameters(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_PeriodicTorsionForce__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::PeriodicTorsionForce *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  OpenMM::PeriodicTorsionForce *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_PeriodicTorsionForce",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_OpenMM__PeriodicTorsionForce,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_PeriodicTorsionForce" "', argument " "1"" of type '" "OpenMM::PeriodicTorsionForce const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_PeriodicTorsionForce" "', argument " "1"" of type '" "OpenMM::PeriodicTorsionForce const &""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::PeriodicTorsionForce * >(argp1);
  {
    try {
      result = (OpenMM::PeriodicTorsionForce *)new OpenMM::PeriodicTorsionForce((OpenMM::PeriodicTorsionForce const &)*arg1);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_OpenMM__PeriodicTorsionForce, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_PeriodicTorsionForce(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 1); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_PeriodicTorsionForce__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_OpenMM__PeriodicTorsionForce, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_PeriodicTorsionForce__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_PeriodicTorsionForce'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    OpenMM::PeriodicTorsionForce()\n"
    "    OpenMM::PeriodicTorsionForce::PeriodicTorsionForce(OpenMM::PeriodicTorsionForce const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_PeriodicTorsionForce(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::PeriodicTorsionForce *arg1 = (OpenMM::PeriodicTorsionForce *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_PeriodicTorsionForce",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__PeriodicTorsionForce, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_PeriodicTorsionForce" "', argument " "1"" of type '" "OpenMM::PeriodicTorsionForce *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::PeriodicTorsionForce * >(argp1);
  {
    try {
      delete arg1;
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *PeriodicTorsionForce_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_OpenMM__PeriodicTorsionForce, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_delete_Platform(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::Platform *arg1 = (OpenMM::Platform *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_Platform",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__Platform, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Platform" "', argument " "1"" of type '" "OpenMM::Platform *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::Platform * >(argp1);
  {
    try {
      delete arg1;
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Platform_registerPlatform(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::Platform *arg1 = (OpenMM::Platform *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Platform_registerPlatform",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__Platform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Platform_registerPlatform" "', argument " "1"" of type '" "OpenMM::Platform *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::Platform * >(argp1);
  {
    try {
      OpenMM::Platform::registerPlatform(arg1);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Platform_getNumPlatforms(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)":Platform_getNumPlatforms")) SWIG_fail;
  {
    try {
      result = (int)OpenMM::Platform::getNumPlatforms();
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Platform_getPlatform(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  OpenMM::Platform *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Platform_getPlatform",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Platform_getPlatform" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    try {
      result = (OpenMM::Platform *) &OpenMM::Platform::getPlatform(arg1);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_OpenMM__Platform, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Platform_getPlatformByName(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  OpenMM::Platform *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Platform_getPlatformByName",&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Platform_getPlatformByName" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Platform_getPlatformByName" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  {
    try {
      result = (OpenMM::Platform *) &OpenMM::Platform::getPlatformByName((std::string const &)*arg1);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_OpenMM__Platform, 0 |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Platform_findPlatform(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string,std::allocator< std::string > > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  OpenMM::Platform *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Platform_findPlatform",&obj0)) SWIG_fail;
  {
    std::vector<std::string,std::allocator< std::string > > *ptr = (std::vector<std::string,std::allocator< std::string > > *)0;
    res1 = swig::asptr(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Platform_findPlatform" "', argument " "1"" of type '" "std::vector< std::string,std::allocator< std::string > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Platform_findPlatform" "', argument " "1"" of type '" "std::vector< std::string,std::allocator< std::string > > const &""'"); 
    }
    arg1 = ptr;
  }
  {
    try {
      result = (OpenMM::Platform *) &OpenMM::Platform::findPlatform((std::vector< std::string,std::allocator< std::string > > const &)*arg1);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_OpenMM__Platform, 0 |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Platform_loadPluginLibrary(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Platform_loadPluginLibrary",&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Platform_loadPluginLibrary" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Platform_loadPluginLibrary" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  {
    try {
      OpenMM::Platform::loadPluginLibrary((std::string const &)*arg1);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Platform_loadPluginsFromDirectory(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  std::vector< std::string,std::allocator< std::string > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Platform_loadPluginsFromDirectory",&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Platform_loadPluginsFromDirectory" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Platform_loadPluginsFromDirectory" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  {
    try {
      result = OpenMM::Platform::loadPluginsFromDirectory((std::string const &)*arg1);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = swig::from(static_cast< std::vector<std::string,std::allocator< std::string > > >(result));
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Platform_getDefaultPluginsDirectory(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":Platform_getDefaultPluginsDirectory")) SWIG_fail;
  {
    try {
      result = (std::string *) &OpenMM::Platform::getDefaultPluginsDirectory();
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Platform_getOpenMMVersion(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":Platform_getOpenMMVersion")) SWIG_fail;
  {
    try {
      result = (std::string *) &OpenMM::Platform::getOpenMMVersion();
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Platform_getName(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::Platform *arg1 = (OpenMM::Platform *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Platform_getName",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__Platform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Platform_getName" "', argument " "1"" of type '" "OpenMM::Platform const *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::Platform * >(argp1);
  {
    try {
      result = (std::string *) &((OpenMM::Platform const *)arg1)->getName();
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Platform_getSpeed(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::Platform *arg1 = (OpenMM::Platform *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Platform_getSpeed",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__Platform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Platform_getSpeed" "', argument " "1"" of type '" "OpenMM::Platform const *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::Platform * >(argp1);
  {
    try {
      result = (double)((OpenMM::Platform const *)arg1)->getSpeed();
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Platform_supportsDoublePrecision(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::Platform *arg1 = (OpenMM::Platform *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Platform_supportsDoublePrecision",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__Platform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Platform_supportsDoublePrecision" "', argument " "1"" of type '" "OpenMM::Platform const *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::Platform * >(argp1);
  {
    try {
      result = (bool)((OpenMM::Platform const *)arg1)->supportsDoublePrecision();
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Platform_getPropertyNames(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::Platform *arg1 = (OpenMM::Platform *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::string,std::allocator< std::string > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Platform_getPropertyNames",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__Platform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Platform_getPropertyNames" "', argument " "1"" of type '" "OpenMM::Platform *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::Platform * >(argp1);
  {
    try {
      result = (std::vector< std::string,std::allocator< std::string > > *) &(arg1)->getPropertyNames();
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = swig::from(static_cast< std::vector<std::string,std::allocator< std::string > > >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Platform_getPropertyValue(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::Platform *arg1 = (OpenMM::Platform *) 0 ;
  OpenMM::Context *arg2 = 0 ;
  std::string *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::string *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Platform_getPropertyValue",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__Platform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Platform_getPropertyValue" "', argument " "1"" of type '" "OpenMM::Platform const *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::Platform * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_OpenMM__Context,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Platform_getPropertyValue" "', argument " "2"" of type '" "OpenMM::Context const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Platform_getPropertyValue" "', argument " "2"" of type '" "OpenMM::Context const &""'"); 
  }
  arg2 = reinterpret_cast< OpenMM::Context * >(argp2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Platform_getPropertyValue" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Platform_getPropertyValue" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      result = (std::string *) &((OpenMM::Platform const *)arg1)->getPropertyValue((OpenMM::Context const &)*arg2,(std::string const &)*arg3);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Platform_setPropertyValue(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::Platform *arg1 = (OpenMM::Platform *) 0 ;
  OpenMM::Context *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  int res4 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:Platform_setPropertyValue",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__Platform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Platform_setPropertyValue" "', argument " "1"" of type '" "OpenMM::Platform const *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::Platform * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_OpenMM__Context,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Platform_setPropertyValue" "', argument " "2"" of type '" "OpenMM::Context &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Platform_setPropertyValue" "', argument " "2"" of type '" "OpenMM::Context &""'"); 
  }
  arg2 = reinterpret_cast< OpenMM::Context * >(argp2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Platform_setPropertyValue" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Platform_setPropertyValue" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res4 = SWIG_AsPtr_std_string(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "Platform_setPropertyValue" "', argument " "4"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Platform_setPropertyValue" "', argument " "4"" of type '" "std::string const &""'"); 
    }
    arg4 = ptr;
  }
  {
    try {
      ((OpenMM::Platform const *)arg1)->setPropertyValue(*arg2,(std::string const &)*arg3,(std::string const &)*arg4);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Platform_getPropertyDefaultValue(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::Platform *arg1 = (OpenMM::Platform *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::string *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Platform_getPropertyDefaultValue",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__Platform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Platform_getPropertyDefaultValue" "', argument " "1"" of type '" "OpenMM::Platform const *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::Platform * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Platform_getPropertyDefaultValue" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Platform_getPropertyDefaultValue" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (std::string *) &((OpenMM::Platform const *)arg1)->getPropertyDefaultValue((std::string const &)*arg2);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Platform_setPropertyDefaultValue(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::Platform *arg1 = (OpenMM::Platform *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Platform_setPropertyDefaultValue",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__Platform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Platform_setPropertyDefaultValue" "', argument " "1"" of type '" "OpenMM::Platform *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::Platform * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Platform_setPropertyDefaultValue" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Platform_setPropertyDefaultValue" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Platform_setPropertyDefaultValue" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Platform_setPropertyDefaultValue" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      (arg1)->setPropertyDefaultValue((std::string const &)*arg2,(std::string const &)*arg3);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Platform_supportsKernels(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::Platform *arg1 = (OpenMM::Platform *) 0 ;
  std::vector< std::string,std::allocator< std::string > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Platform_supportsKernels",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__Platform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Platform_supportsKernels" "', argument " "1"" of type '" "OpenMM::Platform const *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::Platform * >(argp1);
  {
    std::vector<std::string,std::allocator< std::string > > *ptr = (std::vector<std::string,std::allocator< std::string > > *)0;
    res2 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Platform_supportsKernels" "', argument " "2"" of type '" "std::vector< std::string,std::allocator< std::string > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Platform_supportsKernels" "', argument " "2"" of type '" "std::vector< std::string,std::allocator< std::string > > const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (bool)((OpenMM::Platform const *)arg1)->supportsKernels((std::vector< std::string,std::allocator< std::string > > const &)*arg2);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *Platform_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_OpenMM__Platform, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_RBTorsionForce__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::RBTorsionForce *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_RBTorsionForce")) SWIG_fail;
  {
    try {
      result = (OpenMM::RBTorsionForce *)new OpenMM::RBTorsionForce();
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_OpenMM__RBTorsionForce, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RBTorsionForce_getNumTorsions(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::RBTorsionForce *arg1 = (OpenMM::RBTorsionForce *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RBTorsionForce_getNumTorsions",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__RBTorsionForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RBTorsionForce_getNumTorsions" "', argument " "1"" of type '" "OpenMM::RBTorsionForce const *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::RBTorsionForce * >(argp1);
  {
    try {
      result = (int)((OpenMM::RBTorsionForce const *)arg1)->getNumTorsions();
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RBTorsionForce_addTorsion(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::RBTorsionForce *arg1 = (OpenMM::RBTorsionForce *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  double arg6 ;
  double arg7 ;
  double arg8 ;
  double arg9 ;
  double arg10 ;
  double arg11 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  double val6 ;
  int ecode6 = 0 ;
  double val7 ;
  int ecode7 = 0 ;
  double val8 ;
  int ecode8 = 0 ;
  double val9 ;
  int ecode9 = 0 ;
  double val10 ;
  int ecode10 = 0 ;
  double val11 ;
  int ecode11 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  PyObject * obj8 = 0 ;
  PyObject * obj9 = 0 ;
  PyObject * obj10 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOOOOOO:RBTorsionForce_addTorsion",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7,&obj8,&obj9,&obj10)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__RBTorsionForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RBTorsionForce_addTorsion" "', argument " "1"" of type '" "OpenMM::RBTorsionForce *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::RBTorsionForce * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RBTorsionForce_addTorsion" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "RBTorsionForce_addTorsion" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "RBTorsionForce_addTorsion" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  ecode5 = SWIG_AsVal_int(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "RBTorsionForce_addTorsion" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  ecode6 = SWIG_AsVal_double(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "RBTorsionForce_addTorsion" "', argument " "6"" of type '" "double""'");
  } 
  arg6 = static_cast< double >(val6);
  ecode7 = SWIG_AsVal_double(obj6, &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "RBTorsionForce_addTorsion" "', argument " "7"" of type '" "double""'");
  } 
  arg7 = static_cast< double >(val7);
  ecode8 = SWIG_AsVal_double(obj7, &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "RBTorsionForce_addTorsion" "', argument " "8"" of type '" "double""'");
  } 
  arg8 = static_cast< double >(val8);
  ecode9 = SWIG_AsVal_double(obj8, &val9);
  if (!SWIG_IsOK(ecode9)) {
    SWIG_exception_fail(SWIG_ArgError(ecode9), "in method '" "RBTorsionForce_addTorsion" "', argument " "9"" of type '" "double""'");
  } 
  arg9 = static_cast< double >(val9);
  ecode10 = SWIG_AsVal_double(obj9, &val10);
  if (!SWIG_IsOK(ecode10)) {
    SWIG_exception_fail(SWIG_ArgError(ecode10), "in method '" "RBTorsionForce_addTorsion" "', argument " "10"" of type '" "double""'");
  } 
  arg10 = static_cast< double >(val10);
  ecode11 = SWIG_AsVal_double(obj10, &val11);
  if (!SWIG_IsOK(ecode11)) {
    SWIG_exception_fail(SWIG_ArgError(ecode11), "in method '" "RBTorsionForce_addTorsion" "', argument " "11"" of type '" "double""'");
  } 
  arg11 = static_cast< double >(val11);
  {
    try {
      result = (int)(arg1)->addTorsion(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RBTorsionForce_getTorsionParameters(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::RBTorsionForce *arg1 = (OpenMM::RBTorsionForce *) 0 ;
  int arg2 ;
  int *arg3 = 0 ;
  int *arg4 = 0 ;
  int *arg5 = 0 ;
  int *arg6 = 0 ;
  double *arg7 = 0 ;
  double *arg8 = 0 ;
  double *arg9 = 0 ;
  double *arg10 = 0 ;
  double *arg11 = 0 ;
  double *arg12 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int temp3 ;
  int res3 = SWIG_TMPOBJ ;
  int temp4 ;
  int res4 = SWIG_TMPOBJ ;
  int temp5 ;
  int res5 = SWIG_TMPOBJ ;
  int temp6 ;
  int res6 = SWIG_TMPOBJ ;
  double temp7 ;
  int res7 = SWIG_TMPOBJ ;
  double temp8 ;
  int res8 = SWIG_TMPOBJ ;
  double temp9 ;
  int res9 = SWIG_TMPOBJ ;
  double temp10 ;
  int res10 = SWIG_TMPOBJ ;
  double temp11 ;
  int res11 = SWIG_TMPOBJ ;
  double temp12 ;
  int res12 = SWIG_TMPOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  arg3 = &temp3;
  arg4 = &temp4;
  arg5 = &temp5;
  arg6 = &temp6;
  arg7 = &temp7;
  arg8 = &temp8;
  arg9 = &temp9;
  arg10 = &temp10;
  arg11 = &temp11;
  arg12 = &temp12;
  if (!PyArg_ParseTuple(args,(char *)"OO:RBTorsionForce_getTorsionParameters",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__RBTorsionForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RBTorsionForce_getTorsionParameters" "', argument " "1"" of type '" "OpenMM::RBTorsionForce const *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::RBTorsionForce * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RBTorsionForce_getTorsionParameters" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      ((OpenMM::RBTorsionForce const *)arg1)->getTorsionParameters(arg2,*arg3,*arg4,*arg5,*arg6,*arg7,*arg8,*arg9,*arg10,*arg11,*arg12);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsTmpObj(res3)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_From_int((*arg3)));
  } else {
    int new_flags = SWIG_IsNewObj(res3) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg3), SWIGTYPE_p_int, new_flags));
  }
  if (SWIG_IsTmpObj(res4)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_From_int((*arg4)));
  } else {
    int new_flags = SWIG_IsNewObj(res4) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg4), SWIGTYPE_p_int, new_flags));
  }
  if (SWIG_IsTmpObj(res5)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_From_int((*arg5)));
  } else {
    int new_flags = SWIG_IsNewObj(res5) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg5), SWIGTYPE_p_int, new_flags));
  }
  if (SWIG_IsTmpObj(res6)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_From_int((*arg6)));
  } else {
    int new_flags = SWIG_IsNewObj(res6) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg6), SWIGTYPE_p_int, new_flags));
  }
  if (SWIG_IsTmpObj(res7)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_From_double((*arg7)));
  } else {
    int new_flags = SWIG_IsNewObj(res7) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg7), SWIGTYPE_p_double, new_flags));
  }
  if (SWIG_IsTmpObj(res8)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_From_double((*arg8)));
  } else {
    int new_flags = SWIG_IsNewObj(res8) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg8), SWIGTYPE_p_double, new_flags));
  }
  if (SWIG_IsTmpObj(res9)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_From_double((*arg9)));
  } else {
    int new_flags = SWIG_IsNewObj(res9) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg9), SWIGTYPE_p_double, new_flags));
  }
  if (SWIG_IsTmpObj(res10)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_From_double((*arg10)));
  } else {
    int new_flags = SWIG_IsNewObj(res10) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg10), SWIGTYPE_p_double, new_flags));
  }
  if (SWIG_IsTmpObj(res11)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_From_double((*arg11)));
  } else {
    int new_flags = SWIG_IsNewObj(res11) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg11), SWIGTYPE_p_double, new_flags));
  }
  if (SWIG_IsTmpObj(res12)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_From_double((*arg12)));
  } else {
    int new_flags = SWIG_IsNewObj(res12) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg12), SWIGTYPE_p_double, new_flags));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RBTorsionForce_setTorsionParameters(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::RBTorsionForce *arg1 = (OpenMM::RBTorsionForce *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  double arg7 ;
  double arg8 ;
  double arg9 ;
  double arg10 ;
  double arg11 ;
  double arg12 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  int val6 ;
  int ecode6 = 0 ;
  double val7 ;
  int ecode7 = 0 ;
  double val8 ;
  int ecode8 = 0 ;
  double val9 ;
  int ecode9 = 0 ;
  double val10 ;
  int ecode10 = 0 ;
  double val11 ;
  int ecode11 = 0 ;
  double val12 ;
  int ecode12 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  PyObject * obj8 = 0 ;
  PyObject * obj9 = 0 ;
  PyObject * obj10 = 0 ;
  PyObject * obj11 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOOOOOOO:RBTorsionForce_setTorsionParameters",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7,&obj8,&obj9,&obj10,&obj11)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__RBTorsionForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RBTorsionForce_setTorsionParameters" "', argument " "1"" of type '" "OpenMM::RBTorsionForce *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::RBTorsionForce * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RBTorsionForce_setTorsionParameters" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "RBTorsionForce_setTorsionParameters" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "RBTorsionForce_setTorsionParameters" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  ecode5 = SWIG_AsVal_int(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "RBTorsionForce_setTorsionParameters" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  ecode6 = SWIG_AsVal_int(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "RBTorsionForce_setTorsionParameters" "', argument " "6"" of type '" "int""'");
  } 
  arg6 = static_cast< int >(val6);
  ecode7 = SWIG_AsVal_double(obj6, &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "RBTorsionForce_setTorsionParameters" "', argument " "7"" of type '" "double""'");
  } 
  arg7 = static_cast< double >(val7);
  ecode8 = SWIG_AsVal_double(obj7, &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "RBTorsionForce_setTorsionParameters" "', argument " "8"" of type '" "double""'");
  } 
  arg8 = static_cast< double >(val8);
  ecode9 = SWIG_AsVal_double(obj8, &val9);
  if (!SWIG_IsOK(ecode9)) {
    SWIG_exception_fail(SWIG_ArgError(ecode9), "in method '" "RBTorsionForce_setTorsionParameters" "', argument " "9"" of type '" "double""'");
  } 
  arg9 = static_cast< double >(val9);
  ecode10 = SWIG_AsVal_double(obj9, &val10);
  if (!SWIG_IsOK(ecode10)) {
    SWIG_exception_fail(SWIG_ArgError(ecode10), "in method '" "RBTorsionForce_setTorsionParameters" "', argument " "10"" of type '" "double""'");
  } 
  arg10 = static_cast< double >(val10);
  ecode11 = SWIG_AsVal_double(obj10, &val11);
  if (!SWIG_IsOK(ecode11)) {
    SWIG_exception_fail(SWIG_ArgError(ecode11), "in method '" "RBTorsionForce_setTorsionParameters" "', argument " "11"" of type '" "double""'");
  } 
  arg11 = static_cast< double >(val11);
  ecode12 = SWIG_AsVal_double(obj11, &val12);
  if (!SWIG_IsOK(ecode12)) {
    SWIG_exception_fail(SWIG_ArgError(ecode12), "in method '" "RBTorsionForce_setTorsionParameters" "', argument " "12"" of type '" "double""'");
  } 
  arg12 = static_cast< double >(val12);
  {
    try {
      (arg1)->setTorsionParameters(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_RBTorsionForce__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::RBTorsionForce *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  OpenMM::RBTorsionForce *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_RBTorsionForce",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_OpenMM__RBTorsionForce,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_RBTorsionForce" "', argument " "1"" of type '" "OpenMM::RBTorsionForce const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_RBTorsionForce" "', argument " "1"" of type '" "OpenMM::RBTorsionForce const &""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::RBTorsionForce * >(argp1);
  {
    try {
      result = (OpenMM::RBTorsionForce *)new OpenMM::RBTorsionForce((OpenMM::RBTorsionForce const &)*arg1);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_OpenMM__RBTorsionForce, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_RBTorsionForce(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 1); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_RBTorsionForce__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_OpenMM__RBTorsionForce, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_RBTorsionForce__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_RBTorsionForce'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    OpenMM::RBTorsionForce()\n"
    "    OpenMM::RBTorsionForce::RBTorsionForce(OpenMM::RBTorsionForce const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_RBTorsionForce(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::RBTorsionForce *arg1 = (OpenMM::RBTorsionForce *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_RBTorsionForce",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__RBTorsionForce, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_RBTorsionForce" "', argument " "1"" of type '" "OpenMM::RBTorsionForce *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::RBTorsionForce * >(argp1);
  {
    try {
      delete arg1;
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *RBTorsionForce_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_OpenMM__RBTorsionForce, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_RPMDIntegrator__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  int val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  OpenMM::RPMDIntegrator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:new_RPMDIntegrator",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_RPMDIntegrator" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_RPMDIntegrator" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_RPMDIntegrator" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_RPMDIntegrator" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  {
    try {
      result = (OpenMM::RPMDIntegrator *)new OpenMM::RPMDIntegrator(arg1,arg2,arg3,arg4);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_OpenMM__RPMDIntegrator, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RPMDIntegrator_getNumCopies(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::RPMDIntegrator *arg1 = (OpenMM::RPMDIntegrator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RPMDIntegrator_getNumCopies",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__RPMDIntegrator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RPMDIntegrator_getNumCopies" "', argument " "1"" of type '" "OpenMM::RPMDIntegrator const *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::RPMDIntegrator * >(argp1);
  {
    try {
      result = (int)((OpenMM::RPMDIntegrator const *)arg1)->getNumCopies();
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RPMDIntegrator_getTemperature(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::RPMDIntegrator *arg1 = (OpenMM::RPMDIntegrator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RPMDIntegrator_getTemperature",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__RPMDIntegrator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RPMDIntegrator_getTemperature" "', argument " "1"" of type '" "OpenMM::RPMDIntegrator const *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::RPMDIntegrator * >(argp1);
  {
    try {
      result = (double)((OpenMM::RPMDIntegrator const *)arg1)->getTemperature();
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RPMDIntegrator_setTemperature(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::RPMDIntegrator *arg1 = (OpenMM::RPMDIntegrator *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RPMDIntegrator_setTemperature",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__RPMDIntegrator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RPMDIntegrator_setTemperature" "', argument " "1"" of type '" "OpenMM::RPMDIntegrator *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::RPMDIntegrator * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RPMDIntegrator_setTemperature" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->setTemperature(arg2);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RPMDIntegrator_getFriction(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::RPMDIntegrator *arg1 = (OpenMM::RPMDIntegrator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RPMDIntegrator_getFriction",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__RPMDIntegrator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RPMDIntegrator_getFriction" "', argument " "1"" of type '" "OpenMM::RPMDIntegrator const *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::RPMDIntegrator * >(argp1);
  {
    try {
      result = (double)((OpenMM::RPMDIntegrator const *)arg1)->getFriction();
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RPMDIntegrator_setFriction(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::RPMDIntegrator *arg1 = (OpenMM::RPMDIntegrator *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RPMDIntegrator_setFriction",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__RPMDIntegrator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RPMDIntegrator_setFriction" "', argument " "1"" of type '" "OpenMM::RPMDIntegrator *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::RPMDIntegrator * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RPMDIntegrator_setFriction" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->setFriction(arg2);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RPMDIntegrator_getRandomNumberSeed(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::RPMDIntegrator *arg1 = (OpenMM::RPMDIntegrator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RPMDIntegrator_getRandomNumberSeed",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__RPMDIntegrator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RPMDIntegrator_getRandomNumberSeed" "', argument " "1"" of type '" "OpenMM::RPMDIntegrator const *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::RPMDIntegrator * >(argp1);
  {
    try {
      result = (int)((OpenMM::RPMDIntegrator const *)arg1)->getRandomNumberSeed();
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RPMDIntegrator_setRandomNumberSeed(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::RPMDIntegrator *arg1 = (OpenMM::RPMDIntegrator *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RPMDIntegrator_setRandomNumberSeed",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__RPMDIntegrator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RPMDIntegrator_setRandomNumberSeed" "', argument " "1"" of type '" "OpenMM::RPMDIntegrator *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::RPMDIntegrator * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RPMDIntegrator_setRandomNumberSeed" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      (arg1)->setRandomNumberSeed(arg2);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RPMDIntegrator_setPositions(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::RPMDIntegrator *arg1 = (OpenMM::RPMDIntegrator *) 0 ;
  int arg2 ;
  std::vector< Vec3,std::allocator< Vec3 > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  std::vector< OpenMM::Vec3 > vVec3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:RPMDIntegrator_setPositions",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__RPMDIntegrator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RPMDIntegrator_setPositions" "', argument " "1"" of type '" "OpenMM::RPMDIntegrator *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::RPMDIntegrator * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RPMDIntegrator_setPositions" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    // typemap -- %typemap(in) std::vector<Vec3>& (std::vector<OpenMM::Vec3> vVec3)
    int i, pLength;
    double x, y, z;
    PyObject *o;
    PyObject *o1;
    
    pLength=(int)PySequence_Length(obj2);
    for (i=0; i<pLength; i++) {
      o=PySequence_GetItem(obj2, i);
      
      o1=PySequence_GetItem(o, 0);
      x=PyFloat_AsDouble(o1);
      Py_DECREF(o1);
      
      o1=PySequence_GetItem(o, 1);
      y=PyFloat_AsDouble(o1);
      Py_DECREF(o1);
      
      o1=PySequence_GetItem(o, 2);
      z=PyFloat_AsDouble(o1);
      Py_DECREF(o1);
      
      Py_DECREF(o);
      vVec3.push_back( OpenMM::Vec3(x, y, z) );
    }
    arg3 = &vVec3;
  }
  {
    try {
      (arg1)->setPositions(arg2,(std::vector< Vec3,std::allocator< Vec3 > > const &)*arg3);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RPMDIntegrator_setVelocities(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::RPMDIntegrator *arg1 = (OpenMM::RPMDIntegrator *) 0 ;
  int arg2 ;
  std::vector< Vec3,std::allocator< Vec3 > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  std::vector< OpenMM::Vec3 > vVec3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:RPMDIntegrator_setVelocities",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__RPMDIntegrator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RPMDIntegrator_setVelocities" "', argument " "1"" of type '" "OpenMM::RPMDIntegrator *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::RPMDIntegrator * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RPMDIntegrator_setVelocities" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    // typemap -- %typemap(in) std::vector<Vec3>& (std::vector<OpenMM::Vec3> vVec3)
    int i, pLength;
    double x, y, z;
    PyObject *o;
    PyObject *o1;
    
    pLength=(int)PySequence_Length(obj2);
    for (i=0; i<pLength; i++) {
      o=PySequence_GetItem(obj2, i);
      
      o1=PySequence_GetItem(o, 0);
      x=PyFloat_AsDouble(o1);
      Py_DECREF(o1);
      
      o1=PySequence_GetItem(o, 1);
      y=PyFloat_AsDouble(o1);
      Py_DECREF(o1);
      
      o1=PySequence_GetItem(o, 2);
      z=PyFloat_AsDouble(o1);
      Py_DECREF(o1);
      
      Py_DECREF(o);
      vVec3.push_back( OpenMM::Vec3(x, y, z) );
    }
    arg3 = &vVec3;
  }
  {
    try {
      (arg1)->setVelocities(arg2,(std::vector< Vec3,std::allocator< Vec3 > > const &)*arg3);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RPMDIntegrator_step(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::RPMDIntegrator *arg1 = (OpenMM::RPMDIntegrator *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RPMDIntegrator_step",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__RPMDIntegrator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RPMDIntegrator_step" "', argument " "1"" of type '" "OpenMM::RPMDIntegrator *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::RPMDIntegrator * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RPMDIntegrator_step" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      (arg1)->step(arg2);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RPMDIntegrator__getStateAsLists(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::RPMDIntegrator *arg1 = (OpenMM::RPMDIntegrator *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  int arg7 ;
  int arg8 ;
  int arg9 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  int val6 ;
  int ecode6 = 0 ;
  int val7 ;
  int ecode7 = 0 ;
  int val8 ;
  int ecode8 = 0 ;
  int val9 ;
  int ecode9 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  PyObject * obj8 = 0 ;
  PyObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOOOO:RPMDIntegrator__getStateAsLists",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7,&obj8)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__RPMDIntegrator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RPMDIntegrator__getStateAsLists" "', argument " "1"" of type '" "OpenMM::RPMDIntegrator *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::RPMDIntegrator * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RPMDIntegrator__getStateAsLists" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "RPMDIntegrator__getStateAsLists" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "RPMDIntegrator__getStateAsLists" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  ecode5 = SWIG_AsVal_int(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "RPMDIntegrator__getStateAsLists" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  ecode6 = SWIG_AsVal_int(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "RPMDIntegrator__getStateAsLists" "', argument " "6"" of type '" "int""'");
  } 
  arg6 = static_cast< int >(val6);
  ecode7 = SWIG_AsVal_int(obj6, &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "RPMDIntegrator__getStateAsLists" "', argument " "7"" of type '" "int""'");
  } 
  arg7 = static_cast< int >(val7);
  ecode8 = SWIG_AsVal_int(obj7, &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "RPMDIntegrator__getStateAsLists" "', argument " "8"" of type '" "int""'");
  } 
  arg8 = static_cast< int >(val8);
  ecode9 = SWIG_AsVal_int(obj8, &val9);
  if (!SWIG_IsOK(ecode9)) {
    SWIG_exception_fail(SWIG_ArgError(ecode9), "in method '" "RPMDIntegrator__getStateAsLists" "', argument " "9"" of type '" "int""'");
  } 
  arg9 = static_cast< int >(val9);
  {
    try {
      result = (PyObject *)OpenMM_RPMDIntegrator__getStateAsLists(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_RPMDIntegrator__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::RPMDIntegrator *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  OpenMM::RPMDIntegrator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_RPMDIntegrator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_OpenMM__RPMDIntegrator,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_RPMDIntegrator" "', argument " "1"" of type '" "OpenMM::RPMDIntegrator const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_RPMDIntegrator" "', argument " "1"" of type '" "OpenMM::RPMDIntegrator const &""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::RPMDIntegrator * >(argp1);
  {
    try {
      result = (OpenMM::RPMDIntegrator *)new OpenMM::RPMDIntegrator((OpenMM::RPMDIntegrator const &)*arg1);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_OpenMM__RPMDIntegrator, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_RPMDIntegrator(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 4); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_OpenMM__RPMDIntegrator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_RPMDIntegrator__SWIG_1(self, args);
    }
  }
  if (argc == 4) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_new_RPMDIntegrator__SWIG_0(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_RPMDIntegrator'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    OpenMM::RPMDIntegrator(int,double,double,double)\n"
    "    OpenMM::RPMDIntegrator::RPMDIntegrator(OpenMM::RPMDIntegrator const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_RPMDIntegrator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::RPMDIntegrator *arg1 = (OpenMM::RPMDIntegrator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_RPMDIntegrator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__RPMDIntegrator, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_RPMDIntegrator" "', argument " "1"" of type '" "OpenMM::RPMDIntegrator *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::RPMDIntegrator * >(argp1);
  {
    try {
      delete arg1;
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *RPMDIntegrator_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_OpenMM__RPMDIntegrator, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_SerializationNode_getName(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::SerializationNode *arg1 = (OpenMM::SerializationNode *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SerializationNode_getName",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__SerializationNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SerializationNode_getName" "', argument " "1"" of type '" "OpenMM::SerializationNode const *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::SerializationNode * >(argp1);
  {
    try {
      result = (std::string *) &((OpenMM::SerializationNode const *)arg1)->getName();
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SerializationNode_setName(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::SerializationNode *arg1 = (OpenMM::SerializationNode *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SerializationNode_setName",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__SerializationNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SerializationNode_setName" "', argument " "1"" of type '" "OpenMM::SerializationNode *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::SerializationNode * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SerializationNode_setName" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SerializationNode_setName" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      (arg1)->setName((std::string const &)*arg2);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_SerializationNode_getChildren__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::SerializationNode *arg1 = (OpenMM::SerializationNode *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< OpenMM::SerializationNode,std::allocator< OpenMM::SerializationNode > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SerializationNode_getChildren",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__SerializationNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SerializationNode_getChildren" "', argument " "1"" of type '" "OpenMM::SerializationNode const *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::SerializationNode * >(argp1);
  {
    try {
      result = (std::vector< OpenMM::SerializationNode,std::allocator< OpenMM::SerializationNode > > *) &((OpenMM::SerializationNode const *)arg1)->getChildren();
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_OpenMM__SerializationNode_std__allocatorT_OpenMM__SerializationNode_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SerializationNode_getChildren__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::SerializationNode *arg1 = (OpenMM::SerializationNode *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< OpenMM::SerializationNode,std::allocator< OpenMM::SerializationNode > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SerializationNode_getChildren",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__SerializationNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SerializationNode_getChildren" "', argument " "1"" of type '" "OpenMM::SerializationNode *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::SerializationNode * >(argp1);
  {
    try {
      result = (std::vector< OpenMM::SerializationNode,std::allocator< OpenMM::SerializationNode > > *) &(arg1)->getChildren();
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_OpenMM__SerializationNode_std__allocatorT_OpenMM__SerializationNode_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SerializationNode_getChildren(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 1); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_OpenMM__SerializationNode, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_SerializationNode_getChildren__SWIG_1(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_OpenMM__SerializationNode, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_SerializationNode_getChildren__SWIG_0(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'SerializationNode_getChildren'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    getChildren(OpenMM::SerializationNode const *)\n"
    "    getChildren(OpenMM::SerializationNode *)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_SerializationNode_getChildNode__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::SerializationNode *arg1 = (OpenMM::SerializationNode *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  OpenMM::SerializationNode *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SerializationNode_getChildNode",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__SerializationNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SerializationNode_getChildNode" "', argument " "1"" of type '" "OpenMM::SerializationNode const *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::SerializationNode * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SerializationNode_getChildNode" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SerializationNode_getChildNode" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (OpenMM::SerializationNode *) &((OpenMM::SerializationNode const *)arg1)->getChildNode((std::string const &)*arg2);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_OpenMM__SerializationNode, 0 |  0 );
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_SerializationNode_getChildNode__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::SerializationNode *arg1 = (OpenMM::SerializationNode *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  OpenMM::SerializationNode *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SerializationNode_getChildNode",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__SerializationNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SerializationNode_getChildNode" "', argument " "1"" of type '" "OpenMM::SerializationNode *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::SerializationNode * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SerializationNode_getChildNode" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SerializationNode_getChildNode" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (OpenMM::SerializationNode *) &(arg1)->getChildNode((std::string const &)*arg2);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_OpenMM__SerializationNode, 0 |  0 );
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_SerializationNode_getChildNode(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_OpenMM__SerializationNode, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_SerializationNode_getChildNode__SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_OpenMM__SerializationNode, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_SerializationNode_getChildNode__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'SerializationNode_getChildNode'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    getChildNode(OpenMM::SerializationNode const *,std::string const &)\n"
    "    getChildNode(OpenMM::SerializationNode *,std::string const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_SerializationNode_getProperties(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::SerializationNode *arg1 = (OpenMM::SerializationNode *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::map< std::string,std::string,std::less< std::string >,std::allocator< std::pair< std::string const,std::string > > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SerializationNode_getProperties",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__SerializationNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SerializationNode_getProperties" "', argument " "1"" of type '" "OpenMM::SerializationNode const *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::SerializationNode * >(argp1);
  {
    try {
      result = (std::map< std::string,std::string,std::less< std::string >,std::allocator< std::pair< std::string const,std::string > > > *) &((OpenMM::SerializationNode const *)arg1)->getProperties();
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = swig::from(static_cast< std::map<std::string,std::string,std::less< std::string >,std::allocator< std::pair< std::string const,std::string > > > >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SerializationNode_hasProperty(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::SerializationNode *arg1 = (OpenMM::SerializationNode *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SerializationNode_hasProperty",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__SerializationNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SerializationNode_hasProperty" "', argument " "1"" of type '" "OpenMM::SerializationNode const *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::SerializationNode * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SerializationNode_hasProperty" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SerializationNode_hasProperty" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (bool)((OpenMM::SerializationNode const *)arg1)->hasProperty((std::string const &)*arg2);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_SerializationNode_getStringProperty__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::SerializationNode *arg1 = (OpenMM::SerializationNode *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::string *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SerializationNode_getStringProperty",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__SerializationNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SerializationNode_getStringProperty" "', argument " "1"" of type '" "OpenMM::SerializationNode const *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::SerializationNode * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SerializationNode_getStringProperty" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SerializationNode_getStringProperty" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (std::string *) &((OpenMM::SerializationNode const *)arg1)->getStringProperty((std::string const &)*arg2);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_SerializationNode_getStringProperty__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::SerializationNode *arg1 = (OpenMM::SerializationNode *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::string *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:SerializationNode_getStringProperty",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__SerializationNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SerializationNode_getStringProperty" "', argument " "1"" of type '" "OpenMM::SerializationNode const *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::SerializationNode * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SerializationNode_getStringProperty" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SerializationNode_getStringProperty" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "SerializationNode_getStringProperty" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SerializationNode_getStringProperty" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      result = (std::string *) &((OpenMM::SerializationNode const *)arg1)->getStringProperty((std::string const &)*arg2,(std::string const &)*arg3);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_SerializationNode_getStringProperty(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_OpenMM__SerializationNode, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_SerializationNode_getStringProperty__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_OpenMM__SerializationNode, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_SerializationNode_getStringProperty__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'SerializationNode_getStringProperty'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    getStringProperty(OpenMM::SerializationNode const *,std::string const &)\n"
    "    getStringProperty(OpenMM::SerializationNode const *,std::string const &,std::string const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_SerializationNode_setStringProperty(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::SerializationNode *arg1 = (OpenMM::SerializationNode *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  OpenMM::SerializationNode *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:SerializationNode_setStringProperty",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__SerializationNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SerializationNode_setStringProperty" "', argument " "1"" of type '" "OpenMM::SerializationNode *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::SerializationNode * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SerializationNode_setStringProperty" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SerializationNode_setStringProperty" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "SerializationNode_setStringProperty" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SerializationNode_setStringProperty" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      result = (OpenMM::SerializationNode *) &(arg1)->setStringProperty((std::string const &)*arg2,(std::string const &)*arg3);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_OpenMM__SerializationNode, 0 |  0 );
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_SerializationNode_getIntProperty__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::SerializationNode *arg1 = (OpenMM::SerializationNode *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SerializationNode_getIntProperty",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__SerializationNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SerializationNode_getIntProperty" "', argument " "1"" of type '" "OpenMM::SerializationNode const *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::SerializationNode * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SerializationNode_getIntProperty" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SerializationNode_getIntProperty" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (int)((OpenMM::SerializationNode const *)arg1)->getIntProperty((std::string const &)*arg2);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_SerializationNode_getIntProperty__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::SerializationNode *arg1 = (OpenMM::SerializationNode *) 0 ;
  std::string *arg2 = 0 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:SerializationNode_getIntProperty",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__SerializationNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SerializationNode_getIntProperty" "', argument " "1"" of type '" "OpenMM::SerializationNode const *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::SerializationNode * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SerializationNode_getIntProperty" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SerializationNode_getIntProperty" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "SerializationNode_getIntProperty" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      result = (int)((OpenMM::SerializationNode const *)arg1)->getIntProperty((std::string const &)*arg2,arg3);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_SerializationNode_getIntProperty(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_OpenMM__SerializationNode, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_SerializationNode_getIntProperty__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_OpenMM__SerializationNode, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_SerializationNode_getIntProperty__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'SerializationNode_getIntProperty'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    getIntProperty(OpenMM::SerializationNode const *,std::string const &)\n"
    "    getIntProperty(OpenMM::SerializationNode const *,std::string const &,int)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_SerializationNode_setIntProperty(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::SerializationNode *arg1 = (OpenMM::SerializationNode *) 0 ;
  std::string *arg2 = 0 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  OpenMM::SerializationNode *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:SerializationNode_setIntProperty",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__SerializationNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SerializationNode_setIntProperty" "', argument " "1"" of type '" "OpenMM::SerializationNode *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::SerializationNode * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SerializationNode_setIntProperty" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SerializationNode_setIntProperty" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "SerializationNode_setIntProperty" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      result = (OpenMM::SerializationNode *) &(arg1)->setIntProperty((std::string const &)*arg2,arg3);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_OpenMM__SerializationNode, 0 |  0 );
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_SerializationNode_getDoubleProperty__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::SerializationNode *arg1 = (OpenMM::SerializationNode *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SerializationNode_getDoubleProperty",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__SerializationNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SerializationNode_getDoubleProperty" "', argument " "1"" of type '" "OpenMM::SerializationNode const *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::SerializationNode * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SerializationNode_getDoubleProperty" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SerializationNode_getDoubleProperty" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (double)((OpenMM::SerializationNode const *)arg1)->getDoubleProperty((std::string const &)*arg2);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_SerializationNode_getDoubleProperty__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::SerializationNode *arg1 = (OpenMM::SerializationNode *) 0 ;
  std::string *arg2 = 0 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:SerializationNode_getDoubleProperty",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__SerializationNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SerializationNode_getDoubleProperty" "', argument " "1"" of type '" "OpenMM::SerializationNode const *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::SerializationNode * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SerializationNode_getDoubleProperty" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SerializationNode_getDoubleProperty" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "SerializationNode_getDoubleProperty" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      result = (double)((OpenMM::SerializationNode const *)arg1)->getDoubleProperty((std::string const &)*arg2,arg3);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_SerializationNode_getDoubleProperty(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_OpenMM__SerializationNode, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_SerializationNode_getDoubleProperty__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_OpenMM__SerializationNode, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_SerializationNode_getDoubleProperty__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'SerializationNode_getDoubleProperty'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    getDoubleProperty(OpenMM::SerializationNode const *,std::string const &)\n"
    "    getDoubleProperty(OpenMM::SerializationNode const *,std::string const &,double)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_SerializationNode_setDoubleProperty(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::SerializationNode *arg1 = (OpenMM::SerializationNode *) 0 ;
  std::string *arg2 = 0 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  OpenMM::SerializationNode *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:SerializationNode_setDoubleProperty",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__SerializationNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SerializationNode_setDoubleProperty" "', argument " "1"" of type '" "OpenMM::SerializationNode *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::SerializationNode * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SerializationNode_setDoubleProperty" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SerializationNode_setDoubleProperty" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "SerializationNode_setDoubleProperty" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      result = (OpenMM::SerializationNode *) &(arg1)->setDoubleProperty((std::string const &)*arg2,arg3);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_OpenMM__SerializationNode, 0 |  0 );
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_SerializationNode_createChildNode(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::SerializationNode *arg1 = (OpenMM::SerializationNode *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  OpenMM::SerializationNode *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SerializationNode_createChildNode",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__SerializationNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SerializationNode_createChildNode" "', argument " "1"" of type '" "OpenMM::SerializationNode *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::SerializationNode * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SerializationNode_createChildNode" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SerializationNode_createChildNode" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (OpenMM::SerializationNode *) &(arg1)->createChildNode((std::string const &)*arg2);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_OpenMM__SerializationNode, 0 |  0 );
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_SerializationNode(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::SerializationNode *arg1 = (OpenMM::SerializationNode *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_SerializationNode",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__SerializationNode, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_SerializationNode" "', argument " "1"" of type '" "OpenMM::SerializationNode *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::SerializationNode * >(argp1);
  {
    try {
      delete arg1;
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *SerializationNode_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_OpenMM__SerializationNode, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_SerializationProxy_registerProxy(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::type_info *arg1 = 0 ;
  OpenMM::SerializationProxy *arg2 = (OpenMM::SerializationProxy *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SerializationProxy_registerProxy",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_std__type_info,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SerializationProxy_registerProxy" "', argument " "1"" of type '" "std::type_info const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SerializationProxy_registerProxy" "', argument " "1"" of type '" "std::type_info const &""'"); 
  }
  arg1 = reinterpret_cast< std::type_info * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_OpenMM__SerializationProxy, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SerializationProxy_registerProxy" "', argument " "2"" of type '" "OpenMM::SerializationProxy const *""'"); 
  }
  arg2 = reinterpret_cast< OpenMM::SerializationProxy * >(argp2);
  {
    try {
      OpenMM::SerializationProxy::registerProxy((std::type_info const &)*arg1,(OpenMM::SerializationProxy const *)arg2);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SerializationProxy_getProxy__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  OpenMM::SerializationProxy *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SerializationProxy_getProxy",&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SerializationProxy_getProxy" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SerializationProxy_getProxy" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  {
    try {
      result = (OpenMM::SerializationProxy *) &OpenMM::SerializationProxy::getProxy((std::string const &)*arg1);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_OpenMM__SerializationProxy, 0 |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_SerializationProxy_getProxy__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::type_info *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  OpenMM::SerializationProxy *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SerializationProxy_getProxy",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_std__type_info,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SerializationProxy_getProxy" "', argument " "1"" of type '" "std::type_info const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SerializationProxy_getProxy" "', argument " "1"" of type '" "std::type_info const &""'"); 
  }
  arg1 = reinterpret_cast< std::type_info * >(argp1);
  {
    try {
      result = (OpenMM::SerializationProxy *) &OpenMM::SerializationProxy::getProxy((std::type_info const &)*arg1);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_OpenMM__SerializationProxy, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SerializationProxy_getProxy(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 1); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__type_info, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_SerializationProxy_getProxy__SWIG_1(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_SerializationProxy_getProxy__SWIG_0(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'SerializationProxy_getProxy'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    getProxy(std::string const &)\n"
    "    OpenMM::SerializationProxy::getProxy(std::type_info const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_SerializationProxy_getTypeName(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::SerializationProxy *arg1 = (OpenMM::SerializationProxy *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SerializationProxy_getTypeName",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__SerializationProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SerializationProxy_getTypeName" "', argument " "1"" of type '" "OpenMM::SerializationProxy const *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::SerializationProxy * >(argp1);
  {
    try {
      result = (std::string *) &((OpenMM::SerializationProxy const *)arg1)->getTypeName();
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SerializationProxy_serialize(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::SerializationProxy *arg1 = (OpenMM::SerializationProxy *) 0 ;
  void *arg2 = (void *) 0 ;
  OpenMM::SerializationNode *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:SerializationProxy_serialize",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__SerializationProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SerializationProxy_serialize" "', argument " "1"" of type '" "OpenMM::SerializationProxy const *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::SerializationProxy * >(argp1);
  res2 = SWIG_ConvertPtr(obj1,SWIG_as_voidptrptr(&arg2), 0, 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SerializationProxy_serialize" "', argument " "2"" of type '" "void const *""'"); 
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_OpenMM__SerializationNode,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "SerializationProxy_serialize" "', argument " "3"" of type '" "OpenMM::SerializationNode &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SerializationProxy_serialize" "', argument " "3"" of type '" "OpenMM::SerializationNode &""'"); 
  }
  arg3 = reinterpret_cast< OpenMM::SerializationNode * >(argp3);
  {
    try {
      ((OpenMM::SerializationProxy const *)arg1)->serialize((void const *)arg2,*arg3);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SerializationProxy_deserialize(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::SerializationProxy *arg1 = (OpenMM::SerializationProxy *) 0 ;
  OpenMM::SerializationNode *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  void *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SerializationProxy_deserialize",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__SerializationProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SerializationProxy_deserialize" "', argument " "1"" of type '" "OpenMM::SerializationProxy const *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::SerializationProxy * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_OpenMM__SerializationNode,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SerializationProxy_deserialize" "', argument " "2"" of type '" "OpenMM::SerializationNode const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SerializationProxy_deserialize" "', argument " "2"" of type '" "OpenMM::SerializationNode const &""'"); 
  }
  arg2 = reinterpret_cast< OpenMM::SerializationNode * >(argp2);
  {
    try {
      result = (void *)((OpenMM::SerializationProxy const *)arg1)->deserialize((OpenMM::SerializationNode const &)*arg2);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_void, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_SerializationProxy(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::SerializationProxy *arg1 = (OpenMM::SerializationProxy *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_SerializationProxy",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__SerializationProxy, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_SerializationProxy" "', argument " "1"" of type '" "OpenMM::SerializationProxy *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::SerializationProxy * >(argp1);
  {
    try {
      delete arg1;
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *SerializationProxy_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_OpenMM__SerializationProxy, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_System__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::System *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_System")) SWIG_fail;
  {
    try {
      result = (OpenMM::System *)new OpenMM::System();
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_OpenMM__System, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_System(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::System *arg1 = (OpenMM::System *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_System",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__System, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_System" "', argument " "1"" of type '" "OpenMM::System *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::System * >(argp1);
  {
    try {
      delete arg1;
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_System_getNumParticles(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::System *arg1 = (OpenMM::System *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:System_getNumParticles",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__System, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "System_getNumParticles" "', argument " "1"" of type '" "OpenMM::System const *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::System * >(argp1);
  {
    try {
      result = (int)((OpenMM::System const *)arg1)->getNumParticles();
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_System_addParticle(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::System *arg1 = (OpenMM::System *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:System_addParticle",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__System, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "System_addParticle" "', argument " "1"" of type '" "OpenMM::System *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::System * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "System_addParticle" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (int)(arg1)->addParticle(arg2);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_System_getParticleMass(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::System *arg1 = (OpenMM::System *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:System_getParticleMass",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__System, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "System_getParticleMass" "', argument " "1"" of type '" "OpenMM::System const *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::System * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "System_getParticleMass" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (double)((OpenMM::System const *)arg1)->getParticleMass(arg2);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_System_setParticleMass(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::System *arg1 = (OpenMM::System *) 0 ;
  int arg2 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:System_setParticleMass",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__System, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "System_setParticleMass" "', argument " "1"" of type '" "OpenMM::System *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::System * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "System_setParticleMass" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "System_setParticleMass" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      (arg1)->setParticleMass(arg2,arg3);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_System_setVirtualSite(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::System *arg1 = (OpenMM::System *) 0 ;
  int arg2 ;
  OpenMM::VirtualSite *arg3 = (OpenMM::VirtualSite *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:System_setVirtualSite",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__System, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "System_setVirtualSite" "', argument " "1"" of type '" "OpenMM::System *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::System * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "System_setVirtualSite" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_OpenMM__VirtualSite, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "System_setVirtualSite" "', argument " "3"" of type '" "OpenMM::VirtualSite *""'"); 
  }
  arg3 = reinterpret_cast< OpenMM::VirtualSite * >(argp3);
  {
    try {
      (arg1)->setVirtualSite(arg2,arg3);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_System_isVirtualSite(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::System *arg1 = (OpenMM::System *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:System_isVirtualSite",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__System, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "System_isVirtualSite" "', argument " "1"" of type '" "OpenMM::System const *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::System * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "System_isVirtualSite" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (bool)((OpenMM::System const *)arg1)->isVirtualSite(arg2);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_System_getVirtualSite(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::System *arg1 = (OpenMM::System *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  OpenMM::VirtualSite *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:System_getVirtualSite",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__System, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "System_getVirtualSite" "', argument " "1"" of type '" "OpenMM::System const *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::System * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "System_getVirtualSite" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (OpenMM::VirtualSite *) &((OpenMM::System const *)arg1)->getVirtualSite(arg2);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_OpenMM__VirtualSite, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_System_getNumConstraints(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::System *arg1 = (OpenMM::System *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:System_getNumConstraints",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__System, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "System_getNumConstraints" "', argument " "1"" of type '" "OpenMM::System const *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::System * >(argp1);
  {
    try {
      result = (int)((OpenMM::System const *)arg1)->getNumConstraints();
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_System_addConstraint(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::System *arg1 = (OpenMM::System *) 0 ;
  int arg2 ;
  int arg3 ;
  double arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:System_addConstraint",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__System, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "System_addConstraint" "', argument " "1"" of type '" "OpenMM::System *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::System * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "System_addConstraint" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "System_addConstraint" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "System_addConstraint" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  {
    try {
      result = (int)(arg1)->addConstraint(arg2,arg3,arg4);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_System_getConstraintParameters(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::System *arg1 = (OpenMM::System *) 0 ;
  int arg2 ;
  int *arg3 = 0 ;
  int *arg4 = 0 ;
  double *arg5 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int temp3 ;
  int res3 = SWIG_TMPOBJ ;
  int temp4 ;
  int res4 = SWIG_TMPOBJ ;
  double temp5 ;
  int res5 = SWIG_TMPOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  arg3 = &temp3;
  arg4 = &temp4;
  arg5 = &temp5;
  if (!PyArg_ParseTuple(args,(char *)"OO:System_getConstraintParameters",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__System, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "System_getConstraintParameters" "', argument " "1"" of type '" "OpenMM::System const *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::System * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "System_getConstraintParameters" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      ((OpenMM::System const *)arg1)->getConstraintParameters(arg2,*arg3,*arg4,*arg5);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsTmpObj(res3)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_From_int((*arg3)));
  } else {
    int new_flags = SWIG_IsNewObj(res3) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg3), SWIGTYPE_p_int, new_flags));
  }
  if (SWIG_IsTmpObj(res4)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_From_int((*arg4)));
  } else {
    int new_flags = SWIG_IsNewObj(res4) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg4), SWIGTYPE_p_int, new_flags));
  }
  if (SWIG_IsTmpObj(res5)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_From_double((*arg5)));
  } else {
    int new_flags = SWIG_IsNewObj(res5) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg5), SWIGTYPE_p_double, new_flags));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_System_setConstraintParameters(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::System *arg1 = (OpenMM::System *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  double arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:System_setConstraintParameters",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__System, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "System_setConstraintParameters" "', argument " "1"" of type '" "OpenMM::System *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::System * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "System_setConstraintParameters" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "System_setConstraintParameters" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "System_setConstraintParameters" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  ecode5 = SWIG_AsVal_double(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "System_setConstraintParameters" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  {
    try {
      (arg1)->setConstraintParameters(arg2,arg3,arg4,arg5);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_System_addForce(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::System *arg1 = (OpenMM::System *) 0 ;
  OpenMM::Force *arg2 = (OpenMM::Force *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:System_addForce",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__System, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "System_addForce" "', argument " "1"" of type '" "OpenMM::System *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::System * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_OpenMM__Force, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "System_addForce" "', argument " "2"" of type '" "OpenMM::Force *""'"); 
  }
  arg2 = reinterpret_cast< OpenMM::Force * >(argp2);
  {
    try {
      result = (int)(arg1)->addForce(arg2);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_System_getNumForces(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::System *arg1 = (OpenMM::System *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:System_getNumForces",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__System, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "System_getNumForces" "', argument " "1"" of type '" "OpenMM::System const *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::System * >(argp1);
  {
    try {
      result = (int)((OpenMM::System const *)arg1)->getNumForces();
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_System_getForce__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::System *arg1 = (OpenMM::System *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  OpenMM::Force *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:System_getForce",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__System, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "System_getForce" "', argument " "1"" of type '" "OpenMM::System const *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::System * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "System_getForce" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (OpenMM::Force *) &((OpenMM::System const *)arg1)->getForce(arg2);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  {
    int dcast = 0;
    /*@SWIG:/usr/local/share/swig/2.0.1/typemaps/swigmacros.swg,200,%formacro@*//*@SWIG:/usr/local/share/swig/2.0.1/typemaps/swigmacros.swg,192,%_formacro_1@*//*@SWIG:/usr/local/share/swig/2.0.1/typemaps/factory.swg,72,%_factory_dispatch@*/ 
    if (!dcast) {
      OpenMM::AmoebaGeneralizedKirkwoodForce *dobj = dynamic_cast<OpenMM::AmoebaGeneralizedKirkwoodForce *>(result);
      if (dobj) {
        dcast = 1;
        resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(dobj),SWIGTYPE_p_OpenMM__AmoebaGeneralizedKirkwoodForce, 0 |  0 );
      }   
    }/*@SWIG@*/
    
    /*@SWIG:/usr/local/share/swig/2.0.1/typemaps/swigmacros.swg,192,%_formacro_1@*//*@SWIG:/usr/local/share/swig/2.0.1/typemaps/factory.swg,72,%_factory_dispatch@*/ 
    if (!dcast) {
      OpenMM::AmoebaHarmonicAngleForce *dobj = dynamic_cast<OpenMM::AmoebaHarmonicAngleForce *>(result);
      if (dobj) {
        dcast = 1;
        resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(dobj),SWIGTYPE_p_OpenMM__AmoebaHarmonicAngleForce, 0 |  0 );
      }   
    }/*@SWIG@*/
    
    /*@SWIG:/usr/local/share/swig/2.0.1/typemaps/swigmacros.swg,192,%_formacro_1@*//*@SWIG:/usr/local/share/swig/2.0.1/typemaps/factory.swg,72,%_factory_dispatch@*/ 
    if (!dcast) {
      OpenMM::AmoebaHarmonicBondForce *dobj = dynamic_cast<OpenMM::AmoebaHarmonicBondForce *>(result);
      if (dobj) {
        dcast = 1;
        resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(dobj),SWIGTYPE_p_OpenMM__AmoebaHarmonicBondForce, 0 |  0 );
      }   
    }/*@SWIG@*/
    
    /*@SWIG:/usr/local/share/swig/2.0.1/typemaps/swigmacros.swg,192,%_formacro_1@*//*@SWIG:/usr/local/share/swig/2.0.1/typemaps/factory.swg,72,%_factory_dispatch@*/ 
    if (!dcast) {
      OpenMM::AmoebaHarmonicInPlaneAngleForce *dobj = dynamic_cast<OpenMM::AmoebaHarmonicInPlaneAngleForce *>(result);
      if (dobj) {
        dcast = 1;
        resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(dobj),SWIGTYPE_p_OpenMM__AmoebaHarmonicInPlaneAngleForce, 0 |  0 );
      }   
    }/*@SWIG@*/
    
    /*@SWIG:/usr/local/share/swig/2.0.1/typemaps/swigmacros.swg,192,%_formacro_1@*//*@SWIG:/usr/local/share/swig/2.0.1/typemaps/factory.swg,72,%_factory_dispatch@*/ 
    if (!dcast) {
      OpenMM::AmoebaMultipoleForce *dobj = dynamic_cast<OpenMM::AmoebaMultipoleForce *>(result);
      if (dobj) {
        dcast = 1;
        resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(dobj),SWIGTYPE_p_OpenMM__AmoebaMultipoleForce, 0 |  0 );
      }   
    }/*@SWIG@*/
    
    /*@SWIG:/usr/local/share/swig/2.0.1/typemaps/swigmacros.swg,192,%_formacro_1@*//*@SWIG:/usr/local/share/swig/2.0.1/typemaps/factory.swg,72,%_factory_dispatch@*/ 
    if (!dcast) {
      OpenMM::AmoebaOutOfPlaneBendForce *dobj = dynamic_cast<OpenMM::AmoebaOutOfPlaneBendForce *>(result);
      if (dobj) {
        dcast = 1;
        resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(dobj),SWIGTYPE_p_OpenMM__AmoebaOutOfPlaneBendForce, 0 |  0 );
      }   
    }/*@SWIG@*/
    
    /*@SWIG:/usr/local/share/swig/2.0.1/typemaps/swigmacros.swg,192,%_formacro_1@*//*@SWIG:/usr/local/share/swig/2.0.1/typemaps/factory.swg,72,%_factory_dispatch@*/ 
    if (!dcast) {
      OpenMM::AmoebaPiTorsionForce *dobj = dynamic_cast<OpenMM::AmoebaPiTorsionForce *>(result);
      if (dobj) {
        dcast = 1;
        resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(dobj),SWIGTYPE_p_OpenMM__AmoebaPiTorsionForce, 0 |  0 );
      }   
    }/*@SWIG@*/
    
    /*@SWIG:/usr/local/share/swig/2.0.1/typemaps/swigmacros.swg,192,%_formacro_1@*//*@SWIG:/usr/local/share/swig/2.0.1/typemaps/factory.swg,72,%_factory_dispatch@*/ 
    if (!dcast) {
      OpenMM::AmoebaStretchBendForce *dobj = dynamic_cast<OpenMM::AmoebaStretchBendForce *>(result);
      if (dobj) {
        dcast = 1;
        resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(dobj),SWIGTYPE_p_OpenMM__AmoebaStretchBendForce, 0 |  0 );
      }   
    }/*@SWIG@*/
    
    /*@SWIG:/usr/local/share/swig/2.0.1/typemaps/swigmacros.swg,192,%_formacro_1@*//*@SWIG:/usr/local/share/swig/2.0.1/typemaps/factory.swg,72,%_factory_dispatch@*/ 
    if (!dcast) {
      OpenMM::AmoebaTorsionForce *dobj = dynamic_cast<OpenMM::AmoebaTorsionForce *>(result);
      if (dobj) {
        dcast = 1;
        resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(dobj),SWIGTYPE_p_OpenMM__AmoebaTorsionForce, 0 |  0 );
      }   
    }/*@SWIG@*/
    
    /*@SWIG:/usr/local/share/swig/2.0.1/typemaps/swigmacros.swg,192,%_formacro_1@*//*@SWIG:/usr/local/share/swig/2.0.1/typemaps/factory.swg,72,%_factory_dispatch@*/ 
    if (!dcast) {
      OpenMM::AmoebaTorsionTorsionForce *dobj = dynamic_cast<OpenMM::AmoebaTorsionTorsionForce *>(result);
      if (dobj) {
        dcast = 1;
        resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(dobj),SWIGTYPE_p_OpenMM__AmoebaTorsionTorsionForce, 0 |  0 );
      }   
    }/*@SWIG@*/
    
    /*@SWIG:/usr/local/share/swig/2.0.1/typemaps/swigmacros.swg,192,%_formacro_1@*//*@SWIG:/usr/local/share/swig/2.0.1/typemaps/factory.swg,72,%_factory_dispatch@*/ 
    if (!dcast) {
      OpenMM::AmoebaUreyBradleyForce *dobj = dynamic_cast<OpenMM::AmoebaUreyBradleyForce *>(result);
      if (dobj) {
        dcast = 1;
        resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(dobj),SWIGTYPE_p_OpenMM__AmoebaUreyBradleyForce, 0 |  0 );
      }   
    }/*@SWIG@*/
    
    /*@SWIG:/usr/local/share/swig/2.0.1/typemaps/swigmacros.swg,192,%_formacro_1@*//*@SWIG:/usr/local/share/swig/2.0.1/typemaps/factory.swg,72,%_factory_dispatch@*/ 
    if (!dcast) {
      OpenMM::AmoebaVdwForce *dobj = dynamic_cast<OpenMM::AmoebaVdwForce *>(result);
      if (dobj) {
        dcast = 1;
        resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(dobj),SWIGTYPE_p_OpenMM__AmoebaVdwForce, 0 |  0 );
      }   
    }/*@SWIG@*/
    
    /*@SWIG:/usr/local/share/swig/2.0.1/typemaps/swigmacros.swg,192,%_formacro_1@*//*@SWIG:/usr/local/share/swig/2.0.1/typemaps/factory.swg,72,%_factory_dispatch@*/ 
    if (!dcast) {
      OpenMM::AmoebaWcaDispersionForce *dobj = dynamic_cast<OpenMM::AmoebaWcaDispersionForce *>(result);
      if (dobj) {
        dcast = 1;
        resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(dobj),SWIGTYPE_p_OpenMM__AmoebaWcaDispersionForce, 0 |  0 );
      }   
    }/*@SWIG@*/
    
    /*@SWIG:/usr/local/share/swig/2.0.1/typemaps/swigmacros.swg,192,%_formacro_1@*//*@SWIG:/usr/local/share/swig/2.0.1/typemaps/factory.swg,72,%_factory_dispatch@*/ 
    if (!dcast) {
      OpenMM::AndersenThermostat *dobj = dynamic_cast<OpenMM::AndersenThermostat *>(result);
      if (dobj) {
        dcast = 1;
        resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(dobj),SWIGTYPE_p_OpenMM__AndersenThermostat, 0 |  0 );
      }   
    }/*@SWIG@*/
    
    /*@SWIG:/usr/local/share/swig/2.0.1/typemaps/swigmacros.swg,192,%_formacro_1@*//*@SWIG:/usr/local/share/swig/2.0.1/typemaps/factory.swg,72,%_factory_dispatch@*/ 
    if (!dcast) {
      OpenMM::CMAPTorsionForce *dobj = dynamic_cast<OpenMM::CMAPTorsionForce *>(result);
      if (dobj) {
        dcast = 1;
        resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(dobj),SWIGTYPE_p_OpenMM__CMAPTorsionForce, 0 |  0 );
      }   
    }/*@SWIG@*/
    
    /*@SWIG:/usr/local/share/swig/2.0.1/typemaps/swigmacros.swg,192,%_formacro_1@*//*@SWIG:/usr/local/share/swig/2.0.1/typemaps/factory.swg,72,%_factory_dispatch@*/ 
    if (!dcast) {
      OpenMM::CMMotionRemover *dobj = dynamic_cast<OpenMM::CMMotionRemover *>(result);
      if (dobj) {
        dcast = 1;
        resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(dobj),SWIGTYPE_p_OpenMM__CMMotionRemover, 0 |  0 );
      }   
    }/*@SWIG@*/
    
    /*@SWIG:/usr/local/share/swig/2.0.1/typemaps/swigmacros.swg,192,%_formacro_1@*//*@SWIG:/usr/local/share/swig/2.0.1/typemaps/factory.swg,72,%_factory_dispatch@*/ 
    if (!dcast) {
      OpenMM::CustomAngleForce *dobj = dynamic_cast<OpenMM::CustomAngleForce *>(result);
      if (dobj) {
        dcast = 1;
        resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(dobj),SWIGTYPE_p_OpenMM__CustomAngleForce, 0 |  0 );
      }   
    }/*@SWIG@*/
    
    /*@SWIG:/usr/local/share/swig/2.0.1/typemaps/swigmacros.swg,192,%_formacro_1@*//*@SWIG:/usr/local/share/swig/2.0.1/typemaps/factory.swg,72,%_factory_dispatch@*/ 
    if (!dcast) {
      OpenMM::CustomBondForce *dobj = dynamic_cast<OpenMM::CustomBondForce *>(result);
      if (dobj) {
        dcast = 1;
        resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(dobj),SWIGTYPE_p_OpenMM__CustomBondForce, 0 |  0 );
      }   
    }/*@SWIG@*/
    
    /*@SWIG:/usr/local/share/swig/2.0.1/typemaps/swigmacros.swg,192,%_formacro_1@*//*@SWIG:/usr/local/share/swig/2.0.1/typemaps/factory.swg,72,%_factory_dispatch@*/ 
    if (!dcast) {
      OpenMM::CustomExternalForce *dobj = dynamic_cast<OpenMM::CustomExternalForce *>(result);
      if (dobj) {
        dcast = 1;
        resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(dobj),SWIGTYPE_p_OpenMM__CustomExternalForce, 0 |  0 );
      }   
    }/*@SWIG@*/
    
    /*@SWIG:/usr/local/share/swig/2.0.1/typemaps/swigmacros.swg,192,%_formacro_1@*//*@SWIG:/usr/local/share/swig/2.0.1/typemaps/factory.swg,72,%_factory_dispatch@*/ 
    if (!dcast) {
      OpenMM::CustomGBForce *dobj = dynamic_cast<OpenMM::CustomGBForce *>(result);
      if (dobj) {
        dcast = 1;
        resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(dobj),SWIGTYPE_p_OpenMM__CustomGBForce, 0 |  0 );
      }   
    }/*@SWIG@*/
    
    /*@SWIG:/usr/local/share/swig/2.0.1/typemaps/swigmacros.swg,192,%_formacro_1@*//*@SWIG:/usr/local/share/swig/2.0.1/typemaps/factory.swg,72,%_factory_dispatch@*/ 
    if (!dcast) {
      OpenMM::CustomHbondForce *dobj = dynamic_cast<OpenMM::CustomHbondForce *>(result);
      if (dobj) {
        dcast = 1;
        resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(dobj),SWIGTYPE_p_OpenMM__CustomHbondForce, 0 |  0 );
      }   
    }/*@SWIG@*/
    
    /*@SWIG:/usr/local/share/swig/2.0.1/typemaps/swigmacros.swg,192,%_formacro_1@*//*@SWIG:/usr/local/share/swig/2.0.1/typemaps/factory.swg,72,%_factory_dispatch@*/ 
    if (!dcast) {
      OpenMM::CustomNonbondedForce *dobj = dynamic_cast<OpenMM::CustomNonbondedForce *>(result);
      if (dobj) {
        dcast = 1;
        resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(dobj),SWIGTYPE_p_OpenMM__CustomNonbondedForce, 0 |  0 );
      }   
    }/*@SWIG@*/
    
    /*@SWIG:/usr/local/share/swig/2.0.1/typemaps/swigmacros.swg,192,%_formacro_1@*//*@SWIG:/usr/local/share/swig/2.0.1/typemaps/factory.swg,72,%_factory_dispatch@*/ 
    if (!dcast) {
      OpenMM::CustomTorsionForce *dobj = dynamic_cast<OpenMM::CustomTorsionForce *>(result);
      if (dobj) {
        dcast = 1;
        resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(dobj),SWIGTYPE_p_OpenMM__CustomTorsionForce, 0 |  0 );
      }   
    }/*@SWIG@*/
    
    /*@SWIG:/usr/local/share/swig/2.0.1/typemaps/swigmacros.swg,192,%_formacro_1@*//*@SWIG:/usr/local/share/swig/2.0.1/typemaps/factory.swg,72,%_factory_dispatch@*/ 
    if (!dcast) {
      OpenMM::GBSAOBCForce *dobj = dynamic_cast<OpenMM::GBSAOBCForce *>(result);
      if (dobj) {
        dcast = 1;
        resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(dobj),SWIGTYPE_p_OpenMM__GBSAOBCForce, 0 |  0 );
      }   
    }/*@SWIG@*/
    
    /*@SWIG:/usr/local/share/swig/2.0.1/typemaps/swigmacros.swg,192,%_formacro_1@*//*@SWIG:/usr/local/share/swig/2.0.1/typemaps/factory.swg,72,%_factory_dispatch@*/ 
    if (!dcast) {
      OpenMM::GBSAOBCSoftcoreForce *dobj = dynamic_cast<OpenMM::GBSAOBCSoftcoreForce *>(result);
      if (dobj) {
        dcast = 1;
        resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(dobj),SWIGTYPE_p_OpenMM__GBSAOBCSoftcoreForce, 0 |  0 );
      }   
    }/*@SWIG@*/
    
    /*@SWIG:/usr/local/share/swig/2.0.1/typemaps/swigmacros.swg,192,%_formacro_1@*//*@SWIG:/usr/local/share/swig/2.0.1/typemaps/factory.swg,72,%_factory_dispatch@*/ 
    if (!dcast) {
      OpenMM::GBVIForce *dobj = dynamic_cast<OpenMM::GBVIForce *>(result);
      if (dobj) {
        dcast = 1;
        resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(dobj),SWIGTYPE_p_OpenMM__GBVIForce, 0 |  0 );
      }   
    }/*@SWIG@*/
    
    /*@SWIG:/usr/local/share/swig/2.0.1/typemaps/swigmacros.swg,192,%_formacro_1@*//*@SWIG:/usr/local/share/swig/2.0.1/typemaps/factory.swg,72,%_factory_dispatch@*/ 
    if (!dcast) {
      OpenMM::GBVISoftcoreForce *dobj = dynamic_cast<OpenMM::GBVISoftcoreForce *>(result);
      if (dobj) {
        dcast = 1;
        resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(dobj),SWIGTYPE_p_OpenMM__GBVISoftcoreForce, 0 |  0 );
      }   
    }/*@SWIG@*/
    
    /*@SWIG:/usr/local/share/swig/2.0.1/typemaps/swigmacros.swg,192,%_formacro_1@*//*@SWIG:/usr/local/share/swig/2.0.1/typemaps/factory.swg,72,%_factory_dispatch@*/ 
    if (!dcast) {
      OpenMM::HarmonicAngleForce *dobj = dynamic_cast<OpenMM::HarmonicAngleForce *>(result);
      if (dobj) {
        dcast = 1;
        resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(dobj),SWIGTYPE_p_OpenMM__HarmonicAngleForce, 0 |  0 );
      }   
    }/*@SWIG@*/
    
    /*@SWIG:/usr/local/share/swig/2.0.1/typemaps/swigmacros.swg,192,%_formacro_1@*//*@SWIG:/usr/local/share/swig/2.0.1/typemaps/factory.swg,72,%_factory_dispatch@*/ 
    if (!dcast) {
      OpenMM::HarmonicBondForce *dobj = dynamic_cast<OpenMM::HarmonicBondForce *>(result);
      if (dobj) {
        dcast = 1;
        resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(dobj),SWIGTYPE_p_OpenMM__HarmonicBondForce, 0 |  0 );
      }   
    }/*@SWIG@*/
    
    /*@SWIG:/usr/local/share/swig/2.0.1/typemaps/swigmacros.swg,192,%_formacro_1@*//*@SWIG:/usr/local/share/swig/2.0.1/typemaps/factory.swg,72,%_factory_dispatch@*/ 
    if (!dcast) {
      OpenMM::MonteCarloBarostat *dobj = dynamic_cast<OpenMM::MonteCarloBarostat *>(result);
      if (dobj) {
        dcast = 1;
        resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(dobj),SWIGTYPE_p_OpenMM__MonteCarloBarostat, 0 |  0 );
      }   
    }/*@SWIG@*/
    
    /*@SWIG:/usr/local/share/swig/2.0.1/typemaps/swigmacros.swg,192,%_formacro_1@*//*@SWIG:/usr/local/share/swig/2.0.1/typemaps/factory.swg,72,%_factory_dispatch@*/ 
    if (!dcast) {
      OpenMM::NonbondedForce *dobj = dynamic_cast<OpenMM::NonbondedForce *>(result);
      if (dobj) {
        dcast = 1;
        resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(dobj),SWIGTYPE_p_OpenMM__NonbondedForce, 0 |  0 );
      }   
    }/*@SWIG@*/
    
    /*@SWIG:/usr/local/share/swig/2.0.1/typemaps/swigmacros.swg,192,%_formacro_1@*//*@SWIG:/usr/local/share/swig/2.0.1/typemaps/factory.swg,72,%_factory_dispatch@*/ 
    if (!dcast) {
      OpenMM::NonbondedSoftcoreForce *dobj = dynamic_cast<OpenMM::NonbondedSoftcoreForce *>(result);
      if (dobj) {
        dcast = 1;
        resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(dobj),SWIGTYPE_p_OpenMM__NonbondedSoftcoreForce, 0 |  0 );
      }   
    }/*@SWIG@*/
    
    /*@SWIG:/usr/local/share/swig/2.0.1/typemaps/swigmacros.swg,192,%_formacro_1@*//*@SWIG:/usr/local/share/swig/2.0.1/typemaps/factory.swg,72,%_factory_dispatch@*/ 
    if (!dcast) {
      OpenMM::PeriodicTorsionForce *dobj = dynamic_cast<OpenMM::PeriodicTorsionForce *>(result);
      if (dobj) {
        dcast = 1;
        resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(dobj),SWIGTYPE_p_OpenMM__PeriodicTorsionForce, 0 |  0 );
      }   
    }/*@SWIG@*/
    
    /*@SWIG:/usr/local/share/swig/2.0.1/typemaps/swigmacros.swg,192,%_formacro_1@*//*@SWIG:/usr/local/share/swig/2.0.1/typemaps/factory.swg,72,%_factory_dispatch@*/ 
    if (!dcast) {
      OpenMM::RBTorsionForce *dobj = dynamic_cast<OpenMM::RBTorsionForce *>(result);
      if (dobj) {
        dcast = 1;
        resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(dobj),SWIGTYPE_p_OpenMM__RBTorsionForce, 0 |  0 );
      }   
    }/*@SWIG@*/
    
    
    
    /*@SWIG@*/
    
    /*@SWIG@*/
    
    /*@SWIG@*/
    
    /*@SWIG@*/
    
    /*@SWIG@*/
    
    /*@SWIG@*/
    
    /*@SWIG@*/
    
    /*@SWIG@*/
    
    /*@SWIG@*/
    
    /*@SWIG@*/
    
    /*@SWIG@*/
    
    /*@SWIG@*/
    
    /*@SWIG@*/
    
    /*@SWIG@*/
    
    /*@SWIG@*/
    
    /*@SWIG@*/
    
    /*@SWIG@*/
    
    /*@SWIG@*/
    
    /*@SWIG@*/
    
    /*@SWIG@*/
    
    /*@SWIG@*/
    
    /*@SWIG@*/
    
    /*@SWIG@*/
    
    /*@SWIG@*/
    
    /*@SWIG@*/
    
    /*@SWIG@*/
    
    /*@SWIG@*/
    
    /*@SWIG@*/
    
    /*@SWIG@*/
    
    /*@SWIG@*/
    
    /*@SWIG@*/
    
    /*@SWIG@*/
    
    /*@SWIG@*/
    
    /*@SWIG@*//*@SWIG@*/
    if (!dcast) {
      resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result),SWIGTYPE_p_OpenMM__Force, 0 |  0 );
    }
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_System_getForce__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::System *arg1 = (OpenMM::System *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  OpenMM::Force *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:System_getForce",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__System, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "System_getForce" "', argument " "1"" of type '" "OpenMM::System *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::System * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "System_getForce" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (OpenMM::Force *) &(arg1)->getForce(arg2);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  {
    int dcast = 0;
    /*@SWIG:/usr/local/share/swig/2.0.1/typemaps/swigmacros.swg,200,%formacro@*//*@SWIG:/usr/local/share/swig/2.0.1/typemaps/swigmacros.swg,192,%_formacro_1@*//*@SWIG:/usr/local/share/swig/2.0.1/typemaps/factory.swg,72,%_factory_dispatch@*/ 
    if (!dcast) {
      OpenMM::AmoebaGeneralizedKirkwoodForce *dobj = dynamic_cast<OpenMM::AmoebaGeneralizedKirkwoodForce *>(result);
      if (dobj) {
        dcast = 1;
        resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(dobj),SWIGTYPE_p_OpenMM__AmoebaGeneralizedKirkwoodForce, 0 |  0 );
      }   
    }/*@SWIG@*/
    
    /*@SWIG:/usr/local/share/swig/2.0.1/typemaps/swigmacros.swg,192,%_formacro_1@*//*@SWIG:/usr/local/share/swig/2.0.1/typemaps/factory.swg,72,%_factory_dispatch@*/ 
    if (!dcast) {
      OpenMM::AmoebaHarmonicAngleForce *dobj = dynamic_cast<OpenMM::AmoebaHarmonicAngleForce *>(result);
      if (dobj) {
        dcast = 1;
        resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(dobj),SWIGTYPE_p_OpenMM__AmoebaHarmonicAngleForce, 0 |  0 );
      }   
    }/*@SWIG@*/
    
    /*@SWIG:/usr/local/share/swig/2.0.1/typemaps/swigmacros.swg,192,%_formacro_1@*//*@SWIG:/usr/local/share/swig/2.0.1/typemaps/factory.swg,72,%_factory_dispatch@*/ 
    if (!dcast) {
      OpenMM::AmoebaHarmonicBondForce *dobj = dynamic_cast<OpenMM::AmoebaHarmonicBondForce *>(result);
      if (dobj) {
        dcast = 1;
        resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(dobj),SWIGTYPE_p_OpenMM__AmoebaHarmonicBondForce, 0 |  0 );
      }   
    }/*@SWIG@*/
    
    /*@SWIG:/usr/local/share/swig/2.0.1/typemaps/swigmacros.swg,192,%_formacro_1@*//*@SWIG:/usr/local/share/swig/2.0.1/typemaps/factory.swg,72,%_factory_dispatch@*/ 
    if (!dcast) {
      OpenMM::AmoebaHarmonicInPlaneAngleForce *dobj = dynamic_cast<OpenMM::AmoebaHarmonicInPlaneAngleForce *>(result);
      if (dobj) {
        dcast = 1;
        resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(dobj),SWIGTYPE_p_OpenMM__AmoebaHarmonicInPlaneAngleForce, 0 |  0 );
      }   
    }/*@SWIG@*/
    
    /*@SWIG:/usr/local/share/swig/2.0.1/typemaps/swigmacros.swg,192,%_formacro_1@*//*@SWIG:/usr/local/share/swig/2.0.1/typemaps/factory.swg,72,%_factory_dispatch@*/ 
    if (!dcast) {
      OpenMM::AmoebaMultipoleForce *dobj = dynamic_cast<OpenMM::AmoebaMultipoleForce *>(result);
      if (dobj) {
        dcast = 1;
        resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(dobj),SWIGTYPE_p_OpenMM__AmoebaMultipoleForce, 0 |  0 );
      }   
    }/*@SWIG@*/
    
    /*@SWIG:/usr/local/share/swig/2.0.1/typemaps/swigmacros.swg,192,%_formacro_1@*//*@SWIG:/usr/local/share/swig/2.0.1/typemaps/factory.swg,72,%_factory_dispatch@*/ 
    if (!dcast) {
      OpenMM::AmoebaOutOfPlaneBendForce *dobj = dynamic_cast<OpenMM::AmoebaOutOfPlaneBendForce *>(result);
      if (dobj) {
        dcast = 1;
        resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(dobj),SWIGTYPE_p_OpenMM__AmoebaOutOfPlaneBendForce, 0 |  0 );
      }   
    }/*@SWIG@*/
    
    /*@SWIG:/usr/local/share/swig/2.0.1/typemaps/swigmacros.swg,192,%_formacro_1@*//*@SWIG:/usr/local/share/swig/2.0.1/typemaps/factory.swg,72,%_factory_dispatch@*/ 
    if (!dcast) {
      OpenMM::AmoebaPiTorsionForce *dobj = dynamic_cast<OpenMM::AmoebaPiTorsionForce *>(result);
      if (dobj) {
        dcast = 1;
        resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(dobj),SWIGTYPE_p_OpenMM__AmoebaPiTorsionForce, 0 |  0 );
      }   
    }/*@SWIG@*/
    
    /*@SWIG:/usr/local/share/swig/2.0.1/typemaps/swigmacros.swg,192,%_formacro_1@*//*@SWIG:/usr/local/share/swig/2.0.1/typemaps/factory.swg,72,%_factory_dispatch@*/ 
    if (!dcast) {
      OpenMM::AmoebaStretchBendForce *dobj = dynamic_cast<OpenMM::AmoebaStretchBendForce *>(result);
      if (dobj) {
        dcast = 1;
        resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(dobj),SWIGTYPE_p_OpenMM__AmoebaStretchBendForce, 0 |  0 );
      }   
    }/*@SWIG@*/
    
    /*@SWIG:/usr/local/share/swig/2.0.1/typemaps/swigmacros.swg,192,%_formacro_1@*//*@SWIG:/usr/local/share/swig/2.0.1/typemaps/factory.swg,72,%_factory_dispatch@*/ 
    if (!dcast) {
      OpenMM::AmoebaTorsionForce *dobj = dynamic_cast<OpenMM::AmoebaTorsionForce *>(result);
      if (dobj) {
        dcast = 1;
        resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(dobj),SWIGTYPE_p_OpenMM__AmoebaTorsionForce, 0 |  0 );
      }   
    }/*@SWIG@*/
    
    /*@SWIG:/usr/local/share/swig/2.0.1/typemaps/swigmacros.swg,192,%_formacro_1@*//*@SWIG:/usr/local/share/swig/2.0.1/typemaps/factory.swg,72,%_factory_dispatch@*/ 
    if (!dcast) {
      OpenMM::AmoebaTorsionTorsionForce *dobj = dynamic_cast<OpenMM::AmoebaTorsionTorsionForce *>(result);
      if (dobj) {
        dcast = 1;
        resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(dobj),SWIGTYPE_p_OpenMM__AmoebaTorsionTorsionForce, 0 |  0 );
      }   
    }/*@SWIG@*/
    
    /*@SWIG:/usr/local/share/swig/2.0.1/typemaps/swigmacros.swg,192,%_formacro_1@*//*@SWIG:/usr/local/share/swig/2.0.1/typemaps/factory.swg,72,%_factory_dispatch@*/ 
    if (!dcast) {
      OpenMM::AmoebaUreyBradleyForce *dobj = dynamic_cast<OpenMM::AmoebaUreyBradleyForce *>(result);
      if (dobj) {
        dcast = 1;
        resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(dobj),SWIGTYPE_p_OpenMM__AmoebaUreyBradleyForce, 0 |  0 );
      }   
    }/*@SWIG@*/
    
    /*@SWIG:/usr/local/share/swig/2.0.1/typemaps/swigmacros.swg,192,%_formacro_1@*//*@SWIG:/usr/local/share/swig/2.0.1/typemaps/factory.swg,72,%_factory_dispatch@*/ 
    if (!dcast) {
      OpenMM::AmoebaVdwForce *dobj = dynamic_cast<OpenMM::AmoebaVdwForce *>(result);
      if (dobj) {
        dcast = 1;
        resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(dobj),SWIGTYPE_p_OpenMM__AmoebaVdwForce, 0 |  0 );
      }   
    }/*@SWIG@*/
    
    /*@SWIG:/usr/local/share/swig/2.0.1/typemaps/swigmacros.swg,192,%_formacro_1@*//*@SWIG:/usr/local/share/swig/2.0.1/typemaps/factory.swg,72,%_factory_dispatch@*/ 
    if (!dcast) {
      OpenMM::AmoebaWcaDispersionForce *dobj = dynamic_cast<OpenMM::AmoebaWcaDispersionForce *>(result);
      if (dobj) {
        dcast = 1;
        resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(dobj),SWIGTYPE_p_OpenMM__AmoebaWcaDispersionForce, 0 |  0 );
      }   
    }/*@SWIG@*/
    
    /*@SWIG:/usr/local/share/swig/2.0.1/typemaps/swigmacros.swg,192,%_formacro_1@*//*@SWIG:/usr/local/share/swig/2.0.1/typemaps/factory.swg,72,%_factory_dispatch@*/ 
    if (!dcast) {
      OpenMM::AndersenThermostat *dobj = dynamic_cast<OpenMM::AndersenThermostat *>(result);
      if (dobj) {
        dcast = 1;
        resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(dobj),SWIGTYPE_p_OpenMM__AndersenThermostat, 0 |  0 );
      }   
    }/*@SWIG@*/
    
    /*@SWIG:/usr/local/share/swig/2.0.1/typemaps/swigmacros.swg,192,%_formacro_1@*//*@SWIG:/usr/local/share/swig/2.0.1/typemaps/factory.swg,72,%_factory_dispatch@*/ 
    if (!dcast) {
      OpenMM::CMAPTorsionForce *dobj = dynamic_cast<OpenMM::CMAPTorsionForce *>(result);
      if (dobj) {
        dcast = 1;
        resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(dobj),SWIGTYPE_p_OpenMM__CMAPTorsionForce, 0 |  0 );
      }   
    }/*@SWIG@*/
    
    /*@SWIG:/usr/local/share/swig/2.0.1/typemaps/swigmacros.swg,192,%_formacro_1@*//*@SWIG:/usr/local/share/swig/2.0.1/typemaps/factory.swg,72,%_factory_dispatch@*/ 
    if (!dcast) {
      OpenMM::CMMotionRemover *dobj = dynamic_cast<OpenMM::CMMotionRemover *>(result);
      if (dobj) {
        dcast = 1;
        resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(dobj),SWIGTYPE_p_OpenMM__CMMotionRemover, 0 |  0 );
      }   
    }/*@SWIG@*/
    
    /*@SWIG:/usr/local/share/swig/2.0.1/typemaps/swigmacros.swg,192,%_formacro_1@*//*@SWIG:/usr/local/share/swig/2.0.1/typemaps/factory.swg,72,%_factory_dispatch@*/ 
    if (!dcast) {
      OpenMM::CustomAngleForce *dobj = dynamic_cast<OpenMM::CustomAngleForce *>(result);
      if (dobj) {
        dcast = 1;
        resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(dobj),SWIGTYPE_p_OpenMM__CustomAngleForce, 0 |  0 );
      }   
    }/*@SWIG@*/
    
    /*@SWIG:/usr/local/share/swig/2.0.1/typemaps/swigmacros.swg,192,%_formacro_1@*//*@SWIG:/usr/local/share/swig/2.0.1/typemaps/factory.swg,72,%_factory_dispatch@*/ 
    if (!dcast) {
      OpenMM::CustomBondForce *dobj = dynamic_cast<OpenMM::CustomBondForce *>(result);
      if (dobj) {
        dcast = 1;
        resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(dobj),SWIGTYPE_p_OpenMM__CustomBondForce, 0 |  0 );
      }   
    }/*@SWIG@*/
    
    /*@SWIG:/usr/local/share/swig/2.0.1/typemaps/swigmacros.swg,192,%_formacro_1@*//*@SWIG:/usr/local/share/swig/2.0.1/typemaps/factory.swg,72,%_factory_dispatch@*/ 
    if (!dcast) {
      OpenMM::CustomExternalForce *dobj = dynamic_cast<OpenMM::CustomExternalForce *>(result);
      if (dobj) {
        dcast = 1;
        resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(dobj),SWIGTYPE_p_OpenMM__CustomExternalForce, 0 |  0 );
      }   
    }/*@SWIG@*/
    
    /*@SWIG:/usr/local/share/swig/2.0.1/typemaps/swigmacros.swg,192,%_formacro_1@*//*@SWIG:/usr/local/share/swig/2.0.1/typemaps/factory.swg,72,%_factory_dispatch@*/ 
    if (!dcast) {
      OpenMM::CustomGBForce *dobj = dynamic_cast<OpenMM::CustomGBForce *>(result);
      if (dobj) {
        dcast = 1;
        resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(dobj),SWIGTYPE_p_OpenMM__CustomGBForce, 0 |  0 );
      }   
    }/*@SWIG@*/
    
    /*@SWIG:/usr/local/share/swig/2.0.1/typemaps/swigmacros.swg,192,%_formacro_1@*//*@SWIG:/usr/local/share/swig/2.0.1/typemaps/factory.swg,72,%_factory_dispatch@*/ 
    if (!dcast) {
      OpenMM::CustomHbondForce *dobj = dynamic_cast<OpenMM::CustomHbondForce *>(result);
      if (dobj) {
        dcast = 1;
        resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(dobj),SWIGTYPE_p_OpenMM__CustomHbondForce, 0 |  0 );
      }   
    }/*@SWIG@*/
    
    /*@SWIG:/usr/local/share/swig/2.0.1/typemaps/swigmacros.swg,192,%_formacro_1@*//*@SWIG:/usr/local/share/swig/2.0.1/typemaps/factory.swg,72,%_factory_dispatch@*/ 
    if (!dcast) {
      OpenMM::CustomNonbondedForce *dobj = dynamic_cast<OpenMM::CustomNonbondedForce *>(result);
      if (dobj) {
        dcast = 1;
        resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(dobj),SWIGTYPE_p_OpenMM__CustomNonbondedForce, 0 |  0 );
      }   
    }/*@SWIG@*/
    
    /*@SWIG:/usr/local/share/swig/2.0.1/typemaps/swigmacros.swg,192,%_formacro_1@*//*@SWIG:/usr/local/share/swig/2.0.1/typemaps/factory.swg,72,%_factory_dispatch@*/ 
    if (!dcast) {
      OpenMM::CustomTorsionForce *dobj = dynamic_cast<OpenMM::CustomTorsionForce *>(result);
      if (dobj) {
        dcast = 1;
        resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(dobj),SWIGTYPE_p_OpenMM__CustomTorsionForce, 0 |  0 );
      }   
    }/*@SWIG@*/
    
    /*@SWIG:/usr/local/share/swig/2.0.1/typemaps/swigmacros.swg,192,%_formacro_1@*//*@SWIG:/usr/local/share/swig/2.0.1/typemaps/factory.swg,72,%_factory_dispatch@*/ 
    if (!dcast) {
      OpenMM::GBSAOBCForce *dobj = dynamic_cast<OpenMM::GBSAOBCForce *>(result);
      if (dobj) {
        dcast = 1;
        resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(dobj),SWIGTYPE_p_OpenMM__GBSAOBCForce, 0 |  0 );
      }   
    }/*@SWIG@*/
    
    /*@SWIG:/usr/local/share/swig/2.0.1/typemaps/swigmacros.swg,192,%_formacro_1@*//*@SWIG:/usr/local/share/swig/2.0.1/typemaps/factory.swg,72,%_factory_dispatch@*/ 
    if (!dcast) {
      OpenMM::GBSAOBCSoftcoreForce *dobj = dynamic_cast<OpenMM::GBSAOBCSoftcoreForce *>(result);
      if (dobj) {
        dcast = 1;
        resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(dobj),SWIGTYPE_p_OpenMM__GBSAOBCSoftcoreForce, 0 |  0 );
      }   
    }/*@SWIG@*/
    
    /*@SWIG:/usr/local/share/swig/2.0.1/typemaps/swigmacros.swg,192,%_formacro_1@*//*@SWIG:/usr/local/share/swig/2.0.1/typemaps/factory.swg,72,%_factory_dispatch@*/ 
    if (!dcast) {
      OpenMM::GBVIForce *dobj = dynamic_cast<OpenMM::GBVIForce *>(result);
      if (dobj) {
        dcast = 1;
        resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(dobj),SWIGTYPE_p_OpenMM__GBVIForce, 0 |  0 );
      }   
    }/*@SWIG@*/
    
    /*@SWIG:/usr/local/share/swig/2.0.1/typemaps/swigmacros.swg,192,%_formacro_1@*//*@SWIG:/usr/local/share/swig/2.0.1/typemaps/factory.swg,72,%_factory_dispatch@*/ 
    if (!dcast) {
      OpenMM::GBVISoftcoreForce *dobj = dynamic_cast<OpenMM::GBVISoftcoreForce *>(result);
      if (dobj) {
        dcast = 1;
        resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(dobj),SWIGTYPE_p_OpenMM__GBVISoftcoreForce, 0 |  0 );
      }   
    }/*@SWIG@*/
    
    /*@SWIG:/usr/local/share/swig/2.0.1/typemaps/swigmacros.swg,192,%_formacro_1@*//*@SWIG:/usr/local/share/swig/2.0.1/typemaps/factory.swg,72,%_factory_dispatch@*/ 
    if (!dcast) {
      OpenMM::HarmonicAngleForce *dobj = dynamic_cast<OpenMM::HarmonicAngleForce *>(result);
      if (dobj) {
        dcast = 1;
        resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(dobj),SWIGTYPE_p_OpenMM__HarmonicAngleForce, 0 |  0 );
      }   
    }/*@SWIG@*/
    
    /*@SWIG:/usr/local/share/swig/2.0.1/typemaps/swigmacros.swg,192,%_formacro_1@*//*@SWIG:/usr/local/share/swig/2.0.1/typemaps/factory.swg,72,%_factory_dispatch@*/ 
    if (!dcast) {
      OpenMM::HarmonicBondForce *dobj = dynamic_cast<OpenMM::HarmonicBondForce *>(result);
      if (dobj) {
        dcast = 1;
        resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(dobj),SWIGTYPE_p_OpenMM__HarmonicBondForce, 0 |  0 );
      }   
    }/*@SWIG@*/
    
    /*@SWIG:/usr/local/share/swig/2.0.1/typemaps/swigmacros.swg,192,%_formacro_1@*//*@SWIG:/usr/local/share/swig/2.0.1/typemaps/factory.swg,72,%_factory_dispatch@*/ 
    if (!dcast) {
      OpenMM::MonteCarloBarostat *dobj = dynamic_cast<OpenMM::MonteCarloBarostat *>(result);
      if (dobj) {
        dcast = 1;
        resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(dobj),SWIGTYPE_p_OpenMM__MonteCarloBarostat, 0 |  0 );
      }   
    }/*@SWIG@*/
    
    /*@SWIG:/usr/local/share/swig/2.0.1/typemaps/swigmacros.swg,192,%_formacro_1@*//*@SWIG:/usr/local/share/swig/2.0.1/typemaps/factory.swg,72,%_factory_dispatch@*/ 
    if (!dcast) {
      OpenMM::NonbondedForce *dobj = dynamic_cast<OpenMM::NonbondedForce *>(result);
      if (dobj) {
        dcast = 1;
        resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(dobj),SWIGTYPE_p_OpenMM__NonbondedForce, 0 |  0 );
      }   
    }/*@SWIG@*/
    
    /*@SWIG:/usr/local/share/swig/2.0.1/typemaps/swigmacros.swg,192,%_formacro_1@*//*@SWIG:/usr/local/share/swig/2.0.1/typemaps/factory.swg,72,%_factory_dispatch@*/ 
    if (!dcast) {
      OpenMM::NonbondedSoftcoreForce *dobj = dynamic_cast<OpenMM::NonbondedSoftcoreForce *>(result);
      if (dobj) {
        dcast = 1;
        resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(dobj),SWIGTYPE_p_OpenMM__NonbondedSoftcoreForce, 0 |  0 );
      }   
    }/*@SWIG@*/
    
    /*@SWIG:/usr/local/share/swig/2.0.1/typemaps/swigmacros.swg,192,%_formacro_1@*//*@SWIG:/usr/local/share/swig/2.0.1/typemaps/factory.swg,72,%_factory_dispatch@*/ 
    if (!dcast) {
      OpenMM::PeriodicTorsionForce *dobj = dynamic_cast<OpenMM::PeriodicTorsionForce *>(result);
      if (dobj) {
        dcast = 1;
        resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(dobj),SWIGTYPE_p_OpenMM__PeriodicTorsionForce, 0 |  0 );
      }   
    }/*@SWIG@*/
    
    /*@SWIG:/usr/local/share/swig/2.0.1/typemaps/swigmacros.swg,192,%_formacro_1@*//*@SWIG:/usr/local/share/swig/2.0.1/typemaps/factory.swg,72,%_factory_dispatch@*/ 
    if (!dcast) {
      OpenMM::RBTorsionForce *dobj = dynamic_cast<OpenMM::RBTorsionForce *>(result);
      if (dobj) {
        dcast = 1;
        resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(dobj),SWIGTYPE_p_OpenMM__RBTorsionForce, 0 |  0 );
      }   
    }/*@SWIG@*/
    
    
    
    /*@SWIG@*/
    
    /*@SWIG@*/
    
    /*@SWIG@*/
    
    /*@SWIG@*/
    
    /*@SWIG@*/
    
    /*@SWIG@*/
    
    /*@SWIG@*/
    
    /*@SWIG@*/
    
    /*@SWIG@*/
    
    /*@SWIG@*/
    
    /*@SWIG@*/
    
    /*@SWIG@*/
    
    /*@SWIG@*/
    
    /*@SWIG@*/
    
    /*@SWIG@*/
    
    /*@SWIG@*/
    
    /*@SWIG@*/
    
    /*@SWIG@*/
    
    /*@SWIG@*/
    
    /*@SWIG@*/
    
    /*@SWIG@*/
    
    /*@SWIG@*/
    
    /*@SWIG@*/
    
    /*@SWIG@*/
    
    /*@SWIG@*/
    
    /*@SWIG@*/
    
    /*@SWIG@*/
    
    /*@SWIG@*/
    
    /*@SWIG@*/
    
    /*@SWIG@*/
    
    /*@SWIG@*/
    
    /*@SWIG@*/
    
    /*@SWIG@*/
    
    /*@SWIG@*//*@SWIG@*/
    if (!dcast) {
      resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result),SWIGTYPE_p_OpenMM__Force, 0 |  0 );
    }
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_System_getForce(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_OpenMM__System, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_System_getForce__SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_OpenMM__System, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_System_getForce__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'System_getForce'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    getForce(OpenMM::System const *,int)\n"
    "    getForce(OpenMM::System *,int)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_System_getDefaultPeriodicBoxVectors(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::System *arg1 = (OpenMM::System *) 0 ;
  Vec3 *arg2 = 0 ;
  Vec3 *arg3 = 0 ;
  Vec3 *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Vec3 tempA2 ;
  Vec3 tempB2 ;
  Vec3 tempC2 ;
  PyObject * obj0 = 0 ;
  
  {
    arg2 = &tempA2;
    arg3 = &tempB2;
    arg4 = &tempC2;
  }
  if (!PyArg_ParseTuple(args,(char *)"O:System_getDefaultPeriodicBoxVectors",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__System, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "System_getDefaultPeriodicBoxVectors" "', argument " "1"" of type '" "OpenMM::System const *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::System * >(argp1);
  {
    try {
      ((OpenMM::System const *)arg1)->getDefaultPeriodicBoxVectors(*arg2,*arg3,*arg4);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  {
    // %typemap(argout) (Vec3& a, Vec3& b, Vec3& c)
    PyObject* mm = PyImport_AddModule("simtk.openmm");
    PyObject* vec3 = PyObject_GetAttrString(mm, "Vec3");
    PyObject* args1 = Py_BuildValue("(d,d,d)", (*arg2)[0], (*arg2)[1], (*arg2)[2]);
    PyObject* args2 = Py_BuildValue("(d,d,d)", (*arg3)[0], (*arg3)[1], (*arg3)[2]);
    PyObject* args3 = Py_BuildValue("(d,d,d)", (*arg4)[0], (*arg4)[1], (*arg4)[2]);
    PyObject* pyVec1 = PyObject_CallObject(vec3, args1);
    PyObject* pyVec2 = PyObject_CallObject(vec3, args2);
    PyObject* pyVec3 = PyObject_CallObject(vec3, args3);
    Py_DECREF(args1);
    Py_DECREF(args2);
    Py_DECREF(args3);
    PyObject *o, *o2, *o3;
    o = Py_BuildValue("[N, N, N]", pyVec1, pyVec2, pyVec3);
    if ((!resultobj) || (resultobj == Py_None)) {
      resultobj = o;
    } else {
      if (!PyTuple_Check(resultobj)) {
        PyObject *o2 = resultobj;
        resultobj = PyTuple_New(1);
        PyTuple_SetItem(resultobj, 0, o2);
      }
      o3 = PyTuple_New(1);
      PyTuple_SetItem(o3, 0, o);
      o2 = resultobj;
      resultobj = PySequence_Concat(o2, o3);
      Py_DECREF(o2);
      Py_DECREF(o3);
    }
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_System_setDefaultPeriodicBoxVectors(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::System *arg1 = (OpenMM::System *) 0 ;
  Vec3 *arg2 = 0 ;
  Vec3 *arg3 = 0 ;
  Vec3 *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  OpenMM::Vec3 myVec2 ;
  OpenMM::Vec3 myVec3 ;
  OpenMM::Vec3 myVec4 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:System_setDefaultPeriodicBoxVectors",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__System, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "System_setDefaultPeriodicBoxVectors" "', argument " "1"" of type '" "OpenMM::System *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::System * >(argp1);
  {
    // typemap -- %typemap(in) Vec3
    double x, y, z;
    PyObject *o;
    
    o=PySequence_GetItem(obj1, 0);
    x=PyFloat_AsDouble(o);
    Py_DECREF(o);
    
    o=PySequence_GetItem(obj1, 1);
    y=PyFloat_AsDouble(o);
    Py_DECREF(o);
    
    o=PySequence_GetItem(obj1, 2);
    z=PyFloat_AsDouble(o);
    Py_DECREF(o);
    
    myVec2 = OpenMM::Vec3(x, y, z);
    arg2 = &myVec2;
  }
  {
    // typemap -- %typemap(in) Vec3
    double x, y, z;
    PyObject *o;
    
    o=PySequence_GetItem(obj2, 0);
    x=PyFloat_AsDouble(o);
    Py_DECREF(o);
    
    o=PySequence_GetItem(obj2, 1);
    y=PyFloat_AsDouble(o);
    Py_DECREF(o);
    
    o=PySequence_GetItem(obj2, 2);
    z=PyFloat_AsDouble(o);
    Py_DECREF(o);
    
    myVec3 = OpenMM::Vec3(x, y, z);
    arg3 = &myVec3;
  }
  {
    // typemap -- %typemap(in) Vec3
    double x, y, z;
    PyObject *o;
    
    o=PySequence_GetItem(obj3, 0);
    x=PyFloat_AsDouble(o);
    Py_DECREF(o);
    
    o=PySequence_GetItem(obj3, 1);
    y=PyFloat_AsDouble(o);
    Py_DECREF(o);
    
    o=PySequence_GetItem(obj3, 2);
    z=PyFloat_AsDouble(o);
    Py_DECREF(o);
    
    myVec4 = OpenMM::Vec3(x, y, z);
    arg4 = &myVec4;
  }
  {
    try {
      (arg1)->setDefaultPeriodicBoxVectors((Vec3 const &)*arg2,(Vec3 const &)*arg3,(Vec3 const &)*arg4);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_System__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::System *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  OpenMM::System *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_System",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_OpenMM__System,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_System" "', argument " "1"" of type '" "OpenMM::System const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_System" "', argument " "1"" of type '" "OpenMM::System const &""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::System * >(argp1);
  {
    try {
      result = (OpenMM::System *)new OpenMM::System((OpenMM::System const &)*arg1);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_OpenMM__System, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_System(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 1); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_System__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_OpenMM__System, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_System__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_System'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    OpenMM::System()\n"
    "    OpenMM::System::System(OpenMM::System const &)\n");
  return NULL;
}


SWIGINTERN PyObject *System_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_OpenMM__System, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_ThreeParticleAverageSite__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  int arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  double val6 ;
  int ecode6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  OpenMM::ThreeParticleAverageSite *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:new_ThreeParticleAverageSite",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_ThreeParticleAverageSite" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_ThreeParticleAverageSite" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_ThreeParticleAverageSite" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_ThreeParticleAverageSite" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  ecode5 = SWIG_AsVal_double(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_ThreeParticleAverageSite" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  ecode6 = SWIG_AsVal_double(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "new_ThreeParticleAverageSite" "', argument " "6"" of type '" "double""'");
  } 
  arg6 = static_cast< double >(val6);
  {
    try {
      result = (OpenMM::ThreeParticleAverageSite *)new OpenMM::ThreeParticleAverageSite(arg1,arg2,arg3,arg4,arg5,arg6);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_OpenMM__ThreeParticleAverageSite, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ThreeParticleAverageSite_getWeight(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::ThreeParticleAverageSite *arg1 = (OpenMM::ThreeParticleAverageSite *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ThreeParticleAverageSite_getWeight",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__ThreeParticleAverageSite, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ThreeParticleAverageSite_getWeight" "', argument " "1"" of type '" "OpenMM::ThreeParticleAverageSite const *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::ThreeParticleAverageSite * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ThreeParticleAverageSite_getWeight" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (double)((OpenMM::ThreeParticleAverageSite const *)arg1)->getWeight(arg2);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ThreeParticleAverageSite__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::ThreeParticleAverageSite *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  OpenMM::ThreeParticleAverageSite *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_ThreeParticleAverageSite",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_OpenMM__ThreeParticleAverageSite,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ThreeParticleAverageSite" "', argument " "1"" of type '" "OpenMM::ThreeParticleAverageSite const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ThreeParticleAverageSite" "', argument " "1"" of type '" "OpenMM::ThreeParticleAverageSite const &""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::ThreeParticleAverageSite * >(argp1);
  {
    try {
      result = (OpenMM::ThreeParticleAverageSite *)new OpenMM::ThreeParticleAverageSite((OpenMM::ThreeParticleAverageSite const &)*arg1);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_OpenMM__ThreeParticleAverageSite, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ThreeParticleAverageSite(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[7];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 6); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_OpenMM__ThreeParticleAverageSite, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_ThreeParticleAverageSite__SWIG_1(self, args);
    }
  }
  if (argc == 6) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_double(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_double(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                return _wrap_new_ThreeParticleAverageSite__SWIG_0(self, args);
              }
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_ThreeParticleAverageSite'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    OpenMM::ThreeParticleAverageSite(int,int,int,double,double,double)\n"
    "    OpenMM::ThreeParticleAverageSite::ThreeParticleAverageSite(OpenMM::ThreeParticleAverageSite const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ThreeParticleAverageSite(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::ThreeParticleAverageSite *arg1 = (OpenMM::ThreeParticleAverageSite *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_ThreeParticleAverageSite",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__ThreeParticleAverageSite, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ThreeParticleAverageSite" "', argument " "1"" of type '" "OpenMM::ThreeParticleAverageSite *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::ThreeParticleAverageSite * >(argp1);
  {
    try {
      delete arg1;
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ThreeParticleAverageSite_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_OpenMM__ThreeParticleAverageSite, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_TwoParticleAverageSite__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  double arg3 ;
  double arg4 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  OpenMM::TwoParticleAverageSite *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:new_TwoParticleAverageSite",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_TwoParticleAverageSite" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_TwoParticleAverageSite" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_TwoParticleAverageSite" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_TwoParticleAverageSite" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  {
    try {
      result = (OpenMM::TwoParticleAverageSite *)new OpenMM::TwoParticleAverageSite(arg1,arg2,arg3,arg4);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_OpenMM__TwoParticleAverageSite, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TwoParticleAverageSite_getWeight(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::TwoParticleAverageSite *arg1 = (OpenMM::TwoParticleAverageSite *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TwoParticleAverageSite_getWeight",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__TwoParticleAverageSite, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TwoParticleAverageSite_getWeight" "', argument " "1"" of type '" "OpenMM::TwoParticleAverageSite const *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::TwoParticleAverageSite * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TwoParticleAverageSite_getWeight" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (double)((OpenMM::TwoParticleAverageSite const *)arg1)->getWeight(arg2);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_TwoParticleAverageSite__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::TwoParticleAverageSite *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  OpenMM::TwoParticleAverageSite *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_TwoParticleAverageSite",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_OpenMM__TwoParticleAverageSite,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_TwoParticleAverageSite" "', argument " "1"" of type '" "OpenMM::TwoParticleAverageSite const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_TwoParticleAverageSite" "', argument " "1"" of type '" "OpenMM::TwoParticleAverageSite const &""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::TwoParticleAverageSite * >(argp1);
  {
    try {
      result = (OpenMM::TwoParticleAverageSite *)new OpenMM::TwoParticleAverageSite((OpenMM::TwoParticleAverageSite const &)*arg1);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_OpenMM__TwoParticleAverageSite, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_TwoParticleAverageSite(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 4); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_OpenMM__TwoParticleAverageSite, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_TwoParticleAverageSite__SWIG_1(self, args);
    }
  }
  if (argc == 4) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_new_TwoParticleAverageSite__SWIG_0(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_TwoParticleAverageSite'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    OpenMM::TwoParticleAverageSite(int,int,double,double)\n"
    "    OpenMM::TwoParticleAverageSite::TwoParticleAverageSite(OpenMM::TwoParticleAverageSite const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_TwoParticleAverageSite(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::TwoParticleAverageSite *arg1 = (OpenMM::TwoParticleAverageSite *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_TwoParticleAverageSite",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__TwoParticleAverageSite, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_TwoParticleAverageSite" "', argument " "1"" of type '" "OpenMM::TwoParticleAverageSite *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::TwoParticleAverageSite * >(argp1);
  {
    try {
      delete arg1;
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *TwoParticleAverageSite_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_OpenMM__TwoParticleAverageSite, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_VariableLangevinIntegrator__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  OpenMM::VariableLangevinIntegrator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_VariableLangevinIntegrator",&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_VariableLangevinIntegrator" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_VariableLangevinIntegrator" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_VariableLangevinIntegrator" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      result = (OpenMM::VariableLangevinIntegrator *)new OpenMM::VariableLangevinIntegrator(arg1,arg2,arg3);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_OpenMM__VariableLangevinIntegrator, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VariableLangevinIntegrator_getTemperature(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::VariableLangevinIntegrator *arg1 = (OpenMM::VariableLangevinIntegrator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VariableLangevinIntegrator_getTemperature",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__VariableLangevinIntegrator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VariableLangevinIntegrator_getTemperature" "', argument " "1"" of type '" "OpenMM::VariableLangevinIntegrator const *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::VariableLangevinIntegrator * >(argp1);
  {
    try {
      result = (double)((OpenMM::VariableLangevinIntegrator const *)arg1)->getTemperature();
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VariableLangevinIntegrator_setTemperature(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::VariableLangevinIntegrator *arg1 = (OpenMM::VariableLangevinIntegrator *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VariableLangevinIntegrator_setTemperature",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__VariableLangevinIntegrator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VariableLangevinIntegrator_setTemperature" "', argument " "1"" of type '" "OpenMM::VariableLangevinIntegrator *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::VariableLangevinIntegrator * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VariableLangevinIntegrator_setTemperature" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->setTemperature(arg2);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VariableLangevinIntegrator_getFriction(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::VariableLangevinIntegrator *arg1 = (OpenMM::VariableLangevinIntegrator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VariableLangevinIntegrator_getFriction",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__VariableLangevinIntegrator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VariableLangevinIntegrator_getFriction" "', argument " "1"" of type '" "OpenMM::VariableLangevinIntegrator const *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::VariableLangevinIntegrator * >(argp1);
  {
    try {
      result = (double)((OpenMM::VariableLangevinIntegrator const *)arg1)->getFriction();
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VariableLangevinIntegrator_setFriction(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::VariableLangevinIntegrator *arg1 = (OpenMM::VariableLangevinIntegrator *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VariableLangevinIntegrator_setFriction",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__VariableLangevinIntegrator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VariableLangevinIntegrator_setFriction" "', argument " "1"" of type '" "OpenMM::VariableLangevinIntegrator *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::VariableLangevinIntegrator * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VariableLangevinIntegrator_setFriction" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->setFriction(arg2);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VariableLangevinIntegrator_getErrorTolerance(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::VariableLangevinIntegrator *arg1 = (OpenMM::VariableLangevinIntegrator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VariableLangevinIntegrator_getErrorTolerance",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__VariableLangevinIntegrator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VariableLangevinIntegrator_getErrorTolerance" "', argument " "1"" of type '" "OpenMM::VariableLangevinIntegrator const *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::VariableLangevinIntegrator * >(argp1);
  {
    try {
      result = (double)((OpenMM::VariableLangevinIntegrator const *)arg1)->getErrorTolerance();
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VariableLangevinIntegrator_setErrorTolerance(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::VariableLangevinIntegrator *arg1 = (OpenMM::VariableLangevinIntegrator *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VariableLangevinIntegrator_setErrorTolerance",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__VariableLangevinIntegrator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VariableLangevinIntegrator_setErrorTolerance" "', argument " "1"" of type '" "OpenMM::VariableLangevinIntegrator *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::VariableLangevinIntegrator * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VariableLangevinIntegrator_setErrorTolerance" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->setErrorTolerance(arg2);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VariableLangevinIntegrator_getRandomNumberSeed(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::VariableLangevinIntegrator *arg1 = (OpenMM::VariableLangevinIntegrator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VariableLangevinIntegrator_getRandomNumberSeed",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__VariableLangevinIntegrator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VariableLangevinIntegrator_getRandomNumberSeed" "', argument " "1"" of type '" "OpenMM::VariableLangevinIntegrator const *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::VariableLangevinIntegrator * >(argp1);
  {
    try {
      result = (int)((OpenMM::VariableLangevinIntegrator const *)arg1)->getRandomNumberSeed();
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VariableLangevinIntegrator_setRandomNumberSeed(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::VariableLangevinIntegrator *arg1 = (OpenMM::VariableLangevinIntegrator *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VariableLangevinIntegrator_setRandomNumberSeed",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__VariableLangevinIntegrator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VariableLangevinIntegrator_setRandomNumberSeed" "', argument " "1"" of type '" "OpenMM::VariableLangevinIntegrator *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::VariableLangevinIntegrator * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VariableLangevinIntegrator_setRandomNumberSeed" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      (arg1)->setRandomNumberSeed(arg2);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VariableLangevinIntegrator_step(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::VariableLangevinIntegrator *arg1 = (OpenMM::VariableLangevinIntegrator *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VariableLangevinIntegrator_step",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__VariableLangevinIntegrator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VariableLangevinIntegrator_step" "', argument " "1"" of type '" "OpenMM::VariableLangevinIntegrator *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::VariableLangevinIntegrator * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VariableLangevinIntegrator_step" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      (arg1)->step(arg2);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VariableLangevinIntegrator_stepTo(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::VariableLangevinIntegrator *arg1 = (OpenMM::VariableLangevinIntegrator *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VariableLangevinIntegrator_stepTo",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__VariableLangevinIntegrator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VariableLangevinIntegrator_stepTo" "', argument " "1"" of type '" "OpenMM::VariableLangevinIntegrator *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::VariableLangevinIntegrator * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VariableLangevinIntegrator_stepTo" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->stepTo(arg2);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_VariableLangevinIntegrator__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::VariableLangevinIntegrator *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  OpenMM::VariableLangevinIntegrator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_VariableLangevinIntegrator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_OpenMM__VariableLangevinIntegrator,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_VariableLangevinIntegrator" "', argument " "1"" of type '" "OpenMM::VariableLangevinIntegrator const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_VariableLangevinIntegrator" "', argument " "1"" of type '" "OpenMM::VariableLangevinIntegrator const &""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::VariableLangevinIntegrator * >(argp1);
  {
    try {
      result = (OpenMM::VariableLangevinIntegrator *)new OpenMM::VariableLangevinIntegrator((OpenMM::VariableLangevinIntegrator const &)*arg1);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_OpenMM__VariableLangevinIntegrator, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_VariableLangevinIntegrator(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_OpenMM__VariableLangevinIntegrator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_VariableLangevinIntegrator__SWIG_1(self, args);
    }
  }
  if (argc == 3) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_VariableLangevinIntegrator__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_VariableLangevinIntegrator'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    OpenMM::VariableLangevinIntegrator(double,double,double)\n"
    "    OpenMM::VariableLangevinIntegrator::VariableLangevinIntegrator(OpenMM::VariableLangevinIntegrator const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_VariableLangevinIntegrator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::VariableLangevinIntegrator *arg1 = (OpenMM::VariableLangevinIntegrator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_VariableLangevinIntegrator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__VariableLangevinIntegrator, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_VariableLangevinIntegrator" "', argument " "1"" of type '" "OpenMM::VariableLangevinIntegrator *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::VariableLangevinIntegrator * >(argp1);
  {
    try {
      delete arg1;
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *VariableLangevinIntegrator_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_OpenMM__VariableLangevinIntegrator, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_VariableVerletIntegrator__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  OpenMM::VariableVerletIntegrator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_VariableVerletIntegrator",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_VariableVerletIntegrator" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  {
    try {
      result = (OpenMM::VariableVerletIntegrator *)new OpenMM::VariableVerletIntegrator(arg1);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_OpenMM__VariableVerletIntegrator, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VariableVerletIntegrator_getErrorTolerance(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::VariableVerletIntegrator *arg1 = (OpenMM::VariableVerletIntegrator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VariableVerletIntegrator_getErrorTolerance",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__VariableVerletIntegrator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VariableVerletIntegrator_getErrorTolerance" "', argument " "1"" of type '" "OpenMM::VariableVerletIntegrator const *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::VariableVerletIntegrator * >(argp1);
  {
    try {
      result = (double)((OpenMM::VariableVerletIntegrator const *)arg1)->getErrorTolerance();
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VariableVerletIntegrator_setErrorTolerance(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::VariableVerletIntegrator *arg1 = (OpenMM::VariableVerletIntegrator *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VariableVerletIntegrator_setErrorTolerance",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__VariableVerletIntegrator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VariableVerletIntegrator_setErrorTolerance" "', argument " "1"" of type '" "OpenMM::VariableVerletIntegrator *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::VariableVerletIntegrator * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VariableVerletIntegrator_setErrorTolerance" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->setErrorTolerance(arg2);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VariableVerletIntegrator_step(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::VariableVerletIntegrator *arg1 = (OpenMM::VariableVerletIntegrator *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VariableVerletIntegrator_step",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__VariableVerletIntegrator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VariableVerletIntegrator_step" "', argument " "1"" of type '" "OpenMM::VariableVerletIntegrator *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::VariableVerletIntegrator * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VariableVerletIntegrator_step" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      (arg1)->step(arg2);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VariableVerletIntegrator_stepTo(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::VariableVerletIntegrator *arg1 = (OpenMM::VariableVerletIntegrator *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VariableVerletIntegrator_stepTo",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__VariableVerletIntegrator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VariableVerletIntegrator_stepTo" "', argument " "1"" of type '" "OpenMM::VariableVerletIntegrator *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::VariableVerletIntegrator * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VariableVerletIntegrator_stepTo" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->stepTo(arg2);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_VariableVerletIntegrator__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::VariableVerletIntegrator *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  OpenMM::VariableVerletIntegrator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_VariableVerletIntegrator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_OpenMM__VariableVerletIntegrator,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_VariableVerletIntegrator" "', argument " "1"" of type '" "OpenMM::VariableVerletIntegrator const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_VariableVerletIntegrator" "', argument " "1"" of type '" "OpenMM::VariableVerletIntegrator const &""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::VariableVerletIntegrator * >(argp1);
  {
    try {
      result = (OpenMM::VariableVerletIntegrator *)new OpenMM::VariableVerletIntegrator((OpenMM::VariableVerletIntegrator const &)*arg1);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_OpenMM__VariableVerletIntegrator, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_VariableVerletIntegrator(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 1); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_OpenMM__VariableVerletIntegrator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_VariableVerletIntegrator__SWIG_1(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_VariableVerletIntegrator__SWIG_0(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_VariableVerletIntegrator'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    OpenMM::VariableVerletIntegrator(double)\n"
    "    OpenMM::VariableVerletIntegrator::VariableVerletIntegrator(OpenMM::VariableVerletIntegrator const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_VariableVerletIntegrator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::VariableVerletIntegrator *arg1 = (OpenMM::VariableVerletIntegrator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_VariableVerletIntegrator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__VariableVerletIntegrator, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_VariableVerletIntegrator" "', argument " "1"" of type '" "OpenMM::VariableVerletIntegrator *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::VariableVerletIntegrator * >(argp1);
  {
    try {
      delete arg1;
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *VariableVerletIntegrator_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_OpenMM__VariableVerletIntegrator, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_VerletIntegrator__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  OpenMM::VerletIntegrator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_VerletIntegrator",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_VerletIntegrator" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  {
    try {
      result = (OpenMM::VerletIntegrator *)new OpenMM::VerletIntegrator(arg1);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_OpenMM__VerletIntegrator, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VerletIntegrator_step(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::VerletIntegrator *arg1 = (OpenMM::VerletIntegrator *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VerletIntegrator_step",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__VerletIntegrator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VerletIntegrator_step" "', argument " "1"" of type '" "OpenMM::VerletIntegrator *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::VerletIntegrator * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VerletIntegrator_step" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      (arg1)->step(arg2);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_VerletIntegrator__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::VerletIntegrator *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  OpenMM::VerletIntegrator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_VerletIntegrator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_OpenMM__VerletIntegrator,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_VerletIntegrator" "', argument " "1"" of type '" "OpenMM::VerletIntegrator const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_VerletIntegrator" "', argument " "1"" of type '" "OpenMM::VerletIntegrator const &""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::VerletIntegrator * >(argp1);
  {
    try {
      result = (OpenMM::VerletIntegrator *)new OpenMM::VerletIntegrator((OpenMM::VerletIntegrator const &)*arg1);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_OpenMM__VerletIntegrator, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_VerletIntegrator(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 1); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_OpenMM__VerletIntegrator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_VerletIntegrator__SWIG_1(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_VerletIntegrator__SWIG_0(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_VerletIntegrator'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    OpenMM::VerletIntegrator(double)\n"
    "    OpenMM::VerletIntegrator::VerletIntegrator(OpenMM::VerletIntegrator const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_VerletIntegrator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::VerletIntegrator *arg1 = (OpenMM::VerletIntegrator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_VerletIntegrator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__VerletIntegrator, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_VerletIntegrator" "', argument " "1"" of type '" "OpenMM::VerletIntegrator *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::VerletIntegrator * >(argp1);
  {
    try {
      delete arg1;
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *VerletIntegrator_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_OpenMM__VerletIntegrator, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_XmlSerializer_serializeSystem(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::System *arg1 = (OpenMM::System *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:XmlSerializer_serializeSystem",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__System, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "XmlSerializer_serializeSystem" "', argument " "1"" of type '" "OpenMM::System const *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::System * >(argp1);
  {
    try {
      result = OpenMM_XmlSerializer_serializeSystem((OpenMM::System const *)arg1);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_XmlSerializer_deserializeSystem(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  PyObject * obj0 = 0 ;
  OpenMM::System *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:XmlSerializer_deserializeSystem",&obj0)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(obj0, &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "XmlSerializer_deserializeSystem" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  {
    try {
      result = (OpenMM::System *)OpenMM_XmlSerializer_deserializeSystem((char const *)arg1);
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_OpenMM__System, 0 |  0 );
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_XmlSerializer(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OpenMM::XmlSerializer *arg1 = (OpenMM::XmlSerializer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_XmlSerializer",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OpenMM__XmlSerializer, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_XmlSerializer" "', argument " "1"" of type '" "OpenMM::XmlSerializer *""'"); 
  }
  arg1 = reinterpret_cast< OpenMM::XmlSerializer * >(argp1);
  {
    try {
      delete arg1;
    } catch (std::exception &e) {
      PyErr_SetString(PyExc_Exception, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *XmlSerializer_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_OpenMM__XmlSerializer, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

static PyMethodDef SwigMethods[] = {
	 { (char *)"SWIG_PyInstanceMethod_New", (PyCFunction)SWIG_PyInstanceMethod_New, METH_O, NULL},
	 { (char *)"ios_base_register_callback", _wrap_ios_base_register_callback, METH_VARARGS, NULL},
	 { (char *)"ios_base_flags", _wrap_ios_base_flags, METH_VARARGS, NULL},
	 { (char *)"ios_base_setf", _wrap_ios_base_setf, METH_VARARGS, NULL},
	 { (char *)"ios_base_unsetf", _wrap_ios_base_unsetf, METH_VARARGS, NULL},
	 { (char *)"ios_base_precision", _wrap_ios_base_precision, METH_VARARGS, NULL},
	 { (char *)"ios_base_width", _wrap_ios_base_width, METH_VARARGS, NULL},
	 { (char *)"ios_base_sync_with_stdio", _wrap_ios_base_sync_with_stdio, METH_VARARGS, NULL},
	 { (char *)"ios_base_imbue", _wrap_ios_base_imbue, METH_VARARGS, NULL},
	 { (char *)"ios_base_getloc", _wrap_ios_base_getloc, METH_VARARGS, NULL},
	 { (char *)"ios_base_xalloc", _wrap_ios_base_xalloc, METH_VARARGS, NULL},
	 { (char *)"ios_base_iword", _wrap_ios_base_iword, METH_VARARGS, NULL},
	 { (char *)"ios_base_pword", _wrap_ios_base_pword, METH_VARARGS, NULL},
	 { (char *)"delete_ios_base", _wrap_delete_ios_base, METH_VARARGS, NULL},
	 { (char *)"ios_base_swigregister", ios_base_swigregister, METH_VARARGS, NULL},
	 { (char *)"ios_rdstate", _wrap_ios_rdstate, METH_VARARGS, NULL},
	 { (char *)"ios_clear", _wrap_ios_clear, METH_VARARGS, NULL},
	 { (char *)"ios_setstate", _wrap_ios_setstate, METH_VARARGS, NULL},
	 { (char *)"ios_good", _wrap_ios_good, METH_VARARGS, NULL},
	 { (char *)"ios_eof", _wrap_ios_eof, METH_VARARGS, NULL},
	 { (char *)"ios_fail", _wrap_ios_fail, METH_VARARGS, NULL},
	 { (char *)"ios_bad", _wrap_ios_bad, METH_VARARGS, NULL},
	 { (char *)"ios_exceptions", _wrap_ios_exceptions, METH_VARARGS, NULL},
	 { (char *)"new_ios", _wrap_new_ios, METH_VARARGS, NULL},
	 { (char *)"delete_ios", _wrap_delete_ios, METH_VARARGS, NULL},
	 { (char *)"ios_tie", _wrap_ios_tie, METH_VARARGS, NULL},
	 { (char *)"ios_rdbuf", _wrap_ios_rdbuf, METH_VARARGS, NULL},
	 { (char *)"ios_copyfmt", _wrap_ios_copyfmt, METH_VARARGS, NULL},
	 { (char *)"ios_fill", _wrap_ios_fill, METH_VARARGS, NULL},
	 { (char *)"ios_imbue", _wrap_ios_imbue, METH_VARARGS, NULL},
	 { (char *)"ios_narrow", _wrap_ios_narrow, METH_VARARGS, NULL},
	 { (char *)"ios_widen", _wrap_ios_widen, METH_VARARGS, NULL},
	 { (char *)"ios_swigregister", ios_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_ostream", _wrap_new_ostream, METH_VARARGS, NULL},
	 { (char *)"delete_ostream", _wrap_delete_ostream, METH_VARARGS, NULL},
	 { (char *)"ostream___lshift__", _wrap_ostream___lshift__, METH_VARARGS, NULL},
	 { (char *)"ostream_put", _wrap_ostream_put, METH_VARARGS, NULL},
	 { (char *)"ostream_write", _wrap_ostream_write, METH_VARARGS, NULL},
	 { (char *)"ostream_flush", _wrap_ostream_flush, METH_VARARGS, NULL},
	 { (char *)"ostream_tellp", _wrap_ostream_tellp, METH_VARARGS, NULL},
	 { (char *)"ostream_seekp", _wrap_ostream_seekp, METH_VARARGS, NULL},
	 { (char *)"ostream_swigregister", ostream_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_istream", _wrap_new_istream, METH_VARARGS, NULL},
	 { (char *)"delete_istream", _wrap_delete_istream, METH_VARARGS, NULL},
	 { (char *)"istream___rshift__", _wrap_istream___rshift__, METH_VARARGS, NULL},
	 { (char *)"istream_gcount", _wrap_istream_gcount, METH_VARARGS, NULL},
	 { (char *)"istream_get", _wrap_istream_get, METH_VARARGS, NULL},
	 { (char *)"istream_getline", _wrap_istream_getline, METH_VARARGS, NULL},
	 { (char *)"istream_ignore", _wrap_istream_ignore, METH_VARARGS, NULL},
	 { (char *)"istream_peek", _wrap_istream_peek, METH_VARARGS, NULL},
	 { (char *)"istream_read", _wrap_istream_read, METH_VARARGS, NULL},
	 { (char *)"istream_readsome", _wrap_istream_readsome, METH_VARARGS, NULL},
	 { (char *)"istream_putback", _wrap_istream_putback, METH_VARARGS, NULL},
	 { (char *)"istream_unget", _wrap_istream_unget, METH_VARARGS, NULL},
	 { (char *)"istream_sync", _wrap_istream_sync, METH_VARARGS, NULL},
	 { (char *)"istream_tellg", _wrap_istream_tellg, METH_VARARGS, NULL},
	 { (char *)"istream_seekg", _wrap_istream_seekg, METH_VARARGS, NULL},
	 { (char *)"istream_swigregister", istream_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_iostream", _wrap_new_iostream, METH_VARARGS, NULL},
	 { (char *)"delete_iostream", _wrap_delete_iostream, METH_VARARGS, NULL},
	 { (char *)"iostream_swigregister", iostream_swigregister, METH_VARARGS, NULL},
	 { (char *)"endl", _wrap_endl, METH_VARARGS, (char *)"swig_ptr: endl_cb_ptr"},
	 { (char *)"ends", _wrap_ends, METH_VARARGS, (char *)"swig_ptr: ends_cb_ptr"},
	 { (char *)"flush", _wrap_flush, METH_VARARGS, (char *)"swig_ptr: flush_cb_ptr"},
	 { (char *)"delete_SwigPyIterator", _wrap_delete_SwigPyIterator, METH_VARARGS, NULL},
	 { (char *)"SwigPyIterator_value", _wrap_SwigPyIterator_value, METH_VARARGS, NULL},
	 { (char *)"SwigPyIterator_incr", _wrap_SwigPyIterator_incr, METH_VARARGS, NULL},
	 { (char *)"SwigPyIterator_decr", _wrap_SwigPyIterator_decr, METH_VARARGS, NULL},
	 { (char *)"SwigPyIterator_distance", _wrap_SwigPyIterator_distance, METH_VARARGS, NULL},
	 { (char *)"SwigPyIterator_equal", _wrap_SwigPyIterator_equal, METH_VARARGS, NULL},
	 { (char *)"SwigPyIterator_copy", _wrap_SwigPyIterator_copy, METH_VARARGS, NULL},
	 { (char *)"SwigPyIterator_next", _wrap_SwigPyIterator_next, METH_VARARGS, NULL},
	 { (char *)"SwigPyIterator___next__", _wrap_SwigPyIterator___next__, METH_VARARGS, NULL},
	 { (char *)"SwigPyIterator_previous", _wrap_SwigPyIterator_previous, METH_VARARGS, NULL},
	 { (char *)"SwigPyIterator_advance", _wrap_SwigPyIterator_advance, METH_VARARGS, NULL},
	 { (char *)"SwigPyIterator___eq__", _wrap_SwigPyIterator___eq__, METH_VARARGS, NULL},
	 { (char *)"SwigPyIterator___ne__", _wrap_SwigPyIterator___ne__, METH_VARARGS, NULL},
	 { (char *)"SwigPyIterator___iadd__", _wrap_SwigPyIterator___iadd__, METH_VARARGS, NULL},
	 { (char *)"SwigPyIterator___isub__", _wrap_SwigPyIterator___isub__, METH_VARARGS, NULL},
	 { (char *)"SwigPyIterator___add__", _wrap_SwigPyIterator___add__, METH_VARARGS, NULL},
	 { (char *)"SwigPyIterator___sub__", _wrap_SwigPyIterator___sub__, METH_VARARGS, NULL},
	 { (char *)"SwigPyIterator_swigregister", SwigPyIterator_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_pairii", _wrap_new_pairii, METH_VARARGS, NULL},
	 { (char *)"pairii_first_set", _wrap_pairii_first_set, METH_VARARGS, NULL},
	 { (char *)"pairii_first_get", _wrap_pairii_first_get, METH_VARARGS, NULL},
	 { (char *)"pairii_second_set", _wrap_pairii_second_set, METH_VARARGS, NULL},
	 { (char *)"pairii_second_get", _wrap_pairii_second_get, METH_VARARGS, NULL},
	 { (char *)"delete_pairii", _wrap_delete_pairii, METH_VARARGS, (char *)"delete_pairii(pairii self)"},
	 { (char *)"pairii_swigregister", pairii_swigregister, METH_VARARGS, NULL},
	 { (char *)"vectord_iterator", _wrap_vectord_iterator, METH_VARARGS, NULL},
	 { (char *)"vectord___nonzero__", _wrap_vectord___nonzero__, METH_VARARGS, NULL},
	 { (char *)"vectord___bool__", _wrap_vectord___bool__, METH_VARARGS, NULL},
	 { (char *)"vectord___len__", _wrap_vectord___len__, METH_VARARGS, NULL},
	 { (char *)"vectord_pop", _wrap_vectord_pop, METH_VARARGS, NULL},
	 { (char *)"vectord___getslice__", _wrap_vectord___getslice__, METH_VARARGS, NULL},
	 { (char *)"vectord___setslice__", _wrap_vectord___setslice__, METH_VARARGS, NULL},
	 { (char *)"vectord___delslice__", _wrap_vectord___delslice__, METH_VARARGS, NULL},
	 { (char *)"vectord___delitem__", _wrap_vectord___delitem__, METH_VARARGS, NULL},
	 { (char *)"vectord___getitem__", _wrap_vectord___getitem__, METH_VARARGS, NULL},
	 { (char *)"vectord___setitem__", _wrap_vectord___setitem__, METH_VARARGS, NULL},
	 { (char *)"vectord_append", _wrap_vectord_append, METH_VARARGS, NULL},
	 { (char *)"vectord_empty", _wrap_vectord_empty, METH_VARARGS, NULL},
	 { (char *)"vectord_size", _wrap_vectord_size, METH_VARARGS, NULL},
	 { (char *)"vectord_clear", _wrap_vectord_clear, METH_VARARGS, NULL},
	 { (char *)"vectord_swap", _wrap_vectord_swap, METH_VARARGS, NULL},
	 { (char *)"vectord_get_allocator", _wrap_vectord_get_allocator, METH_VARARGS, NULL},
	 { (char *)"vectord_begin", _wrap_vectord_begin, METH_VARARGS, NULL},
	 { (char *)"vectord_end", _wrap_vectord_end, METH_VARARGS, NULL},
	 { (char *)"vectord_rbegin", _wrap_vectord_rbegin, METH_VARARGS, NULL},
	 { (char *)"vectord_rend", _wrap_vectord_rend, METH_VARARGS, NULL},
	 { (char *)"vectord_pop_back", _wrap_vectord_pop_back, METH_VARARGS, NULL},
	 { (char *)"vectord_erase", _wrap_vectord_erase, METH_VARARGS, NULL},
	 { (char *)"new_vectord", _wrap_new_vectord, METH_VARARGS, NULL},
	 { (char *)"vectord_push_back", _wrap_vectord_push_back, METH_VARARGS, NULL},
	 { (char *)"vectord_front", _wrap_vectord_front, METH_VARARGS, NULL},
	 { (char *)"vectord_back", _wrap_vectord_back, METH_VARARGS, NULL},
	 { (char *)"vectord_assign", _wrap_vectord_assign, METH_VARARGS, NULL},
	 { (char *)"vectord_resize", _wrap_vectord_resize, METH_VARARGS, NULL},
	 { (char *)"vectord_insert", _wrap_vectord_insert, METH_VARARGS, NULL},
	 { (char *)"vectord_reserve", _wrap_vectord_reserve, METH_VARARGS, NULL},
	 { (char *)"vectord_capacity", _wrap_vectord_capacity, METH_VARARGS, NULL},
	 { (char *)"delete_vectord", _wrap_delete_vectord, METH_VARARGS, (char *)"delete_vectord(vectord self)"},
	 { (char *)"vectord_swigregister", vectord_swigregister, METH_VARARGS, NULL},
	 { (char *)"vectorddd_iterator", _wrap_vectorddd_iterator, METH_VARARGS, NULL},
	 { (char *)"vectorddd___nonzero__", _wrap_vectorddd___nonzero__, METH_VARARGS, NULL},
	 { (char *)"vectorddd___bool__", _wrap_vectorddd___bool__, METH_VARARGS, NULL},
	 { (char *)"vectorddd___len__", _wrap_vectorddd___len__, METH_VARARGS, NULL},
	 { (char *)"vectorddd_pop", _wrap_vectorddd_pop, METH_VARARGS, NULL},
	 { (char *)"vectorddd___getslice__", _wrap_vectorddd___getslice__, METH_VARARGS, NULL},
	 { (char *)"vectorddd___setslice__", _wrap_vectorddd___setslice__, METH_VARARGS, NULL},
	 { (char *)"vectorddd___delslice__", _wrap_vectorddd___delslice__, METH_VARARGS, NULL},
	 { (char *)"vectorddd___delitem__", _wrap_vectorddd___delitem__, METH_VARARGS, NULL},
	 { (char *)"vectorddd___getitem__", _wrap_vectorddd___getitem__, METH_VARARGS, NULL},
	 { (char *)"vectorddd___setitem__", _wrap_vectorddd___setitem__, METH_VARARGS, NULL},
	 { (char *)"vectorddd_append", _wrap_vectorddd_append, METH_VARARGS, NULL},
	 { (char *)"vectorddd_empty", _wrap_vectorddd_empty, METH_VARARGS, NULL},
	 { (char *)"vectorddd_size", _wrap_vectorddd_size, METH_VARARGS, NULL},
	 { (char *)"vectorddd_clear", _wrap_vectorddd_clear, METH_VARARGS, NULL},
	 { (char *)"vectorddd_swap", _wrap_vectorddd_swap, METH_VARARGS, NULL},
	 { (char *)"vectorddd_get_allocator", _wrap_vectorddd_get_allocator, METH_VARARGS, NULL},
	 { (char *)"vectorddd_begin", _wrap_vectorddd_begin, METH_VARARGS, NULL},
	 { (char *)"vectorddd_end", _wrap_vectorddd_end, METH_VARARGS, NULL},
	 { (char *)"vectorddd_rbegin", _wrap_vectorddd_rbegin, METH_VARARGS, NULL},
	 { (char *)"vectorddd_rend", _wrap_vectorddd_rend, METH_VARARGS, NULL},
	 { (char *)"vectorddd_pop_back", _wrap_vectorddd_pop_back, METH_VARARGS, NULL},
	 { (char *)"vectorddd_erase", _wrap_vectorddd_erase, METH_VARARGS, NULL},
	 { (char *)"new_vectorddd", _wrap_new_vectorddd, METH_VARARGS, NULL},
	 { (char *)"vectorddd_push_back", _wrap_vectorddd_push_back, METH_VARARGS, NULL},
	 { (char *)"vectorddd_front", _wrap_vectorddd_front, METH_VARARGS, NULL},
	 { (char *)"vectorddd_back", _wrap_vectorddd_back, METH_VARARGS, NULL},
	 { (char *)"vectorddd_assign", _wrap_vectorddd_assign, METH_VARARGS, NULL},
	 { (char *)"vectorddd_resize", _wrap_vectorddd_resize, METH_VARARGS, NULL},
	 { (char *)"vectorddd_insert", _wrap_vectorddd_insert, METH_VARARGS, NULL},
	 { (char *)"vectorddd_reserve", _wrap_vectorddd_reserve, METH_VARARGS, NULL},
	 { (char *)"vectorddd_capacity", _wrap_vectorddd_capacity, METH_VARARGS, NULL},
	 { (char *)"delete_vectorddd", _wrap_delete_vectorddd, METH_VARARGS, (char *)"delete_vectorddd(vectorddd self)"},
	 { (char *)"vectorddd_swigregister", vectorddd_swigregister, METH_VARARGS, NULL},
	 { (char *)"vectori_iterator", _wrap_vectori_iterator, METH_VARARGS, NULL},
	 { (char *)"vectori___nonzero__", _wrap_vectori___nonzero__, METH_VARARGS, NULL},
	 { (char *)"vectori___bool__", _wrap_vectori___bool__, METH_VARARGS, NULL},
	 { (char *)"vectori___len__", _wrap_vectori___len__, METH_VARARGS, NULL},
	 { (char *)"vectori_pop", _wrap_vectori_pop, METH_VARARGS, NULL},
	 { (char *)"vectori___getslice__", _wrap_vectori___getslice__, METH_VARARGS, NULL},
	 { (char *)"vectori___setslice__", _wrap_vectori___setslice__, METH_VARARGS, NULL},
	 { (char *)"vectori___delslice__", _wrap_vectori___delslice__, METH_VARARGS, NULL},
	 { (char *)"vectori___delitem__", _wrap_vectori___delitem__, METH_VARARGS, NULL},
	 { (char *)"vectori___getitem__", _wrap_vectori___getitem__, METH_VARARGS, NULL},
	 { (char *)"vectori___setitem__", _wrap_vectori___setitem__, METH_VARARGS, NULL},
	 { (char *)"vectori_append", _wrap_vectori_append, METH_VARARGS, NULL},
	 { (char *)"vectori_empty", _wrap_vectori_empty, METH_VARARGS, NULL},
	 { (char *)"vectori_size", _wrap_vectori_size, METH_VARARGS, NULL},
	 { (char *)"vectori_clear", _wrap_vectori_clear, METH_VARARGS, NULL},
	 { (char *)"vectori_swap", _wrap_vectori_swap, METH_VARARGS, NULL},
	 { (char *)"vectori_get_allocator", _wrap_vectori_get_allocator, METH_VARARGS, NULL},
	 { (char *)"vectori_begin", _wrap_vectori_begin, METH_VARARGS, NULL},
	 { (char *)"vectori_end", _wrap_vectori_end, METH_VARARGS, NULL},
	 { (char *)"vectori_rbegin", _wrap_vectori_rbegin, METH_VARARGS, NULL},
	 { (char *)"vectori_rend", _wrap_vectori_rend, METH_VARARGS, NULL},
	 { (char *)"vectori_pop_back", _wrap_vectori_pop_back, METH_VARARGS, NULL},
	 { (char *)"vectori_erase", _wrap_vectori_erase, METH_VARARGS, NULL},
	 { (char *)"new_vectori", _wrap_new_vectori, METH_VARARGS, NULL},
	 { (char *)"vectori_push_back", _wrap_vectori_push_back, METH_VARARGS, NULL},
	 { (char *)"vectori_front", _wrap_vectori_front, METH_VARARGS, NULL},
	 { (char *)"vectori_back", _wrap_vectori_back, METH_VARARGS, NULL},
	 { (char *)"vectori_assign", _wrap_vectori_assign, METH_VARARGS, NULL},
	 { (char *)"vectori_resize", _wrap_vectori_resize, METH_VARARGS, NULL},
	 { (char *)"vectori_insert", _wrap_vectori_insert, METH_VARARGS, NULL},
	 { (char *)"vectori_reserve", _wrap_vectori_reserve, METH_VARARGS, NULL},
	 { (char *)"vectori_capacity", _wrap_vectori_capacity, METH_VARARGS, NULL},
	 { (char *)"delete_vectori", _wrap_delete_vectori, METH_VARARGS, (char *)"delete_vectori(vectori self)"},
	 { (char *)"vectori_swigregister", vectori_swigregister, METH_VARARGS, NULL},
	 { (char *)"vectorii_iterator", _wrap_vectorii_iterator, METH_VARARGS, NULL},
	 { (char *)"vectorii___nonzero__", _wrap_vectorii___nonzero__, METH_VARARGS, NULL},
	 { (char *)"vectorii___bool__", _wrap_vectorii___bool__, METH_VARARGS, NULL},
	 { (char *)"vectorii___len__", _wrap_vectorii___len__, METH_VARARGS, NULL},
	 { (char *)"vectorii_pop", _wrap_vectorii_pop, METH_VARARGS, NULL},
	 { (char *)"vectorii___getslice__", _wrap_vectorii___getslice__, METH_VARARGS, NULL},
	 { (char *)"vectorii___setslice__", _wrap_vectorii___setslice__, METH_VARARGS, NULL},
	 { (char *)"vectorii___delslice__", _wrap_vectorii___delslice__, METH_VARARGS, NULL},
	 { (char *)"vectorii___delitem__", _wrap_vectorii___delitem__, METH_VARARGS, NULL},
	 { (char *)"vectorii___getitem__", _wrap_vectorii___getitem__, METH_VARARGS, NULL},
	 { (char *)"vectorii___setitem__", _wrap_vectorii___setitem__, METH_VARARGS, NULL},
	 { (char *)"vectorii_append", _wrap_vectorii_append, METH_VARARGS, NULL},
	 { (char *)"vectorii_empty", _wrap_vectorii_empty, METH_VARARGS, NULL},
	 { (char *)"vectorii_size", _wrap_vectorii_size, METH_VARARGS, NULL},
	 { (char *)"vectorii_clear", _wrap_vectorii_clear, METH_VARARGS, NULL},
	 { (char *)"vectorii_swap", _wrap_vectorii_swap, METH_VARARGS, NULL},
	 { (char *)"vectorii_get_allocator", _wrap_vectorii_get_allocator, METH_VARARGS, NULL},
	 { (char *)"vectorii_begin", _wrap_vectorii_begin, METH_VARARGS, NULL},
	 { (char *)"vectorii_end", _wrap_vectorii_end, METH_VARARGS, NULL},
	 { (char *)"vectorii_rbegin", _wrap_vectorii_rbegin, METH_VARARGS, NULL},
	 { (char *)"vectorii_rend", _wrap_vectorii_rend, METH_VARARGS, NULL},
	 { (char *)"vectorii_pop_back", _wrap_vectorii_pop_back, METH_VARARGS, NULL},
	 { (char *)"vectorii_erase", _wrap_vectorii_erase, METH_VARARGS, NULL},
	 { (char *)"new_vectorii", _wrap_new_vectorii, METH_VARARGS, NULL},
	 { (char *)"vectorii_push_back", _wrap_vectorii_push_back, METH_VARARGS, NULL},
	 { (char *)"vectorii_front", _wrap_vectorii_front, METH_VARARGS, NULL},
	 { (char *)"vectorii_back", _wrap_vectorii_back, METH_VARARGS, NULL},
	 { (char *)"vectorii_assign", _wrap_vectorii_assign, METH_VARARGS, NULL},
	 { (char *)"vectorii_resize", _wrap_vectorii_resize, METH_VARARGS, NULL},
	 { (char *)"vectorii_insert", _wrap_vectorii_insert, METH_VARARGS, NULL},
	 { (char *)"vectorii_reserve", _wrap_vectorii_reserve, METH_VARARGS, NULL},
	 { (char *)"vectorii_capacity", _wrap_vectorii_capacity, METH_VARARGS, NULL},
	 { (char *)"delete_vectorii", _wrap_delete_vectorii, METH_VARARGS, (char *)"delete_vectorii(vectorii self)"},
	 { (char *)"vectorii_swigregister", vectorii_swigregister, METH_VARARGS, NULL},
	 { (char *)"vectorpairii_iterator", _wrap_vectorpairii_iterator, METH_VARARGS, NULL},
	 { (char *)"vectorpairii___nonzero__", _wrap_vectorpairii___nonzero__, METH_VARARGS, NULL},
	 { (char *)"vectorpairii___bool__", _wrap_vectorpairii___bool__, METH_VARARGS, NULL},
	 { (char *)"vectorpairii___len__", _wrap_vectorpairii___len__, METH_VARARGS, NULL},
	 { (char *)"vectorpairii_pop", _wrap_vectorpairii_pop, METH_VARARGS, NULL},
	 { (char *)"vectorpairii___getslice__", _wrap_vectorpairii___getslice__, METH_VARARGS, NULL},
	 { (char *)"vectorpairii___setslice__", _wrap_vectorpairii___setslice__, METH_VARARGS, NULL},
	 { (char *)"vectorpairii___delslice__", _wrap_vectorpairii___delslice__, METH_VARARGS, NULL},
	 { (char *)"vectorpairii___delitem__", _wrap_vectorpairii___delitem__, METH_VARARGS, NULL},
	 { (char *)"vectorpairii___getitem__", _wrap_vectorpairii___getitem__, METH_VARARGS, NULL},
	 { (char *)"vectorpairii___setitem__", _wrap_vectorpairii___setitem__, METH_VARARGS, NULL},
	 { (char *)"vectorpairii_append", _wrap_vectorpairii_append, METH_VARARGS, NULL},
	 { (char *)"vectorpairii_empty", _wrap_vectorpairii_empty, METH_VARARGS, NULL},
	 { (char *)"vectorpairii_size", _wrap_vectorpairii_size, METH_VARARGS, NULL},
	 { (char *)"vectorpairii_clear", _wrap_vectorpairii_clear, METH_VARARGS, NULL},
	 { (char *)"vectorpairii_swap", _wrap_vectorpairii_swap, METH_VARARGS, NULL},
	 { (char *)"vectorpairii_get_allocator", _wrap_vectorpairii_get_allocator, METH_VARARGS, NULL},
	 { (char *)"vectorpairii_begin", _wrap_vectorpairii_begin, METH_VARARGS, NULL},
	 { (char *)"vectorpairii_end", _wrap_vectorpairii_end, METH_VARARGS, NULL},
	 { (char *)"vectorpairii_rbegin", _wrap_vectorpairii_rbegin, METH_VARARGS, NULL},
	 { (char *)"vectorpairii_rend", _wrap_vectorpairii_rend, METH_VARARGS, NULL},
	 { (char *)"vectorpairii_pop_back", _wrap_vectorpairii_pop_back, METH_VARARGS, NULL},
	 { (char *)"vectorpairii_erase", _wrap_vectorpairii_erase, METH_VARARGS, NULL},
	 { (char *)"new_vectorpairii", _wrap_new_vectorpairii, METH_VARARGS, NULL},
	 { (char *)"vectorpairii_push_back", _wrap_vectorpairii_push_back, METH_VARARGS, NULL},
	 { (char *)"vectorpairii_front", _wrap_vectorpairii_front, METH_VARARGS, NULL},
	 { (char *)"vectorpairii_back", _wrap_vectorpairii_back, METH_VARARGS, NULL},
	 { (char *)"vectorpairii_assign", _wrap_vectorpairii_assign, METH_VARARGS, NULL},
	 { (char *)"vectorpairii_resize", _wrap_vectorpairii_resize, METH_VARARGS, NULL},
	 { (char *)"vectorpairii_insert", _wrap_vectorpairii_insert, METH_VARARGS, NULL},
	 { (char *)"vectorpairii_reserve", _wrap_vectorpairii_reserve, METH_VARARGS, NULL},
	 { (char *)"vectorpairii_capacity", _wrap_vectorpairii_capacity, METH_VARARGS, NULL},
	 { (char *)"delete_vectorpairii", _wrap_delete_vectorpairii, METH_VARARGS, (char *)"delete_vectorpairii(vectorpairii self)"},
	 { (char *)"vectorpairii_swigregister", vectorpairii_swigregister, METH_VARARGS, NULL},
	 { (char *)"vectorstring_iterator", _wrap_vectorstring_iterator, METH_VARARGS, NULL},
	 { (char *)"vectorstring___nonzero__", _wrap_vectorstring___nonzero__, METH_VARARGS, NULL},
	 { (char *)"vectorstring___bool__", _wrap_vectorstring___bool__, METH_VARARGS, NULL},
	 { (char *)"vectorstring___len__", _wrap_vectorstring___len__, METH_VARARGS, NULL},
	 { (char *)"vectorstring_pop", _wrap_vectorstring_pop, METH_VARARGS, NULL},
	 { (char *)"vectorstring___getslice__", _wrap_vectorstring___getslice__, METH_VARARGS, NULL},
	 { (char *)"vectorstring___setslice__", _wrap_vectorstring___setslice__, METH_VARARGS, NULL},
	 { (char *)"vectorstring___delslice__", _wrap_vectorstring___delslice__, METH_VARARGS, NULL},
	 { (char *)"vectorstring___delitem__", _wrap_vectorstring___delitem__, METH_VARARGS, NULL},
	 { (char *)"vectorstring___getitem__", _wrap_vectorstring___getitem__, METH_VARARGS, NULL},
	 { (char *)"vectorstring___setitem__", _wrap_vectorstring___setitem__, METH_VARARGS, NULL},
	 { (char *)"vectorstring_append", _wrap_vectorstring_append, METH_VARARGS, NULL},
	 { (char *)"vectorstring_empty", _wrap_vectorstring_empty, METH_VARARGS, NULL},
	 { (char *)"vectorstring_size", _wrap_vectorstring_size, METH_VARARGS, NULL},
	 { (char *)"vectorstring_clear", _wrap_vectorstring_clear, METH_VARARGS, NULL},
	 { (char *)"vectorstring_swap", _wrap_vectorstring_swap, METH_VARARGS, NULL},
	 { (char *)"vectorstring_get_allocator", _wrap_vectorstring_get_allocator, METH_VARARGS, NULL},
	 { (char *)"vectorstring_begin", _wrap_vectorstring_begin, METH_VARARGS, NULL},
	 { (char *)"vectorstring_end", _wrap_vectorstring_end, METH_VARARGS, NULL},
	 { (char *)"vectorstring_rbegin", _wrap_vectorstring_rbegin, METH_VARARGS, NULL},
	 { (char *)"vectorstring_rend", _wrap_vectorstring_rend, METH_VARARGS, NULL},
	 { (char *)"vectorstring_pop_back", _wrap_vectorstring_pop_back, METH_VARARGS, NULL},
	 { (char *)"vectorstring_erase", _wrap_vectorstring_erase, METH_VARARGS, NULL},
	 { (char *)"new_vectorstring", _wrap_new_vectorstring, METH_VARARGS, NULL},
	 { (char *)"vectorstring_push_back", _wrap_vectorstring_push_back, METH_VARARGS, NULL},
	 { (char *)"vectorstring_front", _wrap_vectorstring_front, METH_VARARGS, NULL},
	 { (char *)"vectorstring_back", _wrap_vectorstring_back, METH_VARARGS, NULL},
	 { (char *)"vectorstring_assign", _wrap_vectorstring_assign, METH_VARARGS, NULL},
	 { (char *)"vectorstring_resize", _wrap_vectorstring_resize, METH_VARARGS, NULL},
	 { (char *)"vectorstring_insert", _wrap_vectorstring_insert, METH_VARARGS, NULL},
	 { (char *)"vectorstring_reserve", _wrap_vectorstring_reserve, METH_VARARGS, NULL},
	 { (char *)"vectorstring_capacity", _wrap_vectorstring_capacity, METH_VARARGS, NULL},
	 { (char *)"delete_vectorstring", _wrap_delete_vectorstring, METH_VARARGS, (char *)"delete_vectorstring(vectorstring self)"},
	 { (char *)"vectorstring_swigregister", vectorstring_swigregister, METH_VARARGS, NULL},
	 { (char *)"mapstringstring_iterator", _wrap_mapstringstring_iterator, METH_VARARGS, NULL},
	 { (char *)"mapstringstring___nonzero__", _wrap_mapstringstring___nonzero__, METH_VARARGS, NULL},
	 { (char *)"mapstringstring___bool__", _wrap_mapstringstring___bool__, METH_VARARGS, NULL},
	 { (char *)"mapstringstring___len__", _wrap_mapstringstring___len__, METH_VARARGS, NULL},
	 { (char *)"mapstringstring___getitem__", _wrap_mapstringstring___getitem__, METH_VARARGS, NULL},
	 { (char *)"mapstringstring___delitem__", _wrap_mapstringstring___delitem__, METH_VARARGS, NULL},
	 { (char *)"mapstringstring_has_key", _wrap_mapstringstring_has_key, METH_VARARGS, NULL},
	 { (char *)"mapstringstring_keys", _wrap_mapstringstring_keys, METH_VARARGS, NULL},
	 { (char *)"mapstringstring_values", _wrap_mapstringstring_values, METH_VARARGS, NULL},
	 { (char *)"mapstringstring_items", _wrap_mapstringstring_items, METH_VARARGS, NULL},
	 { (char *)"mapstringstring___contains__", _wrap_mapstringstring___contains__, METH_VARARGS, NULL},
	 { (char *)"mapstringstring_key_iterator", _wrap_mapstringstring_key_iterator, METH_VARARGS, NULL},
	 { (char *)"mapstringstring_value_iterator", _wrap_mapstringstring_value_iterator, METH_VARARGS, NULL},
	 { (char *)"mapstringstring___setitem__", _wrap_mapstringstring___setitem__, METH_VARARGS, NULL},
	 { (char *)"new_mapstringstring", _wrap_new_mapstringstring, METH_VARARGS, NULL},
	 { (char *)"mapstringstring_empty", _wrap_mapstringstring_empty, METH_VARARGS, NULL},
	 { (char *)"mapstringstring_size", _wrap_mapstringstring_size, METH_VARARGS, NULL},
	 { (char *)"mapstringstring_clear", _wrap_mapstringstring_clear, METH_VARARGS, NULL},
	 { (char *)"mapstringstring_swap", _wrap_mapstringstring_swap, METH_VARARGS, NULL},
	 { (char *)"mapstringstring_get_allocator", _wrap_mapstringstring_get_allocator, METH_VARARGS, NULL},
	 { (char *)"mapstringstring_begin", _wrap_mapstringstring_begin, METH_VARARGS, NULL},
	 { (char *)"mapstringstring_end", _wrap_mapstringstring_end, METH_VARARGS, NULL},
	 { (char *)"mapstringstring_rbegin", _wrap_mapstringstring_rbegin, METH_VARARGS, NULL},
	 { (char *)"mapstringstring_rend", _wrap_mapstringstring_rend, METH_VARARGS, NULL},
	 { (char *)"mapstringstring_count", _wrap_mapstringstring_count, METH_VARARGS, NULL},
	 { (char *)"mapstringstring_erase", _wrap_mapstringstring_erase, METH_VARARGS, NULL},
	 { (char *)"mapstringstring_find", _wrap_mapstringstring_find, METH_VARARGS, NULL},
	 { (char *)"mapstringstring_lower_bound", _wrap_mapstringstring_lower_bound, METH_VARARGS, NULL},
	 { (char *)"mapstringstring_upper_bound", _wrap_mapstringstring_upper_bound, METH_VARARGS, NULL},
	 { (char *)"delete_mapstringstring", _wrap_delete_mapstringstring, METH_VARARGS, (char *)"delete_mapstringstring(mapstringstring self)"},
	 { (char *)"mapstringstring_swigregister", mapstringstring_swigregister, METH_VARARGS, NULL},
	 { (char *)"delete_Force", _wrap_delete_Force, METH_VARARGS, (char *)"delete_Force(Force self)"},
	 { (char *)"Force_getForceGroup", _wrap_Force_getForceGroup, METH_VARARGS, (char *)"\n"
		"Force_getForceGroup(Force self) -> int\n"
		"\n"
		"Get the force group this Force belongs to.\n"
		""},
	 { (char *)"Force_setForceGroup", _wrap_Force_setForceGroup, METH_VARARGS, (char *)"\n"
		"Force_setForceGroup(Force self, int group)\n"
		"\n"
		"Set the force group this Force belongs to.\n"
		"   Parameters:\n"
		"    - group the group index. Legal values are between 0 and 31 (inclusive).\n"
		""},
	 { (char *)"Force_swigregister", Force_swigregister, METH_VARARGS, NULL},
	 { (char *)"AmoebaGeneralizedKirkwoodForce_getNumParticles", _wrap_AmoebaGeneralizedKirkwoodForce_getNumParticles, METH_VARARGS, (char *)"\n"
		"AmoebaGeneralizedKirkwoodForce_getNumParticles(AmoebaGeneralizedKirkwoodForce self) -> int\n"
		"\n"
		"Get the number of particles in the system.\n"
		""},
	 { (char *)"AmoebaGeneralizedKirkwoodForce_addParticle", _wrap_AmoebaGeneralizedKirkwoodForce_addParticle, METH_VARARGS, (char *)"\n"
		"AmoebaGeneralizedKirkwoodForce_addParticle(AmoebaGeneralizedKirkwoodForce self, double charge, \n"
		"    double radius, double scalingFactor) -> int\n"
		"\n"
		"Add the parameters for a particle. This should be called once for each particle in the System. When it is called for the i'th time, it specifies the parameters for the i'th particle.\n"
		"   Parameters:\n"
		"    - charge the charge of the particle, measured in units of the proton charge\n"
		"    - radius the GBSA radius of the particle, measured in nm\n"
		"    - scalingFactor the OBC scaling factor for the particle\n"
		""},
	 { (char *)"AmoebaGeneralizedKirkwoodForce_getParticleParameters", _wrap_AmoebaGeneralizedKirkwoodForce_getParticleParameters, METH_VARARGS, (char *)"\n"
		"AmoebaGeneralizedKirkwoodForce_getParticleParameters(AmoebaGeneralizedKirkwoodForce self, int index)\n"
		"\n"
		"Get the force field parameters for a particle.\n"
		"   Parameters:\n"
		"    - index the index of the particle for which to get parameters\n"
		"    - charge the charge of the particle, measured in units of the proton charge\n"
		"    - radius the GBSA radius of the particle, measured in nm\n"
		"    - scalingFactor the OBC scaling factor for the particle\n"
		""},
	 { (char *)"AmoebaGeneralizedKirkwoodForce_setParticleParameters", _wrap_AmoebaGeneralizedKirkwoodForce_setParticleParameters, METH_VARARGS, (char *)"\n"
		"AmoebaGeneralizedKirkwoodForce_setParticleParameters(AmoebaGeneralizedKirkwoodForce self, int index, double charge, \n"
		"    double radius, double scalingFactor)\n"
		"\n"
		"Set the force field parameters for a particle.\n"
		"   Parameters:\n"
		"    - index the index of the particle for which to set parameters\n"
		"    - charge the charge of the particle, measured in units of the proton charge\n"
		"    - radius the GBSA radius of the particle, measured in nm\n"
		"    - scalingFactor the OBC scaling factor for the particle\n"
		""},
	 { (char *)"AmoebaGeneralizedKirkwoodForce_getSolventDielectric", _wrap_AmoebaGeneralizedKirkwoodForce_getSolventDielectric, METH_VARARGS, (char *)"\n"
		"AmoebaGeneralizedKirkwoodForce_getSolventDielectric(AmoebaGeneralizedKirkwoodForce self) -> double\n"
		"\n"
		"Get the dielectric constant for the solvent.\n"
		""},
	 { (char *)"AmoebaGeneralizedKirkwoodForce_setSolventDielectric", _wrap_AmoebaGeneralizedKirkwoodForce_setSolventDielectric, METH_VARARGS, (char *)"\n"
		"AmoebaGeneralizedKirkwoodForce_setSolventDielectric(AmoebaGeneralizedKirkwoodForce self, double dielectric)\n"
		"\n"
		"Set the dielectric constant for the solvent.\n"
		""},
	 { (char *)"AmoebaGeneralizedKirkwoodForce_getSoluteDielectric", _wrap_AmoebaGeneralizedKirkwoodForce_getSoluteDielectric, METH_VARARGS, (char *)"\n"
		"AmoebaGeneralizedKirkwoodForce_getSoluteDielectric(AmoebaGeneralizedKirkwoodForce self) -> double\n"
		"\n"
		"Get the dielectric constant for the solute.\n"
		""},
	 { (char *)"AmoebaGeneralizedKirkwoodForce_setSoluteDielectric", _wrap_AmoebaGeneralizedKirkwoodForce_setSoluteDielectric, METH_VARARGS, (char *)"\n"
		"AmoebaGeneralizedKirkwoodForce_setSoluteDielectric(AmoebaGeneralizedKirkwoodForce self, double dielectric)\n"
		"\n"
		"Set the dielectric constant for the solute.\n"
		""},
	 { (char *)"AmoebaGeneralizedKirkwoodForce_getIncludeCavityTerm", _wrap_AmoebaGeneralizedKirkwoodForce_getIncludeCavityTerm, METH_VARARGS, (char *)"\n"
		"AmoebaGeneralizedKirkwoodForce_getIncludeCavityTerm(AmoebaGeneralizedKirkwoodForce self) -> int\n"
		"\n"
		"Get the dielectric offset (nm) used in OBC Set the dielectric offset (nm) used in OBC Get the flag signalling whether the cavity term should be included\n"
		""},
	 { (char *)"AmoebaGeneralizedKirkwoodForce_setIncludeCavityTerm", _wrap_AmoebaGeneralizedKirkwoodForce_setIncludeCavityTerm, METH_VARARGS, (char *)"\n"
		"AmoebaGeneralizedKirkwoodForce_setIncludeCavityTerm(AmoebaGeneralizedKirkwoodForce self, int includeCavityTerm)\n"
		"\n"
		"Set the flag signalling whether the cavity term should be included\n"
		""},
	 { (char *)"AmoebaGeneralizedKirkwoodForce_getProbeRadius", _wrap_AmoebaGeneralizedKirkwoodForce_getProbeRadius, METH_VARARGS, (char *)"\n"
		"AmoebaGeneralizedKirkwoodForce_getProbeRadius(AmoebaGeneralizedKirkwoodForce self) -> double\n"
		"\n"
		"Get the probe radius (nm) used in SASA contribution\n"
		""},
	 { (char *)"AmoebaGeneralizedKirkwoodForce_setProbeRadius", _wrap_AmoebaGeneralizedKirkwoodForce_setProbeRadius, METH_VARARGS, (char *)"\n"
		"AmoebaGeneralizedKirkwoodForce_setProbeRadius(AmoebaGeneralizedKirkwoodForce self, double probeRadius)\n"
		"\n"
		"Set the probe radius (nm) used in SASA contribution\n"
		""},
	 { (char *)"AmoebaGeneralizedKirkwoodForce_getSurfaceAreaFactor", _wrap_AmoebaGeneralizedKirkwoodForce_getSurfaceAreaFactor, METH_VARARGS, (char *)"\n"
		"AmoebaGeneralizedKirkwoodForce_getSurfaceAreaFactor(AmoebaGeneralizedKirkwoodForce self) -> double\n"
		"\n"
		"Get the surface area factor kJ/(nm*nm) used in SASA contribution\n"
		""},
	 { (char *)"AmoebaGeneralizedKirkwoodForce_setSurfaceAreaFactor", _wrap_AmoebaGeneralizedKirkwoodForce_setSurfaceAreaFactor, METH_VARARGS, (char *)"\n"
		"AmoebaGeneralizedKirkwoodForce_setSurfaceAreaFactor(AmoebaGeneralizedKirkwoodForce self, double surfaceAreaFactor)\n"
		"\n"
		"Set the surface area factor kJ/(nm*nm) used in SASA contribution\n"
		""},
	 { (char *)"new_AmoebaGeneralizedKirkwoodForce", _wrap_new_AmoebaGeneralizedKirkwoodForce, METH_VARARGS, (char *)"\n"
		"AmoebaGeneralizedKirkwoodForce()\n"
		"new_AmoebaGeneralizedKirkwoodForce(AmoebaGeneralizedKirkwoodForce other) -> AmoebaGeneralizedKirkwoodForce\n"
		"\n"
		"This class implements an implicit solvation force using the generalized Kirkwood/OBC model. \n"
		"\n"
		"To use this class, create a AmoebaGeneralizedKirkwoodForce object, then call addParticle() once for each particle in the System to define its parameters. The number of particles for which you define GBSA parameters must be equal to the number of particles in the System, or else an exception will be thrown when you try to create a Context. After a particle has been added, you can modify its force field parameters by calling setParticleParameters().\n"
		""},
	 { (char *)"delete_AmoebaGeneralizedKirkwoodForce", _wrap_delete_AmoebaGeneralizedKirkwoodForce, METH_VARARGS, (char *)"delete_AmoebaGeneralizedKirkwoodForce(AmoebaGeneralizedKirkwoodForce self)"},
	 { (char *)"AmoebaGeneralizedKirkwoodForce_swigregister", AmoebaGeneralizedKirkwoodForce_swigregister, METH_VARARGS, NULL},
	 { (char *)"AmoebaHarmonicAngleForce_getNumAngles", _wrap_AmoebaHarmonicAngleForce_getNumAngles, METH_VARARGS, (char *)"\n"
		"AmoebaHarmonicAngleForce_getNumAngles(AmoebaHarmonicAngleForce self) -> int\n"
		"\n"
		"Get the number of harmonic angle stretch terms in the potential function\n"
		""},
	 { (char *)"AmoebaHarmonicAngleForce_setAmoebaGlobalHarmonicAngleCubic", _wrap_AmoebaHarmonicAngleForce_setAmoebaGlobalHarmonicAngleCubic, METH_VARARGS, (char *)"\n"
		"AmoebaHarmonicAngleForce_setAmoebaGlobalHarmonicAngleCubic(AmoebaHarmonicAngleForce self, double cubicK)\n"
		"\n"
		"Set the global cubic term\n"
		"   Parameters:\n"
		"    - cubicK the cubic harmonic force constant for the angle\n"
		""},
	 { (char *)"AmoebaHarmonicAngleForce_getAmoebaGlobalHarmonicAngleCubic", _wrap_AmoebaHarmonicAngleForce_getAmoebaGlobalHarmonicAngleCubic, METH_VARARGS, (char *)"\n"
		"AmoebaHarmonicAngleForce_getAmoebaGlobalHarmonicAngleCubic(AmoebaHarmonicAngleForce self) -> double\n"
		"\n"
		"Get the global cubic term\n"
		""},
	 { (char *)"AmoebaHarmonicAngleForce_setAmoebaGlobalHarmonicAngleQuartic", _wrap_AmoebaHarmonicAngleForce_setAmoebaGlobalHarmonicAngleQuartic, METH_VARARGS, (char *)"\n"
		"AmoebaHarmonicAngleForce_setAmoebaGlobalHarmonicAngleQuartic(AmoebaHarmonicAngleForce self, double quarticK)\n"
		"\n"
		"Set the global cubic term\n"
		"   Parameters:\n"
		"    - quarticK the quartic harmonic force constant for the angle\n"
		""},
	 { (char *)"AmoebaHarmonicAngleForce_getAmoebaGlobalHarmonicAngleQuartic", _wrap_AmoebaHarmonicAngleForce_getAmoebaGlobalHarmonicAngleQuartic, METH_VARARGS, (char *)"\n"
		"AmoebaHarmonicAngleForce_getAmoebaGlobalHarmonicAngleQuartic(AmoebaHarmonicAngleForce self) -> double\n"
		"\n"
		"Get the global quartic term\n"
		""},
	 { (char *)"AmoebaHarmonicAngleForce_setAmoebaGlobalHarmonicAnglePentic", _wrap_AmoebaHarmonicAngleForce_setAmoebaGlobalHarmonicAnglePentic, METH_VARARGS, (char *)"\n"
		"AmoebaHarmonicAngleForce_setAmoebaGlobalHarmonicAnglePentic(AmoebaHarmonicAngleForce self, double penticK)\n"
		"\n"
		"Set the global pentic term\n"
		"   Parameters:\n"
		"    - penticK the pentic harmonic force constant for the angle\n"
		""},
	 { (char *)"AmoebaHarmonicAngleForce_getAmoebaGlobalHarmonicAnglePentic", _wrap_AmoebaHarmonicAngleForce_getAmoebaGlobalHarmonicAnglePentic, METH_VARARGS, (char *)"\n"
		"AmoebaHarmonicAngleForce_getAmoebaGlobalHarmonicAnglePentic(AmoebaHarmonicAngleForce self) -> double\n"
		"\n"
		"Get the global pentic term\n"
		""},
	 { (char *)"AmoebaHarmonicAngleForce_setAmoebaGlobalHarmonicAngleSextic", _wrap_AmoebaHarmonicAngleForce_setAmoebaGlobalHarmonicAngleSextic, METH_VARARGS, (char *)"\n"
		"AmoebaHarmonicAngleForce_setAmoebaGlobalHarmonicAngleSextic(AmoebaHarmonicAngleForce self, double sexticK)\n"
		"\n"
		"Set the global sextic term\n"
		"   Parameters:\n"
		"    - sexticK the sextic harmonic force constant for the angle\n"
		""},
	 { (char *)"AmoebaHarmonicAngleForce_getAmoebaGlobalHarmonicAngleSextic", _wrap_AmoebaHarmonicAngleForce_getAmoebaGlobalHarmonicAngleSextic, METH_VARARGS, (char *)"\n"
		"AmoebaHarmonicAngleForce_getAmoebaGlobalHarmonicAngleSextic(AmoebaHarmonicAngleForce self) -> double\n"
		"\n"
		"Get the global sextic term\n"
		""},
	 { (char *)"AmoebaHarmonicAngleForce_addAngle", _wrap_AmoebaHarmonicAngleForce_addAngle, METH_VARARGS, (char *)"\n"
		"AmoebaHarmonicAngleForce_addAngle(AmoebaHarmonicAngleForce self, int particle1, int particle2, \n"
		"    int particle3, double length, double quadraticK) -> int\n"
		"\n"
		"Add a angle term to the force field.\n"
		"   Parameters:\n"
		"    - particle1 the index of the first particle connected by the angle\n"
		"    - particle2 the index of the second particle connected by the angle\n"
		"    - particle3 the index of the third particle connected by the angle\n"
		"    - length the angle measured in radians\n"
		"    - quadratic k the quadratic harmonic force constant for the angle, measured in kJ/mol/radian^2\n"
		""},
	 { (char *)"AmoebaHarmonicAngleForce_getAngleParameters", _wrap_AmoebaHarmonicAngleForce_getAngleParameters, METH_VARARGS, (char *)"\n"
		"AmoebaHarmonicAngleForce_getAngleParameters(AmoebaHarmonicAngleForce self, int index)\n"
		"\n"
		"Get the force field parameters for a angle term.\n"
		"   Parameters:\n"
		"    - index the index of the angle for which to get parameters\n"
		"    - particle1 the index of the first particle connected by the angle\n"
		"    - particle2 the index of the second particle connected by the angle\n"
		"    - particle3 the index of the third particle connected by the angle\n"
		"    - length the equilibrium angle, measured in radians\n"
		"    - quadratic k the quadratic harmonic force constant for the angle, measured in kJ/mol/radian^2\n"
		""},
	 { (char *)"AmoebaHarmonicAngleForce_setAngleParameters", _wrap_AmoebaHarmonicAngleForce_setAngleParameters, METH_VARARGS, (char *)"\n"
		"AmoebaHarmonicAngleForce_setAngleParameters(AmoebaHarmonicAngleForce self, int index, int particle1, \n"
		"    int particle2, int particle3, double length, \n"
		"    double quadraticK)\n"
		"\n"
		"Set the force field parameters for a angle term.\n"
		"   Parameters:\n"
		"    - index the index of the angle for which to set parameters\n"
		"    - particle1 the index of the first particle connected by the angle\n"
		"    - particle2 the index of the second particle connected by the angle\n"
		"    - particle3 the index of the third particle connected by the angle\n"
		"    - length the equilibrium angle, measured in radians\n"
		"    - quadratic k the quadratic harmonic force constant for the angle, measured in kJ/mol/radian^2\n"
		""},
	 { (char *)"new_AmoebaHarmonicAngleForce", _wrap_new_AmoebaHarmonicAngleForce, METH_VARARGS, (char *)"\n"
		"AmoebaHarmonicAngleForce()\n"
		"new_AmoebaHarmonicAngleForce(AmoebaHarmonicAngleForce other) -> AmoebaHarmonicAngleForce\n"
		"\n"
		"Create a Amoeba HarmonicAngleForce.\n"
		""},
	 { (char *)"delete_AmoebaHarmonicAngleForce", _wrap_delete_AmoebaHarmonicAngleForce, METH_VARARGS, (char *)"delete_AmoebaHarmonicAngleForce(AmoebaHarmonicAngleForce self)"},
	 { (char *)"AmoebaHarmonicAngleForce_swigregister", AmoebaHarmonicAngleForce_swigregister, METH_VARARGS, NULL},
	 { (char *)"AmoebaHarmonicBondForce_getNumBonds", _wrap_AmoebaHarmonicBondForce_getNumBonds, METH_VARARGS, (char *)"\n"
		"AmoebaHarmonicBondForce_getNumBonds(AmoebaHarmonicBondForce self) -> int\n"
		"\n"
		"Get the number of harmonic bond stretch terms in the potential function\n"
		""},
	 { (char *)"AmoebaHarmonicBondForce_setAmoebaGlobalHarmonicBondCubic", _wrap_AmoebaHarmonicBondForce_setAmoebaGlobalHarmonicBondCubic, METH_VARARGS, (char *)"\n"
		"AmoebaHarmonicBondForce_setAmoebaGlobalHarmonicBondCubic(AmoebaHarmonicBondForce self, double cubicK)\n"
		"\n"
		"Set the global cubic term\n"
		"   Parameters:\n"
		"    - cubicK the cubic harmonic force constant for the bond\n"
		""},
	 { (char *)"AmoebaHarmonicBondForce_getAmoebaGlobalHarmonicBondCubic", _wrap_AmoebaHarmonicBondForce_getAmoebaGlobalHarmonicBondCubic, METH_VARARGS, (char *)"\n"
		"AmoebaHarmonicBondForce_getAmoebaGlobalHarmonicBondCubic(AmoebaHarmonicBondForce self) -> double\n"
		"\n"
		"Get the global cubic term\n"
		""},
	 { (char *)"AmoebaHarmonicBondForce_setAmoebaGlobalHarmonicBondQuartic", _wrap_AmoebaHarmonicBondForce_setAmoebaGlobalHarmonicBondQuartic, METH_VARARGS, (char *)"\n"
		"AmoebaHarmonicBondForce_setAmoebaGlobalHarmonicBondQuartic(AmoebaHarmonicBondForce self, double quarticK)\n"
		"\n"
		"Set the global cubic term\n"
		"   Parameters:\n"
		"    - quarticK the quartic harmonic force constant for the bond\n"
		""},
	 { (char *)"AmoebaHarmonicBondForce_getAmoebaGlobalHarmonicBondQuartic", _wrap_AmoebaHarmonicBondForce_getAmoebaGlobalHarmonicBondQuartic, METH_VARARGS, (char *)"\n"
		"AmoebaHarmonicBondForce_getAmoebaGlobalHarmonicBondQuartic(AmoebaHarmonicBondForce self) -> double\n"
		"\n"
		"Get the global quartic term\n"
		""},
	 { (char *)"AmoebaHarmonicBondForce_addBond", _wrap_AmoebaHarmonicBondForce_addBond, METH_VARARGS, (char *)"\n"
		"AmoebaHarmonicBondForce_addBond(AmoebaHarmonicBondForce self, int particle1, int particle2, \n"
		"    double length, double quadraticK) -> int\n"
		"\n"
		"Add a bond term to the force field.\n"
		"   Parameters:\n"
		"    - particle1 the index of the first particle connected by the bond\n"
		"    - particle2 the index of the second particle connected by the bond\n"
		"    - length the equilibrium length of the bond, measured in nm\n"
		"    - k the quadratic harmonic force constant for the bond\n"
		""},
	 { (char *)"AmoebaHarmonicBondForce_getBondParameters", _wrap_AmoebaHarmonicBondForce_getBondParameters, METH_VARARGS, (char *)"\n"
		"AmoebaHarmonicBondForce_getBondParameters(AmoebaHarmonicBondForce self, int index)\n"
		"\n"
		"Get the force field parameters for a bond term.\n"
		"   Parameters:\n"
		"    - index the index of the bond for which to get parameters\n"
		"    - particle1 the index of the first particle connected by the bond\n"
		"    - particle2 the index of the second particle connected by the bond\n"
		"    - length the equilibrium length of the bond, measured in nm\n"
		"    - quadratic k the quadratic harmonic force constant for the bond\n"
		""},
	 { (char *)"AmoebaHarmonicBondForce_setBondParameters", _wrap_AmoebaHarmonicBondForce_setBondParameters, METH_VARARGS, (char *)"\n"
		"AmoebaHarmonicBondForce_setBondParameters(AmoebaHarmonicBondForce self, int index, int particle1, \n"
		"    int particle2, double length, double quadraticK)\n"
		"\n"
		"Set the force field parameters for a bond term.\n"
		"   Parameters:\n"
		"    - index the index of the bond for which to set parameters\n"
		"    - particle1 the index of the first particle connected by the bond\n"
		"    - particle2 the index of the second particle connected by the bond\n"
		"    - length the equilibrium length of the bond, measured in nm\n"
		"    - k the quadratic harmonic force constant for the bond\n"
		""},
	 { (char *)"new_AmoebaHarmonicBondForce", _wrap_new_AmoebaHarmonicBondForce, METH_VARARGS, (char *)"\n"
		"AmoebaHarmonicBondForce()\n"
		"new_AmoebaHarmonicBondForce(AmoebaHarmonicBondForce other) -> AmoebaHarmonicBondForce\n"
		"\n"
		"Create a Amoeba HarmonicBondForce.\n"
		""},
	 { (char *)"delete_AmoebaHarmonicBondForce", _wrap_delete_AmoebaHarmonicBondForce, METH_VARARGS, (char *)"delete_AmoebaHarmonicBondForce(AmoebaHarmonicBondForce self)"},
	 { (char *)"AmoebaHarmonicBondForce_swigregister", AmoebaHarmonicBondForce_swigregister, METH_VARARGS, NULL},
	 { (char *)"AmoebaHarmonicInPlaneAngleForce_getNumAngles", _wrap_AmoebaHarmonicInPlaneAngleForce_getNumAngles, METH_VARARGS, (char *)"\n"
		"AmoebaHarmonicInPlaneAngleForce_getNumAngles(AmoebaHarmonicInPlaneAngleForce self) -> int\n"
		"\n"
		"Get the number of harmonic angle stretch terms in the potential function\n"
		""},
	 { (char *)"AmoebaHarmonicInPlaneAngleForce_setAmoebaGlobalHarmonicInPlaneAngleCubic", _wrap_AmoebaHarmonicInPlaneAngleForce_setAmoebaGlobalHarmonicInPlaneAngleCubic, METH_VARARGS, (char *)"\n"
		"AmoebaHarmonicInPlaneAngleForce_setAmoebaGlobalHarmonicInPlaneAngleCubic(AmoebaHarmonicInPlaneAngleForce self, double cubicK)\n"
		"\n"
		"Set the global cubic term\n"
		"   Parameters:\n"
		"    - cubicK the cubic harmonic force constant for the angle\n"
		""},
	 { (char *)"AmoebaHarmonicInPlaneAngleForce_getAmoebaGlobalHarmonicInPlaneAngleCubic", _wrap_AmoebaHarmonicInPlaneAngleForce_getAmoebaGlobalHarmonicInPlaneAngleCubic, METH_VARARGS, (char *)"\n"
		"AmoebaHarmonicInPlaneAngleForce_getAmoebaGlobalHarmonicInPlaneAngleCubic(AmoebaHarmonicInPlaneAngleForce self) -> double\n"
		"\n"
		"Get the global cubic term\n"
		""},
	 { (char *)"AmoebaHarmonicInPlaneAngleForce_setAmoebaGlobalHarmonicInPlaneAngleQuartic", _wrap_AmoebaHarmonicInPlaneAngleForce_setAmoebaGlobalHarmonicInPlaneAngleQuartic, METH_VARARGS, (char *)"\n"
		"AmoebaHarmonicInPlaneAngleForce_setAmoebaGlobalHarmonicInPlaneAngleQuartic(AmoebaHarmonicInPlaneAngleForce self, double quarticK)\n"
		"\n"
		"Set the global quartic term\n"
		"   Parameters:\n"
		"    - quarticK the quartic harmonic force constant for the angle\n"
		""},
	 { (char *)"AmoebaHarmonicInPlaneAngleForce_getAmoebaGlobalHarmonicInPlaneAngleQuartic", _wrap_AmoebaHarmonicInPlaneAngleForce_getAmoebaGlobalHarmonicInPlaneAngleQuartic, METH_VARARGS, (char *)"\n"
		"AmoebaHarmonicInPlaneAngleForce_getAmoebaGlobalHarmonicInPlaneAngleQuartic(AmoebaHarmonicInPlaneAngleForce self) -> double\n"
		"\n"
		"Get the global quartic term\n"
		""},
	 { (char *)"AmoebaHarmonicInPlaneAngleForce_setAmoebaGlobalHarmonicInPlaneAnglePentic", _wrap_AmoebaHarmonicInPlaneAngleForce_setAmoebaGlobalHarmonicInPlaneAnglePentic, METH_VARARGS, (char *)"\n"
		"AmoebaHarmonicInPlaneAngleForce_setAmoebaGlobalHarmonicInPlaneAnglePentic(AmoebaHarmonicInPlaneAngleForce self, double penticK)\n"
		"\n"
		"Set the global pentic term\n"
		"   Parameters:\n"
		"    - penticK the pentic harmonic force constant for the angle\n"
		""},
	 { (char *)"AmoebaHarmonicInPlaneAngleForce_getAmoebaGlobalHarmonicInPlaneAnglePentic", _wrap_AmoebaHarmonicInPlaneAngleForce_getAmoebaGlobalHarmonicInPlaneAnglePentic, METH_VARARGS, (char *)"\n"
		"AmoebaHarmonicInPlaneAngleForce_getAmoebaGlobalHarmonicInPlaneAnglePentic(AmoebaHarmonicInPlaneAngleForce self) -> double\n"
		"\n"
		"Get the global pentic term\n"
		""},
	 { (char *)"AmoebaHarmonicInPlaneAngleForce_setAmoebaGlobalHarmonicInPlaneAngleSextic", _wrap_AmoebaHarmonicInPlaneAngleForce_setAmoebaGlobalHarmonicInPlaneAngleSextic, METH_VARARGS, (char *)"\n"
		"AmoebaHarmonicInPlaneAngleForce_setAmoebaGlobalHarmonicInPlaneAngleSextic(AmoebaHarmonicInPlaneAngleForce self, double sexticK)\n"
		"\n"
		"Set the global sextic term\n"
		"   Parameters:\n"
		"    - sexticK the sextic harmonic force constant for the angle\n"
		""},
	 { (char *)"AmoebaHarmonicInPlaneAngleForce_getAmoebaGlobalHarmonicInPlaneAngleSextic", _wrap_AmoebaHarmonicInPlaneAngleForce_getAmoebaGlobalHarmonicInPlaneAngleSextic, METH_VARARGS, (char *)"\n"
		"AmoebaHarmonicInPlaneAngleForce_getAmoebaGlobalHarmonicInPlaneAngleSextic(AmoebaHarmonicInPlaneAngleForce self) -> double\n"
		"\n"
		"Get the global sextic term\n"
		""},
	 { (char *)"AmoebaHarmonicInPlaneAngleForce_addAngle", _wrap_AmoebaHarmonicInPlaneAngleForce_addAngle, METH_VARARGS, (char *)"\n"
		"AmoebaHarmonicInPlaneAngleForce_addAngle(AmoebaHarmonicInPlaneAngleForce self, int particle1, \n"
		"    int particle2, int particle3, int particle4, \n"
		"    double length, double quadraticK) -> int\n"
		"\n"
		"Add a angle term to the force field.\n"
		"   Parameters:\n"
		"    - particle1 the index of the first particle connected by the angle\n"
		"    - particle2 the index of the second particle connected by the angle\n"
		"    - particle3 the index of the third particle connected by the angle\n"
		"    - particle4 the index of the fourth particle connected by the angle\n"
		"    - length the equilibrium angle, measured in radians\n"
		"    - quadratic k the quadratic harmonic force constant for the angle measured in kJ/mol/radian^2\n"
		""},
	 { (char *)"AmoebaHarmonicInPlaneAngleForce_getAngleParameters", _wrap_AmoebaHarmonicInPlaneAngleForce_getAngleParameters, METH_VARARGS, (char *)"\n"
		"AmoebaHarmonicInPlaneAngleForce_getAngleParameters(AmoebaHarmonicInPlaneAngleForce self, int index)\n"
		"\n"
		"Get the force field parameters for a angle term.\n"
		"   Parameters:\n"
		"    - index the index of the angle for which to get parameters\n"
		"    - particle1 the index of the first particle connected by the angle\n"
		"    - particle2 the index of the second particle connected by the angle\n"
		"    - particle3 the index of the third particle connected by the angle\n"
		"    - particle4 the index of the fourth particle connected by the angle\n"
		"    - length the equilibrium angle, measured in radians\n"
		"    - quadratic k the quadratic harmonic force constant for the angle measured in kJ/mol/radian^2\n"
		""},
	 { (char *)"AmoebaHarmonicInPlaneAngleForce_setAngleParameters", _wrap_AmoebaHarmonicInPlaneAngleForce_setAngleParameters, METH_VARARGS, (char *)"\n"
		"AmoebaHarmonicInPlaneAngleForce_setAngleParameters(AmoebaHarmonicInPlaneAngleForce self, int index, int particle1, \n"
		"    int particle2, int particle3, int particle4, \n"
		"    double length, double quadraticK)\n"
		"\n"
		"Set the force field parameters for a angle term.\n"
		"   Parameters:\n"
		"    - index the index of the angle for which to set parameters\n"
		"    - particle1 the index of the first particle connected by the angle\n"
		"    - particle2 the index of the second particle connected by the angle\n"
		"    - particle3 the index of the third particle connected by the angle\n"
		"    - particle4 the index of the fourth particle connected by the angle\n"
		"    - length the equilibrium angle, measured in radians\n"
		"    - quadratic k the quadratic harmonic force constant for the angle, measured in kJ/mol/radian^2\n"
		""},
	 { (char *)"new_AmoebaHarmonicInPlaneAngleForce", _wrap_new_AmoebaHarmonicInPlaneAngleForce, METH_VARARGS, (char *)"\n"
		"AmoebaHarmonicInPlaneAngleForce()\n"
		"new_AmoebaHarmonicInPlaneAngleForce(AmoebaHarmonicInPlaneAngleForce other) -> AmoebaHarmonicInPlaneAngleForce\n"
		"\n"
		"Create a Amoeba HarmonicAngleForce.\n"
		""},
	 { (char *)"delete_AmoebaHarmonicInPlaneAngleForce", _wrap_delete_AmoebaHarmonicInPlaneAngleForce, METH_VARARGS, (char *)"delete_AmoebaHarmonicInPlaneAngleForce(AmoebaHarmonicInPlaneAngleForce self)"},
	 { (char *)"AmoebaHarmonicInPlaneAngleForce_swigregister", AmoebaHarmonicInPlaneAngleForce_swigregister, METH_VARARGS, NULL},
	 { (char *)"AmoebaMultipoleForce_getNumMultipoles", _wrap_AmoebaMultipoleForce_getNumMultipoles, METH_VARARGS, (char *)"\n"
		"AmoebaMultipoleForce_getNumMultipoles(AmoebaMultipoleForce self) -> int\n"
		"\n"
		"Get the number of particles in the potential function\n"
		""},
	 { (char *)"AmoebaMultipoleForce_getNonbondedMethod", _wrap_AmoebaMultipoleForce_getNonbondedMethod, METH_VARARGS, (char *)"\n"
		"AmoebaMultipoleForce_getNonbondedMethod(AmoebaMultipoleForce self) -> AmoebaNonbondedMethod\n"
		"\n"
		"Get the method used for handling long-range nonbonded interactions.\n"
		""},
	 { (char *)"AmoebaMultipoleForce_setNonbondedMethod", _wrap_AmoebaMultipoleForce_setNonbondedMethod, METH_VARARGS, (char *)"\n"
		"AmoebaMultipoleForce_setNonbondedMethod(AmoebaMultipoleForce self, AmoebaNonbondedMethod method)\n"
		"\n"
		"Set the method used for handling long-range nonbonded interactions.\n"
		""},
	 { (char *)"AmoebaMultipoleForce_getPolarizationType", _wrap_AmoebaMultipoleForce_getPolarizationType, METH_VARARGS, (char *)"\n"
		"AmoebaMultipoleForce_getPolarizationType(AmoebaMultipoleForce self) -> AmoebaPolarizationType\n"
		"\n"
		"Get polarization type\n"
		""},
	 { (char *)"AmoebaMultipoleForce_setPolarizationType", _wrap_AmoebaMultipoleForce_setPolarizationType, METH_VARARGS, (char *)"\n"
		"AmoebaMultipoleForce_setPolarizationType(AmoebaMultipoleForce self, AmoebaPolarizationType type)\n"
		"\n"
		"Set the polarization type\n"
		""},
	 { (char *)"AmoebaMultipoleForce_getCutoffDistance", _wrap_AmoebaMultipoleForce_getCutoffDistance, METH_VARARGS, (char *)"\n"
		"AmoebaMultipoleForce_getCutoffDistance(AmoebaMultipoleForce self) -> double\n"
		"\n"
		"Get the cutoff distance (in nm) being used for nonbonded interactions. If the NonbondedMethod in use is NoCutoff, this value will have no effect.\n"
		""},
	 { (char *)"AmoebaMultipoleForce_setCutoffDistance", _wrap_AmoebaMultipoleForce_setCutoffDistance, METH_VARARGS, (char *)"\n"
		"AmoebaMultipoleForce_setCutoffDistance(AmoebaMultipoleForce self, double distance)\n"
		"\n"
		"Set the cutoff distance (in nm) being used for nonbonded interactions. If the NonbondedMethod in use is NoCutoff, this value will have no effect.\n"
		"   Parameters:\n"
		"    - distance the cutoff distance, measured in nm\n"
		""},
	 { (char *)"AmoebaMultipoleForce_getAEwald", _wrap_AmoebaMultipoleForce_getAEwald, METH_VARARGS, (char *)"\n"
		"AmoebaMultipoleForce_getAEwald(AmoebaMultipoleForce self) -> double\n"
		"\n"
		"Get the aEwald parameter\n"
		""},
	 { (char *)"AmoebaMultipoleForce_setAEwald", _wrap_AmoebaMultipoleForce_setAEwald, METH_VARARGS, (char *)"\n"
		"AmoebaMultipoleForce_setAEwald(AmoebaMultipoleForce self, double aewald)\n"
		"\n"
		"Set the aEwald parameter\n"
		"   Parameters:\n"
		"    - Ewald parameter\n"
		""},
	 { (char *)"AmoebaMultipoleForce_getPmeBSplineOrder", _wrap_AmoebaMultipoleForce_getPmeBSplineOrder, METH_VARARGS, (char *)"\n"
		"AmoebaMultipoleForce_getPmeBSplineOrder(AmoebaMultipoleForce self) -> int\n"
		"\n"
		"Get the B-spline order parameter\n"
		""},
	 { (char *)"AmoebaMultipoleForce_getPmeGridDimensions", _wrap_AmoebaMultipoleForce_getPmeGridDimensions, METH_VARARGS, (char *)"\n"
		"AmoebaMultipoleForce_getPmeGridDimensions(AmoebaMultipoleForce self)\n"
		"\n"
		"Set the B-spline order parameter\n"
		"   Parameters:\n"
		"    - the B-spline order parameter Get the PME grid dimensions\n"
		""},
	 { (char *)"AmoebaMultipoleForce_setPmeGridDimensions", _wrap_AmoebaMultipoleForce_setPmeGridDimensions, METH_VARARGS, (char *)"\n"
		"AmoebaMultipoleForce_setPmeGridDimensions(AmoebaMultipoleForce self, vectori gridDimension)\n"
		"\n"
		"Set the PME grid dimensions\n"
		"   Parameters:\n"
		"    - the PME grid dimensions\n"
		""},
	 { (char *)"AmoebaMultipoleForce_addParticle", _wrap_AmoebaMultipoleForce_addParticle, METH_VARARGS, (char *)"\n"
		"AmoebaMultipoleForce_addParticle(AmoebaMultipoleForce self, double charge, vectord molecularDipole, \n"
		"    vectord molecularQuadrupole, \n"
		"    int axisType, int multipoleAtomZ, int multipoleAtomX, \n"
		"    int multipoleAtomY, double thole, double dampingFactor, \n"
		"    double polarity) -> int\n"
		"\n"
		"Add multipole-related info for a particle\n"
		"   Parameters:\n"
		"    - charge the particle's charge\n"
		"    - molecularDipole the particle's molecular dipole (vector of size 3)\n"
		"    - molecularQuadrupole the particle's molecular quadrupole (vector of size 9)\n"
		"    - axisType the particle's axis type ( ZThenX, Bisector )\n"
		"    - multipoleAtomZ index of first atom used in constructing lab<->molecular frames\n"
		"    - multipoleAtomX index of second atom used in constructing lab<->molecular frames\n"
		"    - multipoleAtomY index of second atom used in constructing lab<->molecular frames\n"
		"    - thole Thole parameter\n"
		"    - dampingFactor dampingFactor parameter\n"
		"    - polarity polarity parameter\n"
		""},
	 { (char *)"AmoebaMultipoleForce_getMultipoleParameters", _wrap_AmoebaMultipoleForce_getMultipoleParameters, METH_VARARGS, (char *)"\n"
		"AmoebaMultipoleForce_getMultipoleParameters(AmoebaMultipoleForce self, int index)\n"
		"\n"
		"Get the multipole parameters for a particle.\n"
		"   Parameters:\n"
		"    - index the index of the atom for which to get parameters\n"
		"    - charge the particle's charge\n"
		"    - molecularDipole the particle's molecular dipole (vector of size 3)\n"
		"    - molecularQuadrupole the particle's molecular quadrupole (vector of size 9)\n"
		"    - axisType the particle's axis type ( ZThenX, Bisector )\n"
		"    - multipoleAtomZ index of first atom used in constructing lab<->molecular frames\n"
		"    - multipoleAtomX index of second atom used in constructing lab<->molecular frames\n"
		"    - multipoleAtomY index of second atom used in constructing lab<->molecular frames\n"
		"    - thole Thole parameter\n"
		"    - dampingFactor dampingFactor parameter\n"
		"    - polarity polarity parameter\n"
		""},
	 { (char *)"AmoebaMultipoleForce_setMultipoleParameters", _wrap_AmoebaMultipoleForce_setMultipoleParameters, METH_VARARGS, (char *)"\n"
		"AmoebaMultipoleForce_setMultipoleParameters(AmoebaMultipoleForce self, int index, double charge, \n"
		"    vectord molecularDipole, vectord molecularQuadrupole, \n"
		"    int axisType, int multipoleAtomZ, \n"
		"    int multipoleAtomX, int multipoleAtomY, double thole, \n"
		"    double dampingFactor, double polarity)\n"
		"\n"
		"Set the multipole parameters for a particle.\n"
		"   Parameters:\n"
		"    - index the index of the atom for which to set parameters\n"
		"    - charge the particle's charge\n"
		"    - molecularDipole the particle's molecular dipole (vector of size 3)\n"
		"    - molecularQuadrupole the particle's molecular quadrupole (vector of size 9)\n"
		"    - axisType the particle's axis type ( ZThenX, Bisector )\n"
		"    - multipoleAtomZ index of first atom used in constructing lab<->molecular frames\n"
		"    - multipoleAtomX index of second atom used in constructing lab<->molecular frames\n"
		"    - multipoleAtomY index of second atom used in constructing lab<->molecular frames\n"
		"    - polarity polarity parameter\n"
		""},
	 { (char *)"AmoebaMultipoleForce_setCovalentMap", _wrap_AmoebaMultipoleForce_setCovalentMap, METH_VARARGS, (char *)"\n"
		"AmoebaMultipoleForce_setCovalentMap(AmoebaMultipoleForce self, int index, CovalentType typeId, \n"
		"    vectori covalentAtoms)\n"
		"\n"
		"Set the CovalentMap for an atom\n"
		"   Parameters:\n"
		"    - index the index of the atom for which to set parameters\n"
		"    - typeId CovalentTypes type\n"
		"    - covalentAtoms vector of covalent atoms associated w/ the specfied CovalentType\n"
		""},
	 { (char *)"AmoebaMultipoleForce_getCovalentMap", _wrap_AmoebaMultipoleForce_getCovalentMap, METH_VARARGS, (char *)"\n"
		"AmoebaMultipoleForce_getCovalentMap(AmoebaMultipoleForce self, int index, CovalentType typeId)\n"
		"\n"
		"Get the CovalentMap for an atom\n"
		"   Parameters:\n"
		"    - index the index of the atom for which to set parameters\n"
		"    - typeId CovalentTypes type\n"
		"    - covalentAtoms output vector of covalent atoms associated w/ the specfied CovalentType\n"
		""},
	 { (char *)"AmoebaMultipoleForce_getCovalentMaps", _wrap_AmoebaMultipoleForce_getCovalentMaps, METH_VARARGS, (char *)"\n"
		"AmoebaMultipoleForce_getCovalentMaps(AmoebaMultipoleForce self, int index)\n"
		"\n"
		"Get the CovalentMap for an atom\n"
		"   Parameters:\n"
		"    - index the index of the atom for which to set parameters\n"
		"    - covalentLists output vector of covalent lists of atoms\n"
		""},
	 { (char *)"AmoebaMultipoleForce_getMutualInducedMaxIterations", _wrap_AmoebaMultipoleForce_getMutualInducedMaxIterations, METH_VARARGS, (char *)"\n"
		"AmoebaMultipoleForce_getMutualInducedMaxIterations(AmoebaMultipoleForce self) -> int\n"
		"\n"
		"Get the iteration method to be used for calculating the mutual induced dipoles\n"
		"   Parameters:\n"
		"    - iteration method to be used for calculating the mutual induced dipole Get the max number of iterations to be used in calculating the mutual induced dipoles\n"
		""},
	 { (char *)"AmoebaMultipoleForce_setMutualInducedMaxIterations", _wrap_AmoebaMultipoleForce_setMutualInducedMaxIterations, METH_VARARGS, (char *)"\n"
		"AmoebaMultipoleForce_setMutualInducedMaxIterations(AmoebaMultipoleForce self, int inputMutualInducedMaxIterations)\n"
		"\n"
		"Set the max number of iterations to be used in calculating the mutual induced dipoles\n"
		"   Parameters:\n"
		"    - max number of iterations\n"
		""},
	 { (char *)"AmoebaMultipoleForce_getMutualInducedTargetEpsilon", _wrap_AmoebaMultipoleForce_getMutualInducedTargetEpsilon, METH_VARARGS, (char *)"\n"
		"AmoebaMultipoleForce_getMutualInducedTargetEpsilon(AmoebaMultipoleForce self) -> double\n"
		"\n"
		"Get the target epsilon to be used to test for convergence of iterative method used in calculating the mutual induced dipoles\n"
		""},
	 { (char *)"AmoebaMultipoleForce_setMutualInducedTargetEpsilon", _wrap_AmoebaMultipoleForce_setMutualInducedTargetEpsilon, METH_VARARGS, (char *)"\n"
		"AmoebaMultipoleForce_setMutualInducedTargetEpsilon(AmoebaMultipoleForce self, double inputMutualInducedTargetEpsilon)\n"
		"\n"
		"Set the target epsilon to be used to test for convergence of iterative method used in calculating the mutual induced dipoles\n"
		"   Parameters:\n"
		"    - target epsilon\n"
		""},
	 { (char *)"AmoebaMultipoleForce_getEwaldErrorTolerance", _wrap_AmoebaMultipoleForce_getEwaldErrorTolerance, METH_VARARGS, (char *)"\n"
		"AmoebaMultipoleForce_getEwaldErrorTolerance(AmoebaMultipoleForce self) -> double\n"
		"\n"
		"Get the scaling distance cutoff (nm)\n"
		"   Parameters:\n"
		"    - scaling distance cutoff Get the electric constant\n"
		"    - the electric constant Get the error tolerance for Ewald summation. This corresponds to the fractional error in the forces which is acceptable. This value is used to select the reciprocal space cutoff and separation parameter so that the average error level will be less than the tolerance. There is not a rigorous guarantee that all forces on all atoms will be less than the tolerance, however.\n"
		""},
	 { (char *)"AmoebaMultipoleForce_setEwaldErrorTolerance", _wrap_AmoebaMultipoleForce_setEwaldErrorTolerance, METH_VARARGS, (char *)"\n"
		"AmoebaMultipoleForce_setEwaldErrorTolerance(AmoebaMultipoleForce self, double tol)\n"
		"\n"
		"Get the error tolerance for Ewald summation. This corresponds to the fractional error in the forces which is acceptable. This value is used to select the reciprocal space cutoff and separation parameter so that the average error level will be less than the tolerance. There is not a rigorous guarantee that all forces on all atoms will be less than the tolerance, however.\n"
		""},
	 { (char *)"new_AmoebaMultipoleForce", _wrap_new_AmoebaMultipoleForce, METH_VARARGS, (char *)"\n"
		"AmoebaMultipoleForce()\n"
		"new_AmoebaMultipoleForce(AmoebaMultipoleForce other) -> AmoebaMultipoleForce\n"
		"\n"
		"Create a Amoeba MultipoleForce.\n"
		""},
	 { (char *)"delete_AmoebaMultipoleForce", _wrap_delete_AmoebaMultipoleForce, METH_VARARGS, (char *)"delete_AmoebaMultipoleForce(AmoebaMultipoleForce self)"},
	 { (char *)"AmoebaMultipoleForce_swigregister", AmoebaMultipoleForce_swigregister, METH_VARARGS, NULL},
	 { (char *)"AmoebaOutOfPlaneBendForce_getNumOutOfPlaneBends", _wrap_AmoebaOutOfPlaneBendForce_getNumOutOfPlaneBends, METH_VARARGS, (char *)"\n"
		"AmoebaOutOfPlaneBendForce_getNumOutOfPlaneBends(AmoebaOutOfPlaneBendForce self) -> int\n"
		"\n"
		"Get the number of outOfPlaneBend terms in the potential function\n"
		""},
	 { (char *)"AmoebaOutOfPlaneBendForce_setAmoebaGlobalOutOfPlaneBendCubic", _wrap_AmoebaOutOfPlaneBendForce_setAmoebaGlobalOutOfPlaneBendCubic, METH_VARARGS, (char *)"\n"
		"AmoebaOutOfPlaneBendForce_setAmoebaGlobalOutOfPlaneBendCubic(AmoebaOutOfPlaneBendForce self, double cubicK)\n"
		"\n"
		"Set the global cubic term\n"
		"   Parameters:\n"
		"    - cubicK the cubic harmonic force constant for the angle\n"
		""},
	 { (char *)"AmoebaOutOfPlaneBendForce_getAmoebaGlobalOutOfPlaneBendCubic", _wrap_AmoebaOutOfPlaneBendForce_getAmoebaGlobalOutOfPlaneBendCubic, METH_VARARGS, (char *)"\n"
		"AmoebaOutOfPlaneBendForce_getAmoebaGlobalOutOfPlaneBendCubic(AmoebaOutOfPlaneBendForce self) -> double\n"
		"\n"
		"Get the global cubic term\n"
		""},
	 { (char *)"AmoebaOutOfPlaneBendForce_setAmoebaGlobalOutOfPlaneBendQuartic", _wrap_AmoebaOutOfPlaneBendForce_setAmoebaGlobalOutOfPlaneBendQuartic, METH_VARARGS, (char *)"\n"
		"AmoebaOutOfPlaneBendForce_setAmoebaGlobalOutOfPlaneBendQuartic(AmoebaOutOfPlaneBendForce self, double quarticK)\n"
		"\n"
		"Set the global cubic term\n"
		"   Parameters:\n"
		"    - quarticK the quartic harmonic force constant for the angle\n"
		""},
	 { (char *)"AmoebaOutOfPlaneBendForce_getAmoebaGlobalOutOfPlaneBendQuartic", _wrap_AmoebaOutOfPlaneBendForce_getAmoebaGlobalOutOfPlaneBendQuartic, METH_VARARGS, (char *)"\n"
		"AmoebaOutOfPlaneBendForce_getAmoebaGlobalOutOfPlaneBendQuartic(AmoebaOutOfPlaneBendForce self) -> double\n"
		"\n"
		"Get the global quartic term\n"
		""},
	 { (char *)"AmoebaOutOfPlaneBendForce_setAmoebaGlobalOutOfPlaneBendPentic", _wrap_AmoebaOutOfPlaneBendForce_setAmoebaGlobalOutOfPlaneBendPentic, METH_VARARGS, (char *)"\n"
		"AmoebaOutOfPlaneBendForce_setAmoebaGlobalOutOfPlaneBendPentic(AmoebaOutOfPlaneBendForce self, double penticK)\n"
		"\n"
		"Set the global pentic term\n"
		"   Parameters:\n"
		"    - penticK the pentic harmonic force constant for the angle\n"
		""},
	 { (char *)"AmoebaOutOfPlaneBendForce_getAmoebaGlobalOutOfPlaneBendPentic", _wrap_AmoebaOutOfPlaneBendForce_getAmoebaGlobalOutOfPlaneBendPentic, METH_VARARGS, (char *)"\n"
		"AmoebaOutOfPlaneBendForce_getAmoebaGlobalOutOfPlaneBendPentic(AmoebaOutOfPlaneBendForce self) -> double\n"
		"\n"
		"Get the global pentic term\n"
		""},
	 { (char *)"AmoebaOutOfPlaneBendForce_setAmoebaGlobalOutOfPlaneBendSextic", _wrap_AmoebaOutOfPlaneBendForce_setAmoebaGlobalOutOfPlaneBendSextic, METH_VARARGS, (char *)"\n"
		"AmoebaOutOfPlaneBendForce_setAmoebaGlobalOutOfPlaneBendSextic(AmoebaOutOfPlaneBendForce self, double sexticK)\n"
		"\n"
		"Set the global sextic term\n"
		"   Parameters:\n"
		"    - sexticK the sextic harmonic force constant for the angle\n"
		""},
	 { (char *)"AmoebaOutOfPlaneBendForce_getAmoebaGlobalOutOfPlaneBendSextic", _wrap_AmoebaOutOfPlaneBendForce_getAmoebaGlobalOutOfPlaneBendSextic, METH_VARARGS, (char *)"\n"
		"AmoebaOutOfPlaneBendForce_getAmoebaGlobalOutOfPlaneBendSextic(AmoebaOutOfPlaneBendForce self) -> double\n"
		"\n"
		"Get the global sextic term\n"
		""},
	 { (char *)"AmoebaOutOfPlaneBendForce_addOutOfPlaneBend", _wrap_AmoebaOutOfPlaneBendForce_addOutOfPlaneBend, METH_VARARGS, (char *)"\n"
		"AmoebaOutOfPlaneBendForce_addOutOfPlaneBend(AmoebaOutOfPlaneBendForce self, int particle1, int particle2, \n"
		"    int particle3, int particle4, double k) -> int\n"
		"\n"
		"Add a outOfPlaneBend term to the force field.\n"
		"   Parameters:\n"
		"    - particle1 the index of the first particle connected by the outOfPlaneBend\n"
		"    - particle2 the index of the second particle connected by the outOfPlaneBend\n"
		"    - particle3 the index of the third particle connected by the outOfPlaneBend\n"
		"    - particle4 the index of the fourth particle connected by the outOfPlaneBend\n"
		"    - k the force constant for the outOfPlaneBend\n"
		""},
	 { (char *)"AmoebaOutOfPlaneBendForce_getOutOfPlaneBendParameters", _wrap_AmoebaOutOfPlaneBendForce_getOutOfPlaneBendParameters, METH_VARARGS, (char *)"\n"
		"AmoebaOutOfPlaneBendForce_getOutOfPlaneBendParameters(AmoebaOutOfPlaneBendForce self, int index)\n"
		"\n"
		"Get the force field parameters for a outOfPlaneBend term.\n"
		"   Parameters:\n"
		"    - index the index of the outOfPlaneBend for which to get parameters\n"
		"    - particle1 the index of the first particle connected by the outOfPlaneBend\n"
		"    - particle2 the index of the second particle connected by the outOfPlaneBend\n"
		"    - particle3 the index of the third particle connected by the outOfPlaneBend\n"
		"    - particle4 the index of the fourth particle connected by the outOfPlaneBend\n"
		"    - k the force constant for the outOfPlaneBend\n"
		""},
	 { (char *)"AmoebaOutOfPlaneBendForce_setOutOfPlaneBendParameters", _wrap_AmoebaOutOfPlaneBendForce_setOutOfPlaneBendParameters, METH_VARARGS, (char *)"\n"
		"AmoebaOutOfPlaneBendForce_setOutOfPlaneBendParameters(AmoebaOutOfPlaneBendForce self, int index, int particle1, \n"
		"    int particle2, int particle3, int particle4, \n"
		"    double k)\n"
		"\n"
		"Set the force field parameters for a outOfPlaneBend term.\n"
		"   Parameters:\n"
		"    - index the index of the outOfPlaneBend for which to set parameters\n"
		"    - particle1 the index of the first particle connected by the outOfPlaneBend\n"
		"    - particle2 the index of the second particle connected by the outOfPlaneBend\n"
		"    - particle3 the index of the third particle connected by the outOfPlaneBend\n"
		"    - particle4 the index of the fourth particle connected by the outOfPlaneBend\n"
		"    - k the force constant for the outOfPlaneBend\n"
		""},
	 { (char *)"new_AmoebaOutOfPlaneBendForce", _wrap_new_AmoebaOutOfPlaneBendForce, METH_VARARGS, (char *)"\n"
		"AmoebaOutOfPlaneBendForce()\n"
		"new_AmoebaOutOfPlaneBendForce(AmoebaOutOfPlaneBendForce other) -> AmoebaOutOfPlaneBendForce\n"
		"\n"
		"Create a Amoeba OutOfPlaneBendForce.\n"
		""},
	 { (char *)"delete_AmoebaOutOfPlaneBendForce", _wrap_delete_AmoebaOutOfPlaneBendForce, METH_VARARGS, (char *)"delete_AmoebaOutOfPlaneBendForce(AmoebaOutOfPlaneBendForce self)"},
	 { (char *)"AmoebaOutOfPlaneBendForce_swigregister", AmoebaOutOfPlaneBendForce_swigregister, METH_VARARGS, NULL},
	 { (char *)"AmoebaPiTorsionForce_getNumPiTorsions", _wrap_AmoebaPiTorsionForce_getNumPiTorsions, METH_VARARGS, (char *)"\n"
		"AmoebaPiTorsionForce_getNumPiTorsions(AmoebaPiTorsionForce self) -> int\n"
		"\n"
		"Get the number of pi torsion terms in the potential function\n"
		""},
	 { (char *)"AmoebaPiTorsionForce_addPiTorsion", _wrap_AmoebaPiTorsionForce_addPiTorsion, METH_VARARGS, (char *)"\n"
		"AmoebaPiTorsionForce_addPiTorsion(AmoebaPiTorsionForce self, int particle1, int particle2, \n"
		"    int particle3, int particle4, int particle5, \n"
		"    int particle6, double k) -> int\n"
		"\n"
		"Add a torsion term to the force field.\n"
		"   Parameters:\n"
		"    - particle1 the index of the first particle connected by the torsion\n"
		"    - particle2 the index of the second particle connected by the torsion\n"
		"    - particle3 the index of the third particle connected by the torsion\n"
		"    - particle4 the index of the fourth particle connected by the torsion\n"
		"    - particle5 the index of the fifth particle connected by the torsion\n"
		"    - particle6 the index of the sixth particle connected by the torsion\n"
		"    - k the force constant for the torsion\n"
		""},
	 { (char *)"AmoebaPiTorsionForce_getPiTorsionParameters", _wrap_AmoebaPiTorsionForce_getPiTorsionParameters, METH_VARARGS, (char *)"\n"
		"AmoebaPiTorsionForce_getPiTorsionParameters(AmoebaPiTorsionForce self, int index)\n"
		"\n"
		"Get the force field parameters for a torsion term.\n"
		"   Parameters:\n"
		"    - index the index of the torsion for which to get parameters\n"
		"    - particle1 the index of the first particle connected by the torsion\n"
		"    - particle2 the index of the second particle connected by the torsion\n"
		"    - particle3 the index of the third particle connected by the torsion\n"
		"    - particle4 the index of the fourth particle connected by the torsion\n"
		"    - particle5 the index of the fifth particle connected by the torsion\n"
		"    - particle6 the index of the sixth particle connected by the torsion\n"
		"    - k the force constant for the torsion\n"
		""},
	 { (char *)"AmoebaPiTorsionForce_setPiTorsionParameters", _wrap_AmoebaPiTorsionForce_setPiTorsionParameters, METH_VARARGS, (char *)"\n"
		"AmoebaPiTorsionForce_setPiTorsionParameters(AmoebaPiTorsionForce self, int index, int particle1, \n"
		"    int particle2, int particle3, int particle4, \n"
		"    int particle5, int particle6, double k)\n"
		"\n"
		"Set the force field parameters for a pi torsion term.\n"
		"   Parameters:\n"
		"    - index the index of the torsion for which to set parameters\n"
		"    - particle1 the index of the first particle connected by the torsion\n"
		"    - particle2 the index of the second particle connected by the torsion\n"
		"    - particle3 the index of the third particle connected by the torsion\n"
		"    - particle4 the index of the fourth particle connected by the torsion\n"
		"    - particle5 the index of the fifth particle connected by the torsion\n"
		"    - particle6 the index of the sixth particle connected by the torsion\n"
		"    - k the force constant for the torsion\n"
		""},
	 { (char *)"new_AmoebaPiTorsionForce", _wrap_new_AmoebaPiTorsionForce, METH_VARARGS, (char *)"\n"
		"AmoebaPiTorsionForce()\n"
		"new_AmoebaPiTorsionForce(AmoebaPiTorsionForce other) -> AmoebaPiTorsionForce\n"
		"\n"
		"Create a Amoeba PiTorsionForce.\n"
		""},
	 { (char *)"delete_AmoebaPiTorsionForce", _wrap_delete_AmoebaPiTorsionForce, METH_VARARGS, (char *)"delete_AmoebaPiTorsionForce(AmoebaPiTorsionForce self)"},
	 { (char *)"AmoebaPiTorsionForce_swigregister", AmoebaPiTorsionForce_swigregister, METH_VARARGS, NULL},
	 { (char *)"AmoebaStretchBendForce_getNumStretchBends", _wrap_AmoebaStretchBendForce_getNumStretchBends, METH_VARARGS, (char *)"\n"
		"AmoebaStretchBendForce_getNumStretchBends(AmoebaStretchBendForce self) -> int\n"
		"\n"
		"Get the number of stretchBend terms in the potential function\n"
		""},
	 { (char *)"AmoebaStretchBendForce_addStretchBend", _wrap_AmoebaStretchBendForce_addStretchBend, METH_VARARGS, (char *)"\n"
		"AmoebaStretchBendForce_addStretchBend(AmoebaStretchBendForce self, int particle1, int particle2, \n"
		"    int particle3, double lengthAB, double lengthCB, \n"
		"    double angle, double k) -> int\n"
		"\n"
		"Add a stretchBend term to the force field.\n"
		"   Parameters:\n"
		"    - particle1 the index of the first particle connected by the stretchBend\n"
		"    - particle2 the index of the second particle connected by the stretchBend\n"
		"    - particle3 the index of the third particle connected by the stretchBend\n"
		"    - lengthAB the equilibrium length of the stretchBend in bond ab [particle1, particle2], measured in nm\n"
		"    - lengthCB the equilibrium length of the stretchBend in bond cb [particle3, particle2], measured in nm\n"
		"    - angle the equilibrium angle in radians\n"
		"    - k the force constant for the stretchBend\n"
		""},
	 { (char *)"AmoebaStretchBendForce_getStretchBendParameters", _wrap_AmoebaStretchBendForce_getStretchBendParameters, METH_VARARGS, (char *)"\n"
		"AmoebaStretchBendForce_getStretchBendParameters(AmoebaStretchBendForce self, int index)\n"
		"\n"
		"Get the force field parameters for a stretchBend term.\n"
		"   Parameters:\n"
		"    - index the index of the stretchBend for which to get parameters\n"
		"    - particle1 the index of the first particle connected by the stretchBend\n"
		"    - particle2 the index of the second particle connected by the stretchBend\n"
		"    - particle3 the index of the third particle connected by the stretchBend\n"
		"    - lengthAB the equilibrium length of the stretchBend in bond ab [particle1, particle2], measured in nm\n"
		"    - lengthCB the equilibrium length of the stretchBend in bond cb [particle3, particle2], measured in nm\n"
		"    - angle the equilibrium angle in radians\n"
		"    - k the force constant for the stretchBend\n"
		""},
	 { (char *)"AmoebaStretchBendForce_setStretchBendParameters", _wrap_AmoebaStretchBendForce_setStretchBendParameters, METH_VARARGS, (char *)"\n"
		"AmoebaStretchBendForce_setStretchBendParameters(AmoebaStretchBendForce self, int index, int particle1, \n"
		"    int particle2, int particle3, double lengthAB, \n"
		"    double lengthCB, double angle, double k)\n"
		"\n"
		"Set the force field parameters for a stretchBend term.\n"
		"   Parameters:\n"
		"    - index the index of the stretchBend for which to set parameters\n"
		"    - particle1 the index of the first particle connected by the stretchBend\n"
		"    - particle2 the index of the second particle connected by the stretchBend\n"
		"    - particle3 the index of the third particle connected by the stretchBend\n"
		"    - lengthAB the equilibrium length of the stretchBend in bond ab [particle1, particle2], measured in nm\n"
		"    - lengthCB the equilibrium length of the stretchBend in bond cb [particle3, particle2], measured in nm\n"
		"    - angle the equilibrium angle in radians\n"
		"    - k the force constant for the stretchBend\n"
		""},
	 { (char *)"new_AmoebaStretchBendForce", _wrap_new_AmoebaStretchBendForce, METH_VARARGS, (char *)"\n"
		"AmoebaStretchBendForce()\n"
		"new_AmoebaStretchBendForce(AmoebaStretchBendForce other) -> AmoebaStretchBendForce\n"
		"\n"
		"Create a Amoeba StretchBendForce.\n"
		""},
	 { (char *)"delete_AmoebaStretchBendForce", _wrap_delete_AmoebaStretchBendForce, METH_VARARGS, (char *)"delete_AmoebaStretchBendForce(AmoebaStretchBendForce self)"},
	 { (char *)"AmoebaStretchBendForce_swigregister", AmoebaStretchBendForce_swigregister, METH_VARARGS, NULL},
	 { (char *)"AmoebaTorsionForce_getNumTorsions", _wrap_AmoebaTorsionForce_getNumTorsions, METH_VARARGS, (char *)"\n"
		"AmoebaTorsionForce_getNumTorsions(AmoebaTorsionForce self) -> int\n"
		"\n"
		"Get the number of torsion terms in the potential function\n"
		""},
	 { (char *)"AmoebaTorsionForce_addTorsion", _wrap_AmoebaTorsionForce_addTorsion, METH_VARARGS, (char *)"\n"
		"AmoebaTorsionForce_addTorsion(AmoebaTorsionForce self, int particle1, int particle2, \n"
		"    int particle3, int particle4, vectord torsion1, \n"
		"    vectord torsion2, vectord torsion3) -> int\n"
		"\n"
		"Add a torsion term to the force field.\n"
		"   Parameters:\n"
		"    - particle1 the index of the first particle connected by the torsion\n"
		"    - particle2 the index of the second particle connected by the torsion\n"
		"    - particle3 the index of the third particle connected by the torsion\n"
		"    - particle4 the index of the fourth particle connected by the torsion\n"
		"    - torsion1 the vector of torsion params for first index (amplitude, phase, fold)\n"
		"    - torsion2 the vector of torsion params for second index (amplitude, phase, fold)\n"
		"    - torsion3 the vector of torsion params for third index (amplitude, phase, fold)\n"
		""},
	 { (char *)"AmoebaTorsionForce_getTorsionParameters", _wrap_AmoebaTorsionForce_getTorsionParameters, METH_VARARGS, (char *)"\n"
		"AmoebaTorsionForce_getTorsionParameters(AmoebaTorsionForce self, int index)\n"
		"\n"
		"Get the force field parameters for a torsion term.\n"
		"   Parameters:\n"
		"    - index the index of the torsion for which to get parameters\n"
		"    - particle1 the index of the first particle connected by the torsion\n"
		"    - particle2 the index of the second particle connected by the torsion\n"
		"    - particle3 the index of the third particle connected by the torsion\n"
		"    - particle4 the index of the fourth particle connected by the torsion\n"
		"    - torsion1 the vector of torsion params for first index (amplitude, phase, fold)\n"
		"    - torsion2 the vector of torsion params for second index (amplitude, phase, fold)\n"
		"    - torsion3 the vector of torsion params for third index (amplitude, phase, fold)\n"
		""},
	 { (char *)"AmoebaTorsionForce_setTorsionParameters", _wrap_AmoebaTorsionForce_setTorsionParameters, METH_VARARGS, (char *)"\n"
		"AmoebaTorsionForce_setTorsionParameters(AmoebaTorsionForce self, int index, int particle1, \n"
		"    int particle2, int particle3, int particle4, \n"
		"    vectord torsion1, vectord torsion2, vectord torsion3)\n"
		"\n"
		"Set the force field parameters for a torsion term.\n"
		"   Parameters:\n"
		"    - index the index of the torsion for which to set parameters\n"
		"    - particle1 the index of the first particle connected by the torsion\n"
		"    - particle2 the index of the second particle connected by the torsion\n"
		"    - particle3 the index of the third particle connected by the torsion\n"
		"    - particle4 the index of the fourth particle connected by the torsion\n"
		"    - torsion1 the vector of torsion params for first index (amplitude, phase, fold)\n"
		"    - torsion2 the vector of torsion params for second index (amplitude, phase, fold)\n"
		"    - torsion3 the vector of torsion params for third index (amplitude, phase, fold)\n"
		""},
	 { (char *)"new_AmoebaTorsionForce", _wrap_new_AmoebaTorsionForce, METH_VARARGS, (char *)"\n"
		"AmoebaTorsionForce()\n"
		"new_AmoebaTorsionForce(AmoebaTorsionForce other) -> AmoebaTorsionForce\n"
		"\n"
		"Create a Amoeba TorsionForce.\n"
		""},
	 { (char *)"delete_AmoebaTorsionForce", _wrap_delete_AmoebaTorsionForce, METH_VARARGS, (char *)"delete_AmoebaTorsionForce(AmoebaTorsionForce self)"},
	 { (char *)"AmoebaTorsionForce_swigregister", AmoebaTorsionForce_swigregister, METH_VARARGS, NULL},
	 { (char *)"AmoebaTorsionTorsionForce_getNumTorsionTorsions", _wrap_AmoebaTorsionTorsionForce_getNumTorsionTorsions, METH_VARARGS, (char *)"\n"
		"AmoebaTorsionTorsionForce_getNumTorsionTorsions(AmoebaTorsionTorsionForce self) -> int\n"
		"\n"
		"Get the number of torsionTorsion terms in the potential function\n"
		""},
	 { (char *)"AmoebaTorsionTorsionForce_getNumTorsionTorsionGrids", _wrap_AmoebaTorsionTorsionForce_getNumTorsionTorsionGrids, METH_VARARGS, (char *)"\n"
		"AmoebaTorsionTorsionForce_getNumTorsionTorsionGrids(AmoebaTorsionTorsionForce self) -> int\n"
		"\n"
		"Get the number of torsionTorsion grids\n"
		""},
	 { (char *)"AmoebaTorsionTorsionForce_addTorsionTorsion", _wrap_AmoebaTorsionTorsionForce_addTorsionTorsion, METH_VARARGS, (char *)"\n"
		"AmoebaTorsionTorsionForce_addTorsionTorsion(AmoebaTorsionTorsionForce self, int particle1, int particle2, \n"
		"    int particle3, int particle4, int particle5, \n"
		"    int chiralCheckAtomIndex, int gridIndex) -> int\n"
		"\n"
		"Add a torsionTorsion term to the force field.\n"
		"   Parameters:\n"
		"    - particle1 the index of the first particle connected by the torsionTorsion\n"
		"    - particle2 the index of the second particle connected by the torsionTorsion\n"
		"    - particle3 the index of the third particle connected by the torsionTorsion\n"
		"    - particle4 the index of the fourth particle connected by the torsionTorsion\n"
		"    - particle5 the index of the fifth particle connected by the torsionTorsion\n"
		"    - chiralCheckAtomIndex the index of the particle connected to particle3, but not particle2 or particle4 to be used in chirality check\n"
		"    - gridIndex the index to the grid to be used\n"
		""},
	 { (char *)"AmoebaTorsionTorsionForce_getTorsionTorsionParameters", _wrap_AmoebaTorsionTorsionForce_getTorsionTorsionParameters, METH_VARARGS, (char *)"\n"
		"AmoebaTorsionTorsionForce_getTorsionTorsionParameters(AmoebaTorsionTorsionForce self, int index)\n"
		"\n"
		"Get the force field parameters for a torsionTorsion term.\n"
		"   Parameters:\n"
		"    - index the index of the torsionTorsion for which to get parameters\n"
		"    - particle1 the index of the first particle connected by the torsionTorsion\n"
		"    - particle2 the index of the second particle connected by the torsionTorsion\n"
		"    - particle3 the index of the third particle connected by the torsionTorsion\n"
		"    - particle4 the index of the fourth particle connected by the torsionTorsion\n"
		"    - particle5 the index of the fifth particle connected by the torsionTorsion\n"
		"    - chiralCheckAtomIndex the index of the particle connected to particle3, but not particle2 or particle4 to be used in chirality check\n"
		"    - gridIndex the grid index\n"
		""},
	 { (char *)"AmoebaTorsionTorsionForce_setTorsionTorsionParameters", _wrap_AmoebaTorsionTorsionForce_setTorsionTorsionParameters, METH_VARARGS, (char *)"\n"
		"AmoebaTorsionTorsionForce_setTorsionTorsionParameters(AmoebaTorsionTorsionForce self, int index, int particle1, \n"
		"    int particle2, int particle3, int particle4, \n"
		"    int particle5, int chiralCheckAtomIndex, \n"
		"    int gridIndex)\n"
		"\n"
		"Set the force field parameters for a torsionTorsion term.\n"
		"   Parameters:\n"
		"    - index the index of the torsionTorsion for which to set parameters\n"
		"    - particle1 the index of the first particle connected by the torsionTorsion\n"
		"    - particle2 the index of the second particle connected by the torsionTorsion\n"
		"    - particle3 the index of the third particle connected by the torsionTorsion\n"
		"    - particle4 the index of the fourth particle connected by the torsionTorsion\n"
		"    - particle5 the index of the fifth particle connected by the torsionTorsion\n"
		"    - chiralCheckAtomIndex the index of the particle connected to particle3, but not particle2 or particle4 to be used in chirality check\n"
		"    - gridIndex the grid index\n"
		""},
	 { (char *)"AmoebaTorsionTorsionForce_getTorsionTorsionGrid", _wrap_AmoebaTorsionTorsionForce_getTorsionTorsionGrid, METH_VARARGS, (char *)"\n"
		"AmoebaTorsionTorsionForce_getTorsionTorsionGrid(AmoebaTorsionTorsionForce self, int index) -> vectorddd\n"
		"\n"
		"Get the torsion-torsion grid at the specified index\n"
		"   Parameters:\n"
		"    - gridIndex the grid index\n"
		""},
	 { (char *)"AmoebaTorsionTorsionForce_setTorsionTorsionGrid", _wrap_AmoebaTorsionTorsionForce_setTorsionTorsionGrid, METH_VARARGS, (char *)"\n"
		"AmoebaTorsionTorsionForce_setTorsionTorsionGrid(AmoebaTorsionTorsionForce self, int index, vectorddd grid)\n"
		"\n"
		"Set the torsion-torsion grid at the specified index\n"
		"   Parameters:\n"
		"    - index the index of the torsionTorsion for which to get parameters\n"
		"    - grid grid grid[x][y][0] = x value grid[x][y][1] = y value grid[x][y][2] = function value grid[x][y][3] = dfdx value grid[x][y][4] = dfdy value grid[x][y][5] = dfd(xy) value\n"
		""},
	 { (char *)"new_AmoebaTorsionTorsionForce", _wrap_new_AmoebaTorsionTorsionForce, METH_VARARGS, (char *)"\n"
		"AmoebaTorsionTorsionForce()\n"
		"new_AmoebaTorsionTorsionForce(AmoebaTorsionTorsionForce other) -> AmoebaTorsionTorsionForce\n"
		"\n"
		"Create a Amoeba TorsionTorsionForce.\n"
		""},
	 { (char *)"delete_AmoebaTorsionTorsionForce", _wrap_delete_AmoebaTorsionTorsionForce, METH_VARARGS, (char *)"delete_AmoebaTorsionTorsionForce(AmoebaTorsionTorsionForce self)"},
	 { (char *)"AmoebaTorsionTorsionForce_swigregister", AmoebaTorsionTorsionForce_swigregister, METH_VARARGS, NULL},
	 { (char *)"AmoebaUreyBradleyForce_getNumInteractions", _wrap_AmoebaUreyBradleyForce_getNumInteractions, METH_VARARGS, (char *)"\n"
		"AmoebaUreyBradleyForce_getNumInteractions(AmoebaUreyBradleyForce self) -> int\n"
		"\n"
		"Get the number of UB terms in the potential function\n"
		""},
	 { (char *)"AmoebaUreyBradleyForce_setAmoebaGlobalUreyBradleyCubic", _wrap_AmoebaUreyBradleyForce_setAmoebaGlobalUreyBradleyCubic, METH_VARARGS, (char *)"\n"
		"AmoebaUreyBradleyForce_setAmoebaGlobalUreyBradleyCubic(AmoebaUreyBradleyForce self, double cubicK)\n"
		"\n"
		"Set the global cubic term\n"
		"   Parameters:\n"
		"    - cubicK the cubic force constant\n"
		""},
	 { (char *)"AmoebaUreyBradleyForce_getAmoebaGlobalUreyBradleyCubic", _wrap_AmoebaUreyBradleyForce_getAmoebaGlobalUreyBradleyCubic, METH_VARARGS, (char *)"\n"
		"AmoebaUreyBradleyForce_getAmoebaGlobalUreyBradleyCubic(AmoebaUreyBradleyForce self) -> double\n"
		"\n"
		"Get the global cubic term\n"
		""},
	 { (char *)"AmoebaUreyBradleyForce_setAmoebaGlobalUreyBradleyQuartic", _wrap_AmoebaUreyBradleyForce_setAmoebaGlobalUreyBradleyQuartic, METH_VARARGS, (char *)"\n"
		"AmoebaUreyBradleyForce_setAmoebaGlobalUreyBradleyQuartic(AmoebaUreyBradleyForce self, double quarticK)\n"
		"\n"
		"Set the global cubic term\n"
		"   Parameters:\n"
		"    - quarticK the quartic force constant\n"
		""},
	 { (char *)"AmoebaUreyBradleyForce_getAmoebaGlobalUreyBradleyQuartic", _wrap_AmoebaUreyBradleyForce_getAmoebaGlobalUreyBradleyQuartic, METH_VARARGS, (char *)"\n"
		"AmoebaUreyBradleyForce_getAmoebaGlobalUreyBradleyQuartic(AmoebaUreyBradleyForce self) -> double\n"
		"\n"
		"Get the global quartic term\n"
		""},
	 { (char *)"AmoebaUreyBradleyForce_addUreyBradley", _wrap_AmoebaUreyBradleyForce_addUreyBradley, METH_VARARGS, (char *)"\n"
		"AmoebaUreyBradleyForce_addUreyBradley(AmoebaUreyBradleyForce self, int particle1, int particle2, \n"
		"    double length, double quadraticK) -> int\n"
		"\n"
		"Add a UB term to the force field.\n"
		"   Parameters:\n"
		"    - particle1 the index of the first particle\n"
		"    - particle2 the index of the second particle\n"
		"    - length the equilibrium length, measured in nm\n"
		"    - k the quadratic harmonic force constant\n"
		""},
	 { (char *)"AmoebaUreyBradleyForce_getUreyBradleyParameters", _wrap_AmoebaUreyBradleyForce_getUreyBradleyParameters, METH_VARARGS, (char *)"\n"
		"AmoebaUreyBradleyForce_getUreyBradleyParameters(AmoebaUreyBradleyForce self, int index)\n"
		"\n"
		"Get the force field parameters for a bond term.\n"
		"   Parameters:\n"
		"    - index the index of the ixn for which to get parameters\n"
		"    - particle1 the index of the first particle\n"
		"    - particle2 the index of the second particle\n"
		"    - length the equilibrium distance, measured in nm\n"
		"    - quadratic k the quadratic harmonic force constant\n"
		""},
	 { (char *)"AmoebaUreyBradleyForce_setUreyBradleyParameters", _wrap_AmoebaUreyBradleyForce_setUreyBradleyParameters, METH_VARARGS, (char *)"\n"
		"AmoebaUreyBradleyForce_setUreyBradleyParameters(AmoebaUreyBradleyForce self, int index, int particle1, \n"
		"    int particle2, double length, double quadraticK)\n"
		"\n"
		"Set the force field parameters for a UB term.\n"
		"   Parameters:\n"
		"    - index the index of the ixn for which to set parameters\n"
		"    - particle1 the index of the first particle\n"
		"    - particle2 the index of the second particle\n"
		"    - length the equilibrium distance, measured in nm\n"
		"    - k the quadratic harmonic force constant for the bond\n"
		""},
	 { (char *)"new_AmoebaUreyBradleyForce", _wrap_new_AmoebaUreyBradleyForce, METH_VARARGS, (char *)"\n"
		"AmoebaUreyBradleyForce()\n"
		"new_AmoebaUreyBradleyForce(AmoebaUreyBradleyForce other) -> AmoebaUreyBradleyForce\n"
		"\n"
		"Create a Amoeba UreyBradleyForce.\n"
		""},
	 { (char *)"delete_AmoebaUreyBradleyForce", _wrap_delete_AmoebaUreyBradleyForce, METH_VARARGS, (char *)"delete_AmoebaUreyBradleyForce(AmoebaUreyBradleyForce self)"},
	 { (char *)"AmoebaUreyBradleyForce_swigregister", AmoebaUreyBradleyForce_swigregister, METH_VARARGS, NULL},
	 { (char *)"AmoebaVdwForce_getNumParticles", _wrap_AmoebaVdwForce_getNumParticles, METH_VARARGS, (char *)"\n"
		"AmoebaVdwForce_getNumParticles(AmoebaVdwForce self) -> int\n"
		"\n"
		"Get the number of particles\n"
		""},
	 { (char *)"AmoebaVdwForce_setParticleParameters", _wrap_AmoebaVdwForce_setParticleParameters, METH_VARARGS, (char *)"\n"
		"AmoebaVdwForce_setParticleParameters(AmoebaVdwForce self, int particleIndex, int ivIndex, \n"
		"    int classIndex, double sigma, double epsilon, \n"
		"    double reductionFactor)\n"
		"\n"
		"Set the force field parameters for a vdw particle.\n"
		"   Parameters:\n"
		"    - particleIndex the particle index\n"
		"    - ivIndex the iv index\n"
		"    - classIndex the class index into the sig-eps table\n"
		"    - sigma vdw sigma\n"
		"    - epsilon vdw epsilon\n"
		"    - reductionFactor the reduction factor\n"
		""},
	 { (char *)"AmoebaVdwForce_getParticleParameters", _wrap_AmoebaVdwForce_getParticleParameters, METH_VARARGS, (char *)"\n"
		"AmoebaVdwForce_getParticleParameters(AmoebaVdwForce self, int particleIndex)\n"
		"\n"
		"Get the force field parameters for a vdw particle.\n"
		"   Parameters:\n"
		"    - particleIndex the particle index\n"
		"    - ivIndex the iv index\n"
		"    - classIndex the class index into the sig-eps table\n"
		"    - sigma vdw sigma\n"
		"    - epsilon vdw epsilon\n"
		"    - reductionFactor the reduction factor\n"
		""},
	 { (char *)"AmoebaVdwForce_addParticle", _wrap_AmoebaVdwForce_addParticle, METH_VARARGS, (char *)"\n"
		"AmoebaVdwForce_addParticle(AmoebaVdwForce self, int ivIndex, int classIndex, double sigma, \n"
		"    double epsilon, double reductionFactor) -> int\n"
		"\n"
		"Set the force field parameters for a vdw particle.\n"
		"   Parameters:\n"
		"    - particleIndex the particle index\n"
		"    - ivIndex the iv index\n"
		"    - classIndex the class index into the sig-eps table\n"
		"    - sigma vdw sigma\n"
		"    - epsilon vdw epsilon\n"
		"    - reductionFactor the reduction factor\n"
		""},
	 { (char *)"AmoebaVdwForce_setSigmaCombiningRule", _wrap_AmoebaVdwForce_setSigmaCombiningRule, METH_VARARGS, (char *)"\n"
		"AmoebaVdwForce_setSigmaCombiningRule(AmoebaVdwForce self, string sigmaCombiningRule)\n"
		"\n"
		"Set sigma combining rule\n"
		"   Parameters:\n"
		"    - sigmaCombiningRule sigma combining rule: 'ARITHMETIC', 'GEOMETRIC'. 'CUBIC-MEAN'\n"
		""},
	 { (char *)"AmoebaVdwForce_getSigmaCombiningRule", _wrap_AmoebaVdwForce_getSigmaCombiningRule, METH_VARARGS, (char *)"\n"
		"AmoebaVdwForce_getSigmaCombiningRule(AmoebaVdwForce self) -> string\n"
		"\n"
		"Get sigma combining rule\n"
		""},
	 { (char *)"AmoebaVdwForce_setEpsilonCombiningRule", _wrap_AmoebaVdwForce_setEpsilonCombiningRule, METH_VARARGS, (char *)"\n"
		"AmoebaVdwForce_setEpsilonCombiningRule(AmoebaVdwForce self, string epsilonCombiningRule)\n"
		"\n"
		"Set epsilon combining rule\n"
		"   Parameters:\n"
		"    - epsilonCombiningRule epsilon combining rule: 'ARITHMETIC', 'GEOMETRIC'. 'HARMONIC', 'HHG'\n"
		""},
	 { (char *)"AmoebaVdwForce_getEpsilonCombiningRule", _wrap_AmoebaVdwForce_getEpsilonCombiningRule, METH_VARARGS, (char *)"\n"
		"AmoebaVdwForce_getEpsilonCombiningRule(AmoebaVdwForce self) -> string\n"
		"\n"
		"Get epsilon combining rule\n"
		""},
	 { (char *)"AmoebaVdwForce_setParticleExclusions", _wrap_AmoebaVdwForce_setParticleExclusions, METH_VARARGS, (char *)"\n"
		"AmoebaVdwForce_setParticleExclusions(AmoebaVdwForce self, int particleIndex, vectori exclusions)\n"
		"\n"
		"Set exclusions for specified particle\n"
		"   Parameters:\n"
		"    - particleIndex particle index\n"
		"    - exclusions output vector of exclusions\n"
		""},
	 { (char *)"AmoebaVdwForce_getParticleExclusions", _wrap_AmoebaVdwForce_getParticleExclusions, METH_VARARGS, (char *)"\n"
		"AmoebaVdwForce_getParticleExclusions(AmoebaVdwForce self, int particleIndex)\n"
		"\n"
		"Get exclusions for specified particle\n"
		"   Parameters:\n"
		"    - particleIndex particle index\n"
		"    - exclusions output vector of exclusions\n"
		""},
	 { (char *)"AmoebaVdwForce_setCutoff", _wrap_AmoebaVdwForce_setCutoff, METH_VARARGS, (char *)"\n"
		"AmoebaVdwForce_setCutoff(AmoebaVdwForce self, double cutoff)\n"
		"\n"
		"Set cutoff\n"
		"   Parameters:\n"
		"    - cutoff cutoff\n"
		""},
	 { (char *)"AmoebaVdwForce_getCutoff", _wrap_AmoebaVdwForce_getCutoff, METH_VARARGS, (char *)"\n"
		"AmoebaVdwForce_getCutoff(AmoebaVdwForce self) -> double\n"
		"\n"
		"Get cutoff\n"
		""},
	 { (char *)"AmoebaVdwForce_setUseNeighborList", _wrap_AmoebaVdwForce_setUseNeighborList, METH_VARARGS, (char *)"\n"
		"AmoebaVdwForce_setUseNeighborList(AmoebaVdwForce self, int neighborListFlag)\n"
		"\n"
		"Set flag for using neighbor list for vdw ixn\n"
		"   Parameters:\n"
		"    - neighboristFlag neighbor list flag\n"
		""},
	 { (char *)"AmoebaVdwForce_getUseNeighborList", _wrap_AmoebaVdwForce_getUseNeighborList, METH_VARARGS, (char *)"\n"
		"AmoebaVdwForce_getUseNeighborList(AmoebaVdwForce self) -> int\n"
		"\n"
		"Get neighbor list flag for vdw ixn\n"
		""},
	 { (char *)"AmoebaVdwForce_setPBC", _wrap_AmoebaVdwForce_setPBC, METH_VARARGS, (char *)"\n"
		"AmoebaVdwForce_setPBC(AmoebaVdwForce self, int pbcFlag)\n"
		"\n"
		"Set flag for employing periodic boundary conditions\n"
		"   Parameters:\n"
		"    - pbcFlag if nonozero, use periodic boundary conditions\n"
		""},
	 { (char *)"AmoebaVdwForce_getPBC", _wrap_AmoebaVdwForce_getPBC, METH_VARARGS, (char *)"\n"
		"AmoebaVdwForce_getPBC(AmoebaVdwForce self) -> int\n"
		"\n"
		"Get periodic boundary conditions flag\n"
		""},
	 { (char *)"new_AmoebaVdwForce", _wrap_new_AmoebaVdwForce, METH_VARARGS, (char *)"\n"
		"AmoebaVdwForce()\n"
		"new_AmoebaVdwForce(AmoebaVdwForce other) -> AmoebaVdwForce\n"
		"\n"
		"Create a Amoeba VdwForce.\n"
		""},
	 { (char *)"delete_AmoebaVdwForce", _wrap_delete_AmoebaVdwForce, METH_VARARGS, (char *)"delete_AmoebaVdwForce(AmoebaVdwForce self)"},
	 { (char *)"AmoebaVdwForce_swigregister", AmoebaVdwForce_swigregister, METH_VARARGS, NULL},
	 { (char *)"AmoebaWcaDispersionForce_getNumParticles", _wrap_AmoebaWcaDispersionForce_getNumParticles, METH_VARARGS, (char *)"\n"
		"AmoebaWcaDispersionForce_getNumParticles(AmoebaWcaDispersionForce self) -> int\n"
		"\n"
		"Get the number of particles\n"
		""},
	 { (char *)"AmoebaWcaDispersionForce_setParticleParameters", _wrap_AmoebaWcaDispersionForce_setParticleParameters, METH_VARARGS, (char *)"\n"
		"AmoebaWcaDispersionForce_setParticleParameters(AmoebaWcaDispersionForce self, int particleIndex, double radius, \n"
		"    double epsilon)\n"
		"\n"
		"Set the force field parameters for a wca dispersion particle.\n"
		"   Parameters:\n"
		"    - particleIndex the particle index\n"
		"    - radius radius\n"
		"    - epsilon epsilon\n"
		""},
	 { (char *)"AmoebaWcaDispersionForce_getParticleParameters", _wrap_AmoebaWcaDispersionForce_getParticleParameters, METH_VARARGS, (char *)"\n"
		"AmoebaWcaDispersionForce_getParticleParameters(AmoebaWcaDispersionForce self, int particleIndex)\n"
		"\n"
		"Get the force field parameters for a wca dispersion particle.\n"
		"   Parameters:\n"
		"    - particleIndex the particle index\n"
		"    - radius radius\n"
		"    - epsilon epsilon\n"
		""},
	 { (char *)"AmoebaWcaDispersionForce_addParticle", _wrap_AmoebaWcaDispersionForce_addParticle, METH_VARARGS, (char *)"\n"
		"AmoebaWcaDispersionForce_addParticle(AmoebaWcaDispersionForce self, double radius, double epsilon) -> int\n"
		"\n"
		"Set the force field parameters for a wca dispersion particle.\n"
		"   Parameters:\n"
		"    - radius radius\n"
		"    - epsilon epsilon\n"
		""},
	 { (char *)"AmoebaWcaDispersionForce_getEpso", _wrap_AmoebaWcaDispersionForce_getEpso, METH_VARARGS, (char *)"AmoebaWcaDispersionForce_getEpso(AmoebaWcaDispersionForce self) -> double"},
	 { (char *)"AmoebaWcaDispersionForce_getEpsh", _wrap_AmoebaWcaDispersionForce_getEpsh, METH_VARARGS, (char *)"AmoebaWcaDispersionForce_getEpsh(AmoebaWcaDispersionForce self) -> double"},
	 { (char *)"AmoebaWcaDispersionForce_getRmino", _wrap_AmoebaWcaDispersionForce_getRmino, METH_VARARGS, (char *)"AmoebaWcaDispersionForce_getRmino(AmoebaWcaDispersionForce self) -> double"},
	 { (char *)"AmoebaWcaDispersionForce_getRminh", _wrap_AmoebaWcaDispersionForce_getRminh, METH_VARARGS, (char *)"AmoebaWcaDispersionForce_getRminh(AmoebaWcaDispersionForce self) -> double"},
	 { (char *)"AmoebaWcaDispersionForce_getAwater", _wrap_AmoebaWcaDispersionForce_getAwater, METH_VARARGS, (char *)"AmoebaWcaDispersionForce_getAwater(AmoebaWcaDispersionForce self) -> double"},
	 { (char *)"AmoebaWcaDispersionForce_getShctd", _wrap_AmoebaWcaDispersionForce_getShctd, METH_VARARGS, (char *)"AmoebaWcaDispersionForce_getShctd(AmoebaWcaDispersionForce self) -> double"},
	 { (char *)"AmoebaWcaDispersionForce_getDispoff", _wrap_AmoebaWcaDispersionForce_getDispoff, METH_VARARGS, (char *)"AmoebaWcaDispersionForce_getDispoff(AmoebaWcaDispersionForce self) -> double"},
	 { (char *)"AmoebaWcaDispersionForce_getSlevy", _wrap_AmoebaWcaDispersionForce_getSlevy, METH_VARARGS, (char *)"AmoebaWcaDispersionForce_getSlevy(AmoebaWcaDispersionForce self) -> double"},
	 { (char *)"AmoebaWcaDispersionForce_setEpso", _wrap_AmoebaWcaDispersionForce_setEpso, METH_VARARGS, (char *)"AmoebaWcaDispersionForce_setEpso(AmoebaWcaDispersionForce self, double inputValue)"},
	 { (char *)"AmoebaWcaDispersionForce_setEpsh", _wrap_AmoebaWcaDispersionForce_setEpsh, METH_VARARGS, (char *)"AmoebaWcaDispersionForce_setEpsh(AmoebaWcaDispersionForce self, double inputValue)"},
	 { (char *)"AmoebaWcaDispersionForce_setRmino", _wrap_AmoebaWcaDispersionForce_setRmino, METH_VARARGS, (char *)"AmoebaWcaDispersionForce_setRmino(AmoebaWcaDispersionForce self, double inputValue)"},
	 { (char *)"AmoebaWcaDispersionForce_setRminh", _wrap_AmoebaWcaDispersionForce_setRminh, METH_VARARGS, (char *)"AmoebaWcaDispersionForce_setRminh(AmoebaWcaDispersionForce self, double inputValue)"},
	 { (char *)"AmoebaWcaDispersionForce_setAwater", _wrap_AmoebaWcaDispersionForce_setAwater, METH_VARARGS, (char *)"AmoebaWcaDispersionForce_setAwater(AmoebaWcaDispersionForce self, double inputValue)"},
	 { (char *)"AmoebaWcaDispersionForce_setShctd", _wrap_AmoebaWcaDispersionForce_setShctd, METH_VARARGS, (char *)"AmoebaWcaDispersionForce_setShctd(AmoebaWcaDispersionForce self, double inputValue)"},
	 { (char *)"AmoebaWcaDispersionForce_setDispoff", _wrap_AmoebaWcaDispersionForce_setDispoff, METH_VARARGS, (char *)"AmoebaWcaDispersionForce_setDispoff(AmoebaWcaDispersionForce self, double inputValue)"},
	 { (char *)"AmoebaWcaDispersionForce_setSlevy", _wrap_AmoebaWcaDispersionForce_setSlevy, METH_VARARGS, (char *)"AmoebaWcaDispersionForce_setSlevy(AmoebaWcaDispersionForce self, double inputValue)"},
	 { (char *)"new_AmoebaWcaDispersionForce", _wrap_new_AmoebaWcaDispersionForce, METH_VARARGS, (char *)"\n"
		"AmoebaWcaDispersionForce()\n"
		"new_AmoebaWcaDispersionForce(AmoebaWcaDispersionForce other) -> AmoebaWcaDispersionForce\n"
		"\n"
		"Create a Amoeba WcaDispersionForce.\n"
		""},
	 { (char *)"delete_AmoebaWcaDispersionForce", _wrap_delete_AmoebaWcaDispersionForce, METH_VARARGS, (char *)"delete_AmoebaWcaDispersionForce(AmoebaWcaDispersionForce self)"},
	 { (char *)"AmoebaWcaDispersionForce_swigregister", AmoebaWcaDispersionForce_swigregister, METH_VARARGS, NULL},
	 { (char *)"AndersenThermostat_Temperature", _wrap_AndersenThermostat_Temperature, METH_VARARGS, (char *)"\n"
		"AndersenThermostat_Temperature() -> string\n"
		"\n"
		"This is the name of the parameter which stores the current temperature of the heat bath (in Kelvin).\n"
		""},
	 { (char *)"AndersenThermostat_CollisionFrequency", _wrap_AndersenThermostat_CollisionFrequency, METH_VARARGS, (char *)"\n"
		"AndersenThermostat_CollisionFrequency() -> string\n"
		"\n"
		"This is the name of the parameter which store the current collision frequency (in 1/ps).\n"
		""},
	 { (char *)"AndersenThermostat_getDefaultTemperature", _wrap_AndersenThermostat_getDefaultTemperature, METH_VARARGS, (char *)"\n"
		"AndersenThermostat_getDefaultTemperature(AndersenThermostat self) -> double\n"
		"\n"
		"Get the default temperature of the heat bath (in Kelvin).\n"
		""},
	 { (char *)"AndersenThermostat_getDefaultCollisionFrequency", _wrap_AndersenThermostat_getDefaultCollisionFrequency, METH_VARARGS, (char *)"\n"
		"AndersenThermostat_getDefaultCollisionFrequency(AndersenThermostat self) -> double\n"
		"\n"
		"Get the default collision frequency (in 1/ps).\n"
		""},
	 { (char *)"AndersenThermostat_getRandomNumberSeed", _wrap_AndersenThermostat_getRandomNumberSeed, METH_VARARGS, (char *)"\n"
		"AndersenThermostat_getRandomNumberSeed(AndersenThermostat self) -> int\n"
		"\n"
		"Get the random number seed. See setRandomNumberSeed() for details.\n"
		""},
	 { (char *)"AndersenThermostat_setRandomNumberSeed", _wrap_AndersenThermostat_setRandomNumberSeed, METH_VARARGS, (char *)"\n"
		"AndersenThermostat_setRandomNumberSeed(AndersenThermostat self, int seed)\n"
		"\n"
		"Set the random number seed. The precise meaning of this parameter is undefined, and is left up to each Platform to interpret in an appropriate way. It is guaranteed that if two simulations are run with different random number seeds, the sequence of collisions will be different. On the other hand, no guarantees are made about the behavior of simulations that use the same seed. In particular, Platforms are permitted to use non-deterministic algorithms which produce different results on successive runs, even if those runs were initialized identically.\n"
		""},
	 { (char *)"new_AndersenThermostat", _wrap_new_AndersenThermostat, METH_VARARGS, (char *)"\n"
		"AndersenThermostat(double defaultTemperature, double defaultCollisionFrequency)\n"
		"new_AndersenThermostat(AndersenThermostat other) -> AndersenThermostat\n"
		"\n"
		"Create an AndersenThermostat.\n"
		"   Parameters:\n"
		"    - defaultTemperature the default temperature of the heat bath (in Kelvin)\n"
		"    - defaultCollisionFrequency the default collision frequency (in 1/ps)\n"
		""},
	 { (char *)"delete_AndersenThermostat", _wrap_delete_AndersenThermostat, METH_VARARGS, (char *)"delete_AndersenThermostat(AndersenThermostat self)"},
	 { (char *)"AndersenThermostat_swigregister", AndersenThermostat_swigregister, METH_VARARGS, NULL},
	 { (char *)"delete_Integrator", _wrap_delete_Integrator, METH_VARARGS, (char *)"delete_Integrator(Integrator self)"},
	 { (char *)"Integrator_getStepSize", _wrap_Integrator_getStepSize, METH_VARARGS, (char *)"\n"
		"Integrator_getStepSize(Integrator self) -> double\n"
		"\n"
		"Get the size of each time step, in picoseconds. If this integrator uses variable time steps, the size of the most recent step is returned.\n"
		""},
	 { (char *)"Integrator_setStepSize", _wrap_Integrator_setStepSize, METH_VARARGS, (char *)"\n"
		"Integrator_setStepSize(Integrator self, double size)\n"
		"\n"
		"Set the size of each time step, in picoseconds. If this integrator uses variable time steps, the effect of calling this method is undefined, and it may simply be ignored.\n"
		"   Parameters:\n"
		"    - size the step size, measured in ps\n"
		""},
	 { (char *)"Integrator_getConstraintTolerance", _wrap_Integrator_getConstraintTolerance, METH_VARARGS, (char *)"\n"
		"Integrator_getConstraintTolerance(Integrator self) -> double\n"
		"\n"
		"Get the distance tolerance within which constraints are maintained, as a fraction of the constrained distance.\n"
		""},
	 { (char *)"Integrator_setConstraintTolerance", _wrap_Integrator_setConstraintTolerance, METH_VARARGS, (char *)"\n"
		"Integrator_setConstraintTolerance(Integrator self, double tol)\n"
		"\n"
		"Set the distance tolerance within which constraints are maintained, as a fraction of the constrained distance.\n"
		""},
	 { (char *)"Integrator_step", _wrap_Integrator_step, METH_VARARGS, (char *)"\n"
		"Integrator_step(Integrator self, int steps)\n"
		"\n"
		"Advance a simulation through time by taking a series of time steps.\n"
		"   Parameters:\n"
		"    - steps the number of time steps to take\n"
		""},
	 { (char *)"Integrator_swigregister", Integrator_swigregister, METH_VARARGS, NULL},
	 { (char *)"BrownianIntegrator_getTemperature", _wrap_BrownianIntegrator_getTemperature, METH_VARARGS, (char *)"\n"
		"BrownianIntegrator_getTemperature(BrownianIntegrator self) -> double\n"
		"\n"
		"Get the temperature of the heat bath (in Kelvin).\n"
		""},
	 { (char *)"BrownianIntegrator_setTemperature", _wrap_BrownianIntegrator_setTemperature, METH_VARARGS, (char *)"\n"
		"BrownianIntegrator_setTemperature(BrownianIntegrator self, double temp)\n"
		"\n"
		"Set the temperature of the heat bath (in Kelvin).\n"
		"   Parameters:\n"
		"    - temp the temperature of the heat bath, measured in Kelvin.\n"
		""},
	 { (char *)"BrownianIntegrator_getFriction", _wrap_BrownianIntegrator_getFriction, METH_VARARGS, (char *)"\n"
		"BrownianIntegrator_getFriction(BrownianIntegrator self) -> double\n"
		"\n"
		"Get the friction coefficient which determines how strongly the system is coupled to the heat bath (in inverse ps).\n"
		""},
	 { (char *)"BrownianIntegrator_setFriction", _wrap_BrownianIntegrator_setFriction, METH_VARARGS, (char *)"\n"
		"BrownianIntegrator_setFriction(BrownianIntegrator self, double coeff)\n"
		"\n"
		"Set the friction coefficient which determines how strongly the system is coupled to the heat bath (in inverse ps).\n"
		"   Parameters:\n"
		"    - coeff the friction coefficient, measured in 1/ps\n"
		""},
	 { (char *)"BrownianIntegrator_getRandomNumberSeed", _wrap_BrownianIntegrator_getRandomNumberSeed, METH_VARARGS, (char *)"\n"
		"BrownianIntegrator_getRandomNumberSeed(BrownianIntegrator self) -> int\n"
		"\n"
		"Get the random number seed. See setRandomNumberSeed() for details.\n"
		""},
	 { (char *)"BrownianIntegrator_setRandomNumberSeed", _wrap_BrownianIntegrator_setRandomNumberSeed, METH_VARARGS, (char *)"\n"
		"BrownianIntegrator_setRandomNumberSeed(BrownianIntegrator self, int seed)\n"
		"\n"
		"Set the random number seed. The precise meaning of this parameter is undefined, and is left up to each Platform to interpret in an appropriate way. It is guaranteed that if two simulations are run with different random number seeds, the sequence of random forces will be different. On the other hand, no guarantees are made about the behavior of simulations that use the same seed. In particular, Platforms are permitted to use non-deterministic algorithms which produce different results on successive runs, even if those runs were initialized identically.\n"
		""},
	 { (char *)"BrownianIntegrator_step", _wrap_BrownianIntegrator_step, METH_VARARGS, (char *)"\n"
		"BrownianIntegrator_step(BrownianIntegrator self, int steps)\n"
		"\n"
		"Advance a simulation through time by taking a series of time steps.\n"
		"   Parameters:\n"
		"    - steps the number of time steps to take\n"
		""},
	 { (char *)"new_BrownianIntegrator", _wrap_new_BrownianIntegrator, METH_VARARGS, (char *)"\n"
		"BrownianIntegrator(double temperature, double frictionCoeff, double stepSize)\n"
		"new_BrownianIntegrator(BrownianIntegrator other) -> BrownianIntegrator\n"
		"\n"
		"Create a BrownianIntegrator.\n"
		"   Parameters:\n"
		"    - temperature the temperature of the heat bath (in Kelvin)\n"
		"    - frictionCoeff the friction coefficient which couples the system to the heat bath, measured in 1/ps\n"
		"    - stepSize the step size with which to integrator the system (in picoseconds)\n"
		""},
	 { (char *)"delete_BrownianIntegrator", _wrap_delete_BrownianIntegrator, METH_VARARGS, (char *)"delete_BrownianIntegrator(BrownianIntegrator self)"},
	 { (char *)"BrownianIntegrator_swigregister", BrownianIntegrator_swigregister, METH_VARARGS, NULL},
	 { (char *)"CMAPTorsionForce_getNumMaps", _wrap_CMAPTorsionForce_getNumMaps, METH_VARARGS, (char *)"\n"
		"CMAPTorsionForce_getNumMaps(CMAPTorsionForce self) -> int\n"
		"\n"
		"Get the number of maps that have been defined.\n"
		""},
	 { (char *)"CMAPTorsionForce_getNumTorsions", _wrap_CMAPTorsionForce_getNumTorsions, METH_VARARGS, (char *)"\n"
		"CMAPTorsionForce_getNumTorsions(CMAPTorsionForce self) -> int\n"
		"\n"
		"Get the number of CMAP torsion terms in the potential function\n"
		""},
	 { (char *)"CMAPTorsionForce_addMap", _wrap_CMAPTorsionForce_addMap, METH_VARARGS, (char *)"\n"
		"CMAPTorsionForce_addMap(CMAPTorsionForce self, int size, vectord energy) -> int\n"
		"\n"
		"Create a new map that can be used for torsion pairs.\n"
		"   Parameters:\n"
		"    - size the size of the map along each dimension\n"
		"    - energy the energy values for the map. This must be of length size*size. The element energy[i+size*j] contains the energy when the first torsion angle equals i*2*PI/size and the second torsion angle equals j*2*PI/size.\n"
		""},
	 { (char *)"CMAPTorsionForce_getMapParameters", _wrap_CMAPTorsionForce_getMapParameters, METH_VARARGS, (char *)"\n"
		"CMAPTorsionForce_getMapParameters(CMAPTorsionForce self, int index)\n"
		"\n"
		"Get the energy values of a map.\n"
		"   Parameters:\n"
		"    - index the index of the map for which to get energy values\n"
		"    - size the size of the map along each dimension\n"
		"    - energy the energy values for the map. This must be of length size*size. The element energy[i+size*j] contains the energy when the first torsion angle equals i*2*PI/size and the second torsion angle equals j*2*PI/size.\n"
		""},
	 { (char *)"CMAPTorsionForce_setMapParameters", _wrap_CMAPTorsionForce_setMapParameters, METH_VARARGS, (char *)"\n"
		"CMAPTorsionForce_setMapParameters(CMAPTorsionForce self, int index, int size, vectord energy)\n"
		"\n"
		"Set the energy values of a map.\n"
		"   Parameters:\n"
		"    - index the index of the map for which to set energy values\n"
		"    - size the size of the map along each dimension\n"
		"    - energy the energy values for the map. This must be of length size*size. The element energy[i+size*j] contains the energy when the first torsion angle equals i*2*PI/size and the second torsion angle equals j*2*PI/size.\n"
		""},
	 { (char *)"CMAPTorsionForce_addTorsion", _wrap_CMAPTorsionForce_addTorsion, METH_VARARGS, (char *)"\n"
		"CMAPTorsionForce_addTorsion(CMAPTorsionForce self, int map, int a1, int a2, int a3, \n"
		"    int a4, int b1, int b2, int b3, int b4) -> int\n"
		"\n"
		"Add a CMAP torsion term to the force field.\n"
		"   Parameters:\n"
		"    - map the index of the map to use for this term\n"
		"    - a1 the index of the first particle forming the first torsion\n"
		"    - a2 the index of the second particle forming the first torsion\n"
		"    - a3 the index of the third particle forming the first torsion\n"
		"    - a4 the index of the fourth particle forming the first torsion\n"
		"    - b1 the index of the first particle forming the second torsion\n"
		"    - b2 the index of the second particle forming the second torsion\n"
		"    - b3 the index of the third particle forming the second torsion\n"
		"    - b4 the index of the fourth particle forming the second torsion\n"
		""},
	 { (char *)"CMAPTorsionForce_getTorsionParameters", _wrap_CMAPTorsionForce_getTorsionParameters, METH_VARARGS, (char *)"\n"
		"CMAPTorsionForce_getTorsionParameters(CMAPTorsionForce self, int index)\n"
		"\n"
		"Get the force field parameters for a CMAP torsion term.\n"
		"   Parameters:\n"
		"    - index the index of the torsion for which to get parameters\n"
		"    - map the index of the map to use for this term\n"
		"    - a1 the index of the first particle forming the first torsion\n"
		"    - a2 the index of the second particle forming the first torsion\n"
		"    - a3 the index of the third particle forming the first torsion\n"
		"    - a4 the index of the fourth particle forming the first torsion\n"
		"    - b1 the index of the first particle forming the second torsion\n"
		"    - b2 the index of the second particle forming the second torsion\n"
		"    - b3 the index of the third particle forming the second torsion\n"
		"    - b4 the index of the fourth particle forming the second torsion\n"
		""},
	 { (char *)"CMAPTorsionForce_setTorsionParameters", _wrap_CMAPTorsionForce_setTorsionParameters, METH_VARARGS, (char *)"\n"
		"CMAPTorsionForce_setTorsionParameters(CMAPTorsionForce self, int index, int map, int a1, \n"
		"    int a2, int a3, int a4, int b1, int b2, int b3, \n"
		"    int b4)\n"
		"\n"
		"Set the force field parameters for a CMAP torsion term.\n"
		"   Parameters:\n"
		"    - index the index of the torsion for which to set parameters\n"
		"    - map the index of the map to use for this term\n"
		"    - a1 the index of the first particle forming the first torsion\n"
		"    - a2 the index of the second particle forming the first torsion\n"
		"    - a3 the index of the third particle forming the first torsion\n"
		"    - a4 the index of the fourth particle forming the first torsion\n"
		"    - b1 the index of the first particle forming the second torsion\n"
		"    - b2 the index of the second particle forming the second torsion\n"
		"    - b3 the index of the third particle forming the second torsion\n"
		"    - b4 the index of the fourth particle forming the second torsion\n"
		""},
	 { (char *)"new_CMAPTorsionForce", _wrap_new_CMAPTorsionForce, METH_VARARGS, (char *)"\n"
		"CMAPTorsionForce()\n"
		"new_CMAPTorsionForce(CMAPTorsionForce other) -> CMAPTorsionForce\n"
		"\n"
		"Create a CMAPTorsionForce.\n"
		""},
	 { (char *)"delete_CMAPTorsionForce", _wrap_delete_CMAPTorsionForce, METH_VARARGS, (char *)"delete_CMAPTorsionForce(CMAPTorsionForce self)"},
	 { (char *)"CMAPTorsionForce_swigregister", CMAPTorsionForce_swigregister, METH_VARARGS, NULL},
	 { (char *)"CMMotionRemover_getFrequency", _wrap_CMMotionRemover_getFrequency, METH_VARARGS, (char *)"\n"
		"CMMotionRemover_getFrequency(CMMotionRemover self) -> int\n"
		"\n"
		"Get the frequency (in time steps) at which center of mass motion should be removed\n"
		""},
	 { (char *)"CMMotionRemover_setFrequency", _wrap_CMMotionRemover_setFrequency, METH_VARARGS, (char *)"\n"
		"CMMotionRemover_setFrequency(CMMotionRemover self, int freq)\n"
		"\n"
		"Set the frequency (in time steps) at which center of mass motion should be removed\n"
		""},
	 { (char *)"new_CMMotionRemover", _wrap_new_CMMotionRemover, METH_VARARGS, (char *)"\n"
		"CMMotionRemover(int frequency = 1)\n"
		"CMMotionRemover()\n"
		"new_CMMotionRemover(CMMotionRemover other) -> CMMotionRemover\n"
		"\n"
		"Create a CMMotionRemover.\n"
		""},
	 { (char *)"delete_CMMotionRemover", _wrap_delete_CMMotionRemover, METH_VARARGS, (char *)"delete_CMMotionRemover(CMMotionRemover self)"},
	 { (char *)"CMMotionRemover_swigregister", CMMotionRemover_swigregister, METH_VARARGS, NULL},
	 { (char *)"delete_Context", _wrap_delete_Context, METH_VARARGS, (char *)"delete_Context(Context self)"},
	 { (char *)"Context_getSystem", _wrap_Context_getSystem, METH_VARARGS, (char *)"\n"
		"getSystem() -> System\n"
		"Context_getSystem(Context self) -> System\n"
		"\n"
		"Get System being simulated in this context.\n"
		""},
	 { (char *)"Context_getIntegrator", _wrap_Context_getIntegrator, METH_VARARGS, (char *)"\n"
		"getIntegrator() -> Integrator\n"
		"Context_getIntegrator(Context self) -> Integrator\n"
		"\n"
		"Get Integrator being used to by this context.\n"
		""},
	 { (char *)"Context_getPlatform", _wrap_Context_getPlatform, METH_VARARGS, (char *)"\n"
		"getPlatform() -> Platform\n"
		"Context_getPlatform(Context self) -> Platform\n"
		"\n"
		"Get the Platform being used for calculations.\n"
		""},
	 { (char *)"Context_setTime", _wrap_Context_setTime, METH_VARARGS, (char *)"\n"
		"Context_setTime(Context self, double time)\n"
		"\n"
		"Set the current time of the simulation (in picoseconds).\n"
		""},
	 { (char *)"Context_setPositions", _wrap_Context_setPositions, METH_VARARGS, (char *)"\n"
		"setPositions(self, positions)\n"
		"\n"
		"Set the positions of all particles in the System (measured in nm). This method simply sets the positions without checking to see whether they satisfy distance constraints. If you want constraints to be enforced, call applyConstraints() after setting the positions.\n"
		"   Parameters:\n"
		"    - positions a vector whose length equals the number of particles in the System. The i'th element contains the position of the i'th particle.\n"
		""},
	 { (char *)"Context_setVelocities", _wrap_Context_setVelocities, METH_VARARGS, (char *)"\n"
		"setVelocities(self, velocities)\n"
		"\n"
		"Set the velocities of all particles in the System (measured in nm/picosecond).\n"
		"   Parameters:\n"
		"    - velocities a vector whose length equals the number of particles in the System. The i'th element contains the velocity of the i'th particle.\n"
		""},
	 { (char *)"Context_getParameter", _wrap_Context_getParameter, METH_VARARGS, (char *)"\n"
		"Context_getParameter(Context self, string name) -> double\n"
		"\n"
		"Get the value of an adjustable parameter defined by a Force object in the System.\n"
		"   Parameters:\n"
		"    - name the name of the parameter to get\n"
		""},
	 { (char *)"Context_setParameter", _wrap_Context_setParameter, METH_VARARGS, (char *)"\n"
		"Context_setParameter(Context self, string name, double value)\n"
		"\n"
		"Set the value of an adjustable parameter defined by a Force object in the System.\n"
		"   Parameters:\n"
		"    - name the name of the parameter to set\n"
		"    - value the value of the parameter\n"
		""},
	 { (char *)"Context_setPeriodicBoxVectors", _wrap_Context_setPeriodicBoxVectors, METH_VARARGS, (char *)"\n"
		"Context_setPeriodicBoxVectors(Context self, Vec3 a, Vec3 b, Vec3 c)\n"
		"\n"
		"Set the vectors defining the axes of the periodic box (measured in nm). They will affect any Force that uses periodic boundary conditions.\n"
		"\n"
		"Currently, only rectangular boxes are supported. This means that a, b, and c must be aligned with the x, y, and z axes respectively. Future releases may support arbitrary triclinic boxes.\n"
		"   Parameters:\n"
		"    - a the vector defining the first edge of the periodic box\n"
		"    - b the vector defining the second edge of the periodic box\n"
		"    - c the vector defining the third edge of the periodic box\n"
		""},
	 { (char *)"Context_applyConstraints", _wrap_Context_applyConstraints, METH_VARARGS, (char *)"\n"
		"Context_applyConstraints(Context self, double tol)\n"
		"\n"
		"Update the positions of particles so that all distance constraints are satisfied. This also recomputes the locations of all virtual sites.\n"
		"   Parameters:\n"
		"    - tol the distance tolerance within which constraints must be satisfied.\n"
		""},
	 { (char *)"Context_computeVirtualSites", _wrap_Context_computeVirtualSites, METH_VARARGS, (char *)"\n"
		"Context_computeVirtualSites(Context self)\n"
		"\n"
		"Recompute the locations of all virtual sites. There is rarely a reason to call this, since virtual sites are also updated by applyConstraints(). This is only for the rare situations when you want to enforce virtual sites but <i>not</i> constraints.\n"
		""},
	 { (char *)"Context_reinitialize", _wrap_Context_reinitialize, METH_VARARGS, (char *)"\n"
		"Context_reinitialize(Context self)\n"
		"\n"
		"When a Context is created, it may cache information about the System being simulated and the Force objects contained in it. This means that, if the System or Forces are then modified, the Context might not see all of the changes. Call reinitialize() to force the Context to rebuild its internal representation of the System and pick up any changes that have been made.\n"
		"\n"
		"This is an expensive operation, so you should try to avoid calling it too frequently.\n"
		""},
	 { (char *)"Context__getStateAsLists", _wrap_Context__getStateAsLists, METH_VARARGS, (char *)"\n"
		"Context__getStateAsLists(Context self, int getPositions, int getVelocities, \n"
		"    int getForces, int getEnergy, int getParameters, \n"
		"    int enforcePeriodic, int groups) -> PyObject\n"
		""},
	 { (char *)"new_Context", _wrap_new_Context, METH_VARARGS, (char *)"\n"
		"Context(System system, Integrator integrator)\n"
		"Context(System system, Integrator integrator, Platform platform)\n"
		"Context(System system, Integrator integrator, Platform platform, \n"
		"    mapstringstring properties)\n"
		"new_Context(Context other) -> Context\n"
		"\n"
		"Construct a new Context in which to run a simulation, explicitly specifying what Platform should be used to perform calculations and the values of platform-specific properties.\n"
		"   Parameters:\n"
		"    - system the System which will be simulated\n"
		"    - integrator the Integrator which will be used to simulate the System\n"
		"    - platform the Platform to use for calculations\n"
		"    - properties a set of values for platform-specific properties. Keys are the property names.\n"
		""},
	 { (char *)"Context_swigregister", Context_swigregister, METH_VARARGS, NULL},
	 { (char *)"CustomAngleForce_getNumAngles", _wrap_CustomAngleForce_getNumAngles, METH_VARARGS, (char *)"\n"
		"CustomAngleForce_getNumAngles(CustomAngleForce self) -> int\n"
		"\n"
		"Get the number of angles for which force field parameters have been defined.\n"
		""},
	 { (char *)"CustomAngleForce_getNumPerAngleParameters", _wrap_CustomAngleForce_getNumPerAngleParameters, METH_VARARGS, (char *)"\n"
		"CustomAngleForce_getNumPerAngleParameters(CustomAngleForce self) -> int\n"
		"\n"
		"Get the number of per-angle parameters that the interaction depends on.\n"
		""},
	 { (char *)"CustomAngleForce_getNumGlobalParameters", _wrap_CustomAngleForce_getNumGlobalParameters, METH_VARARGS, (char *)"\n"
		"CustomAngleForce_getNumGlobalParameters(CustomAngleForce self) -> int\n"
		"\n"
		"Get the number of global parameters that the interaction depends on.\n"
		""},
	 { (char *)"CustomAngleForce_getEnergyFunction", _wrap_CustomAngleForce_getEnergyFunction, METH_VARARGS, (char *)"\n"
		"CustomAngleForce_getEnergyFunction(CustomAngleForce self) -> string\n"
		"\n"
		"Get the algebraic expression that gives the interaction energy for each angle\n"
		""},
	 { (char *)"CustomAngleForce_setEnergyFunction", _wrap_CustomAngleForce_setEnergyFunction, METH_VARARGS, (char *)"\n"
		"CustomAngleForce_setEnergyFunction(CustomAngleForce self, string energy)\n"
		"\n"
		"Set the algebraic expression that gives the interaction energy for each angle\n"
		""},
	 { (char *)"CustomAngleForce_addPerAngleParameter", _wrap_CustomAngleForce_addPerAngleParameter, METH_VARARGS, (char *)"\n"
		"CustomAngleForce_addPerAngleParameter(CustomAngleForce self, string name) -> int\n"
		"\n"
		"Add a new per-angle parameter that the interaction may depend on.\n"
		"   Parameters:\n"
		"    - name the name of the parameter\n"
		""},
	 { (char *)"CustomAngleForce_getPerAngleParameterName", _wrap_CustomAngleForce_getPerAngleParameterName, METH_VARARGS, (char *)"\n"
		"CustomAngleForce_getPerAngleParameterName(CustomAngleForce self, int index) -> string\n"
		"\n"
		"Get the name of a per-angle parameter.\n"
		"   Parameters:\n"
		"    - index the index of the parameter for which to get the name\n"
		""},
	 { (char *)"CustomAngleForce_setPerAngleParameterName", _wrap_CustomAngleForce_setPerAngleParameterName, METH_VARARGS, (char *)"\n"
		"CustomAngleForce_setPerAngleParameterName(CustomAngleForce self, int index, string name)\n"
		"\n"
		"Set the name of a per-angle parameter.\n"
		"   Parameters:\n"
		"    - index the index of the parameter for which to set the name\n"
		"    - name the name of the parameter\n"
		""},
	 { (char *)"CustomAngleForce_addGlobalParameter", _wrap_CustomAngleForce_addGlobalParameter, METH_VARARGS, (char *)"\n"
		"CustomAngleForce_addGlobalParameter(CustomAngleForce self, string name, double defaultValue) -> int\n"
		"\n"
		"Add a new global parameter that the interaction may depend on.\n"
		"   Parameters:\n"
		"    - name the name of the parameter\n"
		"    - defaultValue the default value of the parameter\n"
		""},
	 { (char *)"CustomAngleForce_getGlobalParameterName", _wrap_CustomAngleForce_getGlobalParameterName, METH_VARARGS, (char *)"\n"
		"CustomAngleForce_getGlobalParameterName(CustomAngleForce self, int index) -> string\n"
		"\n"
		"Get the name of a global parameter.\n"
		"   Parameters:\n"
		"    - index the index of the parameter for which to get the name\n"
		""},
	 { (char *)"CustomAngleForce_setGlobalParameterName", _wrap_CustomAngleForce_setGlobalParameterName, METH_VARARGS, (char *)"\n"
		"CustomAngleForce_setGlobalParameterName(CustomAngleForce self, int index, string name)\n"
		"\n"
		"Set the name of a global parameter.\n"
		"   Parameters:\n"
		"    - index the index of the parameter for which to set the name\n"
		"    - name the name of the parameter\n"
		""},
	 { (char *)"CustomAngleForce_getGlobalParameterDefaultValue", _wrap_CustomAngleForce_getGlobalParameterDefaultValue, METH_VARARGS, (char *)"\n"
		"CustomAngleForce_getGlobalParameterDefaultValue(CustomAngleForce self, int index) -> double\n"
		"\n"
		"Get the default value of a global parameter.\n"
		"   Parameters:\n"
		"    - index the index of the parameter for which to get the default value\n"
		""},
	 { (char *)"CustomAngleForce_setGlobalParameterDefaultValue", _wrap_CustomAngleForce_setGlobalParameterDefaultValue, METH_VARARGS, (char *)"\n"
		"CustomAngleForce_setGlobalParameterDefaultValue(CustomAngleForce self, int index, double defaultValue)\n"
		"\n"
		"Set the default value of a global parameter.\n"
		"   Parameters:\n"
		"    - index the index of the parameter for which to set the default value\n"
		"    - name the default value of the parameter\n"
		""},
	 { (char *)"CustomAngleForce_addAngle", _wrap_CustomAngleForce_addAngle, METH_VARARGS, (char *)"\n"
		"CustomAngleForce_addAngle(CustomAngleForce self, int particle1, int particle2, \n"
		"    int particle3, vectord parameters) -> int\n"
		"\n"
		"Add an angle term to the force field.\n"
		"   Parameters:\n"
		"    - particle1 the index of the first particle connected by the angle\n"
		"    - particle2 the index of the second particle connected by the angle\n"
		"    - particle3 the index of the third particle connected by the angle\n"
		"    - parameters the list of parameters for the new angle\n"
		""},
	 { (char *)"CustomAngleForce_getAngleParameters", _wrap_CustomAngleForce_getAngleParameters, METH_VARARGS, (char *)"\n"
		"CustomAngleForce_getAngleParameters(CustomAngleForce self, int index)\n"
		"\n"
		"Get the force field parameters for an angle term.\n"
		"   Parameters:\n"
		"    - index the index of the angle for which to get parameters\n"
		"    - particle1 the index of the first particle connected by the angle\n"
		"    - particle2 the index of the second particle connected by the angle\n"
		"    - particle3 the index of the third particle connected by the angle\n"
		"    - parameters the list of parameters for the angle\n"
		""},
	 { (char *)"CustomAngleForce_setAngleParameters", _wrap_CustomAngleForce_setAngleParameters, METH_VARARGS, (char *)"\n"
		"CustomAngleForce_setAngleParameters(CustomAngleForce self, int index, int particle1, int particle2, \n"
		"    int particle3, vectord parameters)\n"
		"\n"
		"Set the force field parameters for an angle term.\n"
		"   Parameters:\n"
		"    - index the index of the angle for which to set parameters\n"
		"    - particle1 the index of the first particle connected by the angle\n"
		"    - particle2 the index of the second particle connected by the angle\n"
		"    - particle3 the index of the third particle connected by the angle\n"
		"    - parameters the list of parameters for the angle\n"
		""},
	 { (char *)"new_CustomAngleForce", _wrap_new_CustomAngleForce, METH_VARARGS, (char *)"\n"
		"CustomAngleForce(string energy)\n"
		"new_CustomAngleForce(CustomAngleForce other) -> CustomAngleForce\n"
		"\n"
		"Create a CustomAngleForce.\n"
		"   Parameters:\n"
		"    - energy an algebraic expression giving the interaction energy between three particles as a function of theta, the angle between them\n"
		""},
	 { (char *)"delete_CustomAngleForce", _wrap_delete_CustomAngleForce, METH_VARARGS, (char *)"delete_CustomAngleForce(CustomAngleForce self)"},
	 { (char *)"CustomAngleForce_swigregister", CustomAngleForce_swigregister, METH_VARARGS, NULL},
	 { (char *)"CustomBondForce_getNumBonds", _wrap_CustomBondForce_getNumBonds, METH_VARARGS, (char *)"\n"
		"CustomBondForce_getNumBonds(CustomBondForce self) -> int\n"
		"\n"
		"Get the number of bonds for which force field parameters have been defined.\n"
		""},
	 { (char *)"CustomBondForce_getNumPerBondParameters", _wrap_CustomBondForce_getNumPerBondParameters, METH_VARARGS, (char *)"\n"
		"CustomBondForce_getNumPerBondParameters(CustomBondForce self) -> int\n"
		"\n"
		"Get the number of per-bond parameters that the interaction depends on.\n"
		""},
	 { (char *)"CustomBondForce_getNumGlobalParameters", _wrap_CustomBondForce_getNumGlobalParameters, METH_VARARGS, (char *)"\n"
		"CustomBondForce_getNumGlobalParameters(CustomBondForce self) -> int\n"
		"\n"
		"Get the number of global parameters that the interaction depends on.\n"
		""},
	 { (char *)"CustomBondForce_getEnergyFunction", _wrap_CustomBondForce_getEnergyFunction, METH_VARARGS, (char *)"\n"
		"CustomBondForce_getEnergyFunction(CustomBondForce self) -> string\n"
		"\n"
		"Get the algebraic expression that gives the interaction energy for each bond\n"
		""},
	 { (char *)"CustomBondForce_setEnergyFunction", _wrap_CustomBondForce_setEnergyFunction, METH_VARARGS, (char *)"\n"
		"CustomBondForce_setEnergyFunction(CustomBondForce self, string energy)\n"
		"\n"
		"Set the algebraic expression that gives the interaction energy for each bond\n"
		""},
	 { (char *)"CustomBondForce_addPerBondParameter", _wrap_CustomBondForce_addPerBondParameter, METH_VARARGS, (char *)"\n"
		"CustomBondForce_addPerBondParameter(CustomBondForce self, string name) -> int\n"
		"\n"
		"Add a new per-bond parameter that the interaction may depend on.\n"
		"   Parameters:\n"
		"    - name the name of the parameter\n"
		""},
	 { (char *)"CustomBondForce_getPerBondParameterName", _wrap_CustomBondForce_getPerBondParameterName, METH_VARARGS, (char *)"\n"
		"CustomBondForce_getPerBondParameterName(CustomBondForce self, int index) -> string\n"
		"\n"
		"Get the name of a per-bond parameter.\n"
		"   Parameters:\n"
		"    - index the index of the parameter for which to get the name\n"
		""},
	 { (char *)"CustomBondForce_setPerBondParameterName", _wrap_CustomBondForce_setPerBondParameterName, METH_VARARGS, (char *)"\n"
		"CustomBondForce_setPerBondParameterName(CustomBondForce self, int index, string name)\n"
		"\n"
		"Set the name of a per-bond parameter.\n"
		"   Parameters:\n"
		"    - index the index of the parameter for which to set the name\n"
		"    - name the name of the parameter\n"
		""},
	 { (char *)"CustomBondForce_addGlobalParameter", _wrap_CustomBondForce_addGlobalParameter, METH_VARARGS, (char *)"\n"
		"CustomBondForce_addGlobalParameter(CustomBondForce self, string name, double defaultValue) -> int\n"
		"\n"
		"Add a new global parameter that the interaction may depend on.\n"
		"   Parameters:\n"
		"    - name the name of the parameter\n"
		"    - defaultValue the default value of the parameter\n"
		""},
	 { (char *)"CustomBondForce_getGlobalParameterName", _wrap_CustomBondForce_getGlobalParameterName, METH_VARARGS, (char *)"\n"
		"CustomBondForce_getGlobalParameterName(CustomBondForce self, int index) -> string\n"
		"\n"
		"Get the name of a global parameter.\n"
		"   Parameters:\n"
		"    - index the index of the parameter for which to get the name\n"
		""},
	 { (char *)"CustomBondForce_setGlobalParameterName", _wrap_CustomBondForce_setGlobalParameterName, METH_VARARGS, (char *)"\n"
		"CustomBondForce_setGlobalParameterName(CustomBondForce self, int index, string name)\n"
		"\n"
		"Set the name of a global parameter.\n"
		"   Parameters:\n"
		"    - index the index of the parameter for which to set the name\n"
		"    - name the name of the parameter\n"
		""},
	 { (char *)"CustomBondForce_getGlobalParameterDefaultValue", _wrap_CustomBondForce_getGlobalParameterDefaultValue, METH_VARARGS, (char *)"\n"
		"CustomBondForce_getGlobalParameterDefaultValue(CustomBondForce self, int index) -> double\n"
		"\n"
		"Get the default value of a global parameter.\n"
		"   Parameters:\n"
		"    - index the index of the parameter for which to get the default value\n"
		""},
	 { (char *)"CustomBondForce_setGlobalParameterDefaultValue", _wrap_CustomBondForce_setGlobalParameterDefaultValue, METH_VARARGS, (char *)"\n"
		"CustomBondForce_setGlobalParameterDefaultValue(CustomBondForce self, int index, double defaultValue)\n"
		"\n"
		"Set the default value of a global parameter.\n"
		"   Parameters:\n"
		"    - index the index of the parameter for which to set the default value\n"
		"    - name the default value of the parameter\n"
		""},
	 { (char *)"CustomBondForce_addBond", _wrap_CustomBondForce_addBond, METH_VARARGS, (char *)"\n"
		"CustomBondForce_addBond(CustomBondForce self, int particle1, int particle2, \n"
		"    vectord parameters) -> int\n"
		"\n"
		"Add a bond term to the force field.\n"
		"   Parameters:\n"
		"    - particle1 the index of the first particle connected by the bond\n"
		"    - particle2 the index of the second particle connected by the bond\n"
		"    - parameters the list of parameters for the new bond\n"
		""},
	 { (char *)"CustomBondForce_getBondParameters", _wrap_CustomBondForce_getBondParameters, METH_VARARGS, (char *)"\n"
		"CustomBondForce_getBondParameters(CustomBondForce self, int index)\n"
		"\n"
		"Get the force field parameters for a bond term.\n"
		"   Parameters:\n"
		"    - index the index of the bond for which to get parameters\n"
		"    - particle1 the index of the first particle connected by the bond\n"
		"    - particle2 the index of the second particle connected by the bond\n"
		"    - parameters the list of parameters for the bond\n"
		""},
	 { (char *)"CustomBondForce_setBondParameters", _wrap_CustomBondForce_setBondParameters, METH_VARARGS, (char *)"\n"
		"CustomBondForce_setBondParameters(CustomBondForce self, int index, int particle1, int particle2, \n"
		"    vectord parameters)\n"
		"\n"
		"Set the force field parameters for a bond term.\n"
		"   Parameters:\n"
		"    - index the index of the bond for which to set parameters\n"
		"    - particle1 the index of the first particle connected by the bond\n"
		"    - particle2 the index of the second particle connected by the bond\n"
		"    - parameters the list of parameters for the bond\n"
		""},
	 { (char *)"new_CustomBondForce", _wrap_new_CustomBondForce, METH_VARARGS, (char *)"\n"
		"CustomBondForce(string energy)\n"
		"new_CustomBondForce(CustomBondForce other) -> CustomBondForce\n"
		"\n"
		"Create a CustomBondForce.\n"
		"   Parameters:\n"
		"    - energy an algebraic expression giving the interaction energy between two bonded particles as a function of r, the distance between them\n"
		""},
	 { (char *)"delete_CustomBondForce", _wrap_delete_CustomBondForce, METH_VARARGS, (char *)"delete_CustomBondForce(CustomBondForce self)"},
	 { (char *)"CustomBondForce_swigregister", CustomBondForce_swigregister, METH_VARARGS, NULL},
	 { (char *)"CustomExternalForce_getNumParticles", _wrap_CustomExternalForce_getNumParticles, METH_VARARGS, (char *)"\n"
		"CustomExternalForce_getNumParticles(CustomExternalForce self) -> int\n"
		"\n"
		"Get the number of particles for which force field parameters have been defined.\n"
		""},
	 { (char *)"CustomExternalForce_getNumPerParticleParameters", _wrap_CustomExternalForce_getNumPerParticleParameters, METH_VARARGS, (char *)"\n"
		"CustomExternalForce_getNumPerParticleParameters(CustomExternalForce self) -> int\n"
		"\n"
		"Get the number of per-particle parameters that the force depends on\n"
		""},
	 { (char *)"CustomExternalForce_getNumGlobalParameters", _wrap_CustomExternalForce_getNumGlobalParameters, METH_VARARGS, (char *)"\n"
		"CustomExternalForce_getNumGlobalParameters(CustomExternalForce self) -> int\n"
		"\n"
		"Get the number of global parameters that the force depends on.\n"
		""},
	 { (char *)"CustomExternalForce_getEnergyFunction", _wrap_CustomExternalForce_getEnergyFunction, METH_VARARGS, (char *)"\n"
		"CustomExternalForce_getEnergyFunction(CustomExternalForce self) -> string\n"
		"\n"
		"Get the algebraic expression that gives the potential energy of each particle\n"
		""},
	 { (char *)"CustomExternalForce_setEnergyFunction", _wrap_CustomExternalForce_setEnergyFunction, METH_VARARGS, (char *)"\n"
		"CustomExternalForce_setEnergyFunction(CustomExternalForce self, string energy)\n"
		"\n"
		"Set the algebraic expression that gives the potential energy of each particle\n"
		""},
	 { (char *)"CustomExternalForce_addPerParticleParameter", _wrap_CustomExternalForce_addPerParticleParameter, METH_VARARGS, (char *)"\n"
		"CustomExternalForce_addPerParticleParameter(CustomExternalForce self, string name) -> int\n"
		"\n"
		"Add a new per-particle parameter that the force may depend on.\n"
		"   Parameters:\n"
		"    - name the name of the parameter\n"
		""},
	 { (char *)"CustomExternalForce_getPerParticleParameterName", _wrap_CustomExternalForce_getPerParticleParameterName, METH_VARARGS, (char *)"\n"
		"CustomExternalForce_getPerParticleParameterName(CustomExternalForce self, int index) -> string\n"
		"\n"
		"Get the name of a per-particle parameter.\n"
		"   Parameters:\n"
		"    - index the index of the parameter for which to get the name\n"
		""},
	 { (char *)"CustomExternalForce_setPerParticleParameterName", _wrap_CustomExternalForce_setPerParticleParameterName, METH_VARARGS, (char *)"\n"
		"CustomExternalForce_setPerParticleParameterName(CustomExternalForce self, int index, string name)\n"
		"\n"
		"Set the name of a per-particle parameter.\n"
		"   Parameters:\n"
		"    - index the index of the parameter for which to set the name\n"
		"    - name the name of the parameter\n"
		""},
	 { (char *)"CustomExternalForce_addGlobalParameter", _wrap_CustomExternalForce_addGlobalParameter, METH_VARARGS, (char *)"\n"
		"CustomExternalForce_addGlobalParameter(CustomExternalForce self, string name, double defaultValue) -> int\n"
		"\n"
		"Add a new global parameter that the force may depend on.\n"
		"   Parameters:\n"
		"    - name the name of the parameter\n"
		"    - defaultValue the default value of the parameter\n"
		""},
	 { (char *)"CustomExternalForce_getGlobalParameterName", _wrap_CustomExternalForce_getGlobalParameterName, METH_VARARGS, (char *)"\n"
		"CustomExternalForce_getGlobalParameterName(CustomExternalForce self, int index) -> string\n"
		"\n"
		"Get the name of a global parameter.\n"
		"   Parameters:\n"
		"    - index the index of the parameter for which to get the name\n"
		""},
	 { (char *)"CustomExternalForce_setGlobalParameterName", _wrap_CustomExternalForce_setGlobalParameterName, METH_VARARGS, (char *)"\n"
		"CustomExternalForce_setGlobalParameterName(CustomExternalForce self, int index, string name)\n"
		"\n"
		"Set the name of a global parameter.\n"
		"   Parameters:\n"
		"    - index the index of the parameter for which to set the name\n"
		"    - name the name of the parameter\n"
		""},
	 { (char *)"CustomExternalForce_getGlobalParameterDefaultValue", _wrap_CustomExternalForce_getGlobalParameterDefaultValue, METH_VARARGS, (char *)"\n"
		"CustomExternalForce_getGlobalParameterDefaultValue(CustomExternalForce self, int index) -> double\n"
		"\n"
		"Get the default value of a global parameter.\n"
		"   Parameters:\n"
		"    - index the index of the parameter for which to get the default value\n"
		""},
	 { (char *)"CustomExternalForce_setGlobalParameterDefaultValue", _wrap_CustomExternalForce_setGlobalParameterDefaultValue, METH_VARARGS, (char *)"\n"
		"CustomExternalForce_setGlobalParameterDefaultValue(CustomExternalForce self, int index, double defaultValue)\n"
		"\n"
		"Set the default value of a global parameter.\n"
		"   Parameters:\n"
		"    - index the index of the parameter for which to set the default value\n"
		"    - name the default value of the parameter\n"
		""},
	 { (char *)"CustomExternalForce_addParticle", _wrap_CustomExternalForce_addParticle, METH_VARARGS, (char *)"\n"
		"CustomExternalForce_addParticle(CustomExternalForce self, int particle, vectord parameters) -> int\n"
		"\n"
		"Add a particle term to the force field.\n"
		"   Parameters:\n"
		"    - particle the index of the particle this term is applied to\n"
		"    - parameters the list of parameters for the new force term\n"
		""},
	 { (char *)"CustomExternalForce_getParticleParameters", _wrap_CustomExternalForce_getParticleParameters, METH_VARARGS, (char *)"\n"
		"CustomExternalForce_getParticleParameters(CustomExternalForce self, int index)\n"
		"\n"
		"Get the force field parameters for a force field term.\n"
		"   Parameters:\n"
		"    - index the index of the particle term for which to get parameters\n"
		"    - particle the index of the particle this term is applied to\n"
		"    - parameters the list of parameters for the force field term\n"
		""},
	 { (char *)"CustomExternalForce_setParticleParameters", _wrap_CustomExternalForce_setParticleParameters, METH_VARARGS, (char *)"\n"
		"CustomExternalForce_setParticleParameters(CustomExternalForce self, int index, int particle, \n"
		"    vectord parameters)\n"
		"\n"
		"Set the force field parameters for a force field term.\n"
		"   Parameters:\n"
		"    - index the index of the particle term for which to set parameters\n"
		"    - particle the index of the particle this term is applied to\n"
		"    - parameters the list of parameters for the force field term\n"
		""},
	 { (char *)"new_CustomExternalForce", _wrap_new_CustomExternalForce, METH_VARARGS, (char *)"\n"
		"CustomExternalForce(string energy)\n"
		"new_CustomExternalForce(CustomExternalForce other) -> CustomExternalForce\n"
		"\n"
		"Create a CustomExternalForce.\n"
		"   Parameters:\n"
		"    - energy an algebraic expression giving the potential energy of each particle as a function of its x, y, and z coordinates\n"
		""},
	 { (char *)"delete_CustomExternalForce", _wrap_delete_CustomExternalForce, METH_VARARGS, (char *)"delete_CustomExternalForce(CustomExternalForce self)"},
	 { (char *)"CustomExternalForce_swigregister", CustomExternalForce_swigregister, METH_VARARGS, NULL},
	 { (char *)"CustomGBForce_getNumParticles", _wrap_CustomGBForce_getNumParticles, METH_VARARGS, (char *)"\n"
		"CustomGBForce_getNumParticles(CustomGBForce self) -> int\n"
		"\n"
		"Get the number of particles for which force field parameters have been defined.\n"
		""},
	 { (char *)"CustomGBForce_getNumExclusions", _wrap_CustomGBForce_getNumExclusions, METH_VARARGS, (char *)"\n"
		"CustomGBForce_getNumExclusions(CustomGBForce self) -> int\n"
		"\n"
		"Get the number of particle pairs whose interactions should be excluded.\n"
		""},
	 { (char *)"CustomGBForce_getNumPerParticleParameters", _wrap_CustomGBForce_getNumPerParticleParameters, METH_VARARGS, (char *)"\n"
		"CustomGBForce_getNumPerParticleParameters(CustomGBForce self) -> int\n"
		"\n"
		"Get the number of per-particle parameters that the interaction depends on.\n"
		""},
	 { (char *)"CustomGBForce_getNumGlobalParameters", _wrap_CustomGBForce_getNumGlobalParameters, METH_VARARGS, (char *)"\n"
		"CustomGBForce_getNumGlobalParameters(CustomGBForce self) -> int\n"
		"\n"
		"Get the number of global parameters that the interaction depends on.\n"
		""},
	 { (char *)"CustomGBForce_getNumFunctions", _wrap_CustomGBForce_getNumFunctions, METH_VARARGS, (char *)"\n"
		"CustomGBForce_getNumFunctions(CustomGBForce self) -> int\n"
		"\n"
		"Get the number of tabulated functions that have been defined.\n"
		""},
	 { (char *)"CustomGBForce_getNumComputedValues", _wrap_CustomGBForce_getNumComputedValues, METH_VARARGS, (char *)"\n"
		"CustomGBForce_getNumComputedValues(CustomGBForce self) -> int\n"
		"\n"
		"Get the number of per-particle computed values the interaction depends on.\n"
		""},
	 { (char *)"CustomGBForce_getNumEnergyTerms", _wrap_CustomGBForce_getNumEnergyTerms, METH_VARARGS, (char *)"\n"
		"CustomGBForce_getNumEnergyTerms(CustomGBForce self) -> int\n"
		"\n"
		"Get the number of terms in the energy computation.\n"
		""},
	 { (char *)"CustomGBForce_getNonbondedMethod", _wrap_CustomGBForce_getNonbondedMethod, METH_VARARGS, (char *)"\n"
		"CustomGBForce_getNonbondedMethod(CustomGBForce self) -> NonbondedMethod\n"
		"\n"
		"Get the method used for handling long range nonbonded interactions.\n"
		""},
	 { (char *)"CustomGBForce_setNonbondedMethod", _wrap_CustomGBForce_setNonbondedMethod, METH_VARARGS, (char *)"\n"
		"CustomGBForce_setNonbondedMethod(CustomGBForce self, NonbondedMethod method)\n"
		"\n"
		"Set the method used for handling long range nonbonded interactions.\n"
		""},
	 { (char *)"CustomGBForce_getCutoffDistance", _wrap_CustomGBForce_getCutoffDistance, METH_VARARGS, (char *)"\n"
		"CustomGBForce_getCutoffDistance(CustomGBForce self) -> double\n"
		"\n"
		"Get the cutoff distance (in nm) being used for nonbonded interactions. If the NonbondedMethod in use is NoCutoff, this value will have no effect.\n"
		""},
	 { (char *)"CustomGBForce_setCutoffDistance", _wrap_CustomGBForce_setCutoffDistance, METH_VARARGS, (char *)"\n"
		"CustomGBForce_setCutoffDistance(CustomGBForce self, double distance)\n"
		"\n"
		"Set the cutoff distance (in nm) being used for nonbonded interactions. If the NonbondedMethod in use is NoCutoff, this value will have no effect.\n"
		"   Parameters:\n"
		"    - distance the cutoff distance, measured in nm\n"
		""},
	 { (char *)"CustomGBForce_addPerParticleParameter", _wrap_CustomGBForce_addPerParticleParameter, METH_VARARGS, (char *)"\n"
		"CustomGBForce_addPerParticleParameter(CustomGBForce self, string name) -> int\n"
		"\n"
		"Add a new per-particle parameter that the interaction may depend on.\n"
		"   Parameters:\n"
		"    - name the name of the parameter\n"
		""},
	 { (char *)"CustomGBForce_getPerParticleParameterName", _wrap_CustomGBForce_getPerParticleParameterName, METH_VARARGS, (char *)"\n"
		"CustomGBForce_getPerParticleParameterName(CustomGBForce self, int index) -> string\n"
		"\n"
		"Get the name of a per-particle parameter.\n"
		"   Parameters:\n"
		"    - index the index of the parameter for which to get the name\n"
		""},
	 { (char *)"CustomGBForce_setPerParticleParameterName", _wrap_CustomGBForce_setPerParticleParameterName, METH_VARARGS, (char *)"\n"
		"CustomGBForce_setPerParticleParameterName(CustomGBForce self, int index, string name)\n"
		"\n"
		"Set the name of a per-particle parameter.\n"
		"   Parameters:\n"
		"    - index the index of the parameter for which to set the name\n"
		"    - name the name of the parameter\n"
		""},
	 { (char *)"CustomGBForce_addGlobalParameter", _wrap_CustomGBForce_addGlobalParameter, METH_VARARGS, (char *)"\n"
		"CustomGBForce_addGlobalParameter(CustomGBForce self, string name, double defaultValue) -> int\n"
		"\n"
		"Add a new global parameter that the interaction may depend on.\n"
		"   Parameters:\n"
		"    - name the name of the parameter\n"
		"    - defaultValue the default value of the parameter\n"
		""},
	 { (char *)"CustomGBForce_getGlobalParameterName", _wrap_CustomGBForce_getGlobalParameterName, METH_VARARGS, (char *)"\n"
		"CustomGBForce_getGlobalParameterName(CustomGBForce self, int index) -> string\n"
		"\n"
		"Get the name of a global parameter.\n"
		"   Parameters:\n"
		"    - index the index of the parameter for which to get the name\n"
		""},
	 { (char *)"CustomGBForce_setGlobalParameterName", _wrap_CustomGBForce_setGlobalParameterName, METH_VARARGS, (char *)"\n"
		"CustomGBForce_setGlobalParameterName(CustomGBForce self, int index, string name)\n"
		"\n"
		"Set the name of a global parameter.\n"
		"   Parameters:\n"
		"    - index the index of the parameter for which to set the name\n"
		"    - name the name of the parameter\n"
		""},
	 { (char *)"CustomGBForce_getGlobalParameterDefaultValue", _wrap_CustomGBForce_getGlobalParameterDefaultValue, METH_VARARGS, (char *)"\n"
		"CustomGBForce_getGlobalParameterDefaultValue(CustomGBForce self, int index) -> double\n"
		"\n"
		"Get the default value of a global parameter.\n"
		"   Parameters:\n"
		"    - index the index of the parameter for which to get the default value\n"
		""},
	 { (char *)"CustomGBForce_setGlobalParameterDefaultValue", _wrap_CustomGBForce_setGlobalParameterDefaultValue, METH_VARARGS, (char *)"\n"
		"CustomGBForce_setGlobalParameterDefaultValue(CustomGBForce self, int index, double defaultValue)\n"
		"\n"
		"Set the default value of a global parameter.\n"
		"   Parameters:\n"
		"    - index the index of the parameter for which to set the default value\n"
		"    - name the default value of the parameter\n"
		""},
	 { (char *)"CustomGBForce_addParticle", _wrap_CustomGBForce_addParticle, METH_VARARGS, (char *)"\n"
		"CustomGBForce_addParticle(CustomGBForce self, vectord parameters) -> int\n"
		"\n"
		"Add the nonbonded force parameters for a particle. This should be called once for each particle in the System. When it is called for the i'th time, it specifies the parameters for the i'th particle.\n"
		"   Parameters:\n"
		"    - parameters the list of parameters for the new particle\n"
		""},
	 { (char *)"CustomGBForce_getParticleParameters", _wrap_CustomGBForce_getParticleParameters, METH_VARARGS, (char *)"\n"
		"CustomGBForce_getParticleParameters(CustomGBForce self, int index)\n"
		"\n"
		"Get the nonbonded force parameters for a particle.\n"
		"   Parameters:\n"
		"    - index the index of the particle for which to get parameters\n"
		"    - parameters the list of parameters for the specified particle\n"
		""},
	 { (char *)"CustomGBForce_setParticleParameters", _wrap_CustomGBForce_setParticleParameters, METH_VARARGS, (char *)"\n"
		"CustomGBForce_setParticleParameters(CustomGBForce self, int index, vectord parameters)\n"
		"\n"
		"Set the nonbonded force parameters for a particle.\n"
		"   Parameters:\n"
		"    - index the index of the particle for which to set parameters\n"
		"    - parameters the list of parameters for the specified particle\n"
		""},
	 { (char *)"CustomGBForce_addComputedValue", _wrap_CustomGBForce_addComputedValue, METH_VARARGS, (char *)"\n"
		"CustomGBForce_addComputedValue(CustomGBForce self, string name, string expression, \n"
		"    ComputationType type) -> int\n"
		"\n"
		"Add a computed value to calculate for each particle.\n"
		"   Parameters:\n"
		"    - name the name of the value\n"
		"    - expression an algebraic expression to evaluate when calculating the computed value. If the ComputationType is SingleParticle, the expression is evaluated independently for each particle, and may depend on its x, y, and z coordinates, as well as the per-particle parameters and previous computed values for that particle. If the ComputationType is ParticlePair or ParticlePairNoExclusions, the expression is evaluated once for every other particle in the system and summed to get the final value. In the latter case, the expression may depend on the distance r between the two particles, and on the per-particle parameters and previous computed values for each of them. Append \"1\" to a variable name to indicate the parameter for the particle whose value is being calculated, and \"2\" to indicate the particle it is interacting with.\n"
		"    - type the method to use for computing this value\n"
		""},
	 { (char *)"CustomGBForce_getComputedValueParameters", _wrap_CustomGBForce_getComputedValueParameters, METH_VARARGS, (char *)"\n"
		"CustomGBForce_getComputedValueParameters(CustomGBForce self, int index)\n"
		"\n"
		"Get the properties of a computed value.\n"
		"   Parameters:\n"
		"    - index the index of the computed value for which to get parameters\n"
		"    - name the name of the value\n"
		"    - expression an algebraic expression to evaluate when calculating the computed value. If the ComputationType is SingleParticle, the expression is evaluated independently for each particle, and may depend on its x, y, and z coordinates, as well as the per-particle parameters and previous computed values for that particle. If the ComputationType is ParticlePair or ParticlePairNoExclusions, the expression is evaluated once for every other particle in the system and summed to get the final value. In the latter case, the expression may depend on the distance r between the two particles, and on the per-particle parameters and previous computed values for each of them. Append \"1\" to a variable name to indicate the parameter for the particle whose value is being calculated, and \"2\" to indicate the particle it is interacting with.\n"
		"    - type the method to use for computing this value\n"
		""},
	 { (char *)"CustomGBForce_setComputedValueParameters", _wrap_CustomGBForce_setComputedValueParameters, METH_VARARGS, (char *)"\n"
		"CustomGBForce_setComputedValueParameters(CustomGBForce self, int index, string name, string expression, \n"
		"    ComputationType type)\n"
		"\n"
		"Set the properties of a computed value.\n"
		"   Parameters:\n"
		"    - index the index of the computed value for which to set parameters\n"
		"    - name the name of the value\n"
		"    - expression an algebraic expression to evaluate when calculating the computed value. If the ComputationType is SingleParticle, the expression is evaluated independently for each particle, and may depend on its x, y, and z coordinates, as well as the per-particle parameters and previous computed values for that particle. If the ComputationType is ParticlePair or ParticlePairNoExclusions, the expression is evaluated once for every other particle in the system and summed to get the final value. In the latter case, the expression may depend on the distance r between the two particles, and on the per-particle parameters and previous computed values for each of them. Append \"1\" to a variable name to indicate the parameter for the particle whose value is being calculated, and \"2\" to indicate the particle it is interacting with.\n"
		"    - type the method to use for computing this value\n"
		""},
	 { (char *)"CustomGBForce_addEnergyTerm", _wrap_CustomGBForce_addEnergyTerm, METH_VARARGS, (char *)"\n"
		"CustomGBForce_addEnergyTerm(CustomGBForce self, string expression, ComputationType type) -> int\n"
		"\n"
		"Add a term to the energy computation.\n"
		"   Parameters:\n"
		"    - expression an algebraic expression to evaluate when calculating the energy. If the ComputationType is SingleParticle, the expression is evaluated once for each particle, and may depend on its x, y, and z coordinates, as well as the per-particle parameters and computed values for that particle. If the ComputationType is ParticlePair or ParticlePairNoExclusions, the expression is evaluated once for every pair of particles in the system. In the latter case, the expression may depend on the distance r between the two particles, and on the per-particle parameters and computed values for each of them. Append \"1\" to a variable name to indicate the parameter for the first particle in the pair and \"2\" to indicate the second particle in the pair.\n"
		"    - type the method to use for computing this value\n"
		""},
	 { (char *)"CustomGBForce_getEnergyTermParameters", _wrap_CustomGBForce_getEnergyTermParameters, METH_VARARGS, (char *)"\n"
		"CustomGBForce_getEnergyTermParameters(CustomGBForce self, int index)\n"
		"\n"
		"Get the properties of a term to the energy computation.\n"
		"   Parameters:\n"
		"    - index the index of the term for which to get parameters\n"
		"    - expression an algebraic expression to evaluate when calculating the energy. If the ComputationType is SingleParticle, the expression is evaluated once for each particle, and may depend on its x, y, and z coordinates, as well as the per-particle parameters and computed values for that particle. If the ComputationType is ParticlePair or ParticlePairNoExclusions, the expression is evaluated once for every pair of particles in the system. In the latter case, the expression may depend on the distance r between the two particles, and on the per-particle parameters and computed values for each of them. Append \"1\" to a variable name to indicate the parameter for the first particle in the pair and \"2\" to indicate the second particle in the pair.\n"
		"    - type the method to use for computing this value\n"
		""},
	 { (char *)"CustomGBForce_setEnergyTermParameters", _wrap_CustomGBForce_setEnergyTermParameters, METH_VARARGS, (char *)"\n"
		"CustomGBForce_setEnergyTermParameters(CustomGBForce self, int index, string expression, ComputationType type)\n"
		"\n"
		"Set the properties of a term to the energy computation.\n"
		"   Parameters:\n"
		"    - index the index of the term for which to set parameters\n"
		"    - expression an algebraic expression to evaluate when calculating the energy. If the ComputationType is SingleParticle, the expression is evaluated once for each particle, and may depend on its x, y, and z coordinates, as well as the per-particle parameters and computed values for that particle. If the ComputationType is ParticlePair or ParticlePairNoExclusions, the expression is evaluated once for every pair of particles in the system. In the latter case, the expression may depend on the distance r between the two particles, and on the per-particle parameters and computed values for each of them. Append \"1\" to a variable name to indicate the parameter for the first particle in the pair and \"2\" to indicate the second particle in the pair.\n"
		"    - type the method to use for computing this value\n"
		""},
	 { (char *)"CustomGBForce_addExclusion", _wrap_CustomGBForce_addExclusion, METH_VARARGS, (char *)"\n"
		"CustomGBForce_addExclusion(CustomGBForce self, int particle1, int particle2) -> int\n"
		"\n"
		"Add a particle pair to the list of interactions that should be excluded.\n"
		"   Parameters:\n"
		"    - particle1 the index of the first particle in the pair\n"
		"    - particle2 the index of the second particle in the pair\n"
		""},
	 { (char *)"CustomGBForce_getExclusionParticles", _wrap_CustomGBForce_getExclusionParticles, METH_VARARGS, (char *)"\n"
		"CustomGBForce_getExclusionParticles(CustomGBForce self, int index)\n"
		"\n"
		"Get the particles in a pair whose interaction should be excluded.\n"
		"   Parameters:\n"
		"    - index the index of the exclusion for which to get particle indices\n"
		"    - particle1 the index of the first particle in the pair\n"
		"    - particle2 the index of the second particle in the pair\n"
		""},
	 { (char *)"CustomGBForce_setExclusionParticles", _wrap_CustomGBForce_setExclusionParticles, METH_VARARGS, (char *)"\n"
		"CustomGBForce_setExclusionParticles(CustomGBForce self, int index, int particle1, int particle2)\n"
		"\n"
		"Set the particles in a pair whose interaction should be excluded.\n"
		"   Parameters:\n"
		"    - index the index of the exclusion for which to set particle indices\n"
		"    - particle1 the index of the first particle in the pair\n"
		"    - particle2 the index of the second particle in the pair\n"
		""},
	 { (char *)"CustomGBForce_addFunction", _wrap_CustomGBForce_addFunction, METH_VARARGS, (char *)"\n"
		"CustomGBForce_addFunction(CustomGBForce self, string name, vectord values, double min, \n"
		"    double max) -> int\n"
		"\n"
		"Add a tabulated function that may appear in the energy expression.\n"
		"   Parameters:\n"
		"    - name the name of the function as it appears in expressions\n"
		"    - values the tabulated values of the function f(x) at uniformly spaced values of x between min and max. The function is assumed to be zero for x < min or x > max.\n"
		"    - min the value of the independent variable corresponding to the first element of values\n"
		"    - max the value of the independent variable corresponding to the last element of values\n"
		""},
	 { (char *)"CustomGBForce_getFunctionParameters", _wrap_CustomGBForce_getFunctionParameters, METH_VARARGS, (char *)"\n"
		"CustomGBForce_getFunctionParameters(CustomGBForce self, int index)\n"
		"\n"
		"Get the parameters for a tabulated function that may appear in the energy expression.\n"
		"   Parameters:\n"
		"    - index the index of the function for which to get parameters\n"
		"    - name the name of the function as it appears in expressions\n"
		"    - values the tabulated values of the function f(x) at uniformly spaced values of x between min and max. The function is assumed to be zero for x < min or x > max.\n"
		"    - min the value of the independent variable corresponding to the first element of values\n"
		"    - max the value of the independent variable corresponding to the last element of values\n"
		""},
	 { (char *)"CustomGBForce_setFunctionParameters", _wrap_CustomGBForce_setFunctionParameters, METH_VARARGS, (char *)"\n"
		"CustomGBForce_setFunctionParameters(CustomGBForce self, int index, string name, vectord values, \n"
		"    double min, double max)\n"
		"\n"
		"Set the parameters for a tabulated function that may appear in algebraic expressions.\n"
		"   Parameters:\n"
		"    - index the index of the function for which to set parameters\n"
		"    - name the name of the function as it appears in expressions\n"
		"    - values the tabulated values of the function f(x) at uniformly spaced values of x between min and max. The function is assumed to be zero for x < min or x > max.\n"
		"    - min the value of the independent variable corresponding to the first element of values\n"
		"    - max the value of the independent variable corresponding to the last element of values\n"
		""},
	 { (char *)"new_CustomGBForce", _wrap_new_CustomGBForce, METH_VARARGS, (char *)"\n"
		"CustomGBForce()\n"
		"new_CustomGBForce(CustomGBForce other) -> CustomGBForce\n"
		"\n"
		"Create a CustomGBForce.\n"
		""},
	 { (char *)"delete_CustomGBForce", _wrap_delete_CustomGBForce, METH_VARARGS, (char *)"delete_CustomGBForce(CustomGBForce self)"},
	 { (char *)"CustomGBForce_swigregister", CustomGBForce_swigregister, METH_VARARGS, NULL},
	 { (char *)"CustomHbondForce_getNumDonors", _wrap_CustomHbondForce_getNumDonors, METH_VARARGS, (char *)"\n"
		"CustomHbondForce_getNumDonors(CustomHbondForce self) -> int\n"
		"\n"
		"Get the number of donors for which force field parameters have been defined.\n"
		""},
	 { (char *)"CustomHbondForce_getNumAcceptors", _wrap_CustomHbondForce_getNumAcceptors, METH_VARARGS, (char *)"\n"
		"CustomHbondForce_getNumAcceptors(CustomHbondForce self) -> int\n"
		"\n"
		"Get the number of acceptors for which force field parameters have been defined.\n"
		""},
	 { (char *)"CustomHbondForce_getNumExclusions", _wrap_CustomHbondForce_getNumExclusions, METH_VARARGS, (char *)"\n"
		"CustomHbondForce_getNumExclusions(CustomHbondForce self) -> int\n"
		"\n"
		"Get the number of donor-acceptor pairs whose interactions should be excluded.\n"
		""},
	 { (char *)"CustomHbondForce_getNumPerDonorParameters", _wrap_CustomHbondForce_getNumPerDonorParameters, METH_VARARGS, (char *)"\n"
		"CustomHbondForce_getNumPerDonorParameters(CustomHbondForce self) -> int\n"
		"\n"
		"Get the number of per-donor parameters that the interaction depends on.\n"
		""},
	 { (char *)"CustomHbondForce_getNumPerAcceptorParameters", _wrap_CustomHbondForce_getNumPerAcceptorParameters, METH_VARARGS, (char *)"\n"
		"CustomHbondForce_getNumPerAcceptorParameters(CustomHbondForce self) -> int\n"
		"\n"
		"Get the number of per-acceptor parameters that the interaction depends on.\n"
		""},
	 { (char *)"CustomHbondForce_getNumGlobalParameters", _wrap_CustomHbondForce_getNumGlobalParameters, METH_VARARGS, (char *)"\n"
		"CustomHbondForce_getNumGlobalParameters(CustomHbondForce self) -> int\n"
		"\n"
		"Get the number of global parameters that the interaction depends on.\n"
		""},
	 { (char *)"CustomHbondForce_getNumFunctions", _wrap_CustomHbondForce_getNumFunctions, METH_VARARGS, (char *)"\n"
		"CustomHbondForce_getNumFunctions(CustomHbondForce self) -> int\n"
		"\n"
		"Get the number of tabulated functions that have been defined.\n"
		""},
	 { (char *)"CustomHbondForce_getEnergyFunction", _wrap_CustomHbondForce_getEnergyFunction, METH_VARARGS, (char *)"\n"
		"CustomHbondForce_getEnergyFunction(CustomHbondForce self) -> string\n"
		"\n"
		"Get the algebraic expression that gives the interaction energy between a donor and an acceptor\n"
		""},
	 { (char *)"CustomHbondForce_setEnergyFunction", _wrap_CustomHbondForce_setEnergyFunction, METH_VARARGS, (char *)"\n"
		"CustomHbondForce_setEnergyFunction(CustomHbondForce self, string energy)\n"
		"\n"
		"Set the algebraic expression that gives the interaction energy between a donor and an acceptor\n"
		""},
	 { (char *)"CustomHbondForce_getNonbondedMethod", _wrap_CustomHbondForce_getNonbondedMethod, METH_VARARGS, (char *)"\n"
		"CustomHbondForce_getNonbondedMethod(CustomHbondForce self) -> NonbondedMethod\n"
		"\n"
		"Get the method used for handling long range nonbonded interactions.\n"
		""},
	 { (char *)"CustomHbondForce_setNonbondedMethod", _wrap_CustomHbondForce_setNonbondedMethod, METH_VARARGS, (char *)"\n"
		"CustomHbondForce_setNonbondedMethod(CustomHbondForce self, NonbondedMethod method)\n"
		"\n"
		"Set the method used for handling long range nonbonded interactions.\n"
		""},
	 { (char *)"CustomHbondForce_getCutoffDistance", _wrap_CustomHbondForce_getCutoffDistance, METH_VARARGS, (char *)"\n"
		"CustomHbondForce_getCutoffDistance(CustomHbondForce self) -> double\n"
		"\n"
		"Get the cutoff distance (in nm) being used. All interactions for which the distance between d1 and a1 is greater than the cutoff will be ignored. If the NonbondedMethod in use is NoCutoff, this value will have no effect.\n"
		""},
	 { (char *)"CustomHbondForce_setCutoffDistance", _wrap_CustomHbondForce_setCutoffDistance, METH_VARARGS, (char *)"\n"
		"CustomHbondForce_setCutoffDistance(CustomHbondForce self, double distance)\n"
		"\n"
		"Set the cutoff distance (in nm) being used. All interactions for which the distance between d1 and a1 is greater than the cutoff will be ignored. If the NonbondedMethod in use is NoCutoff, this value will have no effect.\n"
		"   Parameters:\n"
		"    - distance the cutoff distance, measured in nm\n"
		""},
	 { (char *)"CustomHbondForce_addPerDonorParameter", _wrap_CustomHbondForce_addPerDonorParameter, METH_VARARGS, (char *)"\n"
		"CustomHbondForce_addPerDonorParameter(CustomHbondForce self, string name) -> int\n"
		"\n"
		"Add a new per-donor parameter that the interaction may depend on.\n"
		"   Parameters:\n"
		"    - name the name of the parameter\n"
		""},
	 { (char *)"CustomHbondForce_getPerDonorParameterName", _wrap_CustomHbondForce_getPerDonorParameterName, METH_VARARGS, (char *)"\n"
		"CustomHbondForce_getPerDonorParameterName(CustomHbondForce self, int index) -> string\n"
		"\n"
		"Get the name of a per-donor parameter.\n"
		"   Parameters:\n"
		"    - index the index of the parameter for which to get the name\n"
		""},
	 { (char *)"CustomHbondForce_setPerDonorParameterName", _wrap_CustomHbondForce_setPerDonorParameterName, METH_VARARGS, (char *)"\n"
		"CustomHbondForce_setPerDonorParameterName(CustomHbondForce self, int index, string name)\n"
		"\n"
		"Set the name of a per-donor parameter.\n"
		"   Parameters:\n"
		"    - index the index of the parameter for which to set the name\n"
		"    - name the name of the parameter\n"
		""},
	 { (char *)"CustomHbondForce_addPerAcceptorParameter", _wrap_CustomHbondForce_addPerAcceptorParameter, METH_VARARGS, (char *)"\n"
		"CustomHbondForce_addPerAcceptorParameter(CustomHbondForce self, string name) -> int\n"
		"\n"
		"Add a new per-acceptor parameter that the interaction may depend on.\n"
		"   Parameters:\n"
		"    - name the name of the parameter\n"
		""},
	 { (char *)"CustomHbondForce_getPerAcceptorParameterName", _wrap_CustomHbondForce_getPerAcceptorParameterName, METH_VARARGS, (char *)"\n"
		"CustomHbondForce_getPerAcceptorParameterName(CustomHbondForce self, int index) -> string\n"
		"\n"
		"Get the name of a per-acceptor parameter.\n"
		"   Parameters:\n"
		"    - index the index of the parameter for which to get the name\n"
		""},
	 { (char *)"CustomHbondForce_setPerAcceptorParameterName", _wrap_CustomHbondForce_setPerAcceptorParameterName, METH_VARARGS, (char *)"\n"
		"CustomHbondForce_setPerAcceptorParameterName(CustomHbondForce self, int index, string name)\n"
		"\n"
		"Set the name of a per-acceptor parameter.\n"
		"   Parameters:\n"
		"    - index the index of the parameter for which to set the name\n"
		"    - name the name of the parameter\n"
		""},
	 { (char *)"CustomHbondForce_addGlobalParameter", _wrap_CustomHbondForce_addGlobalParameter, METH_VARARGS, (char *)"\n"
		"CustomHbondForce_addGlobalParameter(CustomHbondForce self, string name, double defaultValue) -> int\n"
		"\n"
		"Add a new global parameter that the interaction may depend on.\n"
		"   Parameters:\n"
		"    - name the name of the parameter\n"
		"    - defaultValue the default value of the parameter\n"
		""},
	 { (char *)"CustomHbondForce_getGlobalParameterName", _wrap_CustomHbondForce_getGlobalParameterName, METH_VARARGS, (char *)"\n"
		"CustomHbondForce_getGlobalParameterName(CustomHbondForce self, int index) -> string\n"
		"\n"
		"Get the name of a global parameter.\n"
		"   Parameters:\n"
		"    - index the index of the parameter for which to get the name\n"
		""},
	 { (char *)"CustomHbondForce_setGlobalParameterName", _wrap_CustomHbondForce_setGlobalParameterName, METH_VARARGS, (char *)"\n"
		"CustomHbondForce_setGlobalParameterName(CustomHbondForce self, int index, string name)\n"
		"\n"
		"Set the name of a global parameter.\n"
		"   Parameters:\n"
		"    - index the index of the parameter for which to set the name\n"
		"    - name the name of the parameter\n"
		""},
	 { (char *)"CustomHbondForce_getGlobalParameterDefaultValue", _wrap_CustomHbondForce_getGlobalParameterDefaultValue, METH_VARARGS, (char *)"\n"
		"CustomHbondForce_getGlobalParameterDefaultValue(CustomHbondForce self, int index) -> double\n"
		"\n"
		"Get the default value of a global parameter.\n"
		"   Parameters:\n"
		"    - index the index of the parameter for which to get the default value\n"
		""},
	 { (char *)"CustomHbondForce_setGlobalParameterDefaultValue", _wrap_CustomHbondForce_setGlobalParameterDefaultValue, METH_VARARGS, (char *)"\n"
		"CustomHbondForce_setGlobalParameterDefaultValue(CustomHbondForce self, int index, double defaultValue)\n"
		"\n"
		"Set the default value of a global parameter.\n"
		"   Parameters:\n"
		"    - index the index of the parameter for which to set the default value\n"
		"    - name the default value of the parameter\n"
		""},
	 { (char *)"CustomHbondForce_addDonor", _wrap_CustomHbondForce_addDonor, METH_VARARGS, (char *)"\n"
		"CustomHbondForce_addDonor(CustomHbondForce self, int d1, int d2, int d3, vectord parameters) -> int\n"
		"\n"
		"Add a donor group to the force\n"
		"   Parameters:\n"
		"    - d1 the index of the first particle for this donor group\n"
		"    - d2 the index of the second particle for this donor group. If the group only includes one particle, this must be -1.\n"
		"    - d3 the index of the third particle for this donor group. If the group includes less than three particles, this must be -1.\n"
		"    - parameters the list of per-donor parameter values for the new donor\n"
		""},
	 { (char *)"CustomHbondForce_getDonorParameters", _wrap_CustomHbondForce_getDonorParameters, METH_VARARGS, (char *)"\n"
		"CustomHbondForce_getDonorParameters(CustomHbondForce self, int index)\n"
		"\n"
		"Get the properties of a donor group.\n"
		"   Parameters:\n"
		"    - index the index of the donor group to get\n"
		"    - d1 the index of the first particle for this donor group\n"
		"    - d2 the index of the second particle for this donor group. If the group only includes one particle, this will be -1.\n"
		"    - d3 the index of the third particle for this donor group. If the group includes less than three particles, this will be -1.\n"
		"    - parameters the list of per-donor parameter values for the new donor\n"
		""},
	 { (char *)"CustomHbondForce_setDonorParameters", _wrap_CustomHbondForce_setDonorParameters, METH_VARARGS, (char *)"\n"
		"CustomHbondForce_setDonorParameters(CustomHbondForce self, int index, int d1, int d2, int d3, \n"
		"    vectord parameters)\n"
		"\n"
		"Set the properties of a donor group.\n"
		"   Parameters:\n"
		"    - index the index of the donor group to set\n"
		"    - d1 the index of the first particle for this donor group\n"
		"    - d2 the index of the second particle for this donor group. If the group only includes one particle, this must be -1.\n"
		"    - d3 the index of the third particle for this donor group. If the group includes less than three particles, this must be -1.\n"
		"    - parameters the list of per-donor parameter values for the new donor\n"
		""},
	 { (char *)"CustomHbondForce_addAcceptor", _wrap_CustomHbondForce_addAcceptor, METH_VARARGS, (char *)"\n"
		"CustomHbondForce_addAcceptor(CustomHbondForce self, int a1, int a2, int a3, vectord parameters) -> int\n"
		"\n"
		"Add an acceptor group to the force\n"
		"   Parameters:\n"
		"    - a1 the index of the first particle for this acceptor group\n"
		"    - a2 the index of the second particle for this acceptor group. If the group only includes one particle, this must be -1.\n"
		"    - a3 the index of the third particle for this acceptor group. If the group includes less than three particles, this must be -1.\n"
		"    - parameters the list of per-acceptor parameter values for the new acceptor\n"
		""},
	 { (char *)"CustomHbondForce_getAcceptorParameters", _wrap_CustomHbondForce_getAcceptorParameters, METH_VARARGS, (char *)"\n"
		"CustomHbondForce_getAcceptorParameters(CustomHbondForce self, int index)\n"
		"\n"
		"Get the properties of an acceptor group.\n"
		"   Parameters:\n"
		"    - index the index of the acceptor group to get\n"
		"    - a1 the index of the first particle for this acceptor group\n"
		"    - a2 the index of the second particle for this acceptor group. If the group only includes one particle, this will be -1.\n"
		"    - a3 the index of the third particle for this acceptor group. If the group includes less than three particles, this will be -1.\n"
		"    - parameters the list of per-acceptor parameter values for the new acceptor\n"
		""},
	 { (char *)"CustomHbondForce_setAcceptorParameters", _wrap_CustomHbondForce_setAcceptorParameters, METH_VARARGS, (char *)"\n"
		"CustomHbondForce_setAcceptorParameters(CustomHbondForce self, int index, int a1, int a2, int a3, \n"
		"    vectord parameters)\n"
		"\n"
		"Set the properties of an acceptor group.\n"
		"   Parameters:\n"
		"    - index the index of the acceptor group to set\n"
		"    - a1 the index of the first particle for this acceptor group\n"
		"    - a2 the index of the second particle for this acceptor group. If the group only includes one particle, this must be -1.\n"
		"    - a3 the index of the third particle for this acceptor group. If the group includes less than three particles, this must be -1.\n"
		"    - parameters the list of per-acceptor parameter values for the new acceptor\n"
		""},
	 { (char *)"CustomHbondForce_addExclusion", _wrap_CustomHbondForce_addExclusion, METH_VARARGS, (char *)"\n"
		"CustomHbondForce_addExclusion(CustomHbondForce self, int donor, int acceptor) -> int\n"
		"\n"
		"Add a donor-acceptor pair to the list of interactions that should be excluded.\n"
		"   Parameters:\n"
		"    - donor the index of the donor to exclude\n"
		"    - acceptor the index of the acceptor to exclude\n"
		""},
	 { (char *)"CustomHbondForce_getExclusionParticles", _wrap_CustomHbondForce_getExclusionParticles, METH_VARARGS, (char *)"\n"
		"CustomHbondForce_getExclusionParticles(CustomHbondForce self, int index)\n"
		"\n"
		"Get the donor and acceptor in a pair whose interaction should be excluded.\n"
		"   Parameters:\n"
		"    - index the index of the exclusion for which to get donor and acceptor indices\n"
		"    - particle1 the index of the donor\n"
		"    - particle2 the index of the acceptor\n"
		""},
	 { (char *)"CustomHbondForce_setExclusionParticles", _wrap_CustomHbondForce_setExclusionParticles, METH_VARARGS, (char *)"\n"
		"CustomHbondForce_setExclusionParticles(CustomHbondForce self, int index, int donor, int acceptor)\n"
		"\n"
		"Get the donor and acceptor in a pair whose interaction should be excluded.\n"
		"   Parameters:\n"
		"    - index the index of the exclusion for which to get donor and acceptor indices\n"
		"    - particle1 the index of the donor\n"
		"    - particle2 the index of the acceptor\n"
		""},
	 { (char *)"CustomHbondForce_addFunction", _wrap_CustomHbondForce_addFunction, METH_VARARGS, (char *)"\n"
		"CustomHbondForce_addFunction(CustomHbondForce self, string name, vectord values, \n"
		"    double min, double max) -> int\n"
		"\n"
		"Add a tabulated function that may appear in the energy expression.\n"
		"   Parameters:\n"
		"    - name the name of the function as it appears in expressions\n"
		"    - values the tabulated values of the function f(x) at uniformly spaced values of x between min and max. The function is assumed to be zero for x < min or x > max.\n"
		"    - min the value of the independent variable corresponding to the first element of values\n"
		"    - max the value of the independent variable corresponding to the last element of values\n"
		""},
	 { (char *)"CustomHbondForce_getFunctionParameters", _wrap_CustomHbondForce_getFunctionParameters, METH_VARARGS, (char *)"\n"
		"CustomHbondForce_getFunctionParameters(CustomHbondForce self, int index)\n"
		"\n"
		"Get the parameters for a tabulated function that may appear in the energy expression.\n"
		"   Parameters:\n"
		"    - index the index of the function for which to get parameters\n"
		"    - name the name of the function as it appears in expressions\n"
		"    - values the tabulated values of the function f(x) at uniformly spaced values of x between min and max. The function is assumed to be zero for x < min or x > max.\n"
		"    - min the value of the independent variable corresponding to the first element of values\n"
		"    - max the value of the independent variable corresponding to the last element of values\n"
		""},
	 { (char *)"CustomHbondForce_setFunctionParameters", _wrap_CustomHbondForce_setFunctionParameters, METH_VARARGS, (char *)"\n"
		"CustomHbondForce_setFunctionParameters(CustomHbondForce self, int index, string name, vectord values, \n"
		"    double min, double max)\n"
		"\n"
		"Set the parameters for a tabulated function that may appear in algebraic expressions.\n"
		"   Parameters:\n"
		"    - index the index of the function for which to set parameters\n"
		"    - name the name of the function as it appears in expressions\n"
		"    - values the tabulated values of the function f(x) at uniformly spaced values of x between min and max. The function is assumed to be zero for x < min or x > max.\n"
		"    - min the value of the independent variable corresponding to the first element of values\n"
		"    - max the value of the independent variable corresponding to the last element of values\n"
		""},
	 { (char *)"new_CustomHbondForce", _wrap_new_CustomHbondForce, METH_VARARGS, (char *)"\n"
		"CustomHbondForce(string energy)\n"
		"new_CustomHbondForce(CustomHbondForce other) -> CustomHbondForce\n"
		"\n"
		"Create a CustomHbondForce.\n"
		"   Parameters:\n"
		"    - energy an algebraic expression giving the interaction energy between a donor as a function of inter-particle distances, angles, and dihedrals, as well as any global, per-donor, and per-acceptor parameters\n"
		""},
	 { (char *)"delete_CustomHbondForce", _wrap_delete_CustomHbondForce, METH_VARARGS, (char *)"delete_CustomHbondForce(CustomHbondForce self)"},
	 { (char *)"CustomHbondForce_swigregister", CustomHbondForce_swigregister, METH_VARARGS, NULL},
	 { (char *)"CustomIntegrator_getNumGlobalVariables", _wrap_CustomIntegrator_getNumGlobalVariables, METH_VARARGS, (char *)"\n"
		"CustomIntegrator_getNumGlobalVariables(CustomIntegrator self) -> int\n"
		"\n"
		"Get the number of global variables that have been defined.\n"
		""},
	 { (char *)"CustomIntegrator_getNumPerDofVariables", _wrap_CustomIntegrator_getNumPerDofVariables, METH_VARARGS, (char *)"\n"
		"CustomIntegrator_getNumPerDofVariables(CustomIntegrator self) -> int\n"
		"\n"
		"Get the number of per-DOF variables that have been defined.\n"
		""},
	 { (char *)"CustomIntegrator_getNumComputations", _wrap_CustomIntegrator_getNumComputations, METH_VARARGS, (char *)"\n"
		"CustomIntegrator_getNumComputations(CustomIntegrator self) -> int\n"
		"\n"
		"Get the number of computation steps that have been added.\n"
		""},
	 { (char *)"CustomIntegrator_addGlobalVariable", _wrap_CustomIntegrator_addGlobalVariable, METH_VARARGS, (char *)"\n"
		"CustomIntegrator_addGlobalVariable(CustomIntegrator self, string name, double initialValue) -> int\n"
		"\n"
		"Define a new global variable.\n"
		"   Parameters:\n"
		"    - name the name of the variable\n"
		"    - initialValue the variable will initially be set to this value\n"
		""},
	 { (char *)"CustomIntegrator_getGlobalVariableName", _wrap_CustomIntegrator_getGlobalVariableName, METH_VARARGS, (char *)"\n"
		"CustomIntegrator_getGlobalVariableName(CustomIntegrator self, int index) -> string\n"
		"\n"
		"Get the name of a global variable.\n"
		"   Parameters:\n"
		"    - index the index of the variable to get\n"
		""},
	 { (char *)"CustomIntegrator_addPerDofVariable", _wrap_CustomIntegrator_addPerDofVariable, METH_VARARGS, (char *)"\n"
		"CustomIntegrator_addPerDofVariable(CustomIntegrator self, string name, double initialValue) -> int\n"
		"\n"
		"Define a new per-DOF variable.\n"
		"   Parameters:\n"
		"    - name the name of the variable\n"
		"    - initialValue the variable will initially be set to this value for all degrees of freedom\n"
		""},
	 { (char *)"CustomIntegrator_getPerDofVariableName", _wrap_CustomIntegrator_getPerDofVariableName, METH_VARARGS, (char *)"\n"
		"CustomIntegrator_getPerDofVariableName(CustomIntegrator self, int index) -> string\n"
		"\n"
		"Get the name of a per-DOF variable.\n"
		"   Parameters:\n"
		"    - index the index of the variable to get\n"
		""},
	 { (char *)"CustomIntegrator_getGlobalVariable", _wrap_CustomIntegrator_getGlobalVariable, METH_VARARGS, (char *)"\n"
		"CustomIntegrator_getGlobalVariable(CustomIntegrator self, int index) -> double\n"
		"\n"
		"Get the current value of a global variable.\n"
		"   Parameters:\n"
		"    - index the index of the variable to get\n"
		""},
	 { (char *)"CustomIntegrator_setGlobalVariable", _wrap_CustomIntegrator_setGlobalVariable, METH_VARARGS, (char *)"\n"
		"CustomIntegrator_setGlobalVariable(CustomIntegrator self, int index, double value)\n"
		"\n"
		"Set the value of a global variable.\n"
		"   Parameters:\n"
		"    - index the index of the variable to set\n"
		"    - value the new value of the variable\n"
		""},
	 { (char *)"CustomIntegrator_setGlobalVariableByName", _wrap_CustomIntegrator_setGlobalVariableByName, METH_VARARGS, (char *)"\n"
		"CustomIntegrator_setGlobalVariableByName(CustomIntegrator self, string name, double value)\n"
		"\n"
		"Set the value of a global variable, specified by name.\n"
		"   Parameters:\n"
		"    - name the name of the variable to set\n"
		"    - value the new value of the variable\n"
		""},
	 { (char *)"CustomIntegrator_setPerDofVariable", _wrap_CustomIntegrator_setPerDofVariable, METH_VARARGS, (char *)"\n"
		"CustomIntegrator_setPerDofVariable(CustomIntegrator self, int index, std::vector<(Vec3,std::allocator<(Vec3)>)> values)\n"
		"\n"
		"Set the value of a per-DOF variable.\n"
		"   Parameters:\n"
		"    - index the index of the variable to set\n"
		"    - values the new values of the variable for all degrees of freedom\n"
		""},
	 { (char *)"CustomIntegrator_setPerDofVariableByName", _wrap_CustomIntegrator_setPerDofVariableByName, METH_VARARGS, (char *)"\n"
		"CustomIntegrator_setPerDofVariableByName(CustomIntegrator self, string name, std::vector<(Vec3,std::allocator<(Vec3)>)> values)\n"
		"\n"
		"Set the value of a per-DOF variable, specified by name.\n"
		"   Parameters:\n"
		"    - name the name of the variable to set\n"
		"    - values the new values of the variable for all degrees of freedom\n"
		""},
	 { (char *)"CustomIntegrator_addComputeGlobal", _wrap_CustomIntegrator_addComputeGlobal, METH_VARARGS, (char *)"\n"
		"CustomIntegrator_addComputeGlobal(CustomIntegrator self, string variable, string expression) -> int\n"
		"\n"
		"Add a step to the integration algorithm that computes a global value.\n"
		"   Parameters:\n"
		"    - variable the global variable to store the computed value into\n"
		"    - expression a mathematical expression involving only global variables. In each integration step, its value is computed and stored into the specified variable.\n"
		""},
	 { (char *)"CustomIntegrator_addComputePerDof", _wrap_CustomIntegrator_addComputePerDof, METH_VARARGS, (char *)"\n"
		"CustomIntegrator_addComputePerDof(CustomIntegrator self, string variable, string expression) -> int\n"
		"\n"
		"Add a step to the integration algorithm that computes a per-DOF value.\n"
		"   Parameters:\n"
		"    - variable the per-DOF variable to store the computed value into\n"
		"    - expression a mathematical expression involving both global and per-DOF variables. In each integration step, its value is computed for every degree of freedom and stored into the specified variable.\n"
		""},
	 { (char *)"CustomIntegrator_addComputeSum", _wrap_CustomIntegrator_addComputeSum, METH_VARARGS, (char *)"\n"
		"CustomIntegrator_addComputeSum(CustomIntegrator self, string variable, string expression) -> int\n"
		"\n"
		"Add a step to the integration algorithm that computes a sum over degrees of freedom.\n"
		"   Parameters:\n"
		"    - variable the global variable to store the computed value into\n"
		"    - expression a mathematical expression involving both global and per-DOF variables. In each integration step, its value is computed for every degree of freedom. Those values are then added together, and the sum is stored in the specified variable.\n"
		""},
	 { (char *)"CustomIntegrator_addConstrainPositions", _wrap_CustomIntegrator_addConstrainPositions, METH_VARARGS, (char *)"\n"
		"CustomIntegrator_addConstrainPositions(CustomIntegrator self) -> int\n"
		"\n"
		"Add a step to the integration algorithm that updates particle positions so all constraints are satisfied.\n"
		""},
	 { (char *)"CustomIntegrator_addConstrainVelocities", _wrap_CustomIntegrator_addConstrainVelocities, METH_VARARGS, (char *)"\n"
		"CustomIntegrator_addConstrainVelocities(CustomIntegrator self) -> int\n"
		"\n"
		"Add a step to the integration algorithm that updates particle velocities so the net velocity along all constraints is 0.\n"
		""},
	 { (char *)"CustomIntegrator_addUpdateContextState", _wrap_CustomIntegrator_addUpdateContextState, METH_VARARGS, (char *)"\n"
		"CustomIntegrator_addUpdateContextState(CustomIntegrator self) -> int\n"
		"\n"
		"Add a step to the integration algorithm that allows Forces to update the context state.\n"
		""},
	 { (char *)"CustomIntegrator_getComputationStep", _wrap_CustomIntegrator_getComputationStep, METH_VARARGS, (char *)"\n"
		"CustomIntegrator_getComputationStep(CustomIntegrator self, int index)\n"
		"\n"
		"Get the details of a computation step that has been added to the integration algorithm.\n"
		"   Parameters:\n"
		"    - index the index of the computation step to get\n"
		"    - type on exit, the type of computation this step performs\n"
		"    - variable on exit, the variable into which this step stores its result. If this step does not store a result in a variable, this will be an empty string.\n"
		"    - expression on exit, the expression this step evaluates. If this step does not evaluate an expression, this will be an empty string.\n"
		""},
	 { (char *)"CustomIntegrator_getRandomNumberSeed", _wrap_CustomIntegrator_getRandomNumberSeed, METH_VARARGS, (char *)"\n"
		"CustomIntegrator_getRandomNumberSeed(CustomIntegrator self) -> int\n"
		"\n"
		"Get the random number seed. See setRandomNumberSeed() for details.\n"
		""},
	 { (char *)"CustomIntegrator_setRandomNumberSeed", _wrap_CustomIntegrator_setRandomNumberSeed, METH_VARARGS, (char *)"\n"
		"CustomIntegrator_setRandomNumberSeed(CustomIntegrator self, int seed)\n"
		"\n"
		"Set the random number seed. The precise meaning of this parameter is undefined, and is left up to each Platform to interpret in an appropriate way. It is guaranteed that if two simulations are run with different random number seeds, the sequence of random numbers will be different. On the other hand, no guarantees are made about the behavior of simulations that use the same seed. In particular, Platforms are permitted to use non-deterministic algorithms which produce different results on successive runs, even if those runs were initialized identically.\n"
		""},
	 { (char *)"CustomIntegrator_step", _wrap_CustomIntegrator_step, METH_VARARGS, (char *)"\n"
		"CustomIntegrator_step(CustomIntegrator self, int steps)\n"
		"\n"
		"Advance a simulation through time by taking a series of time steps.\n"
		"   Parameters:\n"
		"    - steps the number of time steps to take\n"
		""},
	 { (char *)"CustomIntegrator_getPerDofVariable", _wrap_CustomIntegrator_getPerDofVariable, METH_VARARGS, (char *)"\n"
		"getPerDofVariable(int index, std::vector<(Vec3,std::allocator<(Vec3)>)> values)\n"
		"CustomIntegrator_getPerDofVariable(CustomIntegrator self, int index) -> PyObject\n"
		"\n"
		"Get the value of a per-DOF variable.\n"
		"   Parameters:\n"
		"    - index the index of the variable to get\n"
		"    - values the values of the variable for all degrees of freedom are stored into this\n"
		""},
	 { (char *)"new_CustomIntegrator", _wrap_new_CustomIntegrator, METH_VARARGS, (char *)"\n"
		"CustomIntegrator(double stepSize)\n"
		"new_CustomIntegrator(CustomIntegrator other) -> CustomIntegrator\n"
		"\n"
		"Create a CustomIntegrator.\n"
		"   Parameters:\n"
		"    - stepSize the step size with which to integrate the system (in picoseconds)\n"
		""},
	 { (char *)"delete_CustomIntegrator", _wrap_delete_CustomIntegrator, METH_VARARGS, (char *)"delete_CustomIntegrator(CustomIntegrator self)"},
	 { (char *)"CustomIntegrator_swigregister", CustomIntegrator_swigregister, METH_VARARGS, NULL},
	 { (char *)"CustomNonbondedForce_getNumParticles", _wrap_CustomNonbondedForce_getNumParticles, METH_VARARGS, (char *)"\n"
		"CustomNonbondedForce_getNumParticles(CustomNonbondedForce self) -> int\n"
		"\n"
		"Get the number of particles for which force field parameters have been defined.\n"
		""},
	 { (char *)"CustomNonbondedForce_getNumExclusions", _wrap_CustomNonbondedForce_getNumExclusions, METH_VARARGS, (char *)"\n"
		"CustomNonbondedForce_getNumExclusions(CustomNonbondedForce self) -> int\n"
		"\n"
		"Get the number of particle pairs whose interactions should be excluded.\n"
		""},
	 { (char *)"CustomNonbondedForce_getNumPerParticleParameters", _wrap_CustomNonbondedForce_getNumPerParticleParameters, METH_VARARGS, (char *)"\n"
		"CustomNonbondedForce_getNumPerParticleParameters(CustomNonbondedForce self) -> int\n"
		"\n"
		"Get the number of per-particle parameters that the interaction depends on.\n"
		""},
	 { (char *)"CustomNonbondedForce_getNumGlobalParameters", _wrap_CustomNonbondedForce_getNumGlobalParameters, METH_VARARGS, (char *)"\n"
		"CustomNonbondedForce_getNumGlobalParameters(CustomNonbondedForce self) -> int\n"
		"\n"
		"Get the number of global parameters that the interaction depends on.\n"
		""},
	 { (char *)"CustomNonbondedForce_getNumFunctions", _wrap_CustomNonbondedForce_getNumFunctions, METH_VARARGS, (char *)"\n"
		"CustomNonbondedForce_getNumFunctions(CustomNonbondedForce self) -> int\n"
		"\n"
		"Get the number of tabulated functions that have been defined.\n"
		""},
	 { (char *)"CustomNonbondedForce_getEnergyFunction", _wrap_CustomNonbondedForce_getEnergyFunction, METH_VARARGS, (char *)"\n"
		"CustomNonbondedForce_getEnergyFunction(CustomNonbondedForce self) -> string\n"
		"\n"
		"Get the algebraic expression that gives the interaction energy between two particles\n"
		""},
	 { (char *)"CustomNonbondedForce_setEnergyFunction", _wrap_CustomNonbondedForce_setEnergyFunction, METH_VARARGS, (char *)"\n"
		"CustomNonbondedForce_setEnergyFunction(CustomNonbondedForce self, string energy)\n"
		"\n"
		"Set the algebraic expression that gives the interaction energy between two particles\n"
		""},
	 { (char *)"CustomNonbondedForce_getNonbondedMethod", _wrap_CustomNonbondedForce_getNonbondedMethod, METH_VARARGS, (char *)"\n"
		"CustomNonbondedForce_getNonbondedMethod(CustomNonbondedForce self) -> NonbondedMethod\n"
		"\n"
		"Get the method used for handling long range nonbonded interactions.\n"
		""},
	 { (char *)"CustomNonbondedForce_setNonbondedMethod", _wrap_CustomNonbondedForce_setNonbondedMethod, METH_VARARGS, (char *)"\n"
		"CustomNonbondedForce_setNonbondedMethod(CustomNonbondedForce self, NonbondedMethod method)\n"
		"\n"
		"Set the method used for handling long range nonbonded interactions.\n"
		""},
	 { (char *)"CustomNonbondedForce_getCutoffDistance", _wrap_CustomNonbondedForce_getCutoffDistance, METH_VARARGS, (char *)"\n"
		"CustomNonbondedForce_getCutoffDistance(CustomNonbondedForce self) -> double\n"
		"\n"
		"Get the cutoff distance (in nm) being used for nonbonded interactions. If the NonbondedMethod in use is NoCutoff, this value will have no effect.\n"
		""},
	 { (char *)"CustomNonbondedForce_setCutoffDistance", _wrap_CustomNonbondedForce_setCutoffDistance, METH_VARARGS, (char *)"\n"
		"CustomNonbondedForce_setCutoffDistance(CustomNonbondedForce self, double distance)\n"
		"\n"
		"Set the cutoff distance (in nm) being used for nonbonded interactions. If the NonbondedMethod in use is NoCutoff, this value will have no effect.\n"
		"   Parameters:\n"
		"    - distance the cutoff distance, measured in nm\n"
		""},
	 { (char *)"CustomNonbondedForce_addPerParticleParameter", _wrap_CustomNonbondedForce_addPerParticleParameter, METH_VARARGS, (char *)"\n"
		"CustomNonbondedForce_addPerParticleParameter(CustomNonbondedForce self, string name) -> int\n"
		"\n"
		"Add a new per-particle parameter that the interaction may depend on.\n"
		"   Parameters:\n"
		"    - name the name of the parameter\n"
		""},
	 { (char *)"CustomNonbondedForce_getPerParticleParameterName", _wrap_CustomNonbondedForce_getPerParticleParameterName, METH_VARARGS, (char *)"\n"
		"CustomNonbondedForce_getPerParticleParameterName(CustomNonbondedForce self, int index) -> string\n"
		"\n"
		"Get the name of a per-particle parameter.\n"
		"   Parameters:\n"
		"    - index the index of the parameter for which to get the name\n"
		""},
	 { (char *)"CustomNonbondedForce_setPerParticleParameterName", _wrap_CustomNonbondedForce_setPerParticleParameterName, METH_VARARGS, (char *)"\n"
		"CustomNonbondedForce_setPerParticleParameterName(CustomNonbondedForce self, int index, string name)\n"
		"\n"
		"Set the name of a per-particle parameter.\n"
		"   Parameters:\n"
		"    - index the index of the parameter for which to set the name\n"
		"    - name the name of the parameter\n"
		""},
	 { (char *)"CustomNonbondedForce_addGlobalParameter", _wrap_CustomNonbondedForce_addGlobalParameter, METH_VARARGS, (char *)"\n"
		"CustomNonbondedForce_addGlobalParameter(CustomNonbondedForce self, string name, double defaultValue) -> int\n"
		"\n"
		"Add a new global parameter that the interaction may depend on.\n"
		"   Parameters:\n"
		"    - name the name of the parameter\n"
		"    - defaultValue the default value of the parameter\n"
		""},
	 { (char *)"CustomNonbondedForce_getGlobalParameterName", _wrap_CustomNonbondedForce_getGlobalParameterName, METH_VARARGS, (char *)"\n"
		"CustomNonbondedForce_getGlobalParameterName(CustomNonbondedForce self, int index) -> string\n"
		"\n"
		"Get the name of a global parameter.\n"
		"   Parameters:\n"
		"    - index the index of the parameter for which to get the name\n"
		""},
	 { (char *)"CustomNonbondedForce_setGlobalParameterName", _wrap_CustomNonbondedForce_setGlobalParameterName, METH_VARARGS, (char *)"\n"
		"CustomNonbondedForce_setGlobalParameterName(CustomNonbondedForce self, int index, string name)\n"
		"\n"
		"Set the name of a global parameter.\n"
		"   Parameters:\n"
		"    - index the index of the parameter for which to set the name\n"
		"    - name the name of the parameter\n"
		""},
	 { (char *)"CustomNonbondedForce_getGlobalParameterDefaultValue", _wrap_CustomNonbondedForce_getGlobalParameterDefaultValue, METH_VARARGS, (char *)"\n"
		"CustomNonbondedForce_getGlobalParameterDefaultValue(CustomNonbondedForce self, int index) -> double\n"
		"\n"
		"Get the default value of a global parameter.\n"
		"   Parameters:\n"
		"    - index the index of the parameter for which to get the default value\n"
		""},
	 { (char *)"CustomNonbondedForce_setGlobalParameterDefaultValue", _wrap_CustomNonbondedForce_setGlobalParameterDefaultValue, METH_VARARGS, (char *)"\n"
		"CustomNonbondedForce_setGlobalParameterDefaultValue(CustomNonbondedForce self, int index, double defaultValue)\n"
		"\n"
		"Set the default value of a global parameter.\n"
		"   Parameters:\n"
		"    - index the index of the parameter for which to set the default value\n"
		"    - name the default value of the parameter\n"
		""},
	 { (char *)"CustomNonbondedForce_addParticle", _wrap_CustomNonbondedForce_addParticle, METH_VARARGS, (char *)"\n"
		"CustomNonbondedForce_addParticle(CustomNonbondedForce self, vectord parameters) -> int\n"
		"\n"
		"Add the nonbonded force parameters for a particle. This should be called once for each particle in the System. When it is called for the i'th time, it specifies the parameters for the i'th particle.\n"
		"   Parameters:\n"
		"    - parameters the list of parameters for the new particle\n"
		""},
	 { (char *)"CustomNonbondedForce_getParticleParameters", _wrap_CustomNonbondedForce_getParticleParameters, METH_VARARGS, (char *)"\n"
		"CustomNonbondedForce_getParticleParameters(CustomNonbondedForce self, int index)\n"
		"\n"
		"Get the nonbonded force parameters for a particle.\n"
		"   Parameters:\n"
		"    - index the index of the particle for which to get parameters\n"
		"    - parameters the list of parameters for the specified particle\n"
		""},
	 { (char *)"CustomNonbondedForce_setParticleParameters", _wrap_CustomNonbondedForce_setParticleParameters, METH_VARARGS, (char *)"\n"
		"CustomNonbondedForce_setParticleParameters(CustomNonbondedForce self, int index, vectord parameters)\n"
		"\n"
		"Set the nonbonded force parameters for a particle.\n"
		"   Parameters:\n"
		"    - index the index of the particle for which to set parameters\n"
		"    - parameters the list of parameters for the specified particle\n"
		""},
	 { (char *)"CustomNonbondedForce_addExclusion", _wrap_CustomNonbondedForce_addExclusion, METH_VARARGS, (char *)"\n"
		"CustomNonbondedForce_addExclusion(CustomNonbondedForce self, int particle1, int particle2) -> int\n"
		"\n"
		"Add a particle pair to the list of interactions that should be excluded.\n"
		"   Parameters:\n"
		"    - particle1 the index of the first particle in the pair\n"
		"    - particle2 the index of the second particle in the pair\n"
		""},
	 { (char *)"CustomNonbondedForce_getExclusionParticles", _wrap_CustomNonbondedForce_getExclusionParticles, METH_VARARGS, (char *)"\n"
		"CustomNonbondedForce_getExclusionParticles(CustomNonbondedForce self, int index)\n"
		"\n"
		"Get the particles in a pair whose interaction should be excluded.\n"
		"   Parameters:\n"
		"    - index the index of the exclusion for which to get particle indices\n"
		"    - particle1 the index of the first particle in the pair\n"
		"    - particle2 the index of the second particle in the pair\n"
		""},
	 { (char *)"CustomNonbondedForce_setExclusionParticles", _wrap_CustomNonbondedForce_setExclusionParticles, METH_VARARGS, (char *)"\n"
		"CustomNonbondedForce_setExclusionParticles(CustomNonbondedForce self, int index, int particle1, \n"
		"    int particle2)\n"
		"\n"
		"Set the particles in a pair whose interaction should be excluded.\n"
		"   Parameters:\n"
		"    - index the index of the exclusion for which to set particle indices\n"
		"    - particle1 the index of the first particle in the pair\n"
		"    - particle2 the index of the second particle in the pair\n"
		""},
	 { (char *)"CustomNonbondedForce_addFunction", _wrap_CustomNonbondedForce_addFunction, METH_VARARGS, (char *)"\n"
		"CustomNonbondedForce_addFunction(CustomNonbondedForce self, string name, vectord values, \n"
		"    double min, double max) -> int\n"
		"\n"
		"Add a tabulated function that may appear in the energy expression.\n"
		"   Parameters:\n"
		"    - name the name of the function as it appears in expressions\n"
		"    - values the tabulated values of the function f(x) at uniformly spaced values of x between min and max. The function is assumed to be zero for x < min or x > max.\n"
		"    - min the value of the independent variable corresponding to the first element of values\n"
		"    - max the value of the independent variable corresponding to the last element of values\n"
		""},
	 { (char *)"CustomNonbondedForce_getFunctionParameters", _wrap_CustomNonbondedForce_getFunctionParameters, METH_VARARGS, (char *)"\n"
		"CustomNonbondedForce_getFunctionParameters(CustomNonbondedForce self, int index)\n"
		"\n"
		"Get the parameters for a tabulated function that may appear in the energy expression.\n"
		"   Parameters:\n"
		"    - index the index of the function for which to get parameters\n"
		"    - name the name of the function as it appears in expressions\n"
		"    - values the tabulated values of the function f(x) at uniformly spaced values of x between min and max. The function is assumed to be zero for x < min or x > max.\n"
		"    - min the value of the independent variable corresponding to the first element of values\n"
		"    - max the value of the independent variable corresponding to the last element of values\n"
		""},
	 { (char *)"CustomNonbondedForce_setFunctionParameters", _wrap_CustomNonbondedForce_setFunctionParameters, METH_VARARGS, (char *)"\n"
		"CustomNonbondedForce_setFunctionParameters(CustomNonbondedForce self, int index, string name, \n"
		"    vectord values, double min, double max)\n"
		"\n"
		"Set the parameters for a tabulated function that may appear in algebraic expressions.\n"
		"   Parameters:\n"
		"    - index the index of the function for which to set parameters\n"
		"    - name the name of the function as it appears in expressions\n"
		"    - values the tabulated values of the function f(x) at uniformly spaced values of x between min and max. The function is assumed to be zero for x < min or x > max.\n"
		"    - min the value of the independent variable corresponding to the first element of values\n"
		"    - max the value of the independent variable corresponding to the last element of values\n"
		""},
	 { (char *)"new_CustomNonbondedForce", _wrap_new_CustomNonbondedForce, METH_VARARGS, (char *)"\n"
		"CustomNonbondedForce(string energy)\n"
		"new_CustomNonbondedForce(CustomNonbondedForce other) -> CustomNonbondedForce\n"
		"\n"
		"Create a CustomNonbondedForce.\n"
		"   Parameters:\n"
		"    - energy an algebraic expression giving the interaction energy between two particles as a function of r, the distance between them, as well as any global and per-particle parameters\n"
		""},
	 { (char *)"delete_CustomNonbondedForce", _wrap_delete_CustomNonbondedForce, METH_VARARGS, (char *)"delete_CustomNonbondedForce(CustomNonbondedForce self)"},
	 { (char *)"CustomNonbondedForce_swigregister", CustomNonbondedForce_swigregister, METH_VARARGS, NULL},
	 { (char *)"CustomTorsionForce_getNumTorsions", _wrap_CustomTorsionForce_getNumTorsions, METH_VARARGS, (char *)"\n"
		"CustomTorsionForce_getNumTorsions(CustomTorsionForce self) -> int\n"
		"\n"
		"Get the number of torsions for which force field parameters have been defined.\n"
		""},
	 { (char *)"CustomTorsionForce_getNumPerTorsionParameters", _wrap_CustomTorsionForce_getNumPerTorsionParameters, METH_VARARGS, (char *)"\n"
		"CustomTorsionForce_getNumPerTorsionParameters(CustomTorsionForce self) -> int\n"
		"\n"
		"Get the number of per-torsion parameters that the interaction depends on.\n"
		""},
	 { (char *)"CustomTorsionForce_getNumGlobalParameters", _wrap_CustomTorsionForce_getNumGlobalParameters, METH_VARARGS, (char *)"\n"
		"CustomTorsionForce_getNumGlobalParameters(CustomTorsionForce self) -> int\n"
		"\n"
		"Get the number of global parameters that the interaction depends on.\n"
		""},
	 { (char *)"CustomTorsionForce_getEnergyFunction", _wrap_CustomTorsionForce_getEnergyFunction, METH_VARARGS, (char *)"\n"
		"CustomTorsionForce_getEnergyFunction(CustomTorsionForce self) -> string\n"
		"\n"
		"Get the algebraic expression that gives the interaction energy for each torsion\n"
		""},
	 { (char *)"CustomTorsionForce_setEnergyFunction", _wrap_CustomTorsionForce_setEnergyFunction, METH_VARARGS, (char *)"\n"
		"CustomTorsionForce_setEnergyFunction(CustomTorsionForce self, string energy)\n"
		"\n"
		"Set the algebraic expression that gives the interaction energy for each torsion\n"
		""},
	 { (char *)"CustomTorsionForce_addPerTorsionParameter", _wrap_CustomTorsionForce_addPerTorsionParameter, METH_VARARGS, (char *)"\n"
		"CustomTorsionForce_addPerTorsionParameter(CustomTorsionForce self, string name) -> int\n"
		"\n"
		"Add a new per-torsion parameter that the interaction may depend on.\n"
		"   Parameters:\n"
		"    - name the name of the parameter\n"
		""},
	 { (char *)"CustomTorsionForce_getPerTorsionParameterName", _wrap_CustomTorsionForce_getPerTorsionParameterName, METH_VARARGS, (char *)"\n"
		"CustomTorsionForce_getPerTorsionParameterName(CustomTorsionForce self, int index) -> string\n"
		"\n"
		"Get the name of a per-torsion parameter.\n"
		"   Parameters:\n"
		"    - index the index of the parameter for which to get the name\n"
		""},
	 { (char *)"CustomTorsionForce_setPerTorsionParameterName", _wrap_CustomTorsionForce_setPerTorsionParameterName, METH_VARARGS, (char *)"\n"
		"CustomTorsionForce_setPerTorsionParameterName(CustomTorsionForce self, int index, string name)\n"
		"\n"
		"Set the name of a per-torsion parameter.\n"
		"   Parameters:\n"
		"    - index the index of the parameter for which to set the name\n"
		"    - name the name of the parameter\n"
		""},
	 { (char *)"CustomTorsionForce_addGlobalParameter", _wrap_CustomTorsionForce_addGlobalParameter, METH_VARARGS, (char *)"\n"
		"CustomTorsionForce_addGlobalParameter(CustomTorsionForce self, string name, double defaultValue) -> int\n"
		"\n"
		"Add a new global parameter that the interaction may depend on.\n"
		"   Parameters:\n"
		"    - name the name of the parameter\n"
		"    - defaultValue the default value of the parameter\n"
		""},
	 { (char *)"CustomTorsionForce_getGlobalParameterName", _wrap_CustomTorsionForce_getGlobalParameterName, METH_VARARGS, (char *)"\n"
		"CustomTorsionForce_getGlobalParameterName(CustomTorsionForce self, int index) -> string\n"
		"\n"
		"Get the name of a global parameter.\n"
		"   Parameters:\n"
		"    - index the index of the parameter for which to get the name\n"
		""},
	 { (char *)"CustomTorsionForce_setGlobalParameterName", _wrap_CustomTorsionForce_setGlobalParameterName, METH_VARARGS, (char *)"\n"
		"CustomTorsionForce_setGlobalParameterName(CustomTorsionForce self, int index, string name)\n"
		"\n"
		"Set the name of a global parameter.\n"
		"   Parameters:\n"
		"    - index the index of the parameter for which to set the name\n"
		"    - name the name of the parameter\n"
		""},
	 { (char *)"CustomTorsionForce_getGlobalParameterDefaultValue", _wrap_CustomTorsionForce_getGlobalParameterDefaultValue, METH_VARARGS, (char *)"\n"
		"CustomTorsionForce_getGlobalParameterDefaultValue(CustomTorsionForce self, int index) -> double\n"
		"\n"
		"Get the default value of a global parameter.\n"
		"   Parameters:\n"
		"    - index the index of the parameter for which to get the default value\n"
		""},
	 { (char *)"CustomTorsionForce_setGlobalParameterDefaultValue", _wrap_CustomTorsionForce_setGlobalParameterDefaultValue, METH_VARARGS, (char *)"\n"
		"CustomTorsionForce_setGlobalParameterDefaultValue(CustomTorsionForce self, int index, double defaultValue)\n"
		"\n"
		"Set the default value of a global parameter.\n"
		"   Parameters:\n"
		"    - index the index of the parameter for which to set the default value\n"
		"    - name the default value of the parameter\n"
		""},
	 { (char *)"CustomTorsionForce_addTorsion", _wrap_CustomTorsionForce_addTorsion, METH_VARARGS, (char *)"\n"
		"CustomTorsionForce_addTorsion(CustomTorsionForce self, int particle1, int particle2, \n"
		"    int particle3, int particle4, vectord parameters) -> int\n"
		"\n"
		"Add a torsion term to the force field.\n"
		"   Parameters:\n"
		"    - particle1 the index of the first particle connected by the torsion\n"
		"    - particle2 the index of the second particle connected by the torsion\n"
		"    - particle3 the index of the third particle connected by the torsion\n"
		"    - particle4 the index of the fourth particle connected by the torsion\n"
		"    - parameters the list of parameters for the new torsion\n"
		""},
	 { (char *)"CustomTorsionForce_getTorsionParameters", _wrap_CustomTorsionForce_getTorsionParameters, METH_VARARGS, (char *)"\n"
		"CustomTorsionForce_getTorsionParameters(CustomTorsionForce self, int index)\n"
		"\n"
		"Get the force field parameters for a torsion term.\n"
		"   Parameters:\n"
		"    - index the index of the torsion for which to get parameters\n"
		"    - particle1 the index of the first particle connected by the torsion\n"
		"    - particle2 the index of the second particle connected by the torsion\n"
		"    - particle3 the index of the third particle connected by the torsion\n"
		"    - particle4 the index of the fourth particle connected by the torsion\n"
		"    - parameters the list of parameters for the torsion\n"
		""},
	 { (char *)"CustomTorsionForce_setTorsionParameters", _wrap_CustomTorsionForce_setTorsionParameters, METH_VARARGS, (char *)"\n"
		"CustomTorsionForce_setTorsionParameters(CustomTorsionForce self, int index, int particle1, \n"
		"    int particle2, int particle3, int particle4, \n"
		"    vectord parameters)\n"
		"\n"
		"Set the force field parameters for a torsion term.\n"
		"   Parameters:\n"
		"    - index the index of the torsion for which to set parameters\n"
		"    - particle1 the index of the first particle connected by the torsion\n"
		"    - particle2 the index of the second particle connected by the torsion\n"
		"    - particle3 the index of the third particle connected by the torsion\n"
		"    - particle4 the index of the fourth particle connected by the torsion\n"
		"    - parameters the list of parameters for the torsion\n"
		""},
	 { (char *)"new_CustomTorsionForce", _wrap_new_CustomTorsionForce, METH_VARARGS, (char *)"\n"
		"CustomTorsionForce(string energy)\n"
		"new_CustomTorsionForce(CustomTorsionForce other) -> CustomTorsionForce\n"
		"\n"
		"Create a CustomTorsionForce.\n"
		"   Parameters:\n"
		"    - energy an algebraic expression giving the interaction energy between three particles as a function of theta, the torsion angle between them\n"
		""},
	 { (char *)"delete_CustomTorsionForce", _wrap_delete_CustomTorsionForce, METH_VARARGS, (char *)"delete_CustomTorsionForce(CustomTorsionForce self)"},
	 { (char *)"CustomTorsionForce_swigregister", CustomTorsionForce_swigregister, METH_VARARGS, NULL},
	 { (char *)"GBSAOBCForce_getNumParticles", _wrap_GBSAOBCForce_getNumParticles, METH_VARARGS, (char *)"\n"
		"GBSAOBCForce_getNumParticles(GBSAOBCForce self) -> int\n"
		"\n"
		"Get the number of particles in the system.\n"
		""},
	 { (char *)"GBSAOBCForce_addParticle", _wrap_GBSAOBCForce_addParticle, METH_VARARGS, (char *)"\n"
		"GBSAOBCForce_addParticle(GBSAOBCForce self, double charge, double radius, double scalingFactor) -> int\n"
		"\n"
		"Add the GBSA parameters for a particle. This should be called once for each particle in the System. When it is called for the i'th time, it specifies the parameters for the i'th particle.\n"
		"   Parameters:\n"
		"    - charge the charge of the particle, measured in units of the proton charge\n"
		"    - radius the GBSA radius of the particle, measured in nm\n"
		"    - scalingFactor the OBC scaling factor for the particle\n"
		""},
	 { (char *)"GBSAOBCForce_getParticleParameters", _wrap_GBSAOBCForce_getParticleParameters, METH_VARARGS, (char *)"\n"
		"GBSAOBCForce_getParticleParameters(GBSAOBCForce self, int index)\n"
		"\n"
		"Get the force field parameters for a particle.\n"
		"   Parameters:\n"
		"    - index the index of the particle for which to get parameters\n"
		"    - charge the charge of the particle, measured in units of the proton charge\n"
		"    - radius the GBSA radius of the particle, measured in nm\n"
		"    - scalingFactor the OBC scaling factor for the particle\n"
		""},
	 { (char *)"GBSAOBCForce_setParticleParameters", _wrap_GBSAOBCForce_setParticleParameters, METH_VARARGS, (char *)"\n"
		"GBSAOBCForce_setParticleParameters(GBSAOBCForce self, int index, double charge, double radius, \n"
		"    double scalingFactor)\n"
		"\n"
		"Set the force field parameters for a particle.\n"
		"   Parameters:\n"
		"    - index the index of the particle for which to set parameters\n"
		"    - charge the charge of the particle, measured in units of the proton charge\n"
		"    - radius the GBSA radius of the particle, measured in nm\n"
		"    - scalingFactor the OBC scaling factor for the particle\n"
		""},
	 { (char *)"GBSAOBCForce_getSolventDielectric", _wrap_GBSAOBCForce_getSolventDielectric, METH_VARARGS, (char *)"\n"
		"GBSAOBCForce_getSolventDielectric(GBSAOBCForce self) -> double\n"
		"\n"
		"Get the dielectric constant for the solvent.\n"
		""},
	 { (char *)"GBSAOBCForce_setSolventDielectric", _wrap_GBSAOBCForce_setSolventDielectric, METH_VARARGS, (char *)"\n"
		"GBSAOBCForce_setSolventDielectric(GBSAOBCForce self, double dielectric)\n"
		"\n"
		"Set the dielectric constant for the solvent.\n"
		""},
	 { (char *)"GBSAOBCForce_getSoluteDielectric", _wrap_GBSAOBCForce_getSoluteDielectric, METH_VARARGS, (char *)"\n"
		"GBSAOBCForce_getSoluteDielectric(GBSAOBCForce self) -> double\n"
		"\n"
		"Get the dielectric constant for the solute.\n"
		""},
	 { (char *)"GBSAOBCForce_setSoluteDielectric", _wrap_GBSAOBCForce_setSoluteDielectric, METH_VARARGS, (char *)"\n"
		"GBSAOBCForce_setSoluteDielectric(GBSAOBCForce self, double dielectric)\n"
		"\n"
		"Set the dielectric constant for the solute.\n"
		""},
	 { (char *)"GBSAOBCForce_getNonbondedMethod", _wrap_GBSAOBCForce_getNonbondedMethod, METH_VARARGS, (char *)"\n"
		"GBSAOBCForce_getNonbondedMethod(GBSAOBCForce self) -> NonbondedMethod\n"
		"\n"
		"Get the method used for handling long range nonbonded interactions.\n"
		""},
	 { (char *)"GBSAOBCForce_setNonbondedMethod", _wrap_GBSAOBCForce_setNonbondedMethod, METH_VARARGS, (char *)"\n"
		"GBSAOBCForce_setNonbondedMethod(GBSAOBCForce self, NonbondedMethod method)\n"
		"\n"
		"Set the method used for handling long range nonbonded interactions.\n"
		""},
	 { (char *)"GBSAOBCForce_getCutoffDistance", _wrap_GBSAOBCForce_getCutoffDistance, METH_VARARGS, (char *)"\n"
		"GBSAOBCForce_getCutoffDistance(GBSAOBCForce self) -> double\n"
		"\n"
		"Get the cutoff distance (in nm) being used for nonbonded interactions. If the NonbondedMethod in use is NoCutoff, this value will have no effect.\n"
		""},
	 { (char *)"GBSAOBCForce_setCutoffDistance", _wrap_GBSAOBCForce_setCutoffDistance, METH_VARARGS, (char *)"\n"
		"GBSAOBCForce_setCutoffDistance(GBSAOBCForce self, double distance)\n"
		"\n"
		"Set the cutoff distance (in nm) being used for nonbonded interactions. If the NonbondedMethod in use is NoCutoff, this value will have no effect.\n"
		"   Parameters:\n"
		"    - distance the cutoff distance, measured in nm\n"
		""},
	 { (char *)"new_GBSAOBCForce", _wrap_new_GBSAOBCForce, METH_VARARGS, (char *)"\n"
		"GBSAOBCForce()\n"
		"new_GBSAOBCForce(GBSAOBCForce other) -> GBSAOBCForce\n"
		"\n"
		"This class implements an implicit solvation force using the GBSA-OBC model. \n"
		"\n"
		"To use this class, create a GBSAOBCForce object, then call addParticle() once for each particle in the System to define its parameters. The number of particles for which you define GBSA parameters must be exactly equal to the number of particles in the System, or else an exception will be thrown when you try to create a Context. After a particle has been added, you can modify its force field parameters by calling setParticleParameters().\n"
		""},
	 { (char *)"delete_GBSAOBCForce", _wrap_delete_GBSAOBCForce, METH_VARARGS, (char *)"delete_GBSAOBCForce(GBSAOBCForce self)"},
	 { (char *)"GBSAOBCForce_swigregister", GBSAOBCForce_swigregister, METH_VARARGS, NULL},
	 { (char *)"GBSAOBCSoftcoreForce_getNumParticles", _wrap_GBSAOBCSoftcoreForce_getNumParticles, METH_VARARGS, (char *)"\n"
		"GBSAOBCSoftcoreForce_getNumParticles(GBSAOBCSoftcoreForce self) -> int\n"
		"\n"
		"Get the number of particles in the system.\n"
		""},
	 { (char *)"GBSAOBCSoftcoreForce_addParticle", _wrap_GBSAOBCSoftcoreForce_addParticle, METH_VARARGS, (char *)"\n"
		"addParticle(double charge, double radius, double scalingFactor, \n"
		"    double nonPolarScalingFactor = 1.0) -> int\n"
		"GBSAOBCSoftcoreForce_addParticle(GBSAOBCSoftcoreForce self, double charge, double radius, \n"
		"    double scalingFactor) -> int\n"
		"\n"
		"Add the GBSA parameters for a particle. This should be called once for each particle in the System. When it is called for the i'th time, it specifies the parameters for the i'th particle.\n"
		"   Parameters:\n"
		"    - charge the charge of the particle, measured in units of the proton charge\n"
		"    - radius the GBSA radius of the particle, measured in nm\n"
		"    - scalingFactor the OBC scaling factor for the particle\n"
		"    - nonPolarScalingFactor the nonpolar scaling factor for the particle (default: 1.0)\n"
		""},
	 { (char *)"GBSAOBCSoftcoreForce_getParticleParameters", _wrap_GBSAOBCSoftcoreForce_getParticleParameters, METH_VARARGS, (char *)"\n"
		"GBSAOBCSoftcoreForce_getParticleParameters(GBSAOBCSoftcoreForce self, int index)\n"
		"\n"
		"Get the force field parameters for a particle.\n"
		"   Parameters:\n"
		"    - index the index of the particle for which to get parameters\n"
		"    - charge the charge of the particle, measured in units of the proton charge\n"
		"    - radius the GBSA radius of the particle, measured in nm\n"
		"    - scalingFactor the OBC scaling factor for the particle\n"
		"    - nonPolarScalingFactor the nonpolar scaling factor for the particle\n"
		""},
	 { (char *)"GBSAOBCSoftcoreForce_setParticleParameters", _wrap_GBSAOBCSoftcoreForce_setParticleParameters, METH_VARARGS, (char *)"\n"
		"setParticleParameters(int index, double charge, double radius, double scalingFactor, \n"
		"    double nonPolarScalingFactor = 1.0)\n"
		"GBSAOBCSoftcoreForce_setParticleParameters(GBSAOBCSoftcoreForce self, int index, double charge, \n"
		"    double radius, double scalingFactor)\n"
		"\n"
		"Set the force field parameters for a particle.\n"
		"   Parameters:\n"
		"    - index the index of the particle for which to set parameters\n"
		"    - charge the charge of the particle, measured in units of the proton charge\n"
		"    - radius the GBSA radius of the particle, measured in nm\n"
		"    - scalingFactor the OBC scaling factor for the particle\n"
		"    - nonPolarScalingFactor the nonpolar scaling factor for the particle (default: 1.0)\n"
		""},
	 { (char *)"GBSAOBCSoftcoreForce_getSolventDielectric", _wrap_GBSAOBCSoftcoreForce_getSolventDielectric, METH_VARARGS, (char *)"\n"
		"GBSAOBCSoftcoreForce_getSolventDielectric(GBSAOBCSoftcoreForce self) -> double\n"
		"\n"
		"Get the dielectric constant for the solvent.\n"
		""},
	 { (char *)"GBSAOBCSoftcoreForce_setSolventDielectric", _wrap_GBSAOBCSoftcoreForce_setSolventDielectric, METH_VARARGS, (char *)"\n"
		"GBSAOBCSoftcoreForce_setSolventDielectric(GBSAOBCSoftcoreForce self, double dielectric)\n"
		"\n"
		"Set the dielectric constant for the solvent.\n"
		""},
	 { (char *)"GBSAOBCSoftcoreForce_getSoluteDielectric", _wrap_GBSAOBCSoftcoreForce_getSoluteDielectric, METH_VARARGS, (char *)"\n"
		"GBSAOBCSoftcoreForce_getSoluteDielectric(GBSAOBCSoftcoreForce self) -> double\n"
		"\n"
		"Get the dielectric constant for the solute.\n"
		""},
	 { (char *)"GBSAOBCSoftcoreForce_setSoluteDielectric", _wrap_GBSAOBCSoftcoreForce_setSoluteDielectric, METH_VARARGS, (char *)"\n"
		"GBSAOBCSoftcoreForce_setSoluteDielectric(GBSAOBCSoftcoreForce self, double dielectric)\n"
		"\n"
		"Set the dielectric constant for the solute.\n"
		""},
	 { (char *)"GBSAOBCSoftcoreForce_getNonPolarPrefactor", _wrap_GBSAOBCSoftcoreForce_getNonPolarPrefactor, METH_VARARGS, (char *)"\n"
		"GBSAOBCSoftcoreForce_getNonPolarPrefactor(GBSAOBCSoftcoreForce self) -> double\n"
		"\n"
		"Get the nonPolarPrefactor.\n"
		""},
	 { (char *)"GBSAOBCSoftcoreForce_setNonPolarPrefactor", _wrap_GBSAOBCSoftcoreForce_setNonPolarPrefactor, METH_VARARGS, (char *)"\n"
		"GBSAOBCSoftcoreForce_setNonPolarPrefactor(GBSAOBCSoftcoreForce self, double inputNonPolarPrefactor)\n"
		"\n"
		"Set the nonPolarPrefactor; units are kJ/mol/nm^2\n"
		""},
	 { (char *)"GBSAOBCSoftcoreForce_getNonbondedMethod", _wrap_GBSAOBCSoftcoreForce_getNonbondedMethod, METH_VARARGS, (char *)"\n"
		"GBSAOBCSoftcoreForce_getNonbondedMethod(GBSAOBCSoftcoreForce self) -> NonbondedSoftcoreMethod\n"
		"\n"
		"Get the method used for handling long range nonbonded interactions.\n"
		""},
	 { (char *)"GBSAOBCSoftcoreForce_setNonbondedMethod", _wrap_GBSAOBCSoftcoreForce_setNonbondedMethod, METH_VARARGS, (char *)"\n"
		"GBSAOBCSoftcoreForce_setNonbondedMethod(GBSAOBCSoftcoreForce self, NonbondedSoftcoreMethod method)\n"
		"\n"
		"Set the method used for handling long range nonbonded interactions.\n"
		""},
	 { (char *)"GBSAOBCSoftcoreForce_getCutoffDistance", _wrap_GBSAOBCSoftcoreForce_getCutoffDistance, METH_VARARGS, (char *)"\n"
		"GBSAOBCSoftcoreForce_getCutoffDistance(GBSAOBCSoftcoreForce self) -> double\n"
		"\n"
		"Get the cutoff distance (in nm) being used for nonbonded interactions. If the NonbondedMethod in use is NoCutoff, this value will have no effect.\n"
		""},
	 { (char *)"GBSAOBCSoftcoreForce_setCutoffDistance", _wrap_GBSAOBCSoftcoreForce_setCutoffDistance, METH_VARARGS, (char *)"\n"
		"GBSAOBCSoftcoreForce_setCutoffDistance(GBSAOBCSoftcoreForce self, double distance)\n"
		"\n"
		"Set the cutoff distance (in nm) being used for nonbonded interactions. If the NonbondedMethod in use is NoCutoff, this value will have no effect.\n"
		""},
	 { (char *)"new_GBSAOBCSoftcoreForce", _wrap_new_GBSAOBCSoftcoreForce, METH_VARARGS, (char *)"\n"
		"GBSAOBCSoftcoreForce()\n"
		"new_GBSAOBCSoftcoreForce(GBSAOBCSoftcoreForce other) -> GBSAOBCSoftcoreForce\n"
		"\n"
		"This class implements an implicit solvation force using the GBSA-OBC model. \n"
		"\n"
		"To use this class, create a GBSAOBCSoftcoreForce object, then call addParticle() once for each particle in the System to define its parameters. The number of particles for which you define GBSA parameters must be exactly equal to the number of particles in the System, or else an exception will be thrown when you try to create a Context. After a particle has been added, you can modify its force field parameters by calling setParticleParameters(). \n"
		"\n"
		"If the System also contains a NonbondedForce, this force will use the cutoffs and periodic boundary conditions specified in it.\n"
		""},
	 { (char *)"delete_GBSAOBCSoftcoreForce", _wrap_delete_GBSAOBCSoftcoreForce, METH_VARARGS, (char *)"delete_GBSAOBCSoftcoreForce(GBSAOBCSoftcoreForce self)"},
	 { (char *)"GBSAOBCSoftcoreForce_swigregister", GBSAOBCSoftcoreForce_swigregister, METH_VARARGS, NULL},
	 { (char *)"GBVIForce_getNumParticles", _wrap_GBVIForce_getNumParticles, METH_VARARGS, (char *)"\n"
		"GBVIForce_getNumParticles(GBVIForce self) -> int\n"
		"\n"
		"Get the number of particles in the system.\n"
		""},
	 { (char *)"GBVIForce_addParticle", _wrap_GBVIForce_addParticle, METH_VARARGS, (char *)"\n"
		"GBVIForce_addParticle(GBVIForce self, double charge, double radius, double gamma) -> int\n"
		"\n"
		"Add the GB/VI parameters for a particle. This should be called once for each particle in the System. When it is called for the i'th time, it specifies the parameters for the i'th particle.\n"
		"   Parameters:\n"
		"    - charge the charge of the particle, measured in units of the proton charge\n"
		"    - radius the GB/VI radius of the particle, measured in nm\n"
		"    - gamma the gamma parameter\n"
		""},
	 { (char *)"GBVIForce_getParticleParameters", _wrap_GBVIForce_getParticleParameters, METH_VARARGS, (char *)"\n"
		"GBVIForce_getParticleParameters(GBVIForce self, int index)\n"
		"\n"
		"Get the force field parameters for a particle.\n"
		"   Parameters:\n"
		"    - index the index of the particle for which to get parameters\n"
		"    - charge the charge of the particle, measured in units of the proton charge\n"
		"    - radius the GBSA radius of the particle, measured in nm\n"
		"    - gamma the gamma parameter\n"
		""},
	 { (char *)"GBVIForce_setParticleParameters", _wrap_GBVIForce_setParticleParameters, METH_VARARGS, (char *)"\n"
		"GBVIForce_setParticleParameters(GBVIForce self, int index, double charge, double radius, \n"
		"    double gamma)\n"
		"\n"
		"Set the force field parameters for a particle.\n"
		"   Parameters:\n"
		"    - index the index of the particle for which to set parameters\n"
		"    - charge the charge of the particle, measured in units of the proton charge\n"
		"    - radius the GB/VI radius of the particle, measured in nm\n"
		"    - gamma the gamma parameter\n"
		""},
	 { (char *)"GBVIForce_addBond", _wrap_GBVIForce_addBond, METH_VARARGS, (char *)"\n"
		"GBVIForce_addBond(GBVIForce self, int particle1, int particle2, double distance) -> int\n"
		"\n"
		"Add a bond\n"
		"   Parameters:\n"
		"    - particle1 the index of the first particle\n"
		"    - particle2 the index of the second particle\n"
		"    - distance the distance between the two particles, measured in nm\n"
		""},
	 { (char *)"GBVIForce_getBondParameters", _wrap_GBVIForce_getBondParameters, METH_VARARGS, (char *)"\n"
		"GBVIForce_getBondParameters(GBVIForce self, int index)\n"
		"\n"
		"Get the parameters defining a bond\n"
		"   Parameters:\n"
		"    - index the index of the bond for which to get parameters\n"
		"    - particle1 the index of the first particle involved in the bond\n"
		"    - particle2 the index of the second particle involved in the bond\n"
		"    - distance the distance between the two particles, measured in nm\n"
		""},
	 { (char *)"GBVIForce_setBondParameters", _wrap_GBVIForce_setBondParameters, METH_VARARGS, (char *)"\n"
		"GBVIForce_setBondParameters(GBVIForce self, int index, int particle1, int particle2, \n"
		"    double bondLength)\n"
		"\n"
		"Set 1-2 bonds\n"
		"   Parameters:\n"
		"    - index index of the bond for which to set parameters\n"
		"    - particle1 index of first atom in bond\n"
		"    - particle2 index of second atom in bond\n"
		"    - bondLength bond length, measured in nm\n"
		""},
	 { (char *)"GBVIForce_getNumBonds", _wrap_GBVIForce_getNumBonds, METH_VARARGS, (char *)"\n"
		"GBVIForce_getNumBonds(GBVIForce self) -> int\n"
		"\n"
		"Get number of bonds\n"
		""},
	 { (char *)"GBVIForce_getSolventDielectric", _wrap_GBVIForce_getSolventDielectric, METH_VARARGS, (char *)"\n"
		"GBVIForce_getSolventDielectric(GBVIForce self) -> double\n"
		"\n"
		"Get the dielectric constant for the solvent.\n"
		""},
	 { (char *)"GBVIForce_setSolventDielectric", _wrap_GBVIForce_setSolventDielectric, METH_VARARGS, (char *)"\n"
		"GBVIForce_setSolventDielectric(GBVIForce self, double dielectric)\n"
		"\n"
		"Set the dielectric constant for the solvent.\n"
		""},
	 { (char *)"GBVIForce_getSoluteDielectric", _wrap_GBVIForce_getSoluteDielectric, METH_VARARGS, (char *)"\n"
		"GBVIForce_getSoluteDielectric(GBVIForce self) -> double\n"
		"\n"
		"Get the dielectric constant for the solute.\n"
		""},
	 { (char *)"GBVIForce_setSoluteDielectric", _wrap_GBVIForce_setSoluteDielectric, METH_VARARGS, (char *)"\n"
		"GBVIForce_setSoluteDielectric(GBVIForce self, double dielectric)\n"
		"\n"
		"Set the dielectric constant for the solute.\n"
		""},
	 { (char *)"GBVIForce_getNonbondedMethod", _wrap_GBVIForce_getNonbondedMethod, METH_VARARGS, (char *)"\n"
		"GBVIForce_getNonbondedMethod(GBVIForce self) -> NonbondedMethod\n"
		"\n"
		"Get the method used for handling long range nonbonded interactions.\n"
		""},
	 { (char *)"GBVIForce_setNonbondedMethod", _wrap_GBVIForce_setNonbondedMethod, METH_VARARGS, (char *)"\n"
		"GBVIForce_setNonbondedMethod(GBVIForce self, NonbondedMethod method)\n"
		"\n"
		"Set the method used for handling long range nonbonded interactions.\n"
		""},
	 { (char *)"GBVIForce_getCutoffDistance", _wrap_GBVIForce_getCutoffDistance, METH_VARARGS, (char *)"\n"
		"GBVIForce_getCutoffDistance(GBVIForce self) -> double\n"
		"\n"
		"Get the cutoff distance (in nm) being used for nonbonded interactions. If the NonbondedMethod in use is NoCutoff, this value will have no effect.\n"
		""},
	 { (char *)"GBVIForce_setCutoffDistance", _wrap_GBVIForce_setCutoffDistance, METH_VARARGS, (char *)"\n"
		"GBVIForce_setCutoffDistance(GBVIForce self, double distance)\n"
		"\n"
		"Set the cutoff distance (in nm) being used for nonbonded interactions. If the NonbondedMethod in use is NoCutoff, this value will have no effect.\n"
		"   Parameters:\n"
		"    - distance the cutoff distance, measured in nm\n"
		""},
	 { (char *)"GBVIForce_getBornRadiusScalingMethod", _wrap_GBVIForce_getBornRadiusScalingMethod, METH_VARARGS, (char *)"\n"
		"GBVIForce_getBornRadiusScalingMethod(GBVIForce self) -> BornRadiusScalingMethod\n"
		"\n"
		"Get Born radius scaling method\n"
		""},
	 { (char *)"GBVIForce_setBornRadiusScalingMethod", _wrap_GBVIForce_setBornRadiusScalingMethod, METH_VARARGS, (char *)"\n"
		"GBVIForce_setBornRadiusScalingMethod(GBVIForce self, BornRadiusScalingMethod method)\n"
		"\n"
		"Set Born radius scaling method\n"
		""},
	 { (char *)"GBVIForce_getQuinticLowerLimitFactor", _wrap_GBVIForce_getQuinticLowerLimitFactor, METH_VARARGS, (char *)"\n"
		"GBVIForce_getQuinticLowerLimitFactor(GBVIForce self) -> double\n"
		"\n"
		"Get the lower limit factor used in the quintic spline scaling method (typically 0.5-0.8)\n"
		""},
	 { (char *)"GBVIForce_setQuinticLowerLimitFactor", _wrap_GBVIForce_setQuinticLowerLimitFactor, METH_VARARGS, (char *)"\n"
		"GBVIForce_setQuinticLowerLimitFactor(GBVIForce self, double quinticLowerLimitFactor)\n"
		"\n"
		"Set the lower limit factor used in the quintic spline scaling method (typically 0.5-0.8)\n"
		""},
	 { (char *)"GBVIForce_getQuinticUpperBornRadiusLimit", _wrap_GBVIForce_getQuinticUpperBornRadiusLimit, METH_VARARGS, (char *)"\n"
		"GBVIForce_getQuinticUpperBornRadiusLimit(GBVIForce self) -> double\n"
		"\n"
		"Get the upper limit used in the quintic spline scaling method, measured in nm (~5.0)\n"
		""},
	 { (char *)"GBVIForce_setQuinticUpperBornRadiusLimit", _wrap_GBVIForce_setQuinticUpperBornRadiusLimit, METH_VARARGS, (char *)"\n"
		"GBVIForce_setQuinticUpperBornRadiusLimit(GBVIForce self, double quinticUpperBornRadiusLimit)\n"
		"\n"
		"Set the upper limit used in the quintic spline scaling method, measured in nm (~5.0)\n"
		""},
	 { (char *)"new_GBVIForce", _wrap_new_GBVIForce, METH_VARARGS, (char *)"\n"
		"GBVIForce()\n"
		"new_GBVIForce(GBVIForce other) -> GBVIForce\n"
		"\n"
		"This class implements an implicit solvation force using the GB/VI model. \n"
		"\n"
		"To use this class, create a GBVIForce object, then call addParticle() once for each particle in the System to define its parameters. The number of particles for which you define GB/VI parameters must be exactly equal to the number of particles in the System, or else an exception will be thrown when you try to create a Context. After a particle has been added, you can modify its force field parameters by calling setParticleParameters().\n"
		""},
	 { (char *)"delete_GBVIForce", _wrap_delete_GBVIForce, METH_VARARGS, (char *)"delete_GBVIForce(GBVIForce self)"},
	 { (char *)"GBVIForce_swigregister", GBVIForce_swigregister, METH_VARARGS, NULL},
	 { (char *)"GBVISoftcoreForce_getNumParticles", _wrap_GBVISoftcoreForce_getNumParticles, METH_VARARGS, (char *)"\n"
		"GBVISoftcoreForce_getNumParticles(GBVISoftcoreForce self) -> int\n"
		"\n"
		"Get the number of particles in the system.\n"
		""},
	 { (char *)"GBVISoftcoreForce_addParticle", _wrap_GBVISoftcoreForce_addParticle, METH_VARARGS, (char *)"\n"
		"addParticle(double charge, double radius, double gamma, double bornRadiusScaleFactor = 1.0)\n"
		"GBVISoftcoreForce_addParticle(GBVISoftcoreForce self, double charge, double radius, \n"
		"    double gamma)\n"
		"\n"
		"Add the GB/VI parameters for a particle. This should be called once for each particle in the System. When it is called for the i'th time, it specifies the parameters for the i'th particle.\n"
		"   Parameters:\n"
		"    - charge the charge of the particle, measured in units of the proton charge\n"
		"    - radius the GB/VI radius of the particle, measured in nm\n"
		"    - gamma the gamma parameter\n"
		"    - bornRadiusScaleFactor the Born radius scale factor (used for free energy calculations)\n"
		""},
	 { (char *)"GBVISoftcoreForce_getParticleParameters", _wrap_GBVISoftcoreForce_getParticleParameters, METH_VARARGS, (char *)"\n"
		"GBVISoftcoreForce_getParticleParameters(GBVISoftcoreForce self, int index)\n"
		"\n"
		"Get the force field parameters for a particle.\n"
		"   Parameters:\n"
		"    - index the index of the particle for which to get parameters\n"
		"    - charge the charge of the particle, measured in units of the proton charge\n"
		"    - radius the GBSA radius of the particle, measured in nm\n"
		"    - gamma the gamma parameter\n"
		"    - bornRadiusScaleFactor the Born radius scale factor (used for free energy calculations)\n"
		""},
	 { (char *)"GBVISoftcoreForce_setParticleParameters", _wrap_GBVISoftcoreForce_setParticleParameters, METH_VARARGS, (char *)"\n"
		"setParticleParameters(int index, double charge, double radius, double gamma, \n"
		"    double bornRadiusScaleFactor = 1.0)\n"
		"GBVISoftcoreForce_setParticleParameters(GBVISoftcoreForce self, int index, double charge, double radius, \n"
		"    double gamma)\n"
		"\n"
		"Set the force field parameters for a particle.\n"
		"   Parameters:\n"
		"    - index the index of the particle for which to set parameters\n"
		"    - charge the charge of the particle, measured in units of the proton charge\n"
		"    - radius the GB/VI radius of the particle, measured in nm\n"
		"    - gamma the gamma parameter\n"
		"    - bornRadiusScaleFactor the Born radius scale factor (used for free energy calculations)\n"
		""},
	 { (char *)"GBVISoftcoreForce_addBond", _wrap_GBVISoftcoreForce_addBond, METH_VARARGS, (char *)"\n"
		"GBVISoftcoreForce_addBond(GBVISoftcoreForce self, int particle1, int particle2, \n"
		"    double distance) -> int\n"
		"\n"
		"Add a bond\n"
		"   Parameters:\n"
		"    - particle1 the index of the first particle\n"
		"    - particle2 the index of the second particle\n"
		"    - distance the distance between the two particles, measured in nm\n"
		""},
	 { (char *)"GBVISoftcoreForce_getBondParameters", _wrap_GBVISoftcoreForce_getBondParameters, METH_VARARGS, (char *)"\n"
		"GBVISoftcoreForce_getBondParameters(GBVISoftcoreForce self, int index)\n"
		"\n"
		"Get the parameters defining a bond\n"
		"   Parameters:\n"
		"    - index the index of the bond for which to get parameters\n"
		"    - particle1 the index of the first particle involved in the bond\n"
		"    - particle2 the index of the second particle involved in the bond\n"
		"    - distance the distance between the two particles, measured in nm\n"
		""},
	 { (char *)"GBVISoftcoreForce_setBondParameters", _wrap_GBVISoftcoreForce_setBondParameters, METH_VARARGS, (char *)"\n"
		"GBVISoftcoreForce_setBondParameters(GBVISoftcoreForce self, int index, int particle1, int particle2, \n"
		"    double bondLength)\n"
		"\n"
		"Set 1-2 bonds\n"
		"   Parameters:\n"
		"    - index index of the bond for which to set parameters\n"
		"    - particle1 index of first atom in bond\n"
		"    - particle2 index of second atom in bond\n"
		"    - bondLength bond length\n"
		""},
	 { (char *)"GBVISoftcoreForce_getNumBonds", _wrap_GBVISoftcoreForce_getNumBonds, METH_VARARGS, (char *)"\n"
		"GBVISoftcoreForce_getNumBonds(GBVISoftcoreForce self) -> int\n"
		"\n"
		"Get number of bonds\n"
		""},
	 { (char *)"GBVISoftcoreForce_getSolventDielectric", _wrap_GBVISoftcoreForce_getSolventDielectric, METH_VARARGS, (char *)"\n"
		"GBVISoftcoreForce_getSolventDielectric(GBVISoftcoreForce self) -> double\n"
		"\n"
		"Get the dielectric constant for the solvent.\n"
		""},
	 { (char *)"GBVISoftcoreForce_setSolventDielectric", _wrap_GBVISoftcoreForce_setSolventDielectric, METH_VARARGS, (char *)"\n"
		"GBVISoftcoreForce_setSolventDielectric(GBVISoftcoreForce self, double dielectric)\n"
		"\n"
		"Set the dielectric constant for the solvent.\n"
		""},
	 { (char *)"GBVISoftcoreForce_getSoluteDielectric", _wrap_GBVISoftcoreForce_getSoluteDielectric, METH_VARARGS, (char *)"\n"
		"GBVISoftcoreForce_getSoluteDielectric(GBVISoftcoreForce self) -> double\n"
		"\n"
		"Get the dielectric constant for the solute.\n"
		""},
	 { (char *)"GBVISoftcoreForce_setSoluteDielectric", _wrap_GBVISoftcoreForce_setSoluteDielectric, METH_VARARGS, (char *)"\n"
		"GBVISoftcoreForce_setSoluteDielectric(GBVISoftcoreForce self, double dielectric)\n"
		"\n"
		"Set the dielectric constant for the solute.\n"
		""},
	 { (char *)"GBVISoftcoreForce_getNonbondedMethod", _wrap_GBVISoftcoreForce_getNonbondedMethod, METH_VARARGS, (char *)"\n"
		"GBVISoftcoreForce_getNonbondedMethod(GBVISoftcoreForce self) -> NonbondedSoftcoreMethod\n"
		"\n"
		"Get the method used for handling long range nonbonded interactions.\n"
		""},
	 { (char *)"GBVISoftcoreForce_setNonbondedMethod", _wrap_GBVISoftcoreForce_setNonbondedMethod, METH_VARARGS, (char *)"\n"
		"GBVISoftcoreForce_setNonbondedMethod(GBVISoftcoreForce self, NonbondedSoftcoreMethod method)\n"
		"\n"
		"Set the method used for handling long range nonbonded interactions.\n"
		""},
	 { (char *)"GBVISoftcoreForce_getCutoffDistance", _wrap_GBVISoftcoreForce_getCutoffDistance, METH_VARARGS, (char *)"\n"
		"GBVISoftcoreForce_getCutoffDistance(GBVISoftcoreForce self) -> double\n"
		"\n"
		"Get the cutoff distance (in nm) being used for nonbonded interactions. If the NonbondedMethod in use is NoCutoff, this value will have no effect.\n"
		""},
	 { (char *)"GBVISoftcoreForce_setCutoffDistance", _wrap_GBVISoftcoreForce_setCutoffDistance, METH_VARARGS, (char *)"\n"
		"GBVISoftcoreForce_setCutoffDistance(GBVISoftcoreForce self, double distance)\n"
		"\n"
		"Set the cutoff distance (in nm) being used for nonbonded interactions. If the NonbondedMethod in use is NoCutoff, this value will have no effect.\n"
		""},
	 { (char *)"GBVISoftcoreForce_getBornRadiusScalingMethod", _wrap_GBVISoftcoreForce_getBornRadiusScalingMethod, METH_VARARGS, (char *)"\n"
		"GBVISoftcoreForce_getBornRadiusScalingMethod(GBVISoftcoreForce self) -> BornRadiusScalingSoftcoreMethod\n"
		"\n"
		"Get the method used for scaling Born radii.\n"
		""},
	 { (char *)"GBVISoftcoreForce_setBornRadiusScalingMethod", _wrap_GBVISoftcoreForce_setBornRadiusScalingMethod, METH_VARARGS, (char *)"\n"
		"GBVISoftcoreForce_setBornRadiusScalingMethod(GBVISoftcoreForce self, BornRadiusScalingSoftcoreMethod method)\n"
		"\n"
		"Set the method used for scaling Born radii.\n"
		""},
	 { (char *)"GBVISoftcoreForce_getQuinticLowerLimitFactor", _wrap_GBVISoftcoreForce_getQuinticLowerLimitFactor, METH_VARARGS, (char *)"\n"
		"GBVISoftcoreForce_getQuinticLowerLimitFactor(GBVISoftcoreForce self) -> double\n"
		"\n"
		"Get the lower limit factor used in the quintic spline scaling method (typically 0.5-0.8)\n"
		""},
	 { (char *)"GBVISoftcoreForce_setQuinticLowerLimitFactor", _wrap_GBVISoftcoreForce_setQuinticLowerLimitFactor, METH_VARARGS, (char *)"\n"
		"GBVISoftcoreForce_setQuinticLowerLimitFactor(GBVISoftcoreForce self, double quinticLowerLimitFactor)\n"
		"\n"
		"Set the lower limit factor used in the quintic spline scaling method (typically 0.5-0.8)\n"
		""},
	 { (char *)"GBVISoftcoreForce_getQuinticUpperBornRadiusLimit", _wrap_GBVISoftcoreForce_getQuinticUpperBornRadiusLimit, METH_VARARGS, (char *)"\n"
		"GBVISoftcoreForce_getQuinticUpperBornRadiusLimit(GBVISoftcoreForce self) -> double\n"
		"\n"
		"Get the upper limit used in the quintic spline scaling method (typically 0.5-0.8)\n"
		""},
	 { (char *)"GBVISoftcoreForce_setQuinticUpperBornRadiusLimit", _wrap_GBVISoftcoreForce_setQuinticUpperBornRadiusLimit, METH_VARARGS, (char *)"\n"
		"GBVISoftcoreForce_setQuinticUpperBornRadiusLimit(GBVISoftcoreForce self, double quinticUpperBornRadiusLimit)\n"
		"\n"
		"Set the upper limit used in the quintic spline scaling method (typically 0.008)\n"
		""},
	 { (char *)"new_GBVISoftcoreForce", _wrap_new_GBVISoftcoreForce, METH_VARARGS, (char *)"\n"
		"GBVISoftcoreForce()\n"
		"new_GBVISoftcoreForce(GBVISoftcoreForce other) -> GBVISoftcoreForce\n"
		"\n"
		"This class implements an implicit solvation force using the GB/VI model. \n"
		"\n"
		"To use this class, create a GBVISoftcoreForce object, then call addParticle() once for each particle in the System to define its parameters. The number of particles for which you define GB/VI parameters must be exactly equal to the number of particles in the System, or else an exception will be thrown when you try to create an Context. After a particle has been added, you can modify its force field parameters by calling setParticleParameters(). \n"
		"\n"
		"If the System also contains a NonbondedForce, this force will use the cutoffs and periodic boundary conditions specified in it.\n"
		""},
	 { (char *)"delete_GBVISoftcoreForce", _wrap_delete_GBVISoftcoreForce, METH_VARARGS, (char *)"delete_GBVISoftcoreForce(GBVISoftcoreForce self)"},
	 { (char *)"GBVISoftcoreForce_swigregister", GBVISoftcoreForce_swigregister, METH_VARARGS, NULL},
	 { (char *)"HarmonicAngleForce_getNumAngles", _wrap_HarmonicAngleForce_getNumAngles, METH_VARARGS, (char *)"\n"
		"HarmonicAngleForce_getNumAngles(HarmonicAngleForce self) -> int\n"
		"\n"
		"Get the number of harmonic bond angle terms in the potential function\n"
		""},
	 { (char *)"HarmonicAngleForce_addAngle", _wrap_HarmonicAngleForce_addAngle, METH_VARARGS, (char *)"\n"
		"HarmonicAngleForce_addAngle(HarmonicAngleForce self, int particle1, int particle2, \n"
		"    int particle3, double angle, double k) -> int\n"
		"\n"
		"Add an angle term to the force field.\n"
		"   Parameters:\n"
		"    - particle1 the index of the first particle forming the angle\n"
		"    - particle2 the index of the second particle forming the angle\n"
		"    - particle3 the index of the third particle forming the angle\n"
		"    - angle the equilibrium angle, measured in radians\n"
		"    - k the harmonic force constant for the angle, measured in kJ/mol/radian^2\n"
		""},
	 { (char *)"HarmonicAngleForce_getAngleParameters", _wrap_HarmonicAngleForce_getAngleParameters, METH_VARARGS, (char *)"\n"
		"HarmonicAngleForce_getAngleParameters(HarmonicAngleForce self, int index)\n"
		"\n"
		"Get the force field parameters for an angle term.\n"
		"   Parameters:\n"
		"    - index the index of the angle for which to get parameters\n"
		"    - particle1 the index of the first particle forming the angle\n"
		"    - particle2 the index of the second particle forming the angle\n"
		"    - particle3 the index of the third particle forming the angle\n"
		"    - angle the equilibrium angle, measured in radians\n"
		"    - k the harmonic force constant for the angle, measured in kJ/mol/radian^2\n"
		""},
	 { (char *)"HarmonicAngleForce_setAngleParameters", _wrap_HarmonicAngleForce_setAngleParameters, METH_VARARGS, (char *)"\n"
		"HarmonicAngleForce_setAngleParameters(HarmonicAngleForce self, int index, int particle1, \n"
		"    int particle2, int particle3, double angle, double k)\n"
		"\n"
		"Set the force field parameters for an angle term.\n"
		"   Parameters:\n"
		"    - index the index of the angle for which to set parameters\n"
		"    - particle1 the index of the first particle forming the angle\n"
		"    - particle2 the index of the second particle forming the angle\n"
		"    - particle3 the index of the third particle forming the angle\n"
		"    - angle the equilibrium angle, measured in radians\n"
		"    - k the harmonic force constant for the angle, measured in kJ/mol/radian^2\n"
		""},
	 { (char *)"new_HarmonicAngleForce", _wrap_new_HarmonicAngleForce, METH_VARARGS, (char *)"\n"
		"HarmonicAngleForce()\n"
		"new_HarmonicAngleForce(HarmonicAngleForce other) -> HarmonicAngleForce\n"
		"\n"
		"Create a HarmonicAngleForce.\n"
		""},
	 { (char *)"delete_HarmonicAngleForce", _wrap_delete_HarmonicAngleForce, METH_VARARGS, (char *)"delete_HarmonicAngleForce(HarmonicAngleForce self)"},
	 { (char *)"HarmonicAngleForce_swigregister", HarmonicAngleForce_swigregister, METH_VARARGS, NULL},
	 { (char *)"HarmonicBondForce_getNumBonds", _wrap_HarmonicBondForce_getNumBonds, METH_VARARGS, (char *)"\n"
		"HarmonicBondForce_getNumBonds(HarmonicBondForce self) -> int\n"
		"\n"
		"Get the number of harmonic bond stretch terms in the potential function\n"
		""},
	 { (char *)"HarmonicBondForce_addBond", _wrap_HarmonicBondForce_addBond, METH_VARARGS, (char *)"\n"
		"HarmonicBondForce_addBond(HarmonicBondForce self, int particle1, int particle2, \n"
		"    double length, double k) -> int\n"
		"\n"
		"Add a bond term to the force field.\n"
		"   Parameters:\n"
		"    - particle1 the index of the first particle connected by the bond\n"
		"    - particle2 the index of the second particle connected by the bond\n"
		"    - length the equilibrium length of the bond, measured in nm\n"
		"    - k the harmonic force constant for the bond, measured in kJ/mol/nm^2\n"
		""},
	 { (char *)"HarmonicBondForce_getBondParameters", _wrap_HarmonicBondForce_getBondParameters, METH_VARARGS, (char *)"\n"
		"HarmonicBondForce_getBondParameters(HarmonicBondForce self, int index)\n"
		"\n"
		"Get the force field parameters for a bond term.\n"
		"   Parameters:\n"
		"    - index the index of the bond for which to get parameters\n"
		"    - particle1 the index of the first particle connected by the bond\n"
		"    - particle2 the index of the second particle connected by the bond\n"
		"    - length the equilibrium length of the bond, measured in nm\n"
		"    - k the harmonic force constant for the bond, measured in kJ/mol/nm^2\n"
		""},
	 { (char *)"HarmonicBondForce_setBondParameters", _wrap_HarmonicBondForce_setBondParameters, METH_VARARGS, (char *)"\n"
		"HarmonicBondForce_setBondParameters(HarmonicBondForce self, int index, int particle1, int particle2, \n"
		"    double length, double k)\n"
		"\n"
		"Set the force field parameters for a bond term.\n"
		"   Parameters:\n"
		"    - index the index of the bond for which to set parameters\n"
		"    - particle1 the index of the first particle connected by the bond\n"
		"    - particle2 the index of the second particle connected by the bond\n"
		"    - length the equilibrium length of the bond, measured in nm\n"
		"    - k the harmonic force constant for the bond, measured in kJ/mol/nm^2\n"
		""},
	 { (char *)"new_HarmonicBondForce", _wrap_new_HarmonicBondForce, METH_VARARGS, (char *)"\n"
		"HarmonicBondForce()\n"
		"new_HarmonicBondForce(HarmonicBondForce other) -> HarmonicBondForce\n"
		"\n"
		"Create a HarmonicBondForce.\n"
		""},
	 { (char *)"delete_HarmonicBondForce", _wrap_delete_HarmonicBondForce, METH_VARARGS, (char *)"delete_HarmonicBondForce(HarmonicBondForce self)"},
	 { (char *)"HarmonicBondForce_swigregister", HarmonicBondForce_swigregister, METH_VARARGS, NULL},
	 { (char *)"LangevinIntegrator_getTemperature", _wrap_LangevinIntegrator_getTemperature, METH_VARARGS, (char *)"\n"
		"LangevinIntegrator_getTemperature(LangevinIntegrator self) -> double\n"
		"\n"
		"Get the temperature of the heat bath (in Kelvin).\n"
		""},
	 { (char *)"LangevinIntegrator_setTemperature", _wrap_LangevinIntegrator_setTemperature, METH_VARARGS, (char *)"\n"
		"LangevinIntegrator_setTemperature(LangevinIntegrator self, double temp)\n"
		"\n"
		"Set the temperature of the heat bath (in Kelvin).\n"
		"   Parameters:\n"
		"    - temp the temperature of the heat bath, measured in Kelvin\n"
		""},
	 { (char *)"LangevinIntegrator_getFriction", _wrap_LangevinIntegrator_getFriction, METH_VARARGS, (char *)"\n"
		"LangevinIntegrator_getFriction(LangevinIntegrator self) -> double\n"
		"\n"
		"Get the friction coefficient which determines how strongly the system is coupled to the heat bath (in inverse ps).\n"
		""},
	 { (char *)"LangevinIntegrator_setFriction", _wrap_LangevinIntegrator_setFriction, METH_VARARGS, (char *)"\n"
		"LangevinIntegrator_setFriction(LangevinIntegrator self, double coeff)\n"
		"\n"
		"Set the friction coefficient which determines how strongly the system is coupled to the heat bath (in inverse ps).\n"
		"   Parameters:\n"
		"    - coeff the friction coefficient, measured in 1/ps\n"
		""},
	 { (char *)"LangevinIntegrator_getRandomNumberSeed", _wrap_LangevinIntegrator_getRandomNumberSeed, METH_VARARGS, (char *)"\n"
		"LangevinIntegrator_getRandomNumberSeed(LangevinIntegrator self) -> int\n"
		"\n"
		"Get the random number seed. See setRandomNumberSeed() for details.\n"
		""},
	 { (char *)"LangevinIntegrator_setRandomNumberSeed", _wrap_LangevinIntegrator_setRandomNumberSeed, METH_VARARGS, (char *)"\n"
		"LangevinIntegrator_setRandomNumberSeed(LangevinIntegrator self, int seed)\n"
		"\n"
		"Set the random number seed. The precise meaning of this parameter is undefined, and is left up to each Platform to interpret in an appropriate way. It is guaranteed that if two simulations are run with different random number seeds, the sequence of random forces will be different. On the other hand, no guarantees are made about the behavior of simulations that use the same seed. In particular, Platforms are permitted to use non-deterministic algorithms which produce different results on successive runs, even if those runs were initialized identically.\n"
		""},
	 { (char *)"LangevinIntegrator_step", _wrap_LangevinIntegrator_step, METH_VARARGS, (char *)"\n"
		"LangevinIntegrator_step(LangevinIntegrator self, int steps)\n"
		"\n"
		"Advance a simulation through time by taking a series of time steps.\n"
		"   Parameters:\n"
		"    - steps the number of time steps to take\n"
		""},
	 { (char *)"new_LangevinIntegrator", _wrap_new_LangevinIntegrator, METH_VARARGS, (char *)"\n"
		"LangevinIntegrator(double temperature, double frictionCoeff, double stepSize)\n"
		"new_LangevinIntegrator(LangevinIntegrator other) -> LangevinIntegrator\n"
		"\n"
		"Create a LangevinIntegrator.\n"
		"   Parameters:\n"
		"    - temperature the temperature of the heat bath (in Kelvin)\n"
		"    - frictionCoeff the friction coefficient which couples the system to the heat bath (in inverse picoseconds)\n"
		"    - stepSize the step size with which to integrator the system (in picoseconds)\n"
		""},
	 { (char *)"delete_LangevinIntegrator", _wrap_delete_LangevinIntegrator, METH_VARARGS, (char *)"delete_LangevinIntegrator(LangevinIntegrator self)"},
	 { (char *)"LangevinIntegrator_swigregister", LangevinIntegrator_swigregister, METH_VARARGS, NULL},
	 { (char *)"LocalEnergyMinimizer_minimize", _wrap_LocalEnergyMinimizer_minimize, METH_VARARGS, (char *)"\n"
		"minimize(Context context, double tolerance = 1, int maxIterations = 0)\n"
		"minimize(Context context, double tolerance = 1)\n"
		"LocalEnergyMinimizer_minimize(Context context)\n"
		"\n"
		"Search for a new set of particle positions that represent a local potential energy minimum. On exit, the Context will have been updated with the new positions.\n"
		"   Parameters:\n"
		"    - context a Context specifying the System to minimize and the initial particle positions\n"
		"    - tolerance this specifies how precisely the energy minimum must be located. Minimization will be halted once the root-mean-square value of all force components reaches this tolerance. The default value is 1.\n"
		"    - maxIterations the maximum number of iterations to perform. If this is 0, minimation is continued until the results converge without regard to how many iterations it takes. The default value is 0.\n"
		""},
	 { (char *)"delete_LocalEnergyMinimizer", _wrap_delete_LocalEnergyMinimizer, METH_VARARGS, (char *)"delete_LocalEnergyMinimizer(LocalEnergyMinimizer self)"},
	 { (char *)"LocalEnergyMinimizer_swigregister", LocalEnergyMinimizer_swigregister, METH_VARARGS, NULL},
	 { (char *)"MonteCarloBarostat_Pressure", _wrap_MonteCarloBarostat_Pressure, METH_VARARGS, (char *)"\n"
		"MonteCarloBarostat_Pressure() -> string\n"
		"\n"
		"This is the name of the parameter which stores the current pressure acting on the system (in bar).\n"
		""},
	 { (char *)"MonteCarloBarostat_getDefaultPressure", _wrap_MonteCarloBarostat_getDefaultPressure, METH_VARARGS, (char *)"\n"
		"MonteCarloBarostat_getDefaultPressure(MonteCarloBarostat self) -> double\n"
		"\n"
		"Get the default pressure acting on the system (in bar).\n"
		""},
	 { (char *)"MonteCarloBarostat_getFrequency", _wrap_MonteCarloBarostat_getFrequency, METH_VARARGS, (char *)"\n"
		"MonteCarloBarostat_getFrequency(MonteCarloBarostat self) -> int\n"
		"\n"
		"Get the frequency (in time steps) at which Monte Carlo pressure changes should be attempted. If this is set to 0, the barostat is disabled.\n"
		""},
	 { (char *)"MonteCarloBarostat_setFrequency", _wrap_MonteCarloBarostat_setFrequency, METH_VARARGS, (char *)"\n"
		"MonteCarloBarostat_setFrequency(MonteCarloBarostat self, int freq)\n"
		"\n"
		"Set the frequency (in time steps) at which Monte Carlo pressure changes should be attempted. If this is set to 0, the barostat is disabled.\n"
		""},
	 { (char *)"MonteCarloBarostat_getTemperature", _wrap_MonteCarloBarostat_getTemperature, METH_VARARGS, (char *)"\n"
		"MonteCarloBarostat_getTemperature(MonteCarloBarostat self) -> double\n"
		"\n"
		"Get the temperature at which the system is being maintained, measured in Kelvin.\n"
		""},
	 { (char *)"MonteCarloBarostat_setTemperature", _wrap_MonteCarloBarostat_setTemperature, METH_VARARGS, (char *)"\n"
		"MonteCarloBarostat_setTemperature(MonteCarloBarostat self, double temp)\n"
		"\n"
		"Set the temperature at which the system is being maintained.\n"
		"   Parameters:\n"
		"    - temp the system temperature, measured in Kelvin.\n"
		""},
	 { (char *)"MonteCarloBarostat_getRandomNumberSeed", _wrap_MonteCarloBarostat_getRandomNumberSeed, METH_VARARGS, (char *)"\n"
		"MonteCarloBarostat_getRandomNumberSeed(MonteCarloBarostat self) -> int\n"
		"\n"
		"Get the random number seed. See setRandomNumberSeed() for details.\n"
		""},
	 { (char *)"MonteCarloBarostat_setRandomNumberSeed", _wrap_MonteCarloBarostat_setRandomNumberSeed, METH_VARARGS, (char *)"\n"
		"MonteCarloBarostat_setRandomNumberSeed(MonteCarloBarostat self, int seed)\n"
		"\n"
		"Set the random number seed. It is guaranteed that if two simulations are run with different random number seeds, the sequence of Monte Carlo steps will be different. On the other hand, no guarantees are made about the behavior of simulations that use the same seed. In particular, Platforms are permitted to use non-deterministic algorithms which produce different results on successive runs, even if those runs were initialized identically.\n"
		""},
	 { (char *)"new_MonteCarloBarostat", _wrap_new_MonteCarloBarostat, METH_VARARGS, (char *)"\n"
		"MonteCarloBarostat(double defaultPressure, double temperature, int frequency = 25)\n"
		"MonteCarloBarostat(double defaultPressure, double temperature)\n"
		"new_MonteCarloBarostat(MonteCarloBarostat other) -> MonteCarloBarostat\n"
		"\n"
		"Create a MonteCarloBarostat.\n"
		"   Parameters:\n"
		"    - defaultPressure the default pressure acting on the system (in bar)\n"
		"    - temperature the temperature at which the system is being maintained (in Kelvin)\n"
		"    - frequency the frequency at which Monte Carlo pressure changes should be attempted (in time steps)\n"
		""},
	 { (char *)"delete_MonteCarloBarostat", _wrap_delete_MonteCarloBarostat, METH_VARARGS, (char *)"delete_MonteCarloBarostat(MonteCarloBarostat self)"},
	 { (char *)"MonteCarloBarostat_swigregister", MonteCarloBarostat_swigregister, METH_VARARGS, NULL},
	 { (char *)"NonbondedForce_getNumParticles", _wrap_NonbondedForce_getNumParticles, METH_VARARGS, (char *)"\n"
		"NonbondedForce_getNumParticles(NonbondedForce self) -> int\n"
		"\n"
		"Get the number of particles for which force field parameters have been defined.\n"
		""},
	 { (char *)"NonbondedForce_getNumExceptions", _wrap_NonbondedForce_getNumExceptions, METH_VARARGS, (char *)"\n"
		"NonbondedForce_getNumExceptions(NonbondedForce self) -> int\n"
		"\n"
		"Get the number of special interactions that should be calculated differently from other interactions.\n"
		""},
	 { (char *)"NonbondedForce_getNonbondedMethod", _wrap_NonbondedForce_getNonbondedMethod, METH_VARARGS, (char *)"\n"
		"NonbondedForce_getNonbondedMethod(NonbondedForce self) -> NonbondedMethod\n"
		"\n"
		"Get the method used for handling long range nonbonded interactions.\n"
		""},
	 { (char *)"NonbondedForce_setNonbondedMethod", _wrap_NonbondedForce_setNonbondedMethod, METH_VARARGS, (char *)"\n"
		"NonbondedForce_setNonbondedMethod(NonbondedForce self, NonbondedMethod method)\n"
		"\n"
		"Set the method used for handling long range nonbonded interactions.\n"
		""},
	 { (char *)"NonbondedForce_getCutoffDistance", _wrap_NonbondedForce_getCutoffDistance, METH_VARARGS, (char *)"\n"
		"NonbondedForce_getCutoffDistance(NonbondedForce self) -> double\n"
		"\n"
		"Get the cutoff distance (in nm) being used for nonbonded interactions. If the NonbondedMethod in use is NoCutoff, this value will have no effect.\n"
		""},
	 { (char *)"NonbondedForce_setCutoffDistance", _wrap_NonbondedForce_setCutoffDistance, METH_VARARGS, (char *)"\n"
		"NonbondedForce_setCutoffDistance(NonbondedForce self, double distance)\n"
		"\n"
		"Set the cutoff distance (in nm) being used for nonbonded interactions. If the NonbondedMethod in use is NoCutoff, this value will have no effect.\n"
		"   Parameters:\n"
		"    - distance the cutoff distance, measured in nm\n"
		""},
	 { (char *)"NonbondedForce_getReactionFieldDielectric", _wrap_NonbondedForce_getReactionFieldDielectric, METH_VARARGS, (char *)"\n"
		"NonbondedForce_getReactionFieldDielectric(NonbondedForce self) -> double\n"
		"\n"
		"Get the dielectric constant to use for the solvent in the reaction field approximation.\n"
		""},
	 { (char *)"NonbondedForce_setReactionFieldDielectric", _wrap_NonbondedForce_setReactionFieldDielectric, METH_VARARGS, (char *)"\n"
		"NonbondedForce_setReactionFieldDielectric(NonbondedForce self, double dielectric)\n"
		"\n"
		"Set the dielectric constant to use for the solvent in the reaction field approximation.\n"
		""},
	 { (char *)"NonbondedForce_getEwaldErrorTolerance", _wrap_NonbondedForce_getEwaldErrorTolerance, METH_VARARGS, (char *)"\n"
		"NonbondedForce_getEwaldErrorTolerance(NonbondedForce self) -> double\n"
		"\n"
		"Get the error tolerance for Ewald summation. This corresponds to the fractional error in the forces which is acceptable. This value is used to select the reciprocal space cutoff and separation parameter so that the average error level will be less than the tolerance. There is not a rigorous guarantee that all forces on all atoms will be less than the tolerance, however.\n"
		""},
	 { (char *)"NonbondedForce_setEwaldErrorTolerance", _wrap_NonbondedForce_setEwaldErrorTolerance, METH_VARARGS, (char *)"\n"
		"NonbondedForce_setEwaldErrorTolerance(NonbondedForce self, double tol)\n"
		"\n"
		"Get the error tolerance for Ewald summation. This corresponds to the fractional error in the forces which is acceptable. This value is used to select the reciprocal space cutoff and separation parameter so that the average error level will be less than the tolerance. There is not a rigorous guarantee that all forces on all atoms will be less than the tolerance, however.\n"
		""},
	 { (char *)"NonbondedForce_addParticle", _wrap_NonbondedForce_addParticle, METH_VARARGS, (char *)"\n"
		"NonbondedForce_addParticle(NonbondedForce self, double charge, double sigma, double epsilon) -> int\n"
		"\n"
		"Add the nonbonded force parameters for a particle. This should be called once for each particle in the System. When it is called for the i'th time, it specifies the parameters for the i'th particle. For calculating the Lennard-Jones interaction between two particles, the arithmetic mean of the sigmas and the geometric mean of the epsilons for the two interacting particles is used (the Lorentz-Bertelot combining rule).\n"
		"   Parameters:\n"
		"    - charge the charge of the particle, measured in units of the proton charge\n"
		"    - sigma the sigma parameter of the Lennard-Jones potential (corresponding to the van der Waals radius of the particle), measured in nm\n"
		"    - epsilon the epsilon parameter of the Lennard-Jones potential (corresponding to the well depth of the van der Waals interaction), measured in kJ/mol\n"
		""},
	 { (char *)"NonbondedForce_getParticleParameters", _wrap_NonbondedForce_getParticleParameters, METH_VARARGS, (char *)"\n"
		"NonbondedForce_getParticleParameters(NonbondedForce self, int index)\n"
		"\n"
		"Get the nonbonded force parameters for a particle.\n"
		"   Parameters:\n"
		"    - index the index of the particle for which to get parameters\n"
		"    - charge the charge of the particle, measured in units of the proton charge\n"
		"    - sigma the sigma parameter of the Lennard-Jones potential (corresponding to the van der Waals radius of the particle), measured in nm\n"
		"    - epsilon the epsilon parameter of the Lennard-Jones potential (corresponding to the well depth of the van der Waals interaction), measured in kJ/mol\n"
		""},
	 { (char *)"NonbondedForce_setParticleParameters", _wrap_NonbondedForce_setParticleParameters, METH_VARARGS, (char *)"\n"
		"NonbondedForce_setParticleParameters(NonbondedForce self, int index, double charge, double sigma, \n"
		"    double epsilon)\n"
		"\n"
		"Set the nonbonded force parameters for a particle. When calculating the Lennard-Jones interaction between two particles, it uses the arithmetic mean of the sigmas and the geometric mean of the epsilons for the two interacting particles (the Lorentz-Bertelot combining rule).\n"
		"   Parameters:\n"
		"    - index the index of the particle for which to set parameters\n"
		"    - charge the charge of the particle, measured in units of the proton charge\n"
		"    - sigma the sigma parameter of the Lennard-Jones potential (corresponding to the van der Waals radius of the particle), measured in nm\n"
		"    - epsilon the epsilon parameter of the Lennard-Jones potential (corresponding to the well depth of the van der Waals interaction), measured in kJ/mol\n"
		""},
	 { (char *)"NonbondedForce_addException", _wrap_NonbondedForce_addException, METH_VARARGS, (char *)"\n"
		"addException(int particle1, int particle2, double chargeProd, double sigma, \n"
		"    double epsilon, bool replace = False) -> int\n"
		"NonbondedForce_addException(NonbondedForce self, int particle1, int particle2, \n"
		"    double chargeProd, double sigma, double epsilon) -> int\n"
		"\n"
		"Add an interaction to the list of exceptions that should be calculated differently from other interactions. If chargeProd and epsilon are both equal to 0, this will cause the interaction to be completely omitted from force and energy calculations.\n"
		"\n"
		"In many cases, you can use createExceptionsFromBonds() rather than adding each exception explicitly.\n"
		"   Parameters:\n"
		"    - particle1 the index of the first particle involved in the interaction\n"
		"    - particle2 the index of the second particle involved in the interaction\n"
		"    - chargeProd the scaled product of the atomic charges (i.e. the strength of the Coulomb interaction), measured in units of the proton charge squared\n"
		"    - sigma the sigma parameter of the Lennard-Jones potential (corresponding to the van der Waals radius of the particle), measured in nm\n"
		"    - epsilon the epsilon parameter of the Lennard-Jones potential (corresponding to the well depth of the van der Waals interaction), measured in kJ/mol\n"
		"    - replace determines the behavior if there is already an exception for the same two particles. If true, the existing one is replaced. If false, an exception is thrown.\n"
		""},
	 { (char *)"NonbondedForce_getExceptionParameters", _wrap_NonbondedForce_getExceptionParameters, METH_VARARGS, (char *)"\n"
		"NonbondedForce_getExceptionParameters(NonbondedForce self, int index)\n"
		"\n"
		"Get the force field parameters for an interaction that should be calculated differently from others.\n"
		"   Parameters:\n"
		"    - index the index of the interaction for which to get parameters\n"
		"    - particle1 the index of the first particle involved in the interaction\n"
		"    - particle2 the index of the second particle involved in the interaction\n"
		"    - chargeProd the scaled product of the atomic charges (i.e. the strength of the Coulomb interaction), measured in units of the proton charge squared\n"
		"    - sigma the sigma parameter of the Lennard-Jones potential (corresponding to the van der Waals radius of the particle), measured in nm\n"
		"    - epsilon the epsilon parameter of the Lennard-Jones potential (corresponding to the well depth of the van der Waals interaction), measured in kJ/mol\n"
		""},
	 { (char *)"NonbondedForce_setExceptionParameters", _wrap_NonbondedForce_setExceptionParameters, METH_VARARGS, (char *)"\n"
		"NonbondedForce_setExceptionParameters(NonbondedForce self, int index, int particle1, int particle2, \n"
		"    double chargeProd, double sigma, double epsilon)\n"
		"\n"
		"Set the force field parameters for an interaction that should be calculated differently from others. If chargeProd and epsilon are both equal to 0, this will cause the interaction to be completely omitted from force and energy calculations.\n"
		"   Parameters:\n"
		"    - index the index of the interaction for which to get parameters\n"
		"    - particle1 the index of the first particle involved in the interaction\n"
		"    - particle2 the index of the second particle involved in the interaction\n"
		"    - chargeProd the scaled product of the atomic charges (i.e. the strength of the Coulomb interaction), measured in units of the proton charge squared\n"
		"    - sigma the sigma parameter of the Lennard-Jones potential (corresponding to the van der Waals radius of the particle), measured in nm\n"
		"    - epsilon the epsilon parameter of the Lennard-Jones potential (corresponding to the well depth of the van der Waals interaction), measured in kJ/mol\n"
		""},
	 { (char *)"NonbondedForce_createExceptionsFromBonds", _wrap_NonbondedForce_createExceptionsFromBonds, METH_VARARGS, (char *)"\n"
		"NonbondedForce_createExceptionsFromBonds(NonbondedForce self, vectorpairii bonds, double coulomb14Scale, \n"
		"    double lj14Scale)\n"
		"\n"
		"Identify exceptions based on the molecular topology. Particles which are separated by one or two bonds are set to not interact at all, while pairs of particles separated by three bonds (known as \"1-4 interactions\") have their Coulomb and Lennard-Jones interactions reduced by a fixed factor.\n"
		"   Parameters:\n"
		"    - bonds the set of bonds based on which to construct exceptions. Each element specifies the indices of two particles that are bonded to each other.\n"
		"    - coulomb14Scale pairs of particles separated by three bonds will have the strength of their Coulomb interaction multiplied by this factor\n"
		"    - lj14Scale pairs of particles separated by three bonds will have the strength of their Lennard-Jones interaction multiplied by this factor\n"
		""},
	 { (char *)"NonbondedForce_getUseDispersionCorrection", _wrap_NonbondedForce_getUseDispersionCorrection, METH_VARARGS, (char *)"\n"
		"NonbondedForce_getUseDispersionCorrection(NonbondedForce self) -> bool\n"
		"\n"
		"Get whether to add a contribution to the energy that approximately represents the effect of Lennard-Jones interactions beyond the cutoff distance. The energy depends on the volume of the periodic box, and is only applicable when periodic boundary conditions are used. When running simulations at constant pressure, adding this contribution can improve the quality of results.\n"
		""},
	 { (char *)"NonbondedForce_setUseDispersionCorrection", _wrap_NonbondedForce_setUseDispersionCorrection, METH_VARARGS, (char *)"\n"
		"NonbondedForce_setUseDispersionCorrection(NonbondedForce self, bool useCorrection)\n"
		"\n"
		"Set whether to add a contribution to the energy that approximately represents the effect of Lennard-Jones interactions beyond the cutoff distance. The energy depends on the volume of the periodic box, and is only applicable when periodic boundary conditions are used. When running simulations at constant pressure, adding this contribution can improve the quality of results.\n"
		""},
	 { (char *)"NonbondedForce_getReciprocalSpaceForceGroup", _wrap_NonbondedForce_getReciprocalSpaceForceGroup, METH_VARARGS, (char *)"\n"
		"NonbondedForce_getReciprocalSpaceForceGroup(NonbondedForce self) -> int\n"
		"\n"
		"Get the force group that reciprocal space interactions for Ewald or PME are included in. This allows multiple time step integrators to evaluate direct and reciprocal space interactions at different intervals: getForceGroup() specifies the group for direct space, and getReciprocalSpaceForceGroup() specifies the group for reciprocal space. If this is -1 (the default value), the same force group is used for reciprocal space as for direct space.\n"
		""},
	 { (char *)"NonbondedForce_setReciprocalSpaceForceGroup", _wrap_NonbondedForce_setReciprocalSpaceForceGroup, METH_VARARGS, (char *)"\n"
		"NonbondedForce_setReciprocalSpaceForceGroup(NonbondedForce self, int group)\n"
		"\n"
		"Set the force group that reciprocal space interactions for Ewald or PME are included in. This allows multiple time step integrators to evaluate direct and reciprocal space interactions at different intervals: setForceGroup() specifies the group for direct space, and setReciprocalSpaceForceGroup() specifies the group for reciprocal space. If this is -1 (the default value), the same force group is used for reciprocal space as for direct space.\n"
		"   Parameters:\n"
		"    - group the group index. Legal values are between 0 and 31 (inclusive), or -1 to use the same force group that is specified for direct space.\n"
		""},
	 { (char *)"new_NonbondedForce", _wrap_new_NonbondedForce, METH_VARARGS, (char *)"\n"
		"NonbondedForce()\n"
		"new_NonbondedForce(NonbondedForce other) -> NonbondedForce\n"
		"\n"
		"Create a NonbondedForce.\n"
		""},
	 { (char *)"delete_NonbondedForce", _wrap_delete_NonbondedForce, METH_VARARGS, (char *)"delete_NonbondedForce(NonbondedForce self)"},
	 { (char *)"NonbondedForce_swigregister", NonbondedForce_swigregister, METH_VARARGS, NULL},
	 { (char *)"NonbondedSoftcoreForce_getNumParticles", _wrap_NonbondedSoftcoreForce_getNumParticles, METH_VARARGS, (char *)"\n"
		"NonbondedSoftcoreForce_getNumParticles(NonbondedSoftcoreForce self) -> int\n"
		"\n"
		"Get the number of particles for which force field parameters have been defined.\n"
		""},
	 { (char *)"NonbondedSoftcoreForce_getNumExceptions", _wrap_NonbondedSoftcoreForce_getNumExceptions, METH_VARARGS, (char *)"\n"
		"NonbondedSoftcoreForce_getNumExceptions(NonbondedSoftcoreForce self) -> int\n"
		"\n"
		"Get the number of special interactions that should be calculated differently from other interactions.\n"
		""},
	 { (char *)"NonbondedSoftcoreForce_getNonbondedMethod", _wrap_NonbondedSoftcoreForce_getNonbondedMethod, METH_VARARGS, (char *)"\n"
		"NonbondedSoftcoreForce_getNonbondedMethod(NonbondedSoftcoreForce self) -> NonbondedSoftcoreMethod\n"
		"\n"
		"Get the method used for handling long range nonbonded interactions.\n"
		""},
	 { (char *)"NonbondedSoftcoreForce_setNonbondedMethod", _wrap_NonbondedSoftcoreForce_setNonbondedMethod, METH_VARARGS, (char *)"\n"
		"NonbondedSoftcoreForce_setNonbondedMethod(NonbondedSoftcoreForce self, NonbondedSoftcoreMethod method)\n"
		"\n"
		"Set the method used for handling long range nonbonded interactions.\n"
		""},
	 { (char *)"NonbondedSoftcoreForce_getCutoffDistance", _wrap_NonbondedSoftcoreForce_getCutoffDistance, METH_VARARGS, (char *)"\n"
		"NonbondedSoftcoreForce_getCutoffDistance(NonbondedSoftcoreForce self) -> double\n"
		"\n"
		"Get the cutoff distance (in nm) being used for nonbonded interactions. If the NonbondedMethod in use is NoCutoff, this value will have no effect.\n"
		""},
	 { (char *)"NonbondedSoftcoreForce_setCutoffDistance", _wrap_NonbondedSoftcoreForce_setCutoffDistance, METH_VARARGS, (char *)"\n"
		"NonbondedSoftcoreForce_setCutoffDistance(NonbondedSoftcoreForce self, double distance)\n"
		"\n"
		"Set the cutoff distance (in nm) being used for nonbonded interactions. If the NonbondedMethod in use is NoCutoff, this value will have no effect.\n"
		""},
	 { (char *)"NonbondedSoftcoreForce_getReactionFieldDielectric", _wrap_NonbondedSoftcoreForce_getReactionFieldDielectric, METH_VARARGS, (char *)"\n"
		"NonbondedSoftcoreForce_getReactionFieldDielectric(NonbondedSoftcoreForce self) -> double\n"
		"\n"
		"Get the dielectric constant to use for the solvent in the reaction field approximation.\n"
		""},
	 { (char *)"NonbondedSoftcoreForce_setReactionFieldDielectric", _wrap_NonbondedSoftcoreForce_setReactionFieldDielectric, METH_VARARGS, (char *)"\n"
		"NonbondedSoftcoreForce_setReactionFieldDielectric(NonbondedSoftcoreForce self, double dielectric)\n"
		"\n"
		"Set the dielectric constant to use for the solvent in the reaction field approximation.\n"
		""},
	 { (char *)"NonbondedSoftcoreForce_addParticle", _wrap_NonbondedSoftcoreForce_addParticle, METH_VARARGS, (char *)"\n"
		"addParticle(double charge, double sigma, double epsilon, double softcoreLJLambda = 1.0) -> int\n"
		"NonbondedSoftcoreForce_addParticle(NonbondedSoftcoreForce self, double charge, double sigma, \n"
		"    double epsilon) -> int\n"
		"\n"
		"Add the nonbonded force parameters for a particle. This should be called once for each particle in the System. When it is called for the i'th time, it specifies the parameters for the i'th particle. For calculating the Lennard-Jones interaction between two particles, the arithmetic mean of the sigmas and the geometric mean of the epsilons for the two interacting particles is used (the Lorentz-Bertelot combining rule).\n"
		"   Parameters:\n"
		"    - charge the charge of the particle, measured in units of the proton charge\n"
		"    - sigma the sigma parameter of the Lennard-Jones potential (corresponding to the van der Waals radius of the particle), measured in nm\n"
		"    - epsilon the epsilon parameter of the Lennard-Jones potential (corresponding to the well depth of the van der Waals interaction), measured in kJ/mol\n"
		"    - softcoreLJLambda the soft-core LJ parameter (default: 1.0)\n"
		""},
	 { (char *)"NonbondedSoftcoreForce_getParticleParameters", _wrap_NonbondedSoftcoreForce_getParticleParameters, METH_VARARGS, (char *)"\n"
		"NonbondedSoftcoreForce_getParticleParameters(NonbondedSoftcoreForce self, int index)\n"
		"\n"
		"Get the nonbonded force parameters for a particle.\n"
		"   Parameters:\n"
		"    - index the index of the particle for which to get parameters\n"
		"    - charge the charge of the particle, measured in units of the proton charge\n"
		"    - sigma the sigma parameter of the Lennard-Jones potential (corresponding to the van der Waals radius of the particle), measured in nm\n"
		"    - epsilon the epsilon parameter of the Lennard-Jones potential (corresponding to the well depth of the van der Waals interaction), measured in kJ/mol\n"
		"    - softcoreLJLambda the soft-core LJ parameter\n"
		""},
	 { (char *)"NonbondedSoftcoreForce_setParticleParameters", _wrap_NonbondedSoftcoreForce_setParticleParameters, METH_VARARGS, (char *)"\n"
		"setParticleParameters(int index, double charge, double sigma, double epsilon, \n"
		"    double softcoreLJLambda = 1.0)\n"
		"NonbondedSoftcoreForce_setParticleParameters(NonbondedSoftcoreForce self, int index, double charge, \n"
		"    double sigma, double epsilon)\n"
		"\n"
		"Set the nonbonded force parameters for a particle. When calculating the Lennard-Jones interaction between two particles, it uses the arithmetic mean of the sigmas and the geometric mean of the epsilons for the two interacting particles (the Lorentz-Bertelot combining rule).\n"
		"   Parameters:\n"
		"    - index the index of the particle for which to set parameters\n"
		"    - charge the charge of the particle, measured in units of the proton charge\n"
		"    - sigma the sigma parameter of the Lennard-Jones potential (corresponding to the van der Waals radius of the particle), measured in nm\n"
		"    - epsilon the epsilon parameter of the Lennard-Jones potential (corresponding to the well depth of the van der Waals interaction), measured in kJ/mol\n"
		"    - softcoreLJLambda the soft-core LJ parameter (default: 1.0)\n"
		""},
	 { (char *)"NonbondedSoftcoreForce_addException", _wrap_NonbondedSoftcoreForce_addException, METH_VARARGS, (char *)"\n"
		"addException(int particle1, int particle2, double chargeProd, double sigma, \n"
		"    double epsilon, bool replace = False, \n"
		"    double softcoreLJLambda = 1.0) -> int\n"
		"addException(int particle1, int particle2, double chargeProd, double sigma, \n"
		"    double epsilon, bool replace = False) -> int\n"
		"NonbondedSoftcoreForce_addException(NonbondedSoftcoreForce self, int particle1, int particle2, \n"
		"    double chargeProd, double sigma, double epsilon) -> int\n"
		"\n"
		"Add an interaction to the list of exceptions that should be calculated differently from other interactions. If chargeProd and epsilon are both equal to 0, this will cause the interaction to be completely omitted from force and energy calculations.\n"
		"\n"
		"In many cases, you can use createExceptionsFromBonds() rather than adding each exception explicitly.\n"
		"   Parameters:\n"
		"    - particle1 the index of the first particle involved in the interaction\n"
		"    - particle2 the index of the second particle involved in the interaction\n"
		"    - chargeProd the scaled product of the atomic charges (i.e. the strength of the Coulomb interaction), measured in units of the proton charge squared\n"
		"    - sigma the sigma parameter of the Lennard-Jones potential (corresponding to the van der Waals radius of the particle), measured in nm\n"
		"    - epsilon the epsilon parameter of the Lennard-Jones potential (corresponding to the well depth of the van der Waals interaction), measured in kJ/mol\n"
		"    - softcoreLJLambda the soft-core LJ parameter\n"
		"    - replace determines the behavior if there is already an exception for the same two particles. If true, the existing one is replaced. If false, an exception is thrown.\n"
		""},
	 { (char *)"NonbondedSoftcoreForce_getExceptionParameters", _wrap_NonbondedSoftcoreForce_getExceptionParameters, METH_VARARGS, (char *)"\n"
		"NonbondedSoftcoreForce_getExceptionParameters(NonbondedSoftcoreForce self, int index)\n"
		"\n"
		"Get the force field parameters for an interaction that should be calculated differently from others.\n"
		"   Parameters:\n"
		"    - index the index of the interaction for which to get parameters\n"
		"    - particle1 the index of the first particle involved in the interaction\n"
		"    - particle2 the index of the second particle involved in the interaction\n"
		"    - chargeProd the scaled product of the atomic charges (i.e. the strength of the Coulomb interaction), measured in units of the proton charge squared\n"
		"    - sigma the sigma parameter of the Lennard-Jones potential (corresponding to the van der Waals radius of the particle), measured in nm\n"
		"    - epsilon the epsilon parameter of the Lennard-Jones potential (corresponding to the well depth of the van der Waals interaction), measured in kJ/mol\n"
		"    - softcoreLJLambda the soft-core LJ parameter\n"
		""},
	 { (char *)"NonbondedSoftcoreForce_setExceptionParameters", _wrap_NonbondedSoftcoreForce_setExceptionParameters, METH_VARARGS, (char *)"\n"
		"setExceptionParameters(int index, int particle1, int particle2, double chargeProd, \n"
		"    double sigma, double epsilon, double softcoreLJLambda = 1.0)\n"
		"NonbondedSoftcoreForce_setExceptionParameters(NonbondedSoftcoreForce self, int index, int particle1, \n"
		"    int particle2, double chargeProd, double sigma, \n"
		"    double epsilon)\n"
		"\n"
		"Set the force field parameters for an interaction that should be calculated differently from others. If chargeProd and epsilon are both equal to 0, this will cause the interaction to be completely omitted from force and energy calculations.\n"
		"   Parameters:\n"
		"    - index the index of the interaction for which to get parameters\n"
		"    - particle1 the index of the first particle involved in the interaction\n"
		"    - particle2 the index of the second particle involved in the interaction\n"
		"    - chargeProd the scaled product of the atomic charges (i.e. the strength of the Coulomb interaction), measured in units of the proton charge squared\n"
		"    - sigma the sigma parameter of the Lennard-Jones potential (corresponding to the van der Waals radius of the particle), measured in nm\n"
		"    - epsilon the epsilon parameter of the Lennard-Jones potential (corresponding to the well depth of the van der Waals interaction), measured in kJ/mol\n"
		"    - softcoreLJLambda the soft-core LJ parameter (default: 1.0)\n"
		""},
	 { (char *)"NonbondedSoftcoreForce_createExceptionsFromBonds", _wrap_NonbondedSoftcoreForce_createExceptionsFromBonds, METH_VARARGS, (char *)"\n"
		"NonbondedSoftcoreForce_createExceptionsFromBonds(NonbondedSoftcoreForce self, vectorpairii bonds, double coulomb14Scale, \n"
		"    double lj14Scale)\n"
		"\n"
		"Identify exceptions based on the molecular topology. Particles which are separated by one or two bonds are set to not interact at all, while pairs of particles separated by three bonds (known as \"1-4 interactions\") have their Coulomb and Lennard-Jones interactions reduced by a fixed factor.\n"
		"   Parameters:\n"
		"    - bonds the set of bonds based on which to construct exceptions. Each element specifies the indices of two particles that are bonded to each other.\n"
		"    - coulomb14Scale pairs of particles separated by three bonds will have the strength of their Coulomb interaction multiplied by this factor\n"
		"    - lj14Scale pairs of particles separated by three bonds will have the strength of their Lennard-Jones interaction multiplied by this factor\n"
		""},
	 { (char *)"new_NonbondedSoftcoreForce", _wrap_new_NonbondedSoftcoreForce, METH_VARARGS, (char *)"\n"
		"NonbondedSoftcoreForce()\n"
		"new_NonbondedSoftcoreForce(NonbondedSoftcoreForce other) -> NonbondedSoftcoreForce\n"
		"\n"
		"Create a NonbondedSoftcoreForce.\n"
		""},
	 { (char *)"delete_NonbondedSoftcoreForce", _wrap_delete_NonbondedSoftcoreForce, METH_VARARGS, (char *)"delete_NonbondedSoftcoreForce(NonbondedSoftcoreForce self)"},
	 { (char *)"NonbondedSoftcoreForce_swigregister", NonbondedSoftcoreForce_swigregister, METH_VARARGS, NULL},
	 { (char *)"delete_OpenMMException", _wrap_delete_OpenMMException, METH_VARARGS, (char *)"delete_OpenMMException(OpenMMException self)"},
	 { (char *)"OpenMMException_what", _wrap_OpenMMException_what, METH_VARARGS, (char *)"OpenMMException_what(OpenMMException self) -> char"},
	 { (char *)"new_OpenMMException", _wrap_new_OpenMMException, METH_VARARGS, (char *)"\n"
		"OpenMMException(string message)\n"
		"new_OpenMMException(OpenMMException other) -> OpenMMException\n"
		"\n"
		"This class is used for all exceptions thrown by OpenMM.\n"
		""},
	 { (char *)"OpenMMException_swigregister", OpenMMException_swigregister, METH_VARARGS, NULL},
	 { (char *)"delete_VirtualSite", _wrap_delete_VirtualSite, METH_VARARGS, (char *)"delete_VirtualSite(VirtualSite self)"},
	 { (char *)"VirtualSite_getNumParticles", _wrap_VirtualSite_getNumParticles, METH_VARARGS, (char *)"\n"
		"VirtualSite_getNumParticles(VirtualSite self) -> int\n"
		"\n"
		"Get the number of particles this virtual site depends on.\n"
		""},
	 { (char *)"VirtualSite_getParticle", _wrap_VirtualSite_getParticle, METH_VARARGS, (char *)"\n"
		"VirtualSite_getParticle(VirtualSite self, int particle) -> int\n"
		"\n"
		"Get the index of a particle this virtual site depends on.\n"
		"   Parameters:\n"
		"    - particle the particle to get (between 0 and getNumParticles())\n"
		""},
	 { (char *)"VirtualSite_swigregister", VirtualSite_swigregister, METH_VARARGS, NULL},
	 { (char *)"OutOfPlaneSite_getWeight12", _wrap_OutOfPlaneSite_getWeight12, METH_VARARGS, (char *)"\n"
		"OutOfPlaneSite_getWeight12(OutOfPlaneSite self) -> double\n"
		"\n"
		"Get the weight factor for the vector from particle1 to particle2.\n"
		""},
	 { (char *)"OutOfPlaneSite_getWeight13", _wrap_OutOfPlaneSite_getWeight13, METH_VARARGS, (char *)"\n"
		"OutOfPlaneSite_getWeight13(OutOfPlaneSite self) -> double\n"
		"\n"
		"Get the weight factor for the vector from particle1 to particle3.\n"
		""},
	 { (char *)"OutOfPlaneSite_getWeightCross", _wrap_OutOfPlaneSite_getWeightCross, METH_VARARGS, (char *)"\n"
		"OutOfPlaneSite_getWeightCross(OutOfPlaneSite self) -> double\n"
		"\n"
		"Get the weight factor for the cross product.\n"
		""},
	 { (char *)"new_OutOfPlaneSite", _wrap_new_OutOfPlaneSite, METH_VARARGS, (char *)"\n"
		"OutOfPlaneSite(int particle1, int particle2, int particle3, double weight12, \n"
		"    double weight13, double weightCross)\n"
		"new_OutOfPlaneSite(OutOfPlaneSite other) -> OutOfPlaneSite\n"
		"\n"
		"Create a new OutOfPlaneSite virtual site.\n"
		"   Parameters:\n"
		"    - particle1 the index of the first particle\n"
		"    - particle2 the index of the second particle\n"
		"    - particle3 the index of the third particle\n"
		"    - weight12 the weight factor for the vector from particle1 to particle2\n"
		"    - weight13 the weight factor for the vector from particle1 to particle3\n"
		"    - weightCross the weight factor for the cross product\n"
		""},
	 { (char *)"delete_OutOfPlaneSite", _wrap_delete_OutOfPlaneSite, METH_VARARGS, (char *)"delete_OutOfPlaneSite(OutOfPlaneSite self)"},
	 { (char *)"OutOfPlaneSite_swigregister", OutOfPlaneSite_swigregister, METH_VARARGS, NULL},
	 { (char *)"PeriodicTorsionForce_getNumTorsions", _wrap_PeriodicTorsionForce_getNumTorsions, METH_VARARGS, (char *)"\n"
		"PeriodicTorsionForce_getNumTorsions(PeriodicTorsionForce self) -> int\n"
		"\n"
		"Get the number of periodic torsion terms in the potential function\n"
		""},
	 { (char *)"PeriodicTorsionForce_addTorsion", _wrap_PeriodicTorsionForce_addTorsion, METH_VARARGS, (char *)"\n"
		"PeriodicTorsionForce_addTorsion(PeriodicTorsionForce self, int particle1, int particle2, \n"
		"    int particle3, int particle4, int periodicity, \n"
		"    double phase, double k) -> int\n"
		"\n"
		"Add a periodic torsion term to the force field.\n"
		"   Parameters:\n"
		"    - particle1 the index of the first particle forming the torsion\n"
		"    - particle2 the index of the second particle forming the torsion\n"
		"    - particle3 the index of the third particle forming the torsion\n"
		"    - particle3 the index of the fourth particle forming the torsion\n"
		"    - periodicity the periodicity of the torsion\n"
		"    - phase the phase offset of the torsion, measured in radians\n"
		"    - k the force constant for the torsion\n"
		""},
	 { (char *)"PeriodicTorsionForce_getTorsionParameters", _wrap_PeriodicTorsionForce_getTorsionParameters, METH_VARARGS, (char *)"\n"
		"PeriodicTorsionForce_getTorsionParameters(PeriodicTorsionForce self, int index)\n"
		"\n"
		"Get the force field parameters for a periodic torsion term.\n"
		"   Parameters:\n"
		"    - index the index of the torsion for which to get parameters\n"
		"    - particle1 the index of the first particle forming the torsion\n"
		"    - particle2 the index of the second particle forming the torsion\n"
		"    - particle3 the index of the third particle forming the torsion\n"
		"    - particle3 the index of the fourth particle forming the torsion\n"
		"    - periodicity the periodicity of the torsion\n"
		"    - phase the phase offset of the torsion, measured in radians\n"
		"    - k the force constant for the torsion\n"
		""},
	 { (char *)"PeriodicTorsionForce_setTorsionParameters", _wrap_PeriodicTorsionForce_setTorsionParameters, METH_VARARGS, (char *)"\n"
		"PeriodicTorsionForce_setTorsionParameters(PeriodicTorsionForce self, int index, int particle1, \n"
		"    int particle2, int particle3, int particle4, \n"
		"    int periodicity, double phase, double k)\n"
		"\n"
		"Set the force field parameters for a periodic torsion term.\n"
		"   Parameters:\n"
		"    - index the index of the torsion for which to set parameters\n"
		"    - particle1 the index of the first particle forming the torsion\n"
		"    - particle2 the index of the second particle forming the torsion\n"
		"    - particle3 the index of the third particle forming the torsion\n"
		"    - particle3 the index of the fourth particle forming the torsion\n"
		"    - periodicity the periodicity of the torsion\n"
		"    - phase the phase offset of the torsion, measured in radians\n"
		"    - k the force constant for the torsion\n"
		""},
	 { (char *)"new_PeriodicTorsionForce", _wrap_new_PeriodicTorsionForce, METH_VARARGS, (char *)"\n"
		"PeriodicTorsionForce()\n"
		"new_PeriodicTorsionForce(PeriodicTorsionForce other) -> PeriodicTorsionForce\n"
		"\n"
		"Create a PeriodicTorsionForce.\n"
		""},
	 { (char *)"delete_PeriodicTorsionForce", _wrap_delete_PeriodicTorsionForce, METH_VARARGS, (char *)"delete_PeriodicTorsionForce(PeriodicTorsionForce self)"},
	 { (char *)"PeriodicTorsionForce_swigregister", PeriodicTorsionForce_swigregister, METH_VARARGS, NULL},
	 { (char *)"delete_Platform", _wrap_delete_Platform, METH_VARARGS, (char *)"delete_Platform(Platform self)"},
	 { (char *)"Platform_registerPlatform", _wrap_Platform_registerPlatform, METH_VARARGS, (char *)"\n"
		"Platform_registerPlatform(Platform platform)\n"
		"\n"
		"Register a new Platform.\n"
		""},
	 { (char *)"Platform_getNumPlatforms", _wrap_Platform_getNumPlatforms, METH_VARARGS, (char *)"\n"
		"Platform_getNumPlatforms() -> int\n"
		"\n"
		"Get the number of Platforms that have been registered.\n"
		""},
	 { (char *)"Platform_getPlatform", _wrap_Platform_getPlatform, METH_VARARGS, (char *)"\n"
		"Platform_getPlatform(int index) -> Platform\n"
		"\n"
		"Get a registered Platform by index.\n"
		""},
	 { (char *)"Platform_getPlatformByName", _wrap_Platform_getPlatformByName, METH_VARARGS, (char *)"\n"
		"Platform_getPlatformByName(string name) -> Platform\n"
		"\n"
		"Get the registered Platform with a particular name. If no Platform with that name has been registered, this throws an exception.\n"
		""},
	 { (char *)"Platform_findPlatform", _wrap_Platform_findPlatform, METH_VARARGS, (char *)"\n"
		"Platform_findPlatform(vectorstring kernelNames) -> Platform\n"
		"\n"
		"Find a Platform which can be used to perform a calculation.\n"
		"   Parameters:\n"
		"    - kernelNames the names of all kernels which will be needed for the calculation\n"
		""},
	 { (char *)"Platform_loadPluginLibrary", _wrap_Platform_loadPluginLibrary, METH_VARARGS, (char *)"\n"
		"Platform_loadPluginLibrary(string file)\n"
		"\n"
		"Load a dynamic library (DLL) which contains an OpenMM plugin. Typically, each Platform is distributed as a separate dynamic library. This method can then be called at runtime to load each available library. Each library should contain an initializer function to register any Platforms and KernelFactories that it contains.\n"
		"\n"
		"If the file does not exist or cannot be loaded, an exception is thrown.\n"
		"   Parameters:\n"
		"    - file the path to the dynamic library file. This is interpreted using the operating system's rules for loading libraries. Typically it may be either an absolute path or relative to a set of standard locations.\n"
		""},
	 { (char *)"Platform_loadPluginsFromDirectory", _wrap_Platform_loadPluginsFromDirectory, METH_VARARGS, (char *)"\n"
		"Platform_loadPluginsFromDirectory(string directory) -> vectorstring\n"
		"\n"
		"Load multiple dynamic libraries (DLLs) which contain OpenMM plugins from a single directory. This method loops over every file contained in the specified directory and calls loadPluginLibrary() for each one. If an error occurs while trying to load a particular file, that file is simply ignored.\n"
		"   Parameters:\n"
		"    - directory the path to the directory containing libraries to load\n"
		""},
	 { (char *)"Platform_getDefaultPluginsDirectory", _wrap_Platform_getDefaultPluginsDirectory, METH_VARARGS, (char *)"\n"
		"Platform_getDefaultPluginsDirectory() -> string\n"
		"\n"
		"Get the default directory from which to load plugins. If the environment variable OPENMM_PLUGIN_DIR is set, this returns its value. Otherwise, it returns a platform specific default location.\n"
		""},
	 { (char *)"Platform_getOpenMMVersion", _wrap_Platform_getOpenMMVersion, METH_VARARGS, (char *)"\n"
		"Platform_getOpenMMVersion() -> string\n"
		"\n"
		"Get a string containing the version number of the OpenMM library.\n"
		""},
	 { (char *)"Platform_getName", _wrap_Platform_getName, METH_VARARGS, (char *)"\n"
		"Platform_getName(Platform self) -> string\n"
		"\n"
		"Get the name of this platform. This should be a unique identifier which can be used to recognized it.\n"
		""},
	 { (char *)"Platform_getSpeed", _wrap_Platform_getSpeed, METH_VARARGS, (char *)"\n"
		"Platform_getSpeed(Platform self) -> double\n"
		"\n"
		"Get an estimate of how fast this Platform class is. This need not be precise. It only is expected to return an order or magnitude estimate of the relative performance of different Platform classes. An unoptimized reference implementation should return 1.0, and all other Platforms should return a larger value that is an estimate of how many times faster they are than the reference implementation.\n"
		""},
	 { (char *)"Platform_supportsDoublePrecision", _wrap_Platform_supportsDoublePrecision, METH_VARARGS, (char *)"\n"
		"Platform_supportsDoublePrecision(Platform self) -> bool\n"
		"\n"
		"Get whether this Platform supports double precision arithmetic. If this returns false, the platform is permitted to represent double precision values internally as single precision.\n"
		""},
	 { (char *)"Platform_getPropertyNames", _wrap_Platform_getPropertyNames, METH_VARARGS, (char *)"\n"
		"Platform_getPropertyNames(Platform self) -> vectorstring\n"
		"\n"
		"Get the names of all Platform-specific properties this Platform supports.\n"
		""},
	 { (char *)"Platform_getPropertyValue", _wrap_Platform_getPropertyValue, METH_VARARGS, (char *)"\n"
		"Platform_getPropertyValue(Platform self, Context context, string property) -> string\n"
		"\n"
		"Get the value of a Platform-specific property for a Context.\n"
		"   Parameters:\n"
		"    - context the Context for which to get the property\n"
		"    - property the name of the property to get\n"
		""},
	 { (char *)"Platform_setPropertyValue", _wrap_Platform_setPropertyValue, METH_VARARGS, (char *)"\n"
		"Platform_setPropertyValue(Platform self, Context context, string property, string value)\n"
		"\n"
		"Set the value of a Platform-specific property for a Context.\n"
		"   Parameters:\n"
		"    - context the Context for which to set the property\n"
		"    - property the name of the property to set\n"
		"    - value the value to set for the property\n"
		""},
	 { (char *)"Platform_getPropertyDefaultValue", _wrap_Platform_getPropertyDefaultValue, METH_VARARGS, (char *)"\n"
		"Platform_getPropertyDefaultValue(Platform self, string property) -> string\n"
		"\n"
		"Get the default value of a Platform-specific property. This is the value that will be used for newly created Contexts.\n"
		"   Parameters:\n"
		"    - property the name of the property to get\n"
		""},
	 { (char *)"Platform_setPropertyDefaultValue", _wrap_Platform_setPropertyDefaultValue, METH_VARARGS, (char *)"\n"
		"Platform_setPropertyDefaultValue(Platform self, string property, string value)\n"
		"\n"
		"Set the default value of a Platform-specific property. This is the value that will be used for newly created Contexts.\n"
		"   Parameters:\n"
		"    - property the name of the property to set\n"
		"    - value the value to set for the property\n"
		""},
	 { (char *)"Platform_supportsKernels", _wrap_Platform_supportsKernels, METH_VARARGS, (char *)"\n"
		"Platform_supportsKernels(Platform self, vectorstring kernelNames) -> bool\n"
		"\n"
		"Determine whether this Platforms provides implementations of a set of kernels.\n"
		"   Parameters:\n"
		"    - kernelNames the names of the kernels of interests\n"
		""},
	 { (char *)"Platform_swigregister", Platform_swigregister, METH_VARARGS, NULL},
	 { (char *)"RBTorsionForce_getNumTorsions", _wrap_RBTorsionForce_getNumTorsions, METH_VARARGS, (char *)"\n"
		"RBTorsionForce_getNumTorsions(RBTorsionForce self) -> int\n"
		"\n"
		"Get the number of Ryckaert-Bellemans torsion terms in the potential function\n"
		""},
	 { (char *)"RBTorsionForce_addTorsion", _wrap_RBTorsionForce_addTorsion, METH_VARARGS, (char *)"\n"
		"RBTorsionForce_addTorsion(RBTorsionForce self, int particle1, int particle2, \n"
		"    int particle3, int particle4, double c0, double c1, \n"
		"    double c2, double c3, double c4, double c5) -> int\n"
		"\n"
		"Add a Ryckaert-Bellemans torsion term to the force field.\n"
		"   Parameters:\n"
		"    - particle1 the index of the first particle forming the torsion\n"
		"    - particle2 the index of the second particle forming the torsion\n"
		"    - particle3 the index of the third particle forming the torsion\n"
		"    - particle3 the index of the fourth particle forming the torsion\n"
		"    - c0 the coefficient of the constant term, measured in kJ/mol\n"
		"    - c1 the coefficient of the 1st order term, measured in kJ/mol\n"
		"    - c2 the coefficient of the 2nd order term, measured in kJ/mol\n"
		"    - c3 the coefficient of the 3rd order term, measured in kJ/mol\n"
		"    - c4 the coefficient of the 4th order term, measured in kJ/mol\n"
		"    - c5 the coefficient of the 5th order term, measured in kJ/mol\n"
		""},
	 { (char *)"RBTorsionForce_getTorsionParameters", _wrap_RBTorsionForce_getTorsionParameters, METH_VARARGS, (char *)"\n"
		"RBTorsionForce_getTorsionParameters(RBTorsionForce self, int index)\n"
		"\n"
		"Get the force field parameters for a Ryckaert-Bellemans torsion term.\n"
		"   Parameters:\n"
		"    - index the index of the torsion for which to get parameters\n"
		"    - particle1 the index of the first particle forming the torsion\n"
		"    - particle2 the index of the second particle forming the torsion\n"
		"    - particle3 the index of the third particle forming the torsion\n"
		"    - particle3 the index of the fourth particle forming the torsion\n"
		"    - c0 the coefficient of the constant term, measured in kJ/mol\n"
		"    - c1 the coefficient of the 1st order term, measured in kJ/mol\n"
		"    - c2 the coefficient of the 2nd order term, measured in kJ/mol\n"
		"    - c3 the coefficient of the 3rd order term, measured in kJ/mol\n"
		"    - c4 the coefficient of the 4th order term, measured in kJ/mol\n"
		"    - c5 the coefficient of the 5th order term, measured in kJ/mol\n"
		""},
	 { (char *)"RBTorsionForce_setTorsionParameters", _wrap_RBTorsionForce_setTorsionParameters, METH_VARARGS, (char *)"\n"
		"RBTorsionForce_setTorsionParameters(RBTorsionForce self, int index, int particle1, int particle2, \n"
		"    int particle3, int particle4, double c0, \n"
		"    double c1, double c2, double c3, double c4, \n"
		"    double c5)\n"
		"\n"
		"Set the force field parameters for a Ryckaert-Bellemans torsion term.\n"
		"   Parameters:\n"
		"    - index the index of the torsion for which to set parameters\n"
		"    - particle1 the index of the first particle forming the torsion\n"
		"    - particle2 the index of the second particle forming the torsion\n"
		"    - particle3 the index of the third particle forming the torsion\n"
		"    - particle3 the index of the fourth particle forming the torsion\n"
		"    - c0 the coefficient of the constant term, measured in kJ/mol\n"
		"    - c1 the coefficient of the 1st order term, measured in kJ/mol\n"
		"    - c2 the coefficient of the 2nd order term, measured in kJ/mol\n"
		"    - c3 the coefficient of the 3rd order term, measured in kJ/mol\n"
		"    - c4 the coefficient of the 4th order term, measured in kJ/mol\n"
		"    - c5 the coefficient of the 5th order term, measured in kJ/mol\n"
		""},
	 { (char *)"new_RBTorsionForce", _wrap_new_RBTorsionForce, METH_VARARGS, (char *)"\n"
		"RBTorsionForce()\n"
		"new_RBTorsionForce(RBTorsionForce other) -> RBTorsionForce\n"
		"\n"
		"Create a RBTorsionForce.\n"
		""},
	 { (char *)"delete_RBTorsionForce", _wrap_delete_RBTorsionForce, METH_VARARGS, (char *)"delete_RBTorsionForce(RBTorsionForce self)"},
	 { (char *)"RBTorsionForce_swigregister", RBTorsionForce_swigregister, METH_VARARGS, NULL},
	 { (char *)"RPMDIntegrator_getNumCopies", _wrap_RPMDIntegrator_getNumCopies, METH_VARARGS, (char *)"\n"
		"RPMDIntegrator_getNumCopies(RPMDIntegrator self) -> int\n"
		"\n"
		"Get the number of copies of the system being simulated.\n"
		""},
	 { (char *)"RPMDIntegrator_getTemperature", _wrap_RPMDIntegrator_getTemperature, METH_VARARGS, (char *)"\n"
		"RPMDIntegrator_getTemperature(RPMDIntegrator self) -> double\n"
		"\n"
		"Get the temperature of the heat bath (in Kelvin).\n"
		""},
	 { (char *)"RPMDIntegrator_setTemperature", _wrap_RPMDIntegrator_setTemperature, METH_VARARGS, (char *)"\n"
		"RPMDIntegrator_setTemperature(RPMDIntegrator self, double temp)\n"
		"\n"
		"Set the temperature of the heat bath (in Kelvin).\n"
		"   Parameters:\n"
		"    - temp the temperature of the heat bath, measured in Kelvin\n"
		""},
	 { (char *)"RPMDIntegrator_getFriction", _wrap_RPMDIntegrator_getFriction, METH_VARARGS, (char *)"\n"
		"RPMDIntegrator_getFriction(RPMDIntegrator self) -> double\n"
		"\n"
		"Get the friction coefficient which determines how strongly the system is coupled to the heat bath (in inverse ps).\n"
		""},
	 { (char *)"RPMDIntegrator_setFriction", _wrap_RPMDIntegrator_setFriction, METH_VARARGS, (char *)"\n"
		"RPMDIntegrator_setFriction(RPMDIntegrator self, double coeff)\n"
		"\n"
		"Set the friction coefficient which determines how strongly the system is coupled to the heat bath (in inverse ps).\n"
		"   Parameters:\n"
		"    - coeff the friction coefficient, measured in 1/ps\n"
		""},
	 { (char *)"RPMDIntegrator_getRandomNumberSeed", _wrap_RPMDIntegrator_getRandomNumberSeed, METH_VARARGS, (char *)"\n"
		"RPMDIntegrator_getRandomNumberSeed(RPMDIntegrator self) -> int\n"
		"\n"
		"Get the random number seed. See setRandomNumberSeed() for details.\n"
		""},
	 { (char *)"RPMDIntegrator_setRandomNumberSeed", _wrap_RPMDIntegrator_setRandomNumberSeed, METH_VARARGS, (char *)"\n"
		"RPMDIntegrator_setRandomNumberSeed(RPMDIntegrator self, int seed)\n"
		"\n"
		"Set the random number seed. The precise meaning of this parameter is undefined, and is left up to each Platform to interpret in an appropriate way. It is guaranteed that if two simulations are run with different random number seeds, the sequence of random forces will be different. On the other hand, no guarantees are made about the behavior of simulations that use the same seed. In particular, Platforms are permitted to use non-deterministic algorithms which produce different results on successive runs, even if those runs were initialized identically.\n"
		""},
	 { (char *)"RPMDIntegrator_setPositions", _wrap_RPMDIntegrator_setPositions, METH_VARARGS, (char *)"\n"
		"RPMDIntegrator_setPositions(RPMDIntegrator self, int copy, std::vector<(Vec3,std::allocator<(Vec3)>)> positions)\n"
		"\n"
		"Set the positions of all particles in one copy of the system.\n"
		"   Parameters:\n"
		"    - copy the index of the copy for which to set positions\n"
		"    - positions the positions of all particles in the system\n"
		""},
	 { (char *)"RPMDIntegrator_setVelocities", _wrap_RPMDIntegrator_setVelocities, METH_VARARGS, (char *)"\n"
		"RPMDIntegrator_setVelocities(RPMDIntegrator self, int copy, std::vector<(Vec3,std::allocator<(Vec3)>)> velocities)\n"
		"\n"
		"Get the velocities of all particles in one copy of the system.\n"
		"   Parameters:\n"
		"    - copy the index of the copy for which to set velocities\n"
		"    - velocities the velocities of all particles in the system\n"
		""},
	 { (char *)"RPMDIntegrator_step", _wrap_RPMDIntegrator_step, METH_VARARGS, (char *)"\n"
		"RPMDIntegrator_step(RPMDIntegrator self, int steps)\n"
		"\n"
		"Advance a simulation through time by taking a series of time steps.\n"
		"   Parameters:\n"
		"    - steps the number of time steps to take\n"
		""},
	 { (char *)"RPMDIntegrator__getStateAsLists", _wrap_RPMDIntegrator__getStateAsLists, METH_VARARGS, (char *)"\n"
		"RPMDIntegrator__getStateAsLists(RPMDIntegrator self, int copy, int getPositions, int getVelocities, \n"
		"    int getForces, int getEnergy, \n"
		"    int getParameters, int enforcePeriodic, int groups) -> PyObject\n"
		""},
	 { (char *)"new_RPMDIntegrator", _wrap_new_RPMDIntegrator, METH_VARARGS, (char *)"\n"
		"RPMDIntegrator(int numCopies, double temperature, double frictionCoeff, \n"
		"    double stepSize)\n"
		"new_RPMDIntegrator(RPMDIntegrator other) -> RPMDIntegrator\n"
		"\n"
		"Create a RPMDIntegrator.\n"
		"   Parameters:\n"
		"    - numCopies the number of copies of the system that should be simulated\n"
		"    - temperature the temperature of the heat bath (in Kelvin)\n"
		"    - frictionCoeff the friction coefficient which couples the system to the heat bath (in inverse picoseconds)\n"
		"    - stepSize the step size with which to integrator the system (in picoseconds)\n"
		""},
	 { (char *)"delete_RPMDIntegrator", _wrap_delete_RPMDIntegrator, METH_VARARGS, (char *)"delete_RPMDIntegrator(RPMDIntegrator self)"},
	 { (char *)"RPMDIntegrator_swigregister", RPMDIntegrator_swigregister, METH_VARARGS, NULL},
	 { (char *)"SerializationNode_getName", _wrap_SerializationNode_getName, METH_VARARGS, (char *)"\n"
		"SerializationNode_getName(SerializationNode self) -> string\n"
		"\n"
		"Get the name of this SerializationNode.\n"
		""},
	 { (char *)"SerializationNode_setName", _wrap_SerializationNode_setName, METH_VARARGS, (char *)"\n"
		"SerializationNode_setName(SerializationNode self, string name)\n"
		"\n"
		"Set the name of this SerializationNode.\n"
		"   Parameters:\n"
		"    - name the new name of the SerializationNode\n"
		""},
	 { (char *)"SerializationNode_getChildren", _wrap_SerializationNode_getChildren, METH_VARARGS, (char *)"\n"
		"getChildren() -> std::vector<(OpenMM::SerializationNode,std::allocator<(OpenMM::SerializationNode)>)>\n"
		"SerializationNode_getChildren(SerializationNode self) -> std::vector<(OpenMM::SerializationNode,std::allocator<(OpenMM::SerializationNode)>)>\n"
		"\n"
		"Get a reference to this node's child nodes.\n"
		""},
	 { (char *)"SerializationNode_getChildNode", _wrap_SerializationNode_getChildNode, METH_VARARGS, (char *)"\n"
		"getChildNode(string name) -> SerializationNode\n"
		"SerializationNode_getChildNode(SerializationNode self, string name) -> SerializationNode\n"
		"\n"
		"Get a reference to the child node with a particular name. If there is no child with the specified name, this throws an exception.\n"
		"   Parameters:\n"
		"    - the name of the child node to get\n"
		""},
	 { (char *)"SerializationNode_getProperties", _wrap_SerializationNode_getProperties, METH_VARARGS, (char *)"\n"
		"SerializationNode_getProperties(SerializationNode self) -> mapstringstring\n"
		"\n"
		"Get a map containing all of this node's properties.\n"
		""},
	 { (char *)"SerializationNode_hasProperty", _wrap_SerializationNode_hasProperty, METH_VARARGS, (char *)"\n"
		"SerializationNode_hasProperty(SerializationNode self, string name) -> bool\n"
		"\n"
		"Determine whether this node has a property with a particular node.\n"
		"   Parameters:\n"
		"    - the name of the property to check for\n"
		""},
	 { (char *)"SerializationNode_getStringProperty", _wrap_SerializationNode_getStringProperty, METH_VARARGS, (char *)"\n"
		"getStringProperty(string name) -> string\n"
		"SerializationNode_getStringProperty(SerializationNode self, string name, string defaultValue) -> string\n"
		"\n"
		"Get the property with a particular name, specified as a string. If there is no property with the specified name, a default value is returned instead.\n"
		"   Parameters:\n"
		"    - name the name of the property to get\n"
		"    - defaultValue the value to return if the specified property does not exist\n"
		""},
	 { (char *)"SerializationNode_setStringProperty", _wrap_SerializationNode_setStringProperty, METH_VARARGS, (char *)"\n"
		"SerializationNode_setStringProperty(SerializationNode self, string name, string value) -> SerializationNode\n"
		"\n"
		"Set the value of a property, specified as a string.\n"
		"   Parameters:\n"
		"    - name the name of the property to set\n"
		"    - value the value to set for the property\n"
		""},
	 { (char *)"SerializationNode_getIntProperty", _wrap_SerializationNode_getIntProperty, METH_VARARGS, (char *)"\n"
		"getIntProperty(string name) -> int\n"
		"SerializationNode_getIntProperty(SerializationNode self, string name, int defaultValue) -> int\n"
		"\n"
		"Get the property with a particular name, specified as an int. If there is no property with the specified name, a default value is returned instead.\n"
		"   Parameters:\n"
		"    - name the name of the property to get\n"
		"    - defaultValue the value to return if the specified property does not exist\n"
		""},
	 { (char *)"SerializationNode_setIntProperty", _wrap_SerializationNode_setIntProperty, METH_VARARGS, (char *)"\n"
		"SerializationNode_setIntProperty(SerializationNode self, string name, int value) -> SerializationNode\n"
		"\n"
		"Set the value of a property, specified as an int.\n"
		"   Parameters:\n"
		"    - name the name of the property to set\n"
		"    - value the value to set for the property\n"
		""},
	 { (char *)"SerializationNode_getDoubleProperty", _wrap_SerializationNode_getDoubleProperty, METH_VARARGS, (char *)"\n"
		"getDoubleProperty(string name) -> double\n"
		"SerializationNode_getDoubleProperty(SerializationNode self, string name, double defaultValue) -> double\n"
		"\n"
		"Get the property with a particular name, specified as a double. If there is no property with the specified name, a default value is returned instead.\n"
		"   Parameters:\n"
		"    - name the name of the property to get\n"
		"    - defaultValue the value to return if the specified property does not exist\n"
		""},
	 { (char *)"SerializationNode_setDoubleProperty", _wrap_SerializationNode_setDoubleProperty, METH_VARARGS, (char *)"\n"
		"SerializationNode_setDoubleProperty(SerializationNode self, string name, double value) -> SerializationNode\n"
		"\n"
		"Set the value of a property, specified as a double.\n"
		"   Parameters:\n"
		"    - name the name of the property to set\n"
		"    - value the value to set for the property\n"
		""},
	 { (char *)"SerializationNode_createChildNode", _wrap_SerializationNode_createChildNode, METH_VARARGS, (char *)"\n"
		"SerializationNode_createChildNode(SerializationNode self, string name) -> SerializationNode\n"
		"\n"
		"Create a new child node by serializing an object. A SerializationProxy is automatically selected based on the object's type, then invoked to populate the newly created node.\n"
		"\n"
		"Note that, while this method is templatized based on the type of object being serialized, the typeid() operator is used to select the proxy. This means the template argument may be a base class, and the correct proxies will still be selected for objects of different subclasses.\n"
		"   Parameters:\n"
		"    - name the name of the new node to create\n"
		"    - object a pointer to the object to serialize\n"
		""},
	 { (char *)"delete_SerializationNode", _wrap_delete_SerializationNode, METH_VARARGS, (char *)"delete_SerializationNode(SerializationNode self)"},
	 { (char *)"SerializationNode_swigregister", SerializationNode_swigregister, METH_VARARGS, NULL},
	 { (char *)"SerializationProxy_registerProxy", _wrap_SerializationProxy_registerProxy, METH_VARARGS, (char *)"\n"
		"SerializationProxy_registerProxy(std::type_info type, SerializationProxy proxy)\n"
		"\n"
		"Register a SerializationProxy to be used for objects of a particular type.\n"
		"   Parameters:\n"
		"    - type the type_info for the object type\n"
		"    - proxy the proxy to use for objects of the specified type\n"
		""},
	 { (char *)"SerializationProxy_getProxy", _wrap_SerializationProxy_getProxy, METH_VARARGS, (char *)"\n"
		"getProxy(string typeName) -> SerializationProxy\n"
		"SerializationProxy_getProxy(std::type_info type) -> SerializationProxy\n"
		"\n"
		"Get the SerializationProxy to use for objects of a particular type, specified by type_info.\n"
		"   Parameters:\n"
		"    - type the type_info of the object type to get a proxy for\n"
		""},
	 { (char *)"SerializationProxy_getTypeName", _wrap_SerializationProxy_getTypeName, METH_VARARGS, (char *)"\n"
		"SerializationProxy_getTypeName(SerializationProxy self) -> string\n"
		"\n"
		"Get the name of the object type this proxy manipulates, as passed to the constructor.\n"
		""},
	 { (char *)"SerializationProxy_serialize", _wrap_SerializationProxy_serialize, METH_VARARGS, (char *)"\n"
		"SerializationProxy_serialize(SerializationProxy self, void object, SerializationNode node)\n"
		"\n"
		"Subclasses implement this method to record information about an object being serialized.\n"
		"   Parameters:\n"
		"    - object a pointer to the object being serialized\n"
		"    - node all data to be serialized should be stored into this node, either directly as properties or indirectly by adding child nodes to it\n"
		""},
	 { (char *)"SerializationProxy_deserialize", _wrap_SerializationProxy_deserialize, METH_VARARGS, (char *)"\n"
		"SerializationProxy_deserialize(SerializationProxy self, SerializationNode node) -> void\n"
		"\n"
		"Reconstruct an object from its serialized data.\n"
		"   Parameters:\n"
		"    - node a SerializationNode containing the object's description\n"
		""},
	 { (char *)"delete_SerializationProxy", _wrap_delete_SerializationProxy, METH_VARARGS, (char *)"delete_SerializationProxy(SerializationProxy self)"},
	 { (char *)"SerializationProxy_swigregister", SerializationProxy_swigregister, METH_VARARGS, NULL},
	 { (char *)"delete_System", _wrap_delete_System, METH_VARARGS, (char *)"delete_System(System self)"},
	 { (char *)"System_getNumParticles", _wrap_System_getNumParticles, METH_VARARGS, (char *)"\n"
		"System_getNumParticles(System self) -> int\n"
		"\n"
		"Get the number of particles in this System.\n"
		""},
	 { (char *)"System_addParticle", _wrap_System_addParticle, METH_VARARGS, (char *)"\n"
		"System_addParticle(System self, double mass) -> int\n"
		"\n"
		"Add a particle to the System. If the mass is 0, Integrators will ignore the particle and not modify its position or velocity. This is most often used for virtual sites, but can also be used as a way to prevent a particle from moving.\n"
		"   Parameters:\n"
		"    - mass the mass of the particle (in atomic mass units)\n"
		""},
	 { (char *)"System_getParticleMass", _wrap_System_getParticleMass, METH_VARARGS, (char *)"\n"
		"System_getParticleMass(System self, int index) -> double\n"
		"\n"
		"Get the mass (in atomic mass units) of a particle. If the mass is 0, Integrators will ignore the particle and not modify its position or velocity. This is most often used for virtual sites, but can also be used as a way to prevent a particle from moving.\n"
		"   Parameters:\n"
		"    - index the index of the particle for which to get the mass\n"
		""},
	 { (char *)"System_setParticleMass", _wrap_System_setParticleMass, METH_VARARGS, (char *)"\n"
		"System_setParticleMass(System self, int index, double mass)\n"
		"\n"
		"Set the mass (in atomic mass units) of a particle. If the mass is 0, Integrators will ignore the particle and not modify its position or velocity. This is most often used for virtual sites, but can also be used as a way to prevent a particle from moving.\n"
		"   Parameters:\n"
		"    - index the index of the particle for which to set the mass\n"
		"    - mass the mass of the particle\n"
		""},
	 { (char *)"System_setVirtualSite", _wrap_System_setVirtualSite, METH_VARARGS, (char *)"\n"
		"System_setVirtualSite(System self, int index, VirtualSite virtualSite)\n"
		"\n"
		"Set a particle to be a virtual site. The VirtualSite object should have been created on the heap with the \"new\" operator. The System takes over ownership of it, and deletes it when the System itself is deleted.\n"
		"   Parameters:\n"
		"    - index the index of the particle that should be treated as a virtual site\n"
		"    - virtualSite a pointer to the VirtualSite object describing it\n"
		""},
	 { (char *)"System_isVirtualSite", _wrap_System_isVirtualSite, METH_VARARGS, (char *)"\n"
		"System_isVirtualSite(System self, int index) -> bool\n"
		"\n"
		"Get whether a particle is a VirtualSite.\n"
		"   Parameters:\n"
		"    - index the index of the particle to check\n"
		""},
	 { (char *)"System_getVirtualSite", _wrap_System_getVirtualSite, METH_VARARGS, (char *)"\n"
		"System_getVirtualSite(System self, int index) -> VirtualSite\n"
		"\n"
		"Get VirtualSite object for a particle. If the particle is not a virtual site, this throws an exception.\n"
		"   Parameters:\n"
		"    - index the index of the particle to get\n"
		""},
	 { (char *)"System_getNumConstraints", _wrap_System_getNumConstraints, METH_VARARGS, (char *)"\n"
		"System_getNumConstraints(System self) -> int\n"
		"\n"
		"Get the number of distance constraints in this System.\n"
		""},
	 { (char *)"System_addConstraint", _wrap_System_addConstraint, METH_VARARGS, (char *)"\n"
		"System_addConstraint(System self, int particle1, int particle2, double distance) -> int\n"
		"\n"
		"Add a constraint to the System. Particles whose mass is 0 cannot participate in constraints.\n"
		"   Parameters:\n"
		"    - particle1 the index of the first particle involved in the constraint\n"
		"    - particle2 the index of the second particle involved in the constraint\n"
		"    - distance the required distance between the two particles, measured in nm\n"
		""},
	 { (char *)"System_getConstraintParameters", _wrap_System_getConstraintParameters, METH_VARARGS, (char *)"\n"
		"System_getConstraintParameters(System self, int index)\n"
		"\n"
		"Get the parameters defining a distance constraint.\n"
		"   Parameters:\n"
		"    - index the index of the constraint for which to get parameters\n"
		"    - particle1 the index of the first particle involved in the constraint\n"
		"    - particle2 the index of the second particle involved in the constraint\n"
		"    - distance the required distance between the two particles, measured in nm\n"
		""},
	 { (char *)"System_setConstraintParameters", _wrap_System_setConstraintParameters, METH_VARARGS, (char *)"\n"
		"System_setConstraintParameters(System self, int index, int particle1, int particle2, \n"
		"    double distance)\n"
		"\n"
		"Set the parameters defining a distance constraint. Particles whose mass is 0 cannot participate in constraints.\n"
		"   Parameters:\n"
		"    - index the index of the constraint for which to set parameters\n"
		"    - particle1 the index of the first particle involved in the constraint\n"
		"    - particle2 the index of the second particle involved in the constraint\n"
		"    - distance the required distance between the two particles, measured in nm\n"
		""},
	 { (char *)"System_addForce", _wrap_System_addForce, METH_VARARGS, (char *)"\n"
		"System_addForce(System self, Force force) -> int\n"
		"\n"
		"Add a Force to the System. The Force should have been created on the heap with the \"new\" operator. The System takes over ownership of it, and deletes the Force when the System itself is deleted.\n"
		"   Parameters:\n"
		"    - force a pointer to the Force object to be added\n"
		""},
	 { (char *)"System_getNumForces", _wrap_System_getNumForces, METH_VARARGS, (char *)"\n"
		"System_getNumForces(System self) -> int\n"
		"\n"
		"Get the number of Force objects that have been added to the System.\n"
		""},
	 { (char *)"System_getForce", _wrap_System_getForce, METH_VARARGS, (char *)"\n"
		"getForce(int index) -> Force\n"
		"System_getForce(System self, int index) -> Force\n"
		"\n"
		"Get a writable reference to one of the Forces in this System.\n"
		"   Parameters:\n"
		"    - index the index of the Force to get\n"
		""},
	 { (char *)"System_getDefaultPeriodicBoxVectors", _wrap_System_getDefaultPeriodicBoxVectors, METH_VARARGS, (char *)"\n"
		"System_getDefaultPeriodicBoxVectors(System self)\n"
		"\n"
		"Get the default values of the vectors defining the axes of the periodic box (measured in nm). Any newly created Context will have its box vectors set to these. They will affect any Force added to the System that uses periodic boundary conditions.\n"
		"\n"
		"Currently, only rectangular boxes are supported. This means that a, b, and c must be aligned with the x, y, and z axes respectively. Future releases may support arbitrary triclinic boxes.\n"
		"   Parameters:\n"
		"    - a on exit, this contains the vector defining the first edge of the periodic box\n"
		"    - b on exit, this contains the vector defining the second edge of the periodic box\n"
		"    - c on exit, this contains the vector defining the third edge of the periodic box\n"
		""},
	 { (char *)"System_setDefaultPeriodicBoxVectors", _wrap_System_setDefaultPeriodicBoxVectors, METH_VARARGS, (char *)"\n"
		"System_setDefaultPeriodicBoxVectors(System self, Vec3 a, Vec3 b, Vec3 c)\n"
		"\n"
		"Set the default values of the vectors defining the axes of the periodic box (measured in nm). Any newly created Context will have its box vectors set to these. They will affect any Force added to the System that uses periodic boundary conditions.\n"
		"\n"
		"Currently, only rectangular boxes are supported. This means that a, b, and c must be aligned with the x, y, and z axes respectively. Future releases may support arbitrary triclinic boxes.\n"
		"   Parameters:\n"
		"    - a the vector defining the first edge of the periodic box\n"
		"    - b the vector defining the second edge of the periodic box\n"
		"    - c the vector defining the third edge of the periodic box\n"
		""},
	 { (char *)"new_System", _wrap_new_System, METH_VARARGS, (char *)"\n"
		"System()\n"
		"new_System(System other) -> System\n"
		"\n"
		"Create a new System.\n"
		""},
	 { (char *)"System_swigregister", System_swigregister, METH_VARARGS, NULL},
	 { (char *)"ThreeParticleAverageSite_getWeight", _wrap_ThreeParticleAverageSite_getWeight, METH_VARARGS, (char *)"\n"
		"ThreeParticleAverageSite_getWeight(ThreeParticleAverageSite self, int particle) -> double\n"
		"\n"
		"Get the weight factor used for a particle this virtual site depends on.\n"
		"   Parameters:\n"
		"    - particle the particle to get (between 0 and getNumParticles())\n"
		""},
	 { (char *)"new_ThreeParticleAverageSite", _wrap_new_ThreeParticleAverageSite, METH_VARARGS, (char *)"\n"
		"ThreeParticleAverageSite(int particle1, int particle2, int particle3, double weight1, \n"
		"    double weight2, double weight3)\n"
		"new_ThreeParticleAverageSite(ThreeParticleAverageSite other) -> ThreeParticleAverageSite\n"
		"\n"
		"Create a new ThreeParticleAverageSite virtual site. Normally the weights should add up to 1, although this is not strictly required.\n"
		"   Parameters:\n"
		"    - particle1 the index of the first particle\n"
		"    - particle2 the index of the second particle\n"
		"    - particle3 the index of the third particle\n"
		"    - weight1 the weight factor (between 0 and 1) for the first particle\n"
		"    - weight2 the weight factor (between 0 and 1) for the second particle\n"
		"    - weight2 the weight factor (between 0 and 1) for the third particle\n"
		""},
	 { (char *)"delete_ThreeParticleAverageSite", _wrap_delete_ThreeParticleAverageSite, METH_VARARGS, (char *)"delete_ThreeParticleAverageSite(ThreeParticleAverageSite self)"},
	 { (char *)"ThreeParticleAverageSite_swigregister", ThreeParticleAverageSite_swigregister, METH_VARARGS, NULL},
	 { (char *)"TwoParticleAverageSite_getWeight", _wrap_TwoParticleAverageSite_getWeight, METH_VARARGS, (char *)"\n"
		"TwoParticleAverageSite_getWeight(TwoParticleAverageSite self, int particle) -> double\n"
		"\n"
		"Get the weight factor used for a particle this virtual site depends on.\n"
		"   Parameters:\n"
		"    - particle the particle to get (between 0 and getNumParticles())\n"
		""},
	 { (char *)"new_TwoParticleAverageSite", _wrap_new_TwoParticleAverageSite, METH_VARARGS, (char *)"\n"
		"TwoParticleAverageSite(int particle1, int particle2, double weight1, double weight2)\n"
		"new_TwoParticleAverageSite(TwoParticleAverageSite other) -> TwoParticleAverageSite\n"
		"\n"
		"Create a new TwoParticleAverageSite virtual site. Normally weight1 and weight2 should add up to 1, although this is not strictly required.\n"
		"   Parameters:\n"
		"    - particle1 the index of the first particle\n"
		"    - particle2 the index of the second particle\n"
		"    - weight1 the weight factor (between 0 and 1) for the first particle\n"
		"    - weight2 the weight factor (between 0 and 1) for the second particle\n"
		""},
	 { (char *)"delete_TwoParticleAverageSite", _wrap_delete_TwoParticleAverageSite, METH_VARARGS, (char *)"delete_TwoParticleAverageSite(TwoParticleAverageSite self)"},
	 { (char *)"TwoParticleAverageSite_swigregister", TwoParticleAverageSite_swigregister, METH_VARARGS, NULL},
	 { (char *)"VariableLangevinIntegrator_getTemperature", _wrap_VariableLangevinIntegrator_getTemperature, METH_VARARGS, (char *)"\n"
		"VariableLangevinIntegrator_getTemperature(VariableLangevinIntegrator self) -> double\n"
		"\n"
		"Get the temperature of the heat bath (in Kelvin).\n"
		""},
	 { (char *)"VariableLangevinIntegrator_setTemperature", _wrap_VariableLangevinIntegrator_setTemperature, METH_VARARGS, (char *)"\n"
		"VariableLangevinIntegrator_setTemperature(VariableLangevinIntegrator self, double temp)\n"
		"\n"
		"Set the temperature of the heat bath (in Kelvin).\n"
		"   Parameters:\n"
		"    - temp the temperature of the heat bath, measured in Kelvin\n"
		""},
	 { (char *)"VariableLangevinIntegrator_getFriction", _wrap_VariableLangevinIntegrator_getFriction, METH_VARARGS, (char *)"\n"
		"VariableLangevinIntegrator_getFriction(VariableLangevinIntegrator self) -> double\n"
		"\n"
		"Get the friction coefficient which determines how strongly the system is coupled to the heat bath (in inverse ps).\n"
		""},
	 { (char *)"VariableLangevinIntegrator_setFriction", _wrap_VariableLangevinIntegrator_setFriction, METH_VARARGS, (char *)"\n"
		"VariableLangevinIntegrator_setFriction(VariableLangevinIntegrator self, double coeff)\n"
		"\n"
		"Set the friction coefficient which determines how strongly the system is coupled to the heat bath (in inverse ps).\n"
		"   Parameters:\n"
		"    - coeff the friction coefficient, measured in 1/ps\n"
		""},
	 { (char *)"VariableLangevinIntegrator_getErrorTolerance", _wrap_VariableLangevinIntegrator_getErrorTolerance, METH_VARARGS, (char *)"\n"
		"VariableLangevinIntegrator_getErrorTolerance(VariableLangevinIntegrator self) -> double\n"
		"\n"
		"Get the error tolerance.\n"
		""},
	 { (char *)"VariableLangevinIntegrator_setErrorTolerance", _wrap_VariableLangevinIntegrator_setErrorTolerance, METH_VARARGS, (char *)"\n"
		"VariableLangevinIntegrator_setErrorTolerance(VariableLangevinIntegrator self, double tol)\n"
		"\n"
		"Set the error tolerance.\n"
		""},
	 { (char *)"VariableLangevinIntegrator_getRandomNumberSeed", _wrap_VariableLangevinIntegrator_getRandomNumberSeed, METH_VARARGS, (char *)"\n"
		"VariableLangevinIntegrator_getRandomNumberSeed(VariableLangevinIntegrator self) -> int\n"
		"\n"
		"Get the random number seed. See setRandomNumberSeed() for details.\n"
		""},
	 { (char *)"VariableLangevinIntegrator_setRandomNumberSeed", _wrap_VariableLangevinIntegrator_setRandomNumberSeed, METH_VARARGS, (char *)"\n"
		"VariableLangevinIntegrator_setRandomNumberSeed(VariableLangevinIntegrator self, int seed)\n"
		"\n"
		"Set the random number seed. The precise meaning of this parameter is undefined, and is left up to each Platform to interpret in an appropriate way. It is guaranteed that if two simulations are run with different random number seeds, the sequence of random forces will be different. On the other hand, no guarantees are made about the behavior of simulations that use the same seed. In particular, Platforms are permitted to use non-deterministic algorithms which produce different results on successive runs, even if those runs were initialized identically.\n"
		""},
	 { (char *)"VariableLangevinIntegrator_step", _wrap_VariableLangevinIntegrator_step, METH_VARARGS, (char *)"\n"
		"VariableLangevinIntegrator_step(VariableLangevinIntegrator self, int steps)\n"
		"\n"
		"Advance a simulation through time by taking a series of time steps.\n"
		"   Parameters:\n"
		"    - steps the number of time steps to take\n"
		""},
	 { (char *)"VariableLangevinIntegrator_stepTo", _wrap_VariableLangevinIntegrator_stepTo, METH_VARARGS, (char *)"\n"
		"VariableLangevinIntegrator_stepTo(VariableLangevinIntegrator self, double time)\n"
		"\n"
		"Advance a simulation through time by taking a series of steps until a specified time is reached. When this method returns, the simulation time will exactly equal the time which was specified. If you call this method and specify a time that is earlier than the current time, it will return without doing anything.\n"
		"   Parameters:\n"
		"    - time the time to which the simulation should be advanced\n"
		""},
	 { (char *)"new_VariableLangevinIntegrator", _wrap_new_VariableLangevinIntegrator, METH_VARARGS, (char *)"\n"
		"VariableLangevinIntegrator(double temperature, double frictionCoeff, double errorTol)\n"
		"new_VariableLangevinIntegrator(VariableLangevinIntegrator other) -> VariableLangevinIntegrator\n"
		"\n"
		"Create a VariableLangevinIntegrator.\n"
		"   Parameters:\n"
		"    - temperature the temperature of the heat bath (in Kelvin)\n"
		"    - frictionCoeff the friction coefficient which couples the system to the heat bath (in inverse picoseconds)\n"
		"    - errorTol the error tolerance\n"
		""},
	 { (char *)"delete_VariableLangevinIntegrator", _wrap_delete_VariableLangevinIntegrator, METH_VARARGS, (char *)"delete_VariableLangevinIntegrator(VariableLangevinIntegrator self)"},
	 { (char *)"VariableLangevinIntegrator_swigregister", VariableLangevinIntegrator_swigregister, METH_VARARGS, NULL},
	 { (char *)"VariableVerletIntegrator_getErrorTolerance", _wrap_VariableVerletIntegrator_getErrorTolerance, METH_VARARGS, (char *)"\n"
		"VariableVerletIntegrator_getErrorTolerance(VariableVerletIntegrator self) -> double\n"
		"\n"
		"Get the error tolerance.\n"
		""},
	 { (char *)"VariableVerletIntegrator_setErrorTolerance", _wrap_VariableVerletIntegrator_setErrorTolerance, METH_VARARGS, (char *)"\n"
		"VariableVerletIntegrator_setErrorTolerance(VariableVerletIntegrator self, double tol)\n"
		"\n"
		"Set the error tolerance.\n"
		""},
	 { (char *)"VariableVerletIntegrator_step", _wrap_VariableVerletIntegrator_step, METH_VARARGS, (char *)"\n"
		"VariableVerletIntegrator_step(VariableVerletIntegrator self, int steps)\n"
		"\n"
		"Advance a simulation through time by taking a series of time steps.\n"
		"   Parameters:\n"
		"    - steps the number of time steps to take\n"
		""},
	 { (char *)"VariableVerletIntegrator_stepTo", _wrap_VariableVerletIntegrator_stepTo, METH_VARARGS, (char *)"\n"
		"VariableVerletIntegrator_stepTo(VariableVerletIntegrator self, double time)\n"
		"\n"
		"Advance a simulation through time by taking a series of steps until a specified time is reached. When this method returns, the simulation time will exactly equal the time which was specified. If you call this method and specify a time that is earlier than the current time, it will return without doing anything.\n"
		"   Parameters:\n"
		"    - time the time to which the simulation should be advanced\n"
		""},
	 { (char *)"new_VariableVerletIntegrator", _wrap_new_VariableVerletIntegrator, METH_VARARGS, (char *)"\n"
		"VariableVerletIntegrator(double errorTol)\n"
		"new_VariableVerletIntegrator(VariableVerletIntegrator other) -> VariableVerletIntegrator\n"
		"\n"
		"Create a VariableVerletIntegrator.\n"
		"   Parameters:\n"
		"    - errorTol the error tolerance\n"
		""},
	 { (char *)"delete_VariableVerletIntegrator", _wrap_delete_VariableVerletIntegrator, METH_VARARGS, (char *)"delete_VariableVerletIntegrator(VariableVerletIntegrator self)"},
	 { (char *)"VariableVerletIntegrator_swigregister", VariableVerletIntegrator_swigregister, METH_VARARGS, NULL},
	 { (char *)"VerletIntegrator_step", _wrap_VerletIntegrator_step, METH_VARARGS, (char *)"\n"
		"VerletIntegrator_step(VerletIntegrator self, int steps)\n"
		"\n"
		"Advance a simulation through time by taking a series of time steps.\n"
		"   Parameters:\n"
		"    - steps the number of time steps to take\n"
		""},
	 { (char *)"new_VerletIntegrator", _wrap_new_VerletIntegrator, METH_VARARGS, (char *)"\n"
		"VerletIntegrator(double stepSize)\n"
		"new_VerletIntegrator(VerletIntegrator other) -> VerletIntegrator\n"
		"\n"
		"Create a VerletIntegrator.\n"
		"   Parameters:\n"
		"    - stepSize the step size with which to integrator the system (in picoseconds)\n"
		""},
	 { (char *)"delete_VerletIntegrator", _wrap_delete_VerletIntegrator, METH_VARARGS, (char *)"delete_VerletIntegrator(VerletIntegrator self)"},
	 { (char *)"VerletIntegrator_swigregister", VerletIntegrator_swigregister, METH_VARARGS, NULL},
	 { (char *)"XmlSerializer_serializeSystem", _wrap_XmlSerializer_serializeSystem, METH_VARARGS, (char *)"XmlSerializer_serializeSystem(System object) -> string"},
	 { (char *)"XmlSerializer_deserializeSystem", _wrap_XmlSerializer_deserializeSystem, METH_VARARGS, (char *)"XmlSerializer_deserializeSystem(char inputString) -> System"},
	 { (char *)"delete_XmlSerializer", _wrap_delete_XmlSerializer, METH_VARARGS, (char *)"delete_XmlSerializer(XmlSerializer self)"},
	 { (char *)"XmlSerializer_swigregister", XmlSerializer_swigregister, METH_VARARGS, NULL},
	 { NULL, NULL, 0, NULL }
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static void *_p_OpenMM__CustomGBForceTo_p_OpenMM__Force(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenMM::Force *)  ((OpenMM::CustomGBForce *) x));
}
static void *_p_OpenMM__AndersenThermostatTo_p_OpenMM__Force(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenMM::Force *)  ((OpenMM::AndersenThermostat *) x));
}
static void *_p_OpenMM__HarmonicBondForceTo_p_OpenMM__Force(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenMM::Force *)  ((OpenMM::HarmonicBondForce *) x));
}
static void *_p_OpenMM__CustomHbondForceTo_p_OpenMM__Force(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenMM::Force *)  ((OpenMM::CustomHbondForce *) x));
}
static void *_p_OpenMM__CustomBondForceTo_p_OpenMM__Force(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenMM::Force *)  ((OpenMM::CustomBondForce *) x));
}
static void *_p_OpenMM__AmoebaHarmonicBondForceTo_p_OpenMM__Force(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenMM::Force *)  ((OpenMM::AmoebaHarmonicBondForce *) x));
}
static void *_p_OpenMM__AmoebaOutOfPlaneBendForceTo_p_OpenMM__Force(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenMM::Force *)  ((OpenMM::AmoebaOutOfPlaneBendForce *) x));
}
static void *_p_OpenMM__AmoebaStretchBendForceTo_p_OpenMM__Force(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenMM::Force *)  ((OpenMM::AmoebaStretchBendForce *) x));
}
static void *_p_OpenMM__CustomExternalForceTo_p_OpenMM__Force(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenMM::Force *)  ((OpenMM::CustomExternalForce *) x));
}
static void *_p_OpenMM__AmoebaUreyBradleyForceTo_p_OpenMM__Force(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenMM::Force *)  ((OpenMM::AmoebaUreyBradleyForce *) x));
}
static void *_p_OpenMM__RBTorsionForceTo_p_OpenMM__Force(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenMM::Force *)  ((OpenMM::RBTorsionForce *) x));
}
static void *_p_OpenMM__PeriodicTorsionForceTo_p_OpenMM__Force(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenMM::Force *)  ((OpenMM::PeriodicTorsionForce *) x));
}
static void *_p_OpenMM__CustomTorsionForceTo_p_OpenMM__Force(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenMM::Force *)  ((OpenMM::CustomTorsionForce *) x));
}
static void *_p_OpenMM__CMAPTorsionForceTo_p_OpenMM__Force(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenMM::Force *)  ((OpenMM::CMAPTorsionForce *) x));
}
static void *_p_OpenMM__AmoebaPiTorsionForceTo_p_OpenMM__Force(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenMM::Force *)  ((OpenMM::AmoebaPiTorsionForce *) x));
}
static void *_p_OpenMM__AmoebaTorsionForceTo_p_OpenMM__Force(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenMM::Force *)  ((OpenMM::AmoebaTorsionForce *) x));
}
static void *_p_OpenMM__AmoebaTorsionTorsionForceTo_p_OpenMM__Force(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenMM::Force *)  ((OpenMM::AmoebaTorsionTorsionForce *) x));
}
static void *_p_OpenMM__AmoebaWcaDispersionForceTo_p_OpenMM__Force(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenMM::Force *)  ((OpenMM::AmoebaWcaDispersionForce *) x));
}
static void *_p_OpenMM__CMMotionRemoverTo_p_OpenMM__Force(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenMM::Force *)  ((OpenMM::CMMotionRemover *) x));
}
static void *_p_OpenMM__GBSAOBCForceTo_p_OpenMM__Force(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenMM::Force *)  ((OpenMM::GBSAOBCForce *) x));
}
static void *_p_OpenMM__AmoebaVdwForceTo_p_OpenMM__Force(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenMM::Force *)  ((OpenMM::AmoebaVdwForce *) x));
}
static void *_p_OpenMM__MonteCarloBarostatTo_p_OpenMM__Force(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenMM::Force *)  ((OpenMM::MonteCarloBarostat *) x));
}
static void *_p_OpenMM__GBVIForceTo_p_OpenMM__Force(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenMM::Force *)  ((OpenMM::GBVIForce *) x));
}
static void *_p_OpenMM__NonbondedSoftcoreForceTo_p_OpenMM__Force(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenMM::Force *)  ((OpenMM::NonbondedSoftcoreForce *) x));
}
static void *_p_OpenMM__HarmonicAngleForceTo_p_OpenMM__Force(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenMM::Force *)  ((OpenMM::HarmonicAngleForce *) x));
}
static void *_p_OpenMM__GBVISoftcoreForceTo_p_OpenMM__Force(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenMM::Force *)  ((OpenMM::GBVISoftcoreForce *) x));
}
static void *_p_OpenMM__GBSAOBCSoftcoreForceTo_p_OpenMM__Force(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenMM::Force *)  ((OpenMM::GBSAOBCSoftcoreForce *) x));
}
static void *_p_OpenMM__CustomAngleForceTo_p_OpenMM__Force(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenMM::Force *)  ((OpenMM::CustomAngleForce *) x));
}
static void *_p_OpenMM__AmoebaHarmonicAngleForceTo_p_OpenMM__Force(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenMM::Force *)  ((OpenMM::AmoebaHarmonicAngleForce *) x));
}
static void *_p_OpenMM__AmoebaHarmonicInPlaneAngleForceTo_p_OpenMM__Force(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenMM::Force *)  ((OpenMM::AmoebaHarmonicInPlaneAngleForce *) x));
}
static void *_p_OpenMM__AmoebaMultipoleForceTo_p_OpenMM__Force(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenMM::Force *)  ((OpenMM::AmoebaMultipoleForce *) x));
}
static void *_p_OpenMM__NonbondedForceTo_p_OpenMM__Force(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenMM::Force *)  ((OpenMM::NonbondedForce *) x));
}
static void *_p_OpenMM__CustomNonbondedForceTo_p_OpenMM__Force(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenMM::Force *)  ((OpenMM::CustomNonbondedForce *) x));
}
static void *_p_OpenMM__AmoebaGeneralizedKirkwoodForceTo_p_OpenMM__Force(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenMM::Force *)  ((OpenMM::AmoebaGeneralizedKirkwoodForce *) x));
}
static void *_p_f_r_std__basic_ostream__char_std__char_traits__char______r_std__basic_iostreamT_char_std__char_traitsT_char_t_tTo_p_f_r_std__basic_ostream__char_std__char_traits__char______r_std__basic_ostreamT_char_std__char_traitsT_char_t_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::basic_ostream< char,std::char_traits< char > > &(*)(std::basic_ostream< char,std::char_traits< char > > &))  ((std::basic_iostream< char,std::char_traits< char > > &(*)(std::basic_ostream< char,std::char_traits< char > > &)) x));
}
static void *_p_f_r_std__basic_istream__char_std__char_traits__char______r_std__basic_iostreamT_char_std__char_traitsT_char_t_tTo_p_f_r_std__basic_istream__char_std__char_traits__char______r_std__basic_istreamT_char_std__char_traitsT_char_t_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::basic_istream< char,std::char_traits< char > > &(*)(std::basic_istream< char,std::char_traits< char > > &))  ((std::basic_iostream< char,std::char_traits< char > > &(*)(std::basic_istream< char,std::char_traits< char > > &)) x));
}
static void *_p_f_r_std__ios_base__r_std__basic_ostreamT_char_std__char_traitsT_char_t_tTo_p_f_r_std__ios_base__r_std__ios_base(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::ios_base &(*)(std::ios_base &)) (std::basic_ios< char > *) ((std::basic_ostream< char,std::char_traits< char > > &(*)(std::ios_base &)) x));
}
static void *_p_f_r_std__ios_base__r_std__basic_istreamT_char_std__char_traitsT_char_t_tTo_p_f_r_std__ios_base__r_std__ios_base(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::ios_base &(*)(std::ios_base &)) (std::basic_ios< char > *) ((std::basic_istream< char,std::char_traits< char > > &(*)(std::ios_base &)) x));
}
static void *_p_f_r_std__ios_base__r_std__basic_iostreamT_char_std__char_traitsT_char_t_tTo_p_f_r_std__ios_base__r_std__ios_base(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::ios_base &(*)(std::ios_base &)) (std::basic_ios< char > *)(std::basic_istream< char > *) ((std::basic_iostream< char,std::char_traits< char > > &(*)(std::ios_base &)) x));
}
static void *_p_f_r_std__ios_base__r_std__basic_iosT_char_std__char_traitsT_char_t_tTo_p_f_r_std__ios_base__r_std__ios_base(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::ios_base &(*)(std::ios_base &))  ((std::basic_ios< char,std::char_traits< char > > &(*)(std::ios_base &)) x));
}
static void *_p_std__basic_ostreamT_char_std__char_traitsT_char_t_tTo_p_std__ios_base(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::ios_base *) (std::basic_ios< char > *) ((std::basic_ostream< char,std::char_traits< char > > *) x));
}
static void *_p_std__basic_istreamT_char_std__char_traitsT_char_t_tTo_p_std__ios_base(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::ios_base *) (std::basic_ios< char > *) ((std::basic_istream< char,std::char_traits< char > > *) x));
}
static void *_p_std__basic_iostreamT_char_std__char_traitsT_char_t_tTo_p_std__ios_base(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::ios_base *) (std::basic_ios< char > *)(std::basic_istream< char > *) ((std::basic_iostream< char,std::char_traits< char > > *) x));
}
static void *_p_std__basic_iosT_char_std__char_traitsT_char_t_tTo_p_std__ios_base(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::ios_base *)  ((std::basic_ios< char,std::char_traits< char > > *) x));
}
static void *_p_std__basic_ostreamT_char_std__char_traitsT_char_t_tTo_p_std__basic_iosT_char_std__char_traitsT_char_t_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::basic_ios< char,std::char_traits< char > > *)  ((std::basic_ostream< char,std::char_traits< char > > *) x));
}
static void *_p_std__basic_istreamT_char_std__char_traitsT_char_t_tTo_p_std__basic_iosT_char_std__char_traitsT_char_t_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::basic_ios< char,std::char_traits< char > > *)  ((std::basic_istream< char,std::char_traits< char > > *) x));
}
static void *_p_std__basic_iostreamT_char_std__char_traitsT_char_t_tTo_p_std__basic_iosT_char_std__char_traitsT_char_t_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::basic_ios< char,std::char_traits< char > > *) (std::basic_istream< char > *) ((std::basic_iostream< char,std::char_traits< char > > *) x));
}
static void *_p_OpenMM__OpenMMExceptionTo_p_std__exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::exception *)  ((OpenMM::OpenMMException *) x));
}
static void *_p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_ostreamT_char_std__char_traitsT_char_t_tTo_p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_iosT_char_std__char_traitsT_char_t_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::basic_ios< char,std::char_traits< char > > &(*)(std::basic_ios< char,std::char_traits< char > > &))  ((std::basic_ostream< char,std::char_traits< char > > &(*)(std::basic_ios< char,std::char_traits< char > > &)) x));
}
static void *_p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_istreamT_char_std__char_traitsT_char_t_tTo_p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_iosT_char_std__char_traitsT_char_t_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::basic_ios< char,std::char_traits< char > > &(*)(std::basic_ios< char,std::char_traits< char > > &))  ((std::basic_istream< char,std::char_traits< char > > &(*)(std::basic_ios< char,std::char_traits< char > > &)) x));
}
static void *_p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_iostreamT_char_std__char_traitsT_char_t_tTo_p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_iosT_char_std__char_traitsT_char_t_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::basic_ios< char,std::char_traits< char > > &(*)(std::basic_ios< char,std::char_traits< char > > &)) (std::basic_istream< char > *) ((std::basic_iostream< char,std::char_traits< char > > &(*)(std::basic_ios< char,std::char_traits< char > > &)) x));
}
static void *_p_std__basic_iostreamT_char_std__char_traitsT_char_t_tTo_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::basic_ostream< char,std::char_traits< char > > *)  ((std::basic_iostream< char,std::char_traits< char > > *) x));
}
static void *_p_std__basic_iostreamT_char_std__char_traitsT_char_t_tTo_p_std__basic_istreamT_char_std__char_traitsT_char_t_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::basic_istream< char,std::char_traits< char > > *)  ((std::basic_iostream< char,std::char_traits< char > > *) x));
}
static void *_p_OpenMM__BrownianIntegratorTo_p_OpenMM__Integrator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenMM::Integrator *)  ((OpenMM::BrownianIntegrator *) x));
}
static void *_p_OpenMM__CustomIntegratorTo_p_OpenMM__Integrator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenMM::Integrator *)  ((OpenMM::CustomIntegrator *) x));
}
static void *_p_OpenMM__LangevinIntegratorTo_p_OpenMM__Integrator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenMM::Integrator *)  ((OpenMM::LangevinIntegrator *) x));
}
static void *_p_OpenMM__RPMDIntegratorTo_p_OpenMM__Integrator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenMM::Integrator *)  ((OpenMM::RPMDIntegrator *) x));
}
static void *_p_OpenMM__VariableLangevinIntegratorTo_p_OpenMM__Integrator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenMM::Integrator *)  ((OpenMM::VariableLangevinIntegrator *) x));
}
static void *_p_OpenMM__VariableVerletIntegratorTo_p_OpenMM__Integrator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenMM::Integrator *)  ((OpenMM::VariableVerletIntegrator *) x));
}
static void *_p_OpenMM__VerletIntegratorTo_p_OpenMM__Integrator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenMM::Integrator *)  ((OpenMM::VerletIntegrator *) x));
}
static void *_p_OpenMM__OutOfPlaneSiteTo_p_OpenMM__VirtualSite(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenMM::VirtualSite *)  ((OpenMM::OutOfPlaneSite *) x));
}
static void *_p_OpenMM__ThreeParticleAverageSiteTo_p_OpenMM__VirtualSite(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenMM::VirtualSite *)  ((OpenMM::ThreeParticleAverageSite *) x));
}
static void *_p_OpenMM__TwoParticleAverageSiteTo_p_OpenMM__VirtualSite(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenMM::VirtualSite *)  ((OpenMM::TwoParticleAverageSite *) x));
}
static swig_type_info _swigt__p_OpenMM__AmoebaGeneralizedKirkwoodForce = {"_p_OpenMM__AmoebaGeneralizedKirkwoodForce", "OpenMM::AmoebaGeneralizedKirkwoodForce *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_OpenMM__AmoebaHarmonicAngleForce = {"_p_OpenMM__AmoebaHarmonicAngleForce", "OpenMM::AmoebaHarmonicAngleForce *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_OpenMM__AmoebaHarmonicBondForce = {"_p_OpenMM__AmoebaHarmonicBondForce", "OpenMM::AmoebaHarmonicBondForce *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_OpenMM__AmoebaHarmonicInPlaneAngleForce = {"_p_OpenMM__AmoebaHarmonicInPlaneAngleForce", "OpenMM::AmoebaHarmonicInPlaneAngleForce *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_OpenMM__AmoebaMultipoleForce = {"_p_OpenMM__AmoebaMultipoleForce", "OpenMM::AmoebaMultipoleForce *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_OpenMM__AmoebaOutOfPlaneBendForce = {"_p_OpenMM__AmoebaOutOfPlaneBendForce", "OpenMM::AmoebaOutOfPlaneBendForce *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_OpenMM__AmoebaPiTorsionForce = {"_p_OpenMM__AmoebaPiTorsionForce", "OpenMM::AmoebaPiTorsionForce *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_OpenMM__AmoebaStretchBendForce = {"_p_OpenMM__AmoebaStretchBendForce", "OpenMM::AmoebaStretchBendForce *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_OpenMM__AmoebaTorsionForce = {"_p_OpenMM__AmoebaTorsionForce", "OpenMM::AmoebaTorsionForce *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_OpenMM__AmoebaTorsionTorsionForce = {"_p_OpenMM__AmoebaTorsionTorsionForce", "OpenMM::AmoebaTorsionTorsionForce *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_OpenMM__AmoebaUreyBradleyForce = {"_p_OpenMM__AmoebaUreyBradleyForce", "OpenMM::AmoebaUreyBradleyForce *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_OpenMM__AmoebaVdwForce = {"_p_OpenMM__AmoebaVdwForce", "OpenMM::AmoebaVdwForce *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_OpenMM__AmoebaWcaDispersionForce = {"_p_OpenMM__AmoebaWcaDispersionForce", "OpenMM::AmoebaWcaDispersionForce *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_OpenMM__AndersenThermostat = {"_p_OpenMM__AndersenThermostat", "OpenMM::AndersenThermostat *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_OpenMM__BrownianIntegrator = {"_p_OpenMM__BrownianIntegrator", "OpenMM::BrownianIntegrator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_OpenMM__CMAPTorsionForce = {"_p_OpenMM__CMAPTorsionForce", "OpenMM::CMAPTorsionForce *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_OpenMM__CMMotionRemover = {"_p_OpenMM__CMMotionRemover", "OpenMM::CMMotionRemover *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_OpenMM__Context = {"_p_OpenMM__Context", "OpenMM::Context *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_OpenMM__CustomAngleForce = {"_p_OpenMM__CustomAngleForce", "OpenMM::CustomAngleForce *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_OpenMM__CustomBondForce = {"_p_OpenMM__CustomBondForce", "OpenMM::CustomBondForce *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_OpenMM__CustomExternalForce = {"_p_OpenMM__CustomExternalForce", "OpenMM::CustomExternalForce *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_OpenMM__CustomGBForce = {"_p_OpenMM__CustomGBForce", "OpenMM::CustomGBForce *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_OpenMM__CustomGBForce__ComputationType = {"_p_OpenMM__CustomGBForce__ComputationType", "enum OpenMM::CustomGBForce::ComputationType *|OpenMM::CustomGBForce::ComputationType *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_OpenMM__CustomHbondForce = {"_p_OpenMM__CustomHbondForce", "OpenMM::CustomHbondForce *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_OpenMM__CustomIntegrator = {"_p_OpenMM__CustomIntegrator", "OpenMM::CustomIntegrator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_OpenMM__CustomIntegrator__ComputationType = {"_p_OpenMM__CustomIntegrator__ComputationType", "enum OpenMM::CustomIntegrator::ComputationType *|OpenMM::CustomIntegrator::ComputationType *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_OpenMM__CustomNonbondedForce = {"_p_OpenMM__CustomNonbondedForce", "OpenMM::CustomNonbondedForce *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_OpenMM__CustomTorsionForce = {"_p_OpenMM__CustomTorsionForce", "OpenMM::CustomTorsionForce *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_OpenMM__Force = {"_p_OpenMM__Force", "OpenMM::Force *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_OpenMM__GBSAOBCForce = {"_p_OpenMM__GBSAOBCForce", "OpenMM::GBSAOBCForce *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_OpenMM__GBSAOBCSoftcoreForce = {"_p_OpenMM__GBSAOBCSoftcoreForce", "OpenMM::GBSAOBCSoftcoreForce *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_OpenMM__GBVIForce = {"_p_OpenMM__GBVIForce", "OpenMM::GBVIForce *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_OpenMM__GBVISoftcoreForce = {"_p_OpenMM__GBVISoftcoreForce", "OpenMM::GBVISoftcoreForce *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_OpenMM__HarmonicAngleForce = {"_p_OpenMM__HarmonicAngleForce", "OpenMM::HarmonicAngleForce *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_OpenMM__HarmonicBondForce = {"_p_OpenMM__HarmonicBondForce", "OpenMM::HarmonicBondForce *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_OpenMM__Integrator = {"_p_OpenMM__Integrator", "OpenMM::Integrator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_OpenMM__LangevinIntegrator = {"_p_OpenMM__LangevinIntegrator", "OpenMM::LangevinIntegrator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_OpenMM__LocalEnergyMinimizer = {"_p_OpenMM__LocalEnergyMinimizer", "OpenMM::LocalEnergyMinimizer *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_OpenMM__MonteCarloBarostat = {"_p_OpenMM__MonteCarloBarostat", "OpenMM::MonteCarloBarostat *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_OpenMM__NonbondedForce = {"_p_OpenMM__NonbondedForce", "OpenMM::NonbondedForce *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_OpenMM__NonbondedSoftcoreForce = {"_p_OpenMM__NonbondedSoftcoreForce", "OpenMM::NonbondedSoftcoreForce *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_OpenMM__OpenMMException = {"_p_OpenMM__OpenMMException", "OpenMM::OpenMMException *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_OpenMM__OutOfPlaneSite = {"_p_OpenMM__OutOfPlaneSite", "OpenMM::OutOfPlaneSite *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_OpenMM__PeriodicTorsionForce = {"_p_OpenMM__PeriodicTorsionForce", "OpenMM::PeriodicTorsionForce *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_OpenMM__Platform = {"_p_OpenMM__Platform", "OpenMM::Platform *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_OpenMM__RBTorsionForce = {"_p_OpenMM__RBTorsionForce", "OpenMM::RBTorsionForce *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_OpenMM__RPMDIntegrator = {"_p_OpenMM__RPMDIntegrator", "OpenMM::RPMDIntegrator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_OpenMM__SerializationNode = {"_p_OpenMM__SerializationNode", "OpenMM::SerializationNode *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_OpenMM__SerializationProxy = {"_p_OpenMM__SerializationProxy", "OpenMM::SerializationProxy *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_OpenMM__System = {"_p_OpenMM__System", "OpenMM::System *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_OpenMM__ThreeParticleAverageSite = {"_p_OpenMM__ThreeParticleAverageSite", "OpenMM::ThreeParticleAverageSite *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_OpenMM__TwoParticleAverageSite = {"_p_OpenMM__TwoParticleAverageSite", "OpenMM::TwoParticleAverageSite *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_OpenMM__VariableLangevinIntegrator = {"_p_OpenMM__VariableLangevinIntegrator", "OpenMM::VariableLangevinIntegrator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_OpenMM__VariableVerletIntegrator = {"_p_OpenMM__VariableVerletIntegrator", "OpenMM::VariableVerletIntegrator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_OpenMM__VerletIntegrator = {"_p_OpenMM__VerletIntegrator", "OpenMM::VerletIntegrator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_OpenMM__VirtualSite = {"_p_OpenMM__VirtualSite", "OpenMM::VirtualSite *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_OpenMM__XmlSerializer = {"_p_OpenMM__XmlSerializer", "OpenMM::XmlSerializer *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Vec3 = {"_p_Vec3", "Vec3 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p___int64 = {"_p___int64", "__int64 *|LONGLONG *|LONG64 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_allocator_type = {"_p_allocator_type", "allocator_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_bool = {"_p_bool", "bool *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_char = {"_p_char", "CHAR *|TCHAR *|char *|CCHAR *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_char_type = {"_p_char_type", "char_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_difference_type = {"_p_difference_type", "difference_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_double = {"_p_double", "double *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_enum_std__ios_base__event_r_std__ios_base_int__void = {"_p_f_enum_std__ios_base__event_r_std__ios_base_int__void", "void (*)(enum std::ios_base::event,std::ios_base &,int)|std::ios_base::event_callback", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_iosT_char_std__char_traitsT_char_t_t = {"_p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_iosT_char_std__char_traitsT_char_t_t", "std::basic_ios< char,std::char_traits< char > > &(*)(std::basic_ios< char,std::char_traits< char > > &)", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_ostreamT_char_std__char_traitsT_char_t_t = {"_p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_ostreamT_char_std__char_traitsT_char_t_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_istreamT_char_std__char_traitsT_char_t_t = {"_p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_istreamT_char_std__char_traitsT_char_t_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_iostreamT_char_std__char_traitsT_char_t_t = {"_p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_iostreamT_char_std__char_traitsT_char_t_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_f_r_std__basic_istream__char_std__char_traits__char______r_std__basic_istreamT_char_std__char_traitsT_char_t_t = {"_p_f_r_std__basic_istream__char_std__char_traits__char______r_std__basic_istreamT_char_std__char_traitsT_char_t_t", "std::basic_istream< char,std::char_traits< char > > &(*)(std::basic_istream< char,std::char_traits< char > > &)", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_r_std__basic_istream__char_std__char_traits__char______r_std__basic_iostreamT_char_std__char_traitsT_char_t_t = {"_p_f_r_std__basic_istream__char_std__char_traits__char______r_std__basic_iostreamT_char_std__char_traitsT_char_t_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_f_r_std__basic_ostream__char_std__char_traits__char______r_std__basic_ostreamT_char_std__char_traitsT_char_t_t = {"_p_f_r_std__basic_ostream__char_std__char_traits__char______r_std__basic_ostreamT_char_std__char_traitsT_char_t_t", "std::basic_ostream< char,std::char_traits< char > > &(*)(std::basic_ostream< char,std::char_traits< char > > &)", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_r_std__basic_ostream__char_std__char_traits__char______r_std__basic_iostreamT_char_std__char_traitsT_char_t_t = {"_p_f_r_std__basic_ostream__char_std__char_traits__char______r_std__basic_iostreamT_char_std__char_traitsT_char_t_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_f_r_std__ios_base__r_std__ios_base = {"_p_f_r_std__ios_base__r_std__ios_base", "std::ios_base &(*)(std::ios_base &)", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_r_std__ios_base__r_std__basic_ostreamT_char_std__char_traitsT_char_t_t = {"_p_f_r_std__ios_base__r_std__basic_ostreamT_char_std__char_traitsT_char_t_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_f_r_std__ios_base__r_std__basic_istreamT_char_std__char_traitsT_char_t_t = {"_p_f_r_std__ios_base__r_std__basic_istreamT_char_std__char_traitsT_char_t_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_f_r_std__ios_base__r_std__basic_iosT_char_std__char_traitsT_char_t_t = {"_p_f_r_std__ios_base__r_std__basic_iosT_char_std__char_traitsT_char_t_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_f_r_std__ios_base__r_std__basic_iostreamT_char_std__char_traitsT_char_t_t = {"_p_f_r_std__ios_base__r_std__basic_iostreamT_char_std__char_traitsT_char_t_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_first_type = {"_p_first_type", "first_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_float = {"_p_float", "FLOAT *|float *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_fmtflags = {"_p_fmtflags", "fmtflags *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_int = {"_p_int", "BOOL *|INT32 *|int *|INT *|INT_PTR *|LONG32 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_int_type = {"_p_int_type", "int_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_iostate = {"_p_iostate", "iostate *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_key_type = {"_p_key_type", "key_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_long = {"_p_long", "SHANDLE_PTR *|LONG_PTR *|LONG *|HRESULT *|long *|SSIZE_T *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_long_double = {"_p_long_double", "long double *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_long_long = {"_p_long_long", "long long *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mapped_type = {"_p_mapped_type", "mapped_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_off_type = {"_p_off_type", "off_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_openmode = {"_p_openmode", "openmode *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_PyObject = {"_p_p_PyObject", "PyObject **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_char = {"_p_p_char", "PTCH *|PCTSTR *|LPCTSTR *|LPTCH *|PUTSTR *|LPUTSTR *|PCUTSTR *|LPCUTSTR *|char **|PTSTR *|LPTSTR *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_unsigned_long = {"_p_p_unsigned_long", "unsigned long **|PLCID *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_void = {"_p_p_void", "void **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_pos_type = {"_p_pos_type", "pos_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_second_type = {"_p_second_type", "second_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_seekdir = {"_p_seekdir", "seekdir *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_short = {"_p_short", "HALF_PTR *|short *|SHORT *|INT16 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_signed___int64 = {"_p_signed___int64", "INT64 *|signed __int64 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_signed_char = {"_p_signed_char", "signed char *|INT8 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_size_t = {"_p_size_t", "std::streamsize *|size_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_size_type = {"_p_size_type", "size_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_state_type = {"_p_state_type", "state_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__basic_iosT_char_std__char_traitsT_char_t_t = {"_p_std__basic_iosT_char_std__char_traitsT_char_t_t", "std::basic_ios< char > *|std::basic_ios< char,std::char_traits< char > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__basic_iostreamT_char_std__char_traitsT_char_t_t = {"_p_std__basic_iostreamT_char_std__char_traitsT_char_t_t", "std::basic_iostream< char,std::char_traits< char > > *|std::basic_iostream< char > *|std::iostream *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__basic_istreamT_char_std__char_traitsT_char_t_t = {"_p_std__basic_istreamT_char_std__char_traitsT_char_t_t", "std::basic_istream< char > *|std::basic_istream< char,std::char_traits< char > > *|std::istream *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__basic_istreamT_char_std__char_traitsT_char_t_t__char_type = {"_p_std__basic_istreamT_char_std__char_traitsT_char_t_t__char_type", "std::basic_istream< char >::char_type *|char *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__basic_istreamT_char_std__char_traitsT_char_t_t__off_type = {"_p_std__basic_istreamT_char_std__char_traitsT_char_t_t__off_type", "std::basic_istream< char >::off_type *|streamoff *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__basic_istreamT_char_std__char_traitsT_char_t_t__pos_type = {"_p_std__basic_istreamT_char_std__char_traitsT_char_t_t__pos_type", "std::basic_istream< char >::pos_type *|streampos *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__basic_ostreamT_char_std__char_traitsT_char_t_t = {"_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t", "std::basic_ostream< char > *|std::basic_ostream< char,std::char_traits< char > > *|std::ostream *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__basic_ostreamT_char_std__char_traitsT_char_t_t__off_type = {"_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t__off_type", "std::basic_ostream< char >::off_type *|streamoff *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__basic_ostreamT_char_std__char_traitsT_char_t_t__pos_type = {"_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t__pos_type", "std::basic_ostream< char >::pos_type *|streampos *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__basic_streambufT_char_std__char_traitsT_char_t_t = {"_p_std__basic_streambufT_char_std__char_traitsT_char_t_t", "std::basic_streambuf< char,std::char_traits< char > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t = {"_p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t", "std::basic_string< char,std::char_traits< char >,std::allocator< char > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__exception = {"_p_std__exception", "std::exception *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__ios_base = {"_p_std__ios_base", "std::ios_base *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__lessT_std__string_t = {"_p_std__lessT_std__string_t", "std::less< std::string > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__locale = {"_p_std__locale", "std::locale *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__mapT_std__string_std__string_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_std__string_t_t_t = {"_p_std__mapT_std__string_std__string_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_std__string_t_t_t", "std::map< std::string,std::string > *|std::map< std::string,std::string,std::less< std::string >,std::allocator< std::pair< std::string const,std::string > > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__mapT_std__string_std__string_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_std__string_t_t_t__allocator_type = {"_p_std__mapT_std__string_std__string_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_std__string_t_t_t__allocator_type", "std::map< std::string,std::string >::allocator_type *|std::allocator< std::pair< std::string const,std::string > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__pairT_int_int_t = {"_p_std__pairT_int_int_t", "std::pair< int,int > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__string = {"_p_std__string", "std::string *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__type_info = {"_p_std__type_info", "std::type_info *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_OpenMM__SerializationNode_std__allocatorT_OpenMM__SerializationNode_t_t = {"_p_std__vectorT_OpenMM__SerializationNode_std__allocatorT_OpenMM__SerializationNode_t_t", "std::vector< OpenMM::SerializationNode,std::allocator< OpenMM::SerializationNode > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_Vec3_std__allocatorT_Vec3_t_t = {"_p_std__vectorT_Vec3_std__allocatorT_Vec3_t_t", "std::vector< Vec3,std::allocator< Vec3 > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_double_std__allocatorT_double_t_t = {"_p_std__vectorT_double_std__allocatorT_double_t_t", "std::vector< double,std::allocator< double > > *|std::vector< double > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_double_std__allocatorT_double_t_t__allocator_type = {"_p_std__vectorT_double_std__allocatorT_double_t_t__allocator_type", "std::vector< double >::allocator_type *|std::allocator< double > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_int_std__allocatorT_int_t_t = {"_p_std__vectorT_int_std__allocatorT_int_t_t", "std::vector< int,std::allocator< int > > *|std::vector< int > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_int_std__allocatorT_int_t_t__allocator_type = {"_p_std__vectorT_int_std__allocatorT_int_t_t__allocator_type", "std::vector< int >::allocator_type *|std::allocator< int > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_std__pairT_int_int_t_std__allocatorT_std__pairT_int_int_t_t_t = {"_p_std__vectorT_std__pairT_int_int_t_std__allocatorT_std__pairT_int_int_t_t_t", "std::vector< std::pair< int,int > > *|std::vector< std::pair< int,int >,std::allocator< std::pair< int,int > > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_std__pairT_int_int_t_std__allocatorT_std__pairT_int_int_t_t_t__allocator_type = {"_p_std__vectorT_std__pairT_int_int_t_std__allocatorT_std__pairT_int_int_t_t_t__allocator_type", "std::allocator< std::pair< int,int > > *|std::vector< std::pair< int,int > >::allocator_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_std__string_std__allocatorT_std__string_t_t = {"_p_std__vectorT_std__string_std__allocatorT_std__string_t_t", "std::vector< std::string,std::allocator< std::string > > *|std::vector< std::string > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_std__string_std__allocatorT_std__string_t_t__allocator_type = {"_p_std__vectorT_std__string_std__allocatorT_std__string_t_t__allocator_type", "std::vector< std::string >::allocator_type *|std::allocator< std::string > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_std__vectorT_int_std__allocatorT_int_t_t_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t_t = {"_p_std__vectorT_std__vectorT_int_std__allocatorT_int_t_t_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t_t", "std::vector< std::vector< int > > *|std::vector< std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > > *|std::vector< std::vector< int,std::allocator< int > > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_std__vectorT_int_std__allocatorT_int_t_t_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t_t__allocator_type = {"_p_std__vectorT_std__vectorT_int_std__allocatorT_int_t_t_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t_t__allocator_type", "std::vector< std::vector< int > >::allocator_type *|std::allocator< std::vector< int,std::allocator< int > > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t_std__allocatorT_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t_t_t = {"_p_std__vectorT_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t_std__allocatorT_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t_t_t", "std::vector< std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > >,std::allocator< std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > > > *|std::vector< std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > > *|std::vector< std::vector< std::vector< double > > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t_std__allocatorT_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t_t_t__allocator_type = {"_p_std__vectorT_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t_std__allocatorT_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t_t_t__allocator_type", "std::allocator< std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > > *|std::vector< std::vector< std::vector< double > > >::allocator_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t_std__allocatorT_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t_t_t__value_type = {"_p_std__vectorT_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t_std__allocatorT_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t_t_t__value_type", "std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > *|std::vector< std::vector< std::vector< double > > >::value_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_streamsize = {"_p_streamsize", "streamsize *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_swig__SwigPyIterator = {"_p_swig__SwigPyIterator", "swig::SwigPyIterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_traits_type = {"_p_traits_type", "traits_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned___int64 = {"_p_unsigned___int64", "UINT64 *|DWORD64 *|unsigned __int64 *|DWORDLONG *|ULONGLONG *|ULONG64 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_char = {"_p_unsigned_char", "FCHAR *|unsigned char *|UCHAR *|BYTE *|TBYTE *|UINT8 *|BOOLEAN *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_int = {"_p_unsigned_int", "UINT32 *|DWORD32 *|UINT *|unsigned int *|UINT_PTR *|ULONG32 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_long = {"_p_unsigned_long", "HANDLE_PTR *|DWORD *|ULONG_PTR *|DWORD_PTR *|FLONG *|unsigned long *|ULONG *|SIZE_T *|LCID *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_long_long = {"_p_unsigned_long_long", "unsigned long long *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_short = {"_p_unsigned_short", "WORD *|UHALF_PTR *|unsigned short *|USHORT *|FSHORT *|LANGID *|UINT16 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_value_type = {"_p_value_type", "value_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_void = {"_p_void", "void *", 0, 0, (void*)0, 0};

static swig_type_info *swig_type_initial[] = {
  &_swigt__p_OpenMM__AmoebaGeneralizedKirkwoodForce,
  &_swigt__p_OpenMM__AmoebaHarmonicAngleForce,
  &_swigt__p_OpenMM__AmoebaHarmonicBondForce,
  &_swigt__p_OpenMM__AmoebaHarmonicInPlaneAngleForce,
  &_swigt__p_OpenMM__AmoebaMultipoleForce,
  &_swigt__p_OpenMM__AmoebaOutOfPlaneBendForce,
  &_swigt__p_OpenMM__AmoebaPiTorsionForce,
  &_swigt__p_OpenMM__AmoebaStretchBendForce,
  &_swigt__p_OpenMM__AmoebaTorsionForce,
  &_swigt__p_OpenMM__AmoebaTorsionTorsionForce,
  &_swigt__p_OpenMM__AmoebaUreyBradleyForce,
  &_swigt__p_OpenMM__AmoebaVdwForce,
  &_swigt__p_OpenMM__AmoebaWcaDispersionForce,
  &_swigt__p_OpenMM__AndersenThermostat,
  &_swigt__p_OpenMM__BrownianIntegrator,
  &_swigt__p_OpenMM__CMAPTorsionForce,
  &_swigt__p_OpenMM__CMMotionRemover,
  &_swigt__p_OpenMM__Context,
  &_swigt__p_OpenMM__CustomAngleForce,
  &_swigt__p_OpenMM__CustomBondForce,
  &_swigt__p_OpenMM__CustomExternalForce,
  &_swigt__p_OpenMM__CustomGBForce,
  &_swigt__p_OpenMM__CustomGBForce__ComputationType,
  &_swigt__p_OpenMM__CustomHbondForce,
  &_swigt__p_OpenMM__CustomIntegrator,
  &_swigt__p_OpenMM__CustomIntegrator__ComputationType,
  &_swigt__p_OpenMM__CustomNonbondedForce,
  &_swigt__p_OpenMM__CustomTorsionForce,
  &_swigt__p_OpenMM__Force,
  &_swigt__p_OpenMM__GBSAOBCForce,
  &_swigt__p_OpenMM__GBSAOBCSoftcoreForce,
  &_swigt__p_OpenMM__GBVIForce,
  &_swigt__p_OpenMM__GBVISoftcoreForce,
  &_swigt__p_OpenMM__HarmonicAngleForce,
  &_swigt__p_OpenMM__HarmonicBondForce,
  &_swigt__p_OpenMM__Integrator,
  &_swigt__p_OpenMM__LangevinIntegrator,
  &_swigt__p_OpenMM__LocalEnergyMinimizer,
  &_swigt__p_OpenMM__MonteCarloBarostat,
  &_swigt__p_OpenMM__NonbondedForce,
  &_swigt__p_OpenMM__NonbondedSoftcoreForce,
  &_swigt__p_OpenMM__OpenMMException,
  &_swigt__p_OpenMM__OutOfPlaneSite,
  &_swigt__p_OpenMM__PeriodicTorsionForce,
  &_swigt__p_OpenMM__Platform,
  &_swigt__p_OpenMM__RBTorsionForce,
  &_swigt__p_OpenMM__RPMDIntegrator,
  &_swigt__p_OpenMM__SerializationNode,
  &_swigt__p_OpenMM__SerializationProxy,
  &_swigt__p_OpenMM__System,
  &_swigt__p_OpenMM__ThreeParticleAverageSite,
  &_swigt__p_OpenMM__TwoParticleAverageSite,
  &_swigt__p_OpenMM__VariableLangevinIntegrator,
  &_swigt__p_OpenMM__VariableVerletIntegrator,
  &_swigt__p_OpenMM__VerletIntegrator,
  &_swigt__p_OpenMM__VirtualSite,
  &_swigt__p_OpenMM__XmlSerializer,
  &_swigt__p_Vec3,
  &_swigt__p___int64,
  &_swigt__p_allocator_type,
  &_swigt__p_bool,
  &_swigt__p_char,
  &_swigt__p_char_type,
  &_swigt__p_difference_type,
  &_swigt__p_double,
  &_swigt__p_f_enum_std__ios_base__event_r_std__ios_base_int__void,
  &_swigt__p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_iosT_char_std__char_traitsT_char_t_t,
  &_swigt__p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_iostreamT_char_std__char_traitsT_char_t_t,
  &_swigt__p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_istreamT_char_std__char_traitsT_char_t_t,
  &_swigt__p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_ostreamT_char_std__char_traitsT_char_t_t,
  &_swigt__p_f_r_std__basic_istream__char_std__char_traits__char______r_std__basic_iostreamT_char_std__char_traitsT_char_t_t,
  &_swigt__p_f_r_std__basic_istream__char_std__char_traits__char______r_std__basic_istreamT_char_std__char_traitsT_char_t_t,
  &_swigt__p_f_r_std__basic_ostream__char_std__char_traits__char______r_std__basic_iostreamT_char_std__char_traitsT_char_t_t,
  &_swigt__p_f_r_std__basic_ostream__char_std__char_traits__char______r_std__basic_ostreamT_char_std__char_traitsT_char_t_t,
  &_swigt__p_f_r_std__ios_base__r_std__basic_iosT_char_std__char_traitsT_char_t_t,
  &_swigt__p_f_r_std__ios_base__r_std__basic_iostreamT_char_std__char_traitsT_char_t_t,
  &_swigt__p_f_r_std__ios_base__r_std__basic_istreamT_char_std__char_traitsT_char_t_t,
  &_swigt__p_f_r_std__ios_base__r_std__basic_ostreamT_char_std__char_traitsT_char_t_t,
  &_swigt__p_f_r_std__ios_base__r_std__ios_base,
  &_swigt__p_first_type,
  &_swigt__p_float,
  &_swigt__p_fmtflags,
  &_swigt__p_int,
  &_swigt__p_int_type,
  &_swigt__p_iostate,
  &_swigt__p_key_type,
  &_swigt__p_long,
  &_swigt__p_long_double,
  &_swigt__p_long_long,
  &_swigt__p_mapped_type,
  &_swigt__p_off_type,
  &_swigt__p_openmode,
  &_swigt__p_p_PyObject,
  &_swigt__p_p_char,
  &_swigt__p_p_unsigned_long,
  &_swigt__p_p_void,
  &_swigt__p_pos_type,
  &_swigt__p_second_type,
  &_swigt__p_seekdir,
  &_swigt__p_short,
  &_swigt__p_signed___int64,
  &_swigt__p_signed_char,
  &_swigt__p_size_t,
  &_swigt__p_size_type,
  &_swigt__p_state_type,
  &_swigt__p_std__basic_iosT_char_std__char_traitsT_char_t_t,
  &_swigt__p_std__basic_iostreamT_char_std__char_traitsT_char_t_t,
  &_swigt__p_std__basic_istreamT_char_std__char_traitsT_char_t_t,
  &_swigt__p_std__basic_istreamT_char_std__char_traitsT_char_t_t__char_type,
  &_swigt__p_std__basic_istreamT_char_std__char_traitsT_char_t_t__off_type,
  &_swigt__p_std__basic_istreamT_char_std__char_traitsT_char_t_t__pos_type,
  &_swigt__p_std__basic_ostreamT_char_std__char_traitsT_char_t_t,
  &_swigt__p_std__basic_ostreamT_char_std__char_traitsT_char_t_t__off_type,
  &_swigt__p_std__basic_ostreamT_char_std__char_traitsT_char_t_t__pos_type,
  &_swigt__p_std__basic_streambufT_char_std__char_traitsT_char_t_t,
  &_swigt__p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t,
  &_swigt__p_std__exception,
  &_swigt__p_std__ios_base,
  &_swigt__p_std__lessT_std__string_t,
  &_swigt__p_std__locale,
  &_swigt__p_std__mapT_std__string_std__string_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_std__string_t_t_t,
  &_swigt__p_std__mapT_std__string_std__string_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_std__string_t_t_t__allocator_type,
  &_swigt__p_std__pairT_int_int_t,
  &_swigt__p_std__string,
  &_swigt__p_std__type_info,
  &_swigt__p_std__vectorT_OpenMM__SerializationNode_std__allocatorT_OpenMM__SerializationNode_t_t,
  &_swigt__p_std__vectorT_Vec3_std__allocatorT_Vec3_t_t,
  &_swigt__p_std__vectorT_double_std__allocatorT_double_t_t,
  &_swigt__p_std__vectorT_double_std__allocatorT_double_t_t__allocator_type,
  &_swigt__p_std__vectorT_int_std__allocatorT_int_t_t,
  &_swigt__p_std__vectorT_int_std__allocatorT_int_t_t__allocator_type,
  &_swigt__p_std__vectorT_std__pairT_int_int_t_std__allocatorT_std__pairT_int_int_t_t_t,
  &_swigt__p_std__vectorT_std__pairT_int_int_t_std__allocatorT_std__pairT_int_int_t_t_t__allocator_type,
  &_swigt__p_std__vectorT_std__string_std__allocatorT_std__string_t_t,
  &_swigt__p_std__vectorT_std__string_std__allocatorT_std__string_t_t__allocator_type,
  &_swigt__p_std__vectorT_std__vectorT_int_std__allocatorT_int_t_t_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t_t,
  &_swigt__p_std__vectorT_std__vectorT_int_std__allocatorT_int_t_t_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t_t__allocator_type,
  &_swigt__p_std__vectorT_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t_std__allocatorT_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t_t_t,
  &_swigt__p_std__vectorT_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t_std__allocatorT_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t_t_t__allocator_type,
  &_swigt__p_std__vectorT_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t_std__allocatorT_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t_t_t__value_type,
  &_swigt__p_streamsize,
  &_swigt__p_swig__SwigPyIterator,
  &_swigt__p_traits_type,
  &_swigt__p_unsigned___int64,
  &_swigt__p_unsigned_char,
  &_swigt__p_unsigned_int,
  &_swigt__p_unsigned_long,
  &_swigt__p_unsigned_long_long,
  &_swigt__p_unsigned_short,
  &_swigt__p_value_type,
  &_swigt__p_void,
};

static swig_cast_info _swigc__p_OpenMM__AmoebaGeneralizedKirkwoodForce[] = {  {&_swigt__p_OpenMM__AmoebaGeneralizedKirkwoodForce, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenMM__AmoebaHarmonicAngleForce[] = {  {&_swigt__p_OpenMM__AmoebaHarmonicAngleForce, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenMM__AmoebaHarmonicBondForce[] = {  {&_swigt__p_OpenMM__AmoebaHarmonicBondForce, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenMM__AmoebaHarmonicInPlaneAngleForce[] = {  {&_swigt__p_OpenMM__AmoebaHarmonicInPlaneAngleForce, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenMM__AmoebaMultipoleForce[] = {  {&_swigt__p_OpenMM__AmoebaMultipoleForce, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenMM__AmoebaOutOfPlaneBendForce[] = {  {&_swigt__p_OpenMM__AmoebaOutOfPlaneBendForce, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenMM__AmoebaPiTorsionForce[] = {  {&_swigt__p_OpenMM__AmoebaPiTorsionForce, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenMM__AmoebaStretchBendForce[] = {  {&_swigt__p_OpenMM__AmoebaStretchBendForce, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenMM__AmoebaTorsionForce[] = {  {&_swigt__p_OpenMM__AmoebaTorsionForce, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenMM__AmoebaTorsionTorsionForce[] = {  {&_swigt__p_OpenMM__AmoebaTorsionTorsionForce, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenMM__AmoebaUreyBradleyForce[] = {  {&_swigt__p_OpenMM__AmoebaUreyBradleyForce, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenMM__AmoebaVdwForce[] = {  {&_swigt__p_OpenMM__AmoebaVdwForce, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenMM__AmoebaWcaDispersionForce[] = {  {&_swigt__p_OpenMM__AmoebaWcaDispersionForce, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenMM__AndersenThermostat[] = {  {&_swigt__p_OpenMM__AndersenThermostat, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenMM__BrownianIntegrator[] = {  {&_swigt__p_OpenMM__BrownianIntegrator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenMM__CMAPTorsionForce[] = {  {&_swigt__p_OpenMM__CMAPTorsionForce, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenMM__CMMotionRemover[] = {  {&_swigt__p_OpenMM__CMMotionRemover, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenMM__Context[] = {  {&_swigt__p_OpenMM__Context, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenMM__CustomAngleForce[] = {  {&_swigt__p_OpenMM__CustomAngleForce, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenMM__CustomBondForce[] = {  {&_swigt__p_OpenMM__CustomBondForce, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenMM__CustomExternalForce[] = {  {&_swigt__p_OpenMM__CustomExternalForce, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenMM__CustomGBForce[] = {  {&_swigt__p_OpenMM__CustomGBForce, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenMM__CustomGBForce__ComputationType[] = {  {&_swigt__p_OpenMM__CustomGBForce__ComputationType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenMM__CustomHbondForce[] = {  {&_swigt__p_OpenMM__CustomHbondForce, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenMM__CustomIntegrator[] = {  {&_swigt__p_OpenMM__CustomIntegrator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenMM__CustomIntegrator__ComputationType[] = {  {&_swigt__p_OpenMM__CustomIntegrator__ComputationType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenMM__CustomNonbondedForce[] = {  {&_swigt__p_OpenMM__CustomNonbondedForce, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenMM__CustomTorsionForce[] = {  {&_swigt__p_OpenMM__CustomTorsionForce, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenMM__Force[] = {  {&_swigt__p_OpenMM__CustomGBForce, _p_OpenMM__CustomGBForceTo_p_OpenMM__Force, 0, 0},  {&_swigt__p_OpenMM__AndersenThermostat, _p_OpenMM__AndersenThermostatTo_p_OpenMM__Force, 0, 0},  {&_swigt__p_OpenMM__Force, 0, 0, 0},  {&_swigt__p_OpenMM__HarmonicBondForce, _p_OpenMM__HarmonicBondForceTo_p_OpenMM__Force, 0, 0},  {&_swigt__p_OpenMM__CustomHbondForce, _p_OpenMM__CustomHbondForceTo_p_OpenMM__Force, 0, 0},  {&_swigt__p_OpenMM__CustomBondForce, _p_OpenMM__CustomBondForceTo_p_OpenMM__Force, 0, 0},  {&_swigt__p_OpenMM__AmoebaHarmonicBondForce, _p_OpenMM__AmoebaHarmonicBondForceTo_p_OpenMM__Force, 0, 0},  {&_swigt__p_OpenMM__AmoebaOutOfPlaneBendForce, _p_OpenMM__AmoebaOutOfPlaneBendForceTo_p_OpenMM__Force, 0, 0},  {&_swigt__p_OpenMM__AmoebaStretchBendForce, _p_OpenMM__AmoebaStretchBendForceTo_p_OpenMM__Force, 0, 0},  {&_swigt__p_OpenMM__CustomExternalForce, _p_OpenMM__CustomExternalForceTo_p_OpenMM__Force, 0, 0},  {&_swigt__p_OpenMM__AmoebaUreyBradleyForce, _p_OpenMM__AmoebaUreyBradleyForceTo_p_OpenMM__Force, 0, 0},  {&_swigt__p_OpenMM__CustomTorsionForce, _p_OpenMM__CustomTorsionForceTo_p_OpenMM__Force, 0, 0},  {&_swigt__p_OpenMM__PeriodicTorsionForce, _p_OpenMM__PeriodicTorsionForceTo_p_OpenMM__Force, 0, 0},  {&_swigt__p_OpenMM__RBTorsionForce, _p_OpenMM__RBTorsionForceTo_p_OpenMM__Force, 0, 0},  {&_swigt__p_OpenMM__CMAPTorsionForce, _p_OpenMM__CMAPTorsionForceTo_p_OpenMM__Force, 0, 0},  {&_swigt__p_OpenMM__AmoebaPiTorsionForce, _p_OpenMM__AmoebaPiTorsionForceTo_p_OpenMM__Force, 0, 0},  {&_swigt__p_OpenMM__AmoebaWcaDispersionForce, _p_OpenMM__AmoebaWcaDispersionForceTo_p_OpenMM__Force, 0, 0},  {&_swigt__p_OpenMM__AmoebaTorsionTorsionForce, _p_OpenMM__AmoebaTorsionTorsionForceTo_p_OpenMM__Force, 0, 0},  {&_swigt__p_OpenMM__AmoebaTorsionForce, _p_OpenMM__AmoebaTorsionForceTo_p_OpenMM__Force, 0, 0},  {&_swigt__p_OpenMM__CMMotionRemover, _p_OpenMM__CMMotionRemoverTo_p_OpenMM__Force, 0, 0},  {&_swigt__p_OpenMM__GBSAOBCForce, _p_OpenMM__GBSAOBCForceTo_p_OpenMM__Force, 0, 0},  {&_swigt__p_OpenMM__AmoebaVdwForce, _p_OpenMM__AmoebaVdwForceTo_p_OpenMM__Force, 0, 0},  {&_swigt__p_OpenMM__MonteCarloBarostat, _p_OpenMM__MonteCarloBarostatTo_p_OpenMM__Force, 0, 0},  {&_swigt__p_OpenMM__GBVIForce, _p_OpenMM__GBVIForceTo_p_OpenMM__Force, 0, 0},  {&_swigt__p_OpenMM__NonbondedSoftcoreForce, _p_OpenMM__NonbondedSoftcoreForceTo_p_OpenMM__Force, 0, 0},  {&_swigt__p_OpenMM__HarmonicAngleForce, _p_OpenMM__HarmonicAngleForceTo_p_OpenMM__Force, 0, 0},  {&_swigt__p_OpenMM__GBVISoftcoreForce, _p_OpenMM__GBVISoftcoreForceTo_p_OpenMM__Force, 0, 0},  {&_swigt__p_OpenMM__GBSAOBCSoftcoreForce, _p_OpenMM__GBSAOBCSoftcoreForceTo_p_OpenMM__Force, 0, 0},  {&_swigt__p_OpenMM__CustomAngleForce, _p_OpenMM__CustomAngleForceTo_p_OpenMM__Force, 0, 0},  {&_swigt__p_OpenMM__AmoebaHarmonicAngleForce, _p_OpenMM__AmoebaHarmonicAngleForceTo_p_OpenMM__Force, 0, 0},  {&_swigt__p_OpenMM__AmoebaHarmonicInPlaneAngleForce, _p_OpenMM__AmoebaHarmonicInPlaneAngleForceTo_p_OpenMM__Force, 0, 0},  {&_swigt__p_OpenMM__AmoebaMultipoleForce, _p_OpenMM__AmoebaMultipoleForceTo_p_OpenMM__Force, 0, 0},  {&_swigt__p_OpenMM__NonbondedForce, _p_OpenMM__NonbondedForceTo_p_OpenMM__Force, 0, 0},  {&_swigt__p_OpenMM__CustomNonbondedForce, _p_OpenMM__CustomNonbondedForceTo_p_OpenMM__Force, 0, 0},  {&_swigt__p_OpenMM__AmoebaGeneralizedKirkwoodForce, _p_OpenMM__AmoebaGeneralizedKirkwoodForceTo_p_OpenMM__Force, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenMM__GBSAOBCForce[] = {  {&_swigt__p_OpenMM__GBSAOBCForce, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenMM__GBSAOBCSoftcoreForce[] = {  {&_swigt__p_OpenMM__GBSAOBCSoftcoreForce, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenMM__GBVIForce[] = {  {&_swigt__p_OpenMM__GBVIForce, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenMM__GBVISoftcoreForce[] = {  {&_swigt__p_OpenMM__GBVISoftcoreForce, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenMM__HarmonicAngleForce[] = {  {&_swigt__p_OpenMM__HarmonicAngleForce, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenMM__HarmonicBondForce[] = {  {&_swigt__p_OpenMM__HarmonicBondForce, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenMM__Integrator[] = {  {&_swigt__p_OpenMM__Integrator, 0, 0, 0},  {&_swigt__p_OpenMM__BrownianIntegrator, _p_OpenMM__BrownianIntegratorTo_p_OpenMM__Integrator, 0, 0},  {&_swigt__p_OpenMM__CustomIntegrator, _p_OpenMM__CustomIntegratorTo_p_OpenMM__Integrator, 0, 0},  {&_swigt__p_OpenMM__LangevinIntegrator, _p_OpenMM__LangevinIntegratorTo_p_OpenMM__Integrator, 0, 0},  {&_swigt__p_OpenMM__RPMDIntegrator, _p_OpenMM__RPMDIntegratorTo_p_OpenMM__Integrator, 0, 0},  {&_swigt__p_OpenMM__VariableLangevinIntegrator, _p_OpenMM__VariableLangevinIntegratorTo_p_OpenMM__Integrator, 0, 0},  {&_swigt__p_OpenMM__VariableVerletIntegrator, _p_OpenMM__VariableVerletIntegratorTo_p_OpenMM__Integrator, 0, 0},  {&_swigt__p_OpenMM__VerletIntegrator, _p_OpenMM__VerletIntegratorTo_p_OpenMM__Integrator, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenMM__LangevinIntegrator[] = {  {&_swigt__p_OpenMM__LangevinIntegrator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenMM__LocalEnergyMinimizer[] = {  {&_swigt__p_OpenMM__LocalEnergyMinimizer, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenMM__MonteCarloBarostat[] = {  {&_swigt__p_OpenMM__MonteCarloBarostat, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenMM__NonbondedForce[] = {  {&_swigt__p_OpenMM__NonbondedForce, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenMM__NonbondedSoftcoreForce[] = {  {&_swigt__p_OpenMM__NonbondedSoftcoreForce, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenMM__OpenMMException[] = {  {&_swigt__p_OpenMM__OpenMMException, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenMM__OutOfPlaneSite[] = {  {&_swigt__p_OpenMM__OutOfPlaneSite, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenMM__PeriodicTorsionForce[] = {  {&_swigt__p_OpenMM__PeriodicTorsionForce, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenMM__Platform[] = {  {&_swigt__p_OpenMM__Platform, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenMM__RBTorsionForce[] = {  {&_swigt__p_OpenMM__RBTorsionForce, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenMM__RPMDIntegrator[] = {  {&_swigt__p_OpenMM__RPMDIntegrator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenMM__SerializationNode[] = {  {&_swigt__p_OpenMM__SerializationNode, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenMM__SerializationProxy[] = {  {&_swigt__p_OpenMM__SerializationProxy, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenMM__System[] = {  {&_swigt__p_OpenMM__System, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenMM__ThreeParticleAverageSite[] = {  {&_swigt__p_OpenMM__ThreeParticleAverageSite, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenMM__TwoParticleAverageSite[] = {  {&_swigt__p_OpenMM__TwoParticleAverageSite, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenMM__VariableLangevinIntegrator[] = {  {&_swigt__p_OpenMM__VariableLangevinIntegrator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenMM__VariableVerletIntegrator[] = {  {&_swigt__p_OpenMM__VariableVerletIntegrator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenMM__VerletIntegrator[] = {  {&_swigt__p_OpenMM__VerletIntegrator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenMM__VirtualSite[] = {  {&_swigt__p_OpenMM__OutOfPlaneSite, _p_OpenMM__OutOfPlaneSiteTo_p_OpenMM__VirtualSite, 0, 0},  {&_swigt__p_OpenMM__ThreeParticleAverageSite, _p_OpenMM__ThreeParticleAverageSiteTo_p_OpenMM__VirtualSite, 0, 0},  {&_swigt__p_OpenMM__TwoParticleAverageSite, _p_OpenMM__TwoParticleAverageSiteTo_p_OpenMM__VirtualSite, 0, 0},  {&_swigt__p_OpenMM__VirtualSite, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenMM__XmlSerializer[] = {  {&_swigt__p_OpenMM__XmlSerializer, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Vec3[] = {  {&_swigt__p_Vec3, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p___int64[] = {  {&_swigt__p___int64, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_allocator_type[] = {  {&_swigt__p_allocator_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_bool[] = {  {&_swigt__p_bool, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_char[] = {  {&_swigt__p_char, 0, 0, 0},  {&_swigt__p_std__basic_istreamT_char_std__char_traitsT_char_t_t__char_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_char_type[] = {  {&_swigt__p_char_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_difference_type[] = {  {&_swigt__p_difference_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_double[] = {  {&_swigt__p_double, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_enum_std__ios_base__event_r_std__ios_base_int__void[] = {  {&_swigt__p_f_enum_std__ios_base__event_r_std__ios_base_int__void, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_ostreamT_char_std__char_traitsT_char_t_t[] = {{&_swigt__p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_istreamT_char_std__char_traitsT_char_t_t[] = {{&_swigt__p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_iostreamT_char_std__char_traitsT_char_t_t[] = {{&_swigt__p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_iostreamT_char_std__char_traitsT_char_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_iosT_char_std__char_traitsT_char_t_t[] = {  {&_swigt__p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_iosT_char_std__char_traitsT_char_t_t, 0, 0, 0},  {&_swigt__p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_ostreamT_char_std__char_traitsT_char_t_t, _p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_ostreamT_char_std__char_traitsT_char_t_tTo_p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_iosT_char_std__char_traitsT_char_t_t, 0, 0},  {&_swigt__p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_istreamT_char_std__char_traitsT_char_t_t, _p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_istreamT_char_std__char_traitsT_char_t_tTo_p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_iosT_char_std__char_traitsT_char_t_t, 0, 0},  {&_swigt__p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_iostreamT_char_std__char_traitsT_char_t_t, _p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_iostreamT_char_std__char_traitsT_char_t_tTo_p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_iosT_char_std__char_traitsT_char_t_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_r_std__basic_istream__char_std__char_traits__char______r_std__basic_iostreamT_char_std__char_traitsT_char_t_t[] = {{&_swigt__p_f_r_std__basic_istream__char_std__char_traits__char______r_std__basic_iostreamT_char_std__char_traitsT_char_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_r_std__basic_istream__char_std__char_traits__char______r_std__basic_istreamT_char_std__char_traitsT_char_t_t[] = {  {&_swigt__p_f_r_std__basic_istream__char_std__char_traits__char______r_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0, 0, 0},  {&_swigt__p_f_r_std__basic_istream__char_std__char_traits__char______r_std__basic_iostreamT_char_std__char_traitsT_char_t_t, _p_f_r_std__basic_istream__char_std__char_traits__char______r_std__basic_iostreamT_char_std__char_traitsT_char_t_tTo_p_f_r_std__basic_istream__char_std__char_traits__char______r_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_r_std__basic_ostream__char_std__char_traits__char______r_std__basic_iostreamT_char_std__char_traitsT_char_t_t[] = {{&_swigt__p_f_r_std__basic_ostream__char_std__char_traits__char______r_std__basic_iostreamT_char_std__char_traitsT_char_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_r_std__basic_ostream__char_std__char_traits__char______r_std__basic_ostreamT_char_std__char_traitsT_char_t_t[] = {  {&_swigt__p_f_r_std__basic_ostream__char_std__char_traits__char______r_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0, 0, 0},  {&_swigt__p_f_r_std__basic_ostream__char_std__char_traits__char______r_std__basic_iostreamT_char_std__char_traitsT_char_t_t, _p_f_r_std__basic_ostream__char_std__char_traits__char______r_std__basic_iostreamT_char_std__char_traitsT_char_t_tTo_p_f_r_std__basic_ostream__char_std__char_traits__char______r_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_r_std__ios_base__r_std__basic_ostreamT_char_std__char_traitsT_char_t_t[] = {{&_swigt__p_f_r_std__ios_base__r_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_r_std__ios_base__r_std__basic_istreamT_char_std__char_traitsT_char_t_t[] = {{&_swigt__p_f_r_std__ios_base__r_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_r_std__ios_base__r_std__basic_iosT_char_std__char_traitsT_char_t_t[] = {{&_swigt__p_f_r_std__ios_base__r_std__basic_iosT_char_std__char_traitsT_char_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_r_std__ios_base__r_std__basic_iostreamT_char_std__char_traitsT_char_t_t[] = {{&_swigt__p_f_r_std__ios_base__r_std__basic_iostreamT_char_std__char_traitsT_char_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_r_std__ios_base__r_std__ios_base[] = {  {&_swigt__p_f_r_std__ios_base__r_std__basic_ostreamT_char_std__char_traitsT_char_t_t, _p_f_r_std__ios_base__r_std__basic_ostreamT_char_std__char_traitsT_char_t_tTo_p_f_r_std__ios_base__r_std__ios_base, 0, 0},  {&_swigt__p_f_r_std__ios_base__r_std__basic_istreamT_char_std__char_traitsT_char_t_t, _p_f_r_std__ios_base__r_std__basic_istreamT_char_std__char_traitsT_char_t_tTo_p_f_r_std__ios_base__r_std__ios_base, 0, 0},  {&_swigt__p_f_r_std__ios_base__r_std__ios_base, 0, 0, 0},  {&_swigt__p_f_r_std__ios_base__r_std__basic_iosT_char_std__char_traitsT_char_t_t, _p_f_r_std__ios_base__r_std__basic_iosT_char_std__char_traitsT_char_t_tTo_p_f_r_std__ios_base__r_std__ios_base, 0, 0},  {&_swigt__p_f_r_std__ios_base__r_std__basic_iostreamT_char_std__char_traitsT_char_t_t, _p_f_r_std__ios_base__r_std__basic_iostreamT_char_std__char_traitsT_char_t_tTo_p_f_r_std__ios_base__r_std__ios_base, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_first_type[] = {  {&_swigt__p_first_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_float[] = {  {&_swigt__p_float, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_fmtflags[] = {  {&_swigt__p_fmtflags, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_int[] = {  {&_swigt__p_int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_int_type[] = {  {&_swigt__p_int_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_iostate[] = {  {&_swigt__p_iostate, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_key_type[] = {  {&_swigt__p_key_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_long[] = {  {&_swigt__p_long, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_long_double[] = {  {&_swigt__p_long_double, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_long_long[] = {  {&_swigt__p_long_long, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mapped_type[] = {  {&_swigt__p_mapped_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_off_type[] = {  {&_swigt__p_off_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_openmode[] = {  {&_swigt__p_openmode, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_PyObject[] = {  {&_swigt__p_p_PyObject, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_char[] = {  {&_swigt__p_p_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_unsigned_long[] = {  {&_swigt__p_p_unsigned_long, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_void[] = {  {&_swigt__p_p_void, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_pos_type[] = {  {&_swigt__p_pos_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_second_type[] = {  {&_swigt__p_second_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_seekdir[] = {  {&_swigt__p_seekdir, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_short[] = {  {&_swigt__p_short, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_signed___int64[] = {  {&_swigt__p_signed___int64, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_signed_char[] = {  {&_swigt__p_signed_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_size_t[] = {  {&_swigt__p_size_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_size_type[] = {  {&_swigt__p_size_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_state_type[] = {  {&_swigt__p_state_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__basic_iosT_char_std__char_traitsT_char_t_t[] = {  {&_swigt__p_std__basic_iosT_char_std__char_traitsT_char_t_t, 0, 0, 0},  {&_swigt__p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, _p_std__basic_ostreamT_char_std__char_traitsT_char_t_tTo_p_std__basic_iosT_char_std__char_traitsT_char_t_t, 0, 0},  {&_swigt__p_std__basic_iostreamT_char_std__char_traitsT_char_t_t, _p_std__basic_iostreamT_char_std__char_traitsT_char_t_tTo_p_std__basic_iosT_char_std__char_traitsT_char_t_t, 0, 0},  {&_swigt__p_std__basic_istreamT_char_std__char_traitsT_char_t_t, _p_std__basic_istreamT_char_std__char_traitsT_char_t_tTo_p_std__basic_iosT_char_std__char_traitsT_char_t_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__basic_iostreamT_char_std__char_traitsT_char_t_t[] = {  {&_swigt__p_std__basic_iostreamT_char_std__char_traitsT_char_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__basic_istreamT_char_std__char_traitsT_char_t_t[] = {  {&_swigt__p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0, 0, 0},  {&_swigt__p_std__basic_iostreamT_char_std__char_traitsT_char_t_t, _p_std__basic_iostreamT_char_std__char_traitsT_char_t_tTo_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__basic_istreamT_char_std__char_traitsT_char_t_t__char_type[] = {  {&_swigt__p_char, 0, 0, 0},  {&_swigt__p_std__basic_istreamT_char_std__char_traitsT_char_t_t__char_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__basic_istreamT_char_std__char_traitsT_char_t_t__off_type[] = {  {&_swigt__p_std__basic_istreamT_char_std__char_traitsT_char_t_t__off_type, 0, 0, 0},  {&_swigt__p_std__basic_ostreamT_char_std__char_traitsT_char_t_t__off_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__basic_istreamT_char_std__char_traitsT_char_t_t__pos_type[] = {  {&_swigt__p_std__basic_istreamT_char_std__char_traitsT_char_t_t__pos_type, 0, 0, 0},  {&_swigt__p_std__basic_ostreamT_char_std__char_traitsT_char_t_t__pos_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__basic_ostreamT_char_std__char_traitsT_char_t_t[] = {  {&_swigt__p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0, 0, 0},  {&_swigt__p_std__basic_iostreamT_char_std__char_traitsT_char_t_t, _p_std__basic_iostreamT_char_std__char_traitsT_char_t_tTo_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__basic_ostreamT_char_std__char_traitsT_char_t_t__off_type[] = {  {&_swigt__p_std__basic_ostreamT_char_std__char_traitsT_char_t_t__off_type, 0, 0, 0},  {&_swigt__p_std__basic_istreamT_char_std__char_traitsT_char_t_t__off_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__basic_ostreamT_char_std__char_traitsT_char_t_t__pos_type[] = {  {&_swigt__p_std__basic_ostreamT_char_std__char_traitsT_char_t_t__pos_type, 0, 0, 0},  {&_swigt__p_std__basic_istreamT_char_std__char_traitsT_char_t_t__pos_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__basic_streambufT_char_std__char_traitsT_char_t_t[] = {  {&_swigt__p_std__basic_streambufT_char_std__char_traitsT_char_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t[] = {  {&_swigt__p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__exception[] = {  {&_swigt__p_std__exception, 0, 0, 0},  {&_swigt__p_OpenMM__OpenMMException, _p_OpenMM__OpenMMExceptionTo_p_std__exception, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__ios_base[] = {  {&_swigt__p_std__basic_iosT_char_std__char_traitsT_char_t_t, _p_std__basic_iosT_char_std__char_traitsT_char_t_tTo_p_std__ios_base, 0, 0},  {&_swigt__p_std__ios_base, 0, 0, 0},  {&_swigt__p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, _p_std__basic_ostreamT_char_std__char_traitsT_char_t_tTo_p_std__ios_base, 0, 0},  {&_swigt__p_std__basic_iostreamT_char_std__char_traitsT_char_t_t, _p_std__basic_iostreamT_char_std__char_traitsT_char_t_tTo_p_std__ios_base, 0, 0},  {&_swigt__p_std__basic_istreamT_char_std__char_traitsT_char_t_t, _p_std__basic_istreamT_char_std__char_traitsT_char_t_tTo_p_std__ios_base, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__lessT_std__string_t[] = {  {&_swigt__p_std__lessT_std__string_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__locale[] = {  {&_swigt__p_std__locale, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__mapT_std__string_std__string_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_std__string_t_t_t[] = {  {&_swigt__p_std__mapT_std__string_std__string_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_std__string_t_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__mapT_std__string_std__string_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_std__string_t_t_t__allocator_type[] = {  {&_swigt__p_std__mapT_std__string_std__string_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_std__string_t_t_t__allocator_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__pairT_int_int_t[] = {  {&_swigt__p_std__pairT_int_int_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__string[] = {  {&_swigt__p_std__string, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__type_info[] = {  {&_swigt__p_std__type_info, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_OpenMM__SerializationNode_std__allocatorT_OpenMM__SerializationNode_t_t[] = {  {&_swigt__p_std__vectorT_OpenMM__SerializationNode_std__allocatorT_OpenMM__SerializationNode_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_Vec3_std__allocatorT_Vec3_t_t[] = {  {&_swigt__p_std__vectorT_Vec3_std__allocatorT_Vec3_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_double_std__allocatorT_double_t_t[] = {  {&_swigt__p_std__vectorT_double_std__allocatorT_double_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_double_std__allocatorT_double_t_t__allocator_type[] = {  {&_swigt__p_std__vectorT_double_std__allocatorT_double_t_t__allocator_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_int_std__allocatorT_int_t_t[] = {  {&_swigt__p_std__vectorT_int_std__allocatorT_int_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_int_std__allocatorT_int_t_t__allocator_type[] = {  {&_swigt__p_std__vectorT_int_std__allocatorT_int_t_t__allocator_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_std__pairT_int_int_t_std__allocatorT_std__pairT_int_int_t_t_t[] = {  {&_swigt__p_std__vectorT_std__pairT_int_int_t_std__allocatorT_std__pairT_int_int_t_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_std__pairT_int_int_t_std__allocatorT_std__pairT_int_int_t_t_t__allocator_type[] = {  {&_swigt__p_std__vectorT_std__pairT_int_int_t_std__allocatorT_std__pairT_int_int_t_t_t__allocator_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_std__string_std__allocatorT_std__string_t_t[] = {  {&_swigt__p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_std__string_std__allocatorT_std__string_t_t__allocator_type[] = {  {&_swigt__p_std__vectorT_std__string_std__allocatorT_std__string_t_t__allocator_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_std__vectorT_int_std__allocatorT_int_t_t_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t_t[] = {  {&_swigt__p_std__vectorT_std__vectorT_int_std__allocatorT_int_t_t_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_std__vectorT_int_std__allocatorT_int_t_t_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t_t__allocator_type[] = {  {&_swigt__p_std__vectorT_std__vectorT_int_std__allocatorT_int_t_t_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t_t__allocator_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t_std__allocatorT_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t_t_t[] = {  {&_swigt__p_std__vectorT_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t_std__allocatorT_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t_std__allocatorT_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t_t_t__allocator_type[] = {  {&_swigt__p_std__vectorT_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t_std__allocatorT_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t_t_t__allocator_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t_std__allocatorT_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t_t_t__value_type[] = {  {&_swigt__p_std__vectorT_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t_std__allocatorT_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t_t_t__value_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_streamsize[] = {  {&_swigt__p_streamsize, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_swig__SwigPyIterator[] = {  {&_swigt__p_swig__SwigPyIterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_traits_type[] = {  {&_swigt__p_traits_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned___int64[] = {  {&_swigt__p_unsigned___int64, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_char[] = {  {&_swigt__p_unsigned_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_int[] = {  {&_swigt__p_unsigned_int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_long[] = {  {&_swigt__p_unsigned_long, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_long_long[] = {  {&_swigt__p_unsigned_long_long, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_short[] = {  {&_swigt__p_unsigned_short, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_value_type[] = {  {&_swigt__p_value_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_void[] = {  {&_swigt__p_void, 0, 0, 0},{0, 0, 0, 0}};

static swig_cast_info *swig_cast_initial[] = {
  _swigc__p_OpenMM__AmoebaGeneralizedKirkwoodForce,
  _swigc__p_OpenMM__AmoebaHarmonicAngleForce,
  _swigc__p_OpenMM__AmoebaHarmonicBondForce,
  _swigc__p_OpenMM__AmoebaHarmonicInPlaneAngleForce,
  _swigc__p_OpenMM__AmoebaMultipoleForce,
  _swigc__p_OpenMM__AmoebaOutOfPlaneBendForce,
  _swigc__p_OpenMM__AmoebaPiTorsionForce,
  _swigc__p_OpenMM__AmoebaStretchBendForce,
  _swigc__p_OpenMM__AmoebaTorsionForce,
  _swigc__p_OpenMM__AmoebaTorsionTorsionForce,
  _swigc__p_OpenMM__AmoebaUreyBradleyForce,
  _swigc__p_OpenMM__AmoebaVdwForce,
  _swigc__p_OpenMM__AmoebaWcaDispersionForce,
  _swigc__p_OpenMM__AndersenThermostat,
  _swigc__p_OpenMM__BrownianIntegrator,
  _swigc__p_OpenMM__CMAPTorsionForce,
  _swigc__p_OpenMM__CMMotionRemover,
  _swigc__p_OpenMM__Context,
  _swigc__p_OpenMM__CustomAngleForce,
  _swigc__p_OpenMM__CustomBondForce,
  _swigc__p_OpenMM__CustomExternalForce,
  _swigc__p_OpenMM__CustomGBForce,
  _swigc__p_OpenMM__CustomGBForce__ComputationType,
  _swigc__p_OpenMM__CustomHbondForce,
  _swigc__p_OpenMM__CustomIntegrator,
  _swigc__p_OpenMM__CustomIntegrator__ComputationType,
  _swigc__p_OpenMM__CustomNonbondedForce,
  _swigc__p_OpenMM__CustomTorsionForce,
  _swigc__p_OpenMM__Force,
  _swigc__p_OpenMM__GBSAOBCForce,
  _swigc__p_OpenMM__GBSAOBCSoftcoreForce,
  _swigc__p_OpenMM__GBVIForce,
  _swigc__p_OpenMM__GBVISoftcoreForce,
  _swigc__p_OpenMM__HarmonicAngleForce,
  _swigc__p_OpenMM__HarmonicBondForce,
  _swigc__p_OpenMM__Integrator,
  _swigc__p_OpenMM__LangevinIntegrator,
  _swigc__p_OpenMM__LocalEnergyMinimizer,
  _swigc__p_OpenMM__MonteCarloBarostat,
  _swigc__p_OpenMM__NonbondedForce,
  _swigc__p_OpenMM__NonbondedSoftcoreForce,
  _swigc__p_OpenMM__OpenMMException,
  _swigc__p_OpenMM__OutOfPlaneSite,
  _swigc__p_OpenMM__PeriodicTorsionForce,
  _swigc__p_OpenMM__Platform,
  _swigc__p_OpenMM__RBTorsionForce,
  _swigc__p_OpenMM__RPMDIntegrator,
  _swigc__p_OpenMM__SerializationNode,
  _swigc__p_OpenMM__SerializationProxy,
  _swigc__p_OpenMM__System,
  _swigc__p_OpenMM__ThreeParticleAverageSite,
  _swigc__p_OpenMM__TwoParticleAverageSite,
  _swigc__p_OpenMM__VariableLangevinIntegrator,
  _swigc__p_OpenMM__VariableVerletIntegrator,
  _swigc__p_OpenMM__VerletIntegrator,
  _swigc__p_OpenMM__VirtualSite,
  _swigc__p_OpenMM__XmlSerializer,
  _swigc__p_Vec3,
  _swigc__p___int64,
  _swigc__p_allocator_type,
  _swigc__p_bool,
  _swigc__p_char,
  _swigc__p_char_type,
  _swigc__p_difference_type,
  _swigc__p_double,
  _swigc__p_f_enum_std__ios_base__event_r_std__ios_base_int__void,
  _swigc__p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_iosT_char_std__char_traitsT_char_t_t,
  _swigc__p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_iostreamT_char_std__char_traitsT_char_t_t,
  _swigc__p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_istreamT_char_std__char_traitsT_char_t_t,
  _swigc__p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_ostreamT_char_std__char_traitsT_char_t_t,
  _swigc__p_f_r_std__basic_istream__char_std__char_traits__char______r_std__basic_iostreamT_char_std__char_traitsT_char_t_t,
  _swigc__p_f_r_std__basic_istream__char_std__char_traits__char______r_std__basic_istreamT_char_std__char_traitsT_char_t_t,
  _swigc__p_f_r_std__basic_ostream__char_std__char_traits__char______r_std__basic_iostreamT_char_std__char_traitsT_char_t_t,
  _swigc__p_f_r_std__basic_ostream__char_std__char_traits__char______r_std__basic_ostreamT_char_std__char_traitsT_char_t_t,
  _swigc__p_f_r_std__ios_base__r_std__basic_iosT_char_std__char_traitsT_char_t_t,
  _swigc__p_f_r_std__ios_base__r_std__basic_iostreamT_char_std__char_traitsT_char_t_t,
  _swigc__p_f_r_std__ios_base__r_std__basic_istreamT_char_std__char_traitsT_char_t_t,
  _swigc__p_f_r_std__ios_base__r_std__basic_ostreamT_char_std__char_traitsT_char_t_t,
  _swigc__p_f_r_std__ios_base__r_std__ios_base,
  _swigc__p_first_type,
  _swigc__p_float,
  _swigc__p_fmtflags,
  _swigc__p_int,
  _swigc__p_int_type,
  _swigc__p_iostate,
  _swigc__p_key_type,
  _swigc__p_long,
  _swigc__p_long_double,
  _swigc__p_long_long,
  _swigc__p_mapped_type,
  _swigc__p_off_type,
  _swigc__p_openmode,
  _swigc__p_p_PyObject,
  _swigc__p_p_char,
  _swigc__p_p_unsigned_long,
  _swigc__p_p_void,
  _swigc__p_pos_type,
  _swigc__p_second_type,
  _swigc__p_seekdir,
  _swigc__p_short,
  _swigc__p_signed___int64,
  _swigc__p_signed_char,
  _swigc__p_size_t,
  _swigc__p_size_type,
  _swigc__p_state_type,
  _swigc__p_std__basic_iosT_char_std__char_traitsT_char_t_t,
  _swigc__p_std__basic_iostreamT_char_std__char_traitsT_char_t_t,
  _swigc__p_std__basic_istreamT_char_std__char_traitsT_char_t_t,
  _swigc__p_std__basic_istreamT_char_std__char_traitsT_char_t_t__char_type,
  _swigc__p_std__basic_istreamT_char_std__char_traitsT_char_t_t__off_type,
  _swigc__p_std__basic_istreamT_char_std__char_traitsT_char_t_t__pos_type,
  _swigc__p_std__basic_ostreamT_char_std__char_traitsT_char_t_t,
  _swigc__p_std__basic_ostreamT_char_std__char_traitsT_char_t_t__off_type,
  _swigc__p_std__basic_ostreamT_char_std__char_traitsT_char_t_t__pos_type,
  _swigc__p_std__basic_streambufT_char_std__char_traitsT_char_t_t,
  _swigc__p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t,
  _swigc__p_std__exception,
  _swigc__p_std__ios_base,
  _swigc__p_std__lessT_std__string_t,
  _swigc__p_std__locale,
  _swigc__p_std__mapT_std__string_std__string_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_std__string_t_t_t,
  _swigc__p_std__mapT_std__string_std__string_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_std__string_t_t_t__allocator_type,
  _swigc__p_std__pairT_int_int_t,
  _swigc__p_std__string,
  _swigc__p_std__type_info,
  _swigc__p_std__vectorT_OpenMM__SerializationNode_std__allocatorT_OpenMM__SerializationNode_t_t,
  _swigc__p_std__vectorT_Vec3_std__allocatorT_Vec3_t_t,
  _swigc__p_std__vectorT_double_std__allocatorT_double_t_t,
  _swigc__p_std__vectorT_double_std__allocatorT_double_t_t__allocator_type,
  _swigc__p_std__vectorT_int_std__allocatorT_int_t_t,
  _swigc__p_std__vectorT_int_std__allocatorT_int_t_t__allocator_type,
  _swigc__p_std__vectorT_std__pairT_int_int_t_std__allocatorT_std__pairT_int_int_t_t_t,
  _swigc__p_std__vectorT_std__pairT_int_int_t_std__allocatorT_std__pairT_int_int_t_t_t__allocator_type,
  _swigc__p_std__vectorT_std__string_std__allocatorT_std__string_t_t,
  _swigc__p_std__vectorT_std__string_std__allocatorT_std__string_t_t__allocator_type,
  _swigc__p_std__vectorT_std__vectorT_int_std__allocatorT_int_t_t_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t_t,
  _swigc__p_std__vectorT_std__vectorT_int_std__allocatorT_int_t_t_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t_t__allocator_type,
  _swigc__p_std__vectorT_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t_std__allocatorT_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t_t_t,
  _swigc__p_std__vectorT_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t_std__allocatorT_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t_t_t__allocator_type,
  _swigc__p_std__vectorT_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t_std__allocatorT_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t_t_t__value_type,
  _swigc__p_streamsize,
  _swigc__p_swig__SwigPyIterator,
  _swigc__p_traits_type,
  _swigc__p_unsigned___int64,
  _swigc__p_unsigned_char,
  _swigc__p_unsigned_int,
  _swigc__p_unsigned_long,
  _swigc__p_unsigned_long_long,
  _swigc__p_unsigned_short,
  _swigc__p_value_type,
  _swigc__p_void,
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */

static swig_const_info swig_const_table[] = {
{ SWIG_PY_POINTER, (char*)"endl_cb_ptr", 0, 0, (void *)((std::basic_ostream< char,std::char_traits< char > > & (*)(std::basic_ostream< char,std::char_traits< char > > &))(std::endl< char,std::char_traits< char > >)), &SWIGTYPE_p_f_r_std__basic_ostream__char_std__char_traits__char______r_std__basic_ostreamT_char_std__char_traitsT_char_t_t },
{ SWIG_PY_POINTER, (char*)"ends_cb_ptr", 0, 0, (void *)((std::basic_ostream< char,std::char_traits< char > > & (*)(std::basic_ostream< char,std::char_traits< char > > &))(std::ends< char,std::char_traits< char > >)), &SWIGTYPE_p_f_r_std__basic_ostream__char_std__char_traits__char______r_std__basic_ostreamT_char_std__char_traitsT_char_t_t },
{ SWIG_PY_POINTER, (char*)"flush_cb_ptr", 0, 0, (void *)((std::basic_ostream< char,std::char_traits< char > > & (*)(std::basic_ostream< char,std::char_traits< char > > &))(std::flush< char,std::char_traits< char > >)), &SWIGTYPE_p_f_r_std__basic_ostream__char_std__char_traits__char______r_std__basic_ostreamT_char_std__char_traitsT_char_t_t },
{0, 0, 0, 0.0, 0, 0}};

#ifdef __cplusplus
}
#endif
/* -----------------------------------------------------------------------------
 * Type initialization:
 * This problem is tough by the requirement that no dynamic 
 * memory is used. Also, since swig_type_info structures store pointers to 
 * swig_cast_info structures and swig_cast_info structures store pointers back
 * to swig_type_info structures, we need some lookup code at initialization. 
 * The idea is that swig generates all the structures that are needed. 
 * The runtime then collects these partially filled structures. 
 * The SWIG_InitializeModule function takes these initial arrays out of 
 * swig_module, and does all the lookup, filling in the swig_module.types
 * array with the correct data and linking the correct swig_cast_info
 * structures together.
 *
 * The generated swig_type_info structures are assigned staticly to an initial 
 * array. We just loop through that array, and handle each type individually.
 * First we lookup if this type has been already loaded, and if so, use the
 * loaded structure instead of the generated one. Then we have to fill in the
 * cast linked list. The cast data is initially stored in something like a
 * two-dimensional array. Each row corresponds to a type (there are the same
 * number of rows as there are in the swig_type_initial array). Each entry in
 * a column is one of the swig_cast_info structures for that type.
 * The cast_initial array is actually an array of arrays, because each row has
 * a variable number of columns. So to actually build the cast linked list,
 * we find the array of casts associated with the type, and loop through it 
 * adding the casts to the list. The one last trick we need to do is making
 * sure the type pointer in the swig_cast_info struct is correct.
 *
 * First off, we lookup the cast->type name to see if it is already loaded. 
 * There are three cases to handle:
 *  1) If the cast->type has already been loaded AND the type we are adding
 *     casting info to has not been loaded (it is in this module), THEN we
 *     replace the cast->type pointer with the type pointer that has already
 *     been loaded.
 *  2) If BOTH types (the one we are adding casting info to, and the 
 *     cast->type) are loaded, THEN the cast info has already been loaded by
 *     the previous module so we just ignore it.
 *  3) Finally, if cast->type has not already been loaded, then we add that
 *     swig_cast_info to the linked list (because the cast->type) pointer will
 *     be correct.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#if 0
} /* c-mode */
#endif
#endif

#if 0
#define SWIGRUNTIME_DEBUG
#endif


SWIGRUNTIME void
SWIG_InitializeModule(void *clientdata) {
  size_t i;
  swig_module_info *module_head, *iter;
  int found, init;
  
  clientdata = clientdata;
  
  /* check to see if the circular list has been setup, if not, set it up */
  if (swig_module.next==0) {
    /* Initialize the swig_module */
    swig_module.type_initial = swig_type_initial;
    swig_module.cast_initial = swig_cast_initial;
    swig_module.next = &swig_module;
    init = 1;
  } else {
    init = 0;
  }
  
  /* Try and load any already created modules */
  module_head = SWIG_GetModule(clientdata);
  if (!module_head) {
    /* This is the first module loaded for this interpreter */
    /* so set the swig module into the interpreter */
    SWIG_SetModule(clientdata, &swig_module);
    module_head = &swig_module;
  } else {
    /* the interpreter has loaded a SWIG module, but has it loaded this one? */
    found=0;
    iter=module_head;
    do {
      if (iter==&swig_module) {
        found=1;
        break;
      }
      iter=iter->next;
    } while (iter!= module_head);
    
    /* if the is found in the list, then all is done and we may leave */
    if (found) return;
    /* otherwise we must add out module into the list */
    swig_module.next = module_head->next;
    module_head->next = &swig_module;
  }
  
  /* When multiple interpeters are used, a module could have already been initialized in
       a different interpreter, but not yet have a pointer in this interpreter.
       In this case, we do not want to continue adding types... everything should be
       set up already */
  if (init == 0) return;
  
  /* Now work on filling in swig_module.types */
#ifdef SWIGRUNTIME_DEBUG
  printf("SWIG_InitializeModule: size %d\n", swig_module.size);
#endif
  for (i = 0; i < swig_module.size; ++i) {
    swig_type_info *type = 0;
    swig_type_info *ret;
    swig_cast_info *cast;
    
#ifdef SWIGRUNTIME_DEBUG
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
#endif
    
    /* if there is another module already loaded */
    if (swig_module.next != &swig_module) {
      type = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, swig_module.type_initial[i]->name);
    }
    if (type) {
      /* Overwrite clientdata field */
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found type %s\n", type->name);
#endif
      if (swig_module.type_initial[i]->clientdata) {
        type->clientdata = swig_module.type_initial[i]->clientdata;
#ifdef SWIGRUNTIME_DEBUG
        printf("SWIG_InitializeModule: found and overwrite type %s \n", type->name);
#endif
      }
    } else {
      type = swig_module.type_initial[i];
    }
    
    /* Insert casting types */
    cast = swig_module.cast_initial[i];
    while (cast->type) {
      /* Don't need to add information already in the list */
      ret = 0;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: look cast %s\n", cast->type->name);
#endif
      if (swig_module.next != &swig_module) {
        ret = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, cast->type->name);
#ifdef SWIGRUNTIME_DEBUG
        if (ret) printf("SWIG_InitializeModule: found cast %s\n", ret->name);
#endif
      }
      if (ret) {
        if (type == swig_module.type_initial[i]) {
#ifdef SWIGRUNTIME_DEBUG
          printf("SWIG_InitializeModule: skip old type %s\n", ret->name);
#endif
          cast->type = ret;
          ret = 0;
        } else {
          /* Check for casting already in the list */
          swig_cast_info *ocast = SWIG_TypeCheck(ret->name, type);
#ifdef SWIGRUNTIME_DEBUG
          if (ocast) printf("SWIG_InitializeModule: skip old cast %s\n", ret->name);
#endif
          if (!ocast) ret = 0;
        }
      }
      
      if (!ret) {
#ifdef SWIGRUNTIME_DEBUG
        printf("SWIG_InitializeModule: adding cast %s\n", cast->type->name);
#endif
        if (type->cast) {
          type->cast->prev = cast;
          cast->next = type->cast;
        }
        type->cast = cast;
      }
      cast++;
    }
    /* Set entry in modules->types array equal to the type */
    swig_module.types[i] = type;
  }
  swig_module.types[i] = 0;
  
#ifdef SWIGRUNTIME_DEBUG
  printf("**** SWIG_InitializeModule: Cast List ******\n");
  for (i = 0; i < swig_module.size; ++i) {
    int j = 0;
    swig_cast_info *cast = swig_module.cast_initial[i];
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
    while (cast->type) {
      printf("SWIG_InitializeModule: cast type %s\n", cast->type->name);
      cast++;
      ++j;
    }
    printf("---- Total casts: %d\n",j);
  }
  printf("**** SWIG_InitializeModule: Cast List ******\n");
#endif
}

/* This function will propagate the clientdata field of type to
* any new swig_type_info structures that have been added into the list
* of equivalent types.  It is like calling
* SWIG_TypeClientData(type, clientdata) a second time.
*/
SWIGRUNTIME void
SWIG_PropagateClientData(void) {
  size_t i;
  swig_cast_info *equiv;
  static int init_run = 0;
  
  if (init_run) return;
  init_run = 1;
  
  for (i = 0; i < swig_module.size; i++) {
    if (swig_module.types[i]->clientdata) {
      equiv = swig_module.types[i]->cast;
      while (equiv) {
        if (!equiv->converter) {
          if (equiv->type && !equiv->type->clientdata)
          SWIG_TypeClientData(equiv->type, swig_module.types[i]->clientdata);
        }
        equiv = equiv->next;
      }
    }
  }
}

#ifdef __cplusplus
#if 0
{
  /* c-mode */
#endif
}
#endif



#ifdef __cplusplus
extern "C" {
#endif
  
  /* Python-specific SWIG API */
#define SWIG_newvarlink()                             SWIG_Python_newvarlink()
#define SWIG_addvarlink(p, name, get_attr, set_attr)  SWIG_Python_addvarlink(p, name, get_attr, set_attr)
#define SWIG_InstallConstants(d, constants)           SWIG_Python_InstallConstants(d, constants)
  
  /* -----------------------------------------------------------------------------
   * global variable support code.
   * ----------------------------------------------------------------------------- */
  
  typedef struct swig_globalvar {
    char       *name;                  /* Name of global variable */
    PyObject *(*get_attr)(void);       /* Return the current value */
    int       (*set_attr)(PyObject *); /* Set the value */
    struct swig_globalvar *next;
  } swig_globalvar;
  
  typedef struct swig_varlinkobject {
    PyObject_HEAD
    swig_globalvar *vars;
  } swig_varlinkobject;
  
  SWIGINTERN PyObject *
  swig_varlink_repr(swig_varlinkobject *SWIGUNUSEDPARM(v)) {
#if PY_VERSION_HEX >= 0x03000000
    return PyUnicode_InternFromString("<Swig global variables>");
#else
    return PyString_FromString("<Swig global variables>");
#endif
  }
  
  SWIGINTERN PyObject *
  swig_varlink_str(swig_varlinkobject *v) {
#if PY_VERSION_HEX >= 0x03000000
    PyObject *str = PyUnicode_InternFromString("(");
    PyObject *tail;
    PyObject *joined;
    swig_globalvar *var;
    for (var = v->vars; var; var=var->next) {
      tail = PyUnicode_FromString(var->name);
      joined = PyUnicode_Concat(str, tail);
      Py_DecRef(str);
      Py_DecRef(tail);
      str = joined;
      if (var->next) {
        tail = PyUnicode_InternFromString(", ");
        joined = PyUnicode_Concat(str, tail);
        Py_DecRef(str);
        Py_DecRef(tail);
        str = joined;
      }
    }
    tail = PyUnicode_InternFromString(")");
    joined = PyUnicode_Concat(str, tail);
    Py_DecRef(str);
    Py_DecRef(tail);
    str = joined;
#else
    PyObject *str = PyString_FromString("(");
    swig_globalvar *var;
    for (var = v->vars; var; var=var->next) {
      PyString_ConcatAndDel(&str,PyString_FromString(var->name));
      if (var->next) PyString_ConcatAndDel(&str,PyString_FromString(", "));
    }
    PyString_ConcatAndDel(&str,PyString_FromString(")"));
#endif
    return str;
  }
  
  SWIGINTERN int
  swig_varlink_print(swig_varlinkobject *v, FILE *fp, int SWIGUNUSEDPARM(flags)) {
    char *tmp;
    PyObject *str = swig_varlink_str(v);
    fprintf(fp,"Swig global variables ");
    fprintf(fp,"%s\n", tmp = SWIG_Python_str_AsChar(str));
    SWIG_Python_str_DelForPy3(tmp);
    Py_DECREF(str);
    return 0;
  }
  
  SWIGINTERN void
  swig_varlink_dealloc(swig_varlinkobject *v) {
    swig_globalvar *var = v->vars;
    while (var) {
      swig_globalvar *n = var->next;
      free(var->name);
      free(var);
      var = n;
    }
  }
  
  SWIGINTERN PyObject *
  swig_varlink_getattr(swig_varlinkobject *v, char *n) {
    PyObject *res = NULL;
    swig_globalvar *var = v->vars;
    while (var) {
      if (strcmp(var->name,n) == 0) {
        res = (*var->get_attr)();
        break;
      }
      var = var->next;
    }
    if (res == NULL && !PyErr_Occurred()) {
      PyErr_SetString(PyExc_NameError,"Unknown C global variable");
    }
    return res;
  }
  
  SWIGINTERN int
  swig_varlink_setattr(swig_varlinkobject *v, char *n, PyObject *p) {
    int res = 1;
    swig_globalvar *var = v->vars;
    while (var) {
      if (strcmp(var->name,n) == 0) {
        res = (*var->set_attr)(p);
        break;
      }
      var = var->next;
    }
    if (res == 1 && !PyErr_Occurred()) {
      PyErr_SetString(PyExc_NameError,"Unknown C global variable");
    }
    return res;
  }
  
  SWIGINTERN PyTypeObject*
  swig_varlink_type(void) {
    static char varlink__doc__[] = "Swig var link object";
    static PyTypeObject varlink_type;
    static int type_init = 0;  
    if (!type_init) {
      const PyTypeObject tmp
      = {
        /* PyObject header changed in Python 3 */
#if PY_VERSION_HEX >= 0x03000000
        PyVarObject_HEAD_INIT(&PyType_Type, 0)
#else
        PyObject_HEAD_INIT(NULL)
        0,                                  /* Number of items in variable part (ob_size) */
#endif
        (char *)"swigvarlink",              /* Type name (tp_name) */
        sizeof(swig_varlinkobject),         /* Basic size (tp_basicsize) */
        0,                                  /* Itemsize (tp_itemsize) */
        (destructor) swig_varlink_dealloc,  /* Deallocator (tp_dealloc) */ 
        (printfunc) swig_varlink_print,     /* Print (tp_print) */
        (getattrfunc) swig_varlink_getattr, /* get attr (tp_getattr) */
        (setattrfunc) swig_varlink_setattr, /* Set attr (tp_setattr) */
        0,                                  /* tp_compare */
        (reprfunc) swig_varlink_repr,       /* tp_repr */
        0,                                  /* tp_as_number */
        0,                                  /* tp_as_sequence */
        0,                                  /* tp_as_mapping */
        0,                                  /* tp_hash */
        0,                                  /* tp_call */
        (reprfunc) swig_varlink_str,        /* tp_str */
        0,                                  /* tp_getattro */
        0,                                  /* tp_setattro */
        0,                                  /* tp_as_buffer */
        0,                                  /* tp_flags */
        varlink__doc__,                     /* tp_doc */
        0,                                  /* tp_traverse */
        0,                                  /* tp_clear */
        0,                                  /* tp_richcompare */
        0,                                  /* tp_weaklistoffset */
#if PY_VERSION_HEX >= 0x02020000
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, /* tp_iter -> tp_weaklist */
#endif
#if PY_VERSION_HEX >= 0x02030000
        0,                                  /* tp_del */
#endif
#ifdef COUNT_ALLOCS
        0,0,0,0                             /* tp_alloc -> tp_next */
#endif
      };
      varlink_type = tmp;
      /* for Python 3 we already assigned ob_type in PyVarObject_HEAD_INIT() */
#if PY_VERSION_HEX < 0x03000000
      varlink_type.ob_type = &PyType_Type;
#endif
      type_init = 1;
    }
    return &varlink_type;
  }
  
  /* Create a variable linking object for use later */
  SWIGINTERN PyObject *
  SWIG_Python_newvarlink(void) {
    swig_varlinkobject *result = PyObject_NEW(swig_varlinkobject, swig_varlink_type());
    if (result) {
      result->vars = 0;
    }
    return ((PyObject*) result);
  }
  
  SWIGINTERN void 
  SWIG_Python_addvarlink(PyObject *p, char *name, PyObject *(*get_attr)(void), int (*set_attr)(PyObject *p)) {
    swig_varlinkobject *v = (swig_varlinkobject *) p;
    swig_globalvar *gv = (swig_globalvar *) malloc(sizeof(swig_globalvar));
    if (gv) {
      size_t size = strlen(name)+1;
      gv->name = (char *)malloc(size);
      if (gv->name) {
        strncpy(gv->name,name,size);
        gv->get_attr = get_attr;
        gv->set_attr = set_attr;
        gv->next = v->vars;
      }
    }
    v->vars = gv;
  }
  
  SWIGINTERN PyObject *
  SWIG_globals(void) {
    static PyObject *_SWIG_globals = 0; 
    if (!_SWIG_globals) _SWIG_globals = SWIG_newvarlink();  
    return _SWIG_globals;
  }
  
  /* -----------------------------------------------------------------------------
   * constants/methods manipulation
   * ----------------------------------------------------------------------------- */
  
  /* Install Constants */
  SWIGINTERN void
  SWIG_Python_InstallConstants(PyObject *d, swig_const_info constants[]) {
    PyObject *obj = 0;
    size_t i;
    for (i = 0; constants[i].type; ++i) {
      switch(constants[i].type) {
      case SWIG_PY_POINTER:
        obj = SWIG_NewPointerObj(constants[i].pvalue, *(constants[i]).ptype,0);
        break;
      case SWIG_PY_BINARY:
        obj = SWIG_NewPackedObj(constants[i].pvalue, constants[i].lvalue, *(constants[i].ptype));
        break;
      default:
        obj = 0;
        break;
      }
      if (obj) {
        PyDict_SetItemString(d, constants[i].name, obj);
        Py_DECREF(obj);
      }
    }
  }
  
  /* -----------------------------------------------------------------------------*/
  /* Fix SwigMethods to carry the callback ptrs when needed */
  /* -----------------------------------------------------------------------------*/
  
  SWIGINTERN void
  SWIG_Python_FixMethods(PyMethodDef *methods,
    swig_const_info *const_table,
    swig_type_info **types,
    swig_type_info **types_initial) {
    size_t i;
    for (i = 0; methods[i].ml_name; ++i) {
      const char *c = methods[i].ml_doc;
      if (c && (c = strstr(c, "swig_ptr: "))) {
        int j;
        swig_const_info *ci = 0;
        const char *name = c + 10;
        for (j = 0; const_table[j].type; ++j) {
          if (strncmp(const_table[j].name, name, 
              strlen(const_table[j].name)) == 0) {
            ci = &(const_table[j]);
            break;
          }
        }
        if (ci) {
          void *ptr = (ci->type == SWIG_PY_POINTER) ? ci->pvalue : 0;
          if (ptr) {
            size_t shift = (ci->ptype) - types;
            swig_type_info *ty = types_initial[shift];
            size_t ldoc = (c - methods[i].ml_doc);
            size_t lptr = strlen(ty->name)+2*sizeof(void*)+2;
            char *ndoc = (char*)malloc(ldoc + lptr + 10);
            if (ndoc) {
              char *buff = ndoc;
              strncpy(buff, methods[i].ml_doc, ldoc);
              buff += ldoc;
              strncpy(buff, "swig_ptr: ", 10);
              buff += 10;
              SWIG_PackVoidPtr(buff, ptr, ty->name, lptr);
              methods[i].ml_doc = ndoc;
            }
          }
        }
      }
    }
  } 
  
#ifdef __cplusplus
}
#endif

/* -----------------------------------------------------------------------------*
 *  Partial Init method
 * -----------------------------------------------------------------------------*/

#ifdef __cplusplus
extern "C"
#endif

SWIGEXPORT 
#if PY_VERSION_HEX >= 0x03000000
PyObject*
#else
void
#endif
SWIG_init(void) {
  PyObject *m, *d;  
#if PY_VERSION_HEX >= 0x03000000
  static struct PyModuleDef SWIG_module = {
    PyModuleDef_HEAD_INIT,
    (char *) SWIG_name,
    NULL,
    -1,
    SwigMethods,
    NULL,
    NULL,
    NULL,
    NULL
  };
#endif
  
  /* Fix SwigMethods to carry the callback ptrs when needed */
  SWIG_Python_FixMethods(SwigMethods, swig_const_table, swig_types, swig_type_initial);
  
#if PY_VERSION_HEX >= 0x03000000
  m = PyModule_Create(&SWIG_module);
#else
  m = Py_InitModule((char *) SWIG_name, SwigMethods);
#endif
  d = PyModule_GetDict(m);
  
  SWIG_InitializeModule(0);
  SWIG_InstallConstants(d,swig_const_table);
  
  
  PyDict_SetItemString(d,(char*)"cvar", SWIG_globals());
  SWIG_addvarlink(SWIG_globals(),(char*)"ios_base_boolalpha",Swig_var_ios_base_boolalpha_get, Swig_var_ios_base_boolalpha_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ios_base_dec",Swig_var_ios_base_dec_get, Swig_var_ios_base_dec_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ios_base_fixed",Swig_var_ios_base_fixed_get, Swig_var_ios_base_fixed_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ios_base_hex",Swig_var_ios_base_hex_get, Swig_var_ios_base_hex_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ios_base_internal",Swig_var_ios_base_internal_get, Swig_var_ios_base_internal_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ios_base_left",Swig_var_ios_base_left_get, Swig_var_ios_base_left_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ios_base_oct",Swig_var_ios_base_oct_get, Swig_var_ios_base_oct_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ios_base_right",Swig_var_ios_base_right_get, Swig_var_ios_base_right_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ios_base_scientific",Swig_var_ios_base_scientific_get, Swig_var_ios_base_scientific_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ios_base_showbase",Swig_var_ios_base_showbase_get, Swig_var_ios_base_showbase_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ios_base_showpoint",Swig_var_ios_base_showpoint_get, Swig_var_ios_base_showpoint_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ios_base_showpos",Swig_var_ios_base_showpos_get, Swig_var_ios_base_showpos_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ios_base_skipws",Swig_var_ios_base_skipws_get, Swig_var_ios_base_skipws_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ios_base_unitbuf",Swig_var_ios_base_unitbuf_get, Swig_var_ios_base_unitbuf_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ios_base_uppercase",Swig_var_ios_base_uppercase_get, Swig_var_ios_base_uppercase_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ios_base_adjustfield",Swig_var_ios_base_adjustfield_get, Swig_var_ios_base_adjustfield_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ios_base_basefield",Swig_var_ios_base_basefield_get, Swig_var_ios_base_basefield_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ios_base_floatfield",Swig_var_ios_base_floatfield_get, Swig_var_ios_base_floatfield_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ios_base_badbit",Swig_var_ios_base_badbit_get, Swig_var_ios_base_badbit_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ios_base_eofbit",Swig_var_ios_base_eofbit_get, Swig_var_ios_base_eofbit_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ios_base_failbit",Swig_var_ios_base_failbit_get, Swig_var_ios_base_failbit_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ios_base_goodbit",Swig_var_ios_base_goodbit_get, Swig_var_ios_base_goodbit_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ios_base_app",Swig_var_ios_base_app_get, Swig_var_ios_base_app_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ios_base_ate",Swig_var_ios_base_ate_get, Swig_var_ios_base_ate_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ios_base_binary",Swig_var_ios_base_binary_get, Swig_var_ios_base_binary_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ios_base_ios_base_in",Swig_var_ios_base_ios_base_in_get, Swig_var_ios_base_ios_base_in_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ios_base_out",Swig_var_ios_base_out_get, Swig_var_ios_base_out_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ios_base_trunc",Swig_var_ios_base_trunc_get, Swig_var_ios_base_trunc_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ios_base_beg",Swig_var_ios_base_beg_get, Swig_var_ios_base_beg_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ios_base_cur",Swig_var_ios_base_cur_get, Swig_var_ios_base_cur_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ios_base_end",Swig_var_ios_base_end_get, Swig_var_ios_base_end_set);
  SWIG_Python_SetConstant(d, "ios_base_erase_event",SWIG_From_int(static_cast< int >(std::ios_base::erase_event)));
  SWIG_Python_SetConstant(d, "ios_base_imbue_event",SWIG_From_int(static_cast< int >(std::ios_base::imbue_event)));
  SWIG_Python_SetConstant(d, "ios_base_copyfmt_event",SWIG_From_int(static_cast< int >(std::ios_base::copyfmt_event)));
  SWIG_addvarlink(SWIG_globals(),(char*)"cin",Swig_var_cin_get, Swig_var_cin_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"cout",Swig_var_cout_get, Swig_var_cout_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"cerr",Swig_var_cerr_get, Swig_var_cerr_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"clog",Swig_var_clog_get, Swig_var_clog_set);
  
  
  
  SWIG_addvarlink(SWIG_globals(),(char*)"NmPerAngstrom",Swig_var_NmPerAngstrom_get, Swig_var_NmPerAngstrom_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"AngstromsPerNm",Swig_var_AngstromsPerNm_get, Swig_var_AngstromsPerNm_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"PsPerFs",Swig_var_PsPerFs_get, Swig_var_PsPerFs_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"FsPerPs",Swig_var_FsPerPs_get, Swig_var_FsPerPs_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"KJPerKcal",Swig_var_KJPerKcal_get, Swig_var_KJPerKcal_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"KcalPerKJ",Swig_var_KcalPerKJ_get, Swig_var_KcalPerKJ_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"RadiansPerDegree",Swig_var_RadiansPerDegree_get, Swig_var_RadiansPerDegree_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"DegreesPerRadian",Swig_var_DegreesPerRadian_get, Swig_var_DegreesPerRadian_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"SigmaPerVdwRadius",Swig_var_SigmaPerVdwRadius_get, Swig_var_SigmaPerVdwRadius_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"VdwRadiusPerSigma",Swig_var_VdwRadiusPerSigma_get, Swig_var_VdwRadiusPerSigma_set);
  SWIG_Python_SetConstant(d, "AmoebaMultipoleForce_NoCutoff",SWIG_From_int(static_cast< int >(OpenMM::AmoebaMultipoleForce::NoCutoff)));
  SWIG_Python_SetConstant(d, "AmoebaMultipoleForce_PME",SWIG_From_int(static_cast< int >(OpenMM::AmoebaMultipoleForce::PME)));
  SWIG_Python_SetConstant(d, "AmoebaMultipoleForce_Mutual",SWIG_From_int(static_cast< int >(OpenMM::AmoebaMultipoleForce::Mutual)));
  SWIG_Python_SetConstant(d, "AmoebaMultipoleForce_Direct",SWIG_From_int(static_cast< int >(OpenMM::AmoebaMultipoleForce::Direct)));
  SWIG_Python_SetConstant(d, "AmoebaMultipoleForce_ZThenX",SWIG_From_int(static_cast< int >(OpenMM::AmoebaMultipoleForce::ZThenX)));
  SWIG_Python_SetConstant(d, "AmoebaMultipoleForce_Bisector",SWIG_From_int(static_cast< int >(OpenMM::AmoebaMultipoleForce::Bisector)));
  SWIG_Python_SetConstant(d, "AmoebaMultipoleForce_ZBisect",SWIG_From_int(static_cast< int >(OpenMM::AmoebaMultipoleForce::ZBisect)));
  SWIG_Python_SetConstant(d, "AmoebaMultipoleForce_ThreeFold",SWIG_From_int(static_cast< int >(OpenMM::AmoebaMultipoleForce::ThreeFold)));
  SWIG_Python_SetConstant(d, "AmoebaMultipoleForce_ZOnly",SWIG_From_int(static_cast< int >(OpenMM::AmoebaMultipoleForce::ZOnly)));
  SWIG_Python_SetConstant(d, "AmoebaMultipoleForce_NoAxisType",SWIG_From_int(static_cast< int >(OpenMM::AmoebaMultipoleForce::NoAxisType)));
  SWIG_Python_SetConstant(d, "AmoebaMultipoleForce_LastAxisTypeIndex",SWIG_From_int(static_cast< int >(OpenMM::AmoebaMultipoleForce::LastAxisTypeIndex)));
  SWIG_Python_SetConstant(d, "AmoebaMultipoleForce_SOR",SWIG_From_int(static_cast< int >(OpenMM::AmoebaMultipoleForce::SOR)));
  SWIG_Python_SetConstant(d, "AmoebaMultipoleForce_Covalent12",SWIG_From_int(static_cast< int >(OpenMM::AmoebaMultipoleForce::Covalent12)));
  SWIG_Python_SetConstant(d, "AmoebaMultipoleForce_Covalent13",SWIG_From_int(static_cast< int >(OpenMM::AmoebaMultipoleForce::Covalent13)));
  SWIG_Python_SetConstant(d, "AmoebaMultipoleForce_Covalent14",SWIG_From_int(static_cast< int >(OpenMM::AmoebaMultipoleForce::Covalent14)));
  SWIG_Python_SetConstant(d, "AmoebaMultipoleForce_Covalent15",SWIG_From_int(static_cast< int >(OpenMM::AmoebaMultipoleForce::Covalent15)));
  SWIG_Python_SetConstant(d, "AmoebaMultipoleForce_PolarizationCovalent11",SWIG_From_int(static_cast< int >(OpenMM::AmoebaMultipoleForce::PolarizationCovalent11)));
  SWIG_Python_SetConstant(d, "AmoebaMultipoleForce_PolarizationCovalent12",SWIG_From_int(static_cast< int >(OpenMM::AmoebaMultipoleForce::PolarizationCovalent12)));
  SWIG_Python_SetConstant(d, "AmoebaMultipoleForce_PolarizationCovalent13",SWIG_From_int(static_cast< int >(OpenMM::AmoebaMultipoleForce::PolarizationCovalent13)));
  SWIG_Python_SetConstant(d, "AmoebaMultipoleForce_PolarizationCovalent14",SWIG_From_int(static_cast< int >(OpenMM::AmoebaMultipoleForce::PolarizationCovalent14)));
  SWIG_Python_SetConstant(d, "AmoebaMultipoleForce_CovalentEnd",SWIG_From_int(static_cast< int >(OpenMM::AmoebaMultipoleForce::CovalentEnd)));
  SWIG_Python_SetConstant(d, "CustomGBForce_NoCutoff",SWIG_From_int(static_cast< int >(OpenMM::CustomGBForce::NoCutoff)));
  SWIG_Python_SetConstant(d, "CustomGBForce_CutoffNonPeriodic",SWIG_From_int(static_cast< int >(OpenMM::CustomGBForce::CutoffNonPeriodic)));
  SWIG_Python_SetConstant(d, "CustomGBForce_CutoffPeriodic",SWIG_From_int(static_cast< int >(OpenMM::CustomGBForce::CutoffPeriodic)));
  SWIG_Python_SetConstant(d, "CustomGBForce_SingleParticle",SWIG_From_int(static_cast< int >(OpenMM::CustomGBForce::SingleParticle)));
  SWIG_Python_SetConstant(d, "CustomGBForce_ParticlePair",SWIG_From_int(static_cast< int >(OpenMM::CustomGBForce::ParticlePair)));
  SWIG_Python_SetConstant(d, "CustomGBForce_ParticlePairNoExclusions",SWIG_From_int(static_cast< int >(OpenMM::CustomGBForce::ParticlePairNoExclusions)));
  SWIG_Python_SetConstant(d, "CustomHbondForce_NoCutoff",SWIG_From_int(static_cast< int >(OpenMM::CustomHbondForce::NoCutoff)));
  SWIG_Python_SetConstant(d, "CustomHbondForce_CutoffNonPeriodic",SWIG_From_int(static_cast< int >(OpenMM::CustomHbondForce::CutoffNonPeriodic)));
  SWIG_Python_SetConstant(d, "CustomHbondForce_CutoffPeriodic",SWIG_From_int(static_cast< int >(OpenMM::CustomHbondForce::CutoffPeriodic)));
  SWIG_Python_SetConstant(d, "CustomIntegrator_ComputeGlobal",SWIG_From_int(static_cast< int >(OpenMM::CustomIntegrator::ComputeGlobal)));
  SWIG_Python_SetConstant(d, "CustomIntegrator_ComputePerDof",SWIG_From_int(static_cast< int >(OpenMM::CustomIntegrator::ComputePerDof)));
  SWIG_Python_SetConstant(d, "CustomIntegrator_ComputeSum",SWIG_From_int(static_cast< int >(OpenMM::CustomIntegrator::ComputeSum)));
  SWIG_Python_SetConstant(d, "CustomIntegrator_ConstrainPositions",SWIG_From_int(static_cast< int >(OpenMM::CustomIntegrator::ConstrainPositions)));
  SWIG_Python_SetConstant(d, "CustomIntegrator_ConstrainVelocities",SWIG_From_int(static_cast< int >(OpenMM::CustomIntegrator::ConstrainVelocities)));
  SWIG_Python_SetConstant(d, "CustomIntegrator_UpdateContextState",SWIG_From_int(static_cast< int >(OpenMM::CustomIntegrator::UpdateContextState)));
  SWIG_Python_SetConstant(d, "CustomNonbondedForce_NoCutoff",SWIG_From_int(static_cast< int >(OpenMM::CustomNonbondedForce::NoCutoff)));
  SWIG_Python_SetConstant(d, "CustomNonbondedForce_CutoffNonPeriodic",SWIG_From_int(static_cast< int >(OpenMM::CustomNonbondedForce::CutoffNonPeriodic)));
  SWIG_Python_SetConstant(d, "CustomNonbondedForce_CutoffPeriodic",SWIG_From_int(static_cast< int >(OpenMM::CustomNonbondedForce::CutoffPeriodic)));
  SWIG_Python_SetConstant(d, "GBSAOBCForce_NoCutoff",SWIG_From_int(static_cast< int >(OpenMM::GBSAOBCForce::NoCutoff)));
  SWIG_Python_SetConstant(d, "GBSAOBCForce_CutoffNonPeriodic",SWIG_From_int(static_cast< int >(OpenMM::GBSAOBCForce::CutoffNonPeriodic)));
  SWIG_Python_SetConstant(d, "GBSAOBCForce_CutoffPeriodic",SWIG_From_int(static_cast< int >(OpenMM::GBSAOBCForce::CutoffPeriodic)));
  SWIG_Python_SetConstant(d, "GBSAOBCSoftcoreForce_NoCutoff",SWIG_From_int(static_cast< int >(OpenMM::GBSAOBCSoftcoreForce::NoCutoff)));
  SWIG_Python_SetConstant(d, "GBSAOBCSoftcoreForce_CutoffNonPeriodic",SWIG_From_int(static_cast< int >(OpenMM::GBSAOBCSoftcoreForce::CutoffNonPeriodic)));
  SWIG_Python_SetConstant(d, "GBSAOBCSoftcoreForce_CutoffPeriodic",SWIG_From_int(static_cast< int >(OpenMM::GBSAOBCSoftcoreForce::CutoffPeriodic)));
  SWIG_Python_SetConstant(d, "GBVIForce_NoCutoff",SWIG_From_int(static_cast< int >(OpenMM::GBVIForce::NoCutoff)));
  SWIG_Python_SetConstant(d, "GBVIForce_CutoffNonPeriodic",SWIG_From_int(static_cast< int >(OpenMM::GBVIForce::CutoffNonPeriodic)));
  SWIG_Python_SetConstant(d, "GBVIForce_CutoffPeriodic",SWIG_From_int(static_cast< int >(OpenMM::GBVIForce::CutoffPeriodic)));
  SWIG_Python_SetConstant(d, "GBVIForce_NoScaling",SWIG_From_int(static_cast< int >(OpenMM::GBVIForce::NoScaling)));
  SWIG_Python_SetConstant(d, "GBVIForce_QuinticSpline",SWIG_From_int(static_cast< int >(OpenMM::GBVIForce::QuinticSpline)));
  SWIG_Python_SetConstant(d, "GBVISoftcoreForce_NoCutoff",SWIG_From_int(static_cast< int >(OpenMM::GBVISoftcoreForce::NoCutoff)));
  SWIG_Python_SetConstant(d, "GBVISoftcoreForce_CutoffNonPeriodic",SWIG_From_int(static_cast< int >(OpenMM::GBVISoftcoreForce::CutoffNonPeriodic)));
  SWIG_Python_SetConstant(d, "GBVISoftcoreForce_CutoffPeriodic",SWIG_From_int(static_cast< int >(OpenMM::GBVISoftcoreForce::CutoffPeriodic)));
  SWIG_Python_SetConstant(d, "GBVISoftcoreForce_NoScaling",SWIG_From_int(static_cast< int >(OpenMM::GBVISoftcoreForce::NoScaling)));
  SWIG_Python_SetConstant(d, "GBVISoftcoreForce_QuinticSpline",SWIG_From_int(static_cast< int >(OpenMM::GBVISoftcoreForce::QuinticSpline)));
  SWIG_Python_SetConstant(d, "NonbondedForce_NoCutoff",SWIG_From_int(static_cast< int >(OpenMM::NonbondedForce::NoCutoff)));
  SWIG_Python_SetConstant(d, "NonbondedForce_CutoffNonPeriodic",SWIG_From_int(static_cast< int >(OpenMM::NonbondedForce::CutoffNonPeriodic)));
  SWIG_Python_SetConstant(d, "NonbondedForce_CutoffPeriodic",SWIG_From_int(static_cast< int >(OpenMM::NonbondedForce::CutoffPeriodic)));
  SWIG_Python_SetConstant(d, "NonbondedForce_Ewald",SWIG_From_int(static_cast< int >(OpenMM::NonbondedForce::Ewald)));
  SWIG_Python_SetConstant(d, "NonbondedForce_PME",SWIG_From_int(static_cast< int >(OpenMM::NonbondedForce::PME)));
  SWIG_Python_SetConstant(d, "NonbondedSoftcoreForce_NoCutoff",SWIG_From_int(static_cast< int >(OpenMM::NonbondedSoftcoreForce::NoCutoff)));
  SWIG_Python_SetConstant(d, "NonbondedSoftcoreForce_CutoffNonPeriodic",SWIG_From_int(static_cast< int >(OpenMM::NonbondedSoftcoreForce::CutoffNonPeriodic)));
  SWIG_Python_SetConstant(d, "NonbondedSoftcoreForce_CutoffPeriodic",SWIG_From_int(static_cast< int >(OpenMM::NonbondedSoftcoreForce::CutoffPeriodic)));
#if PY_VERSION_HEX >= 0x03000000
  return m;
#else
  return;
#endif
}

