<?xml version='1.0' encoding='ISO-8859-1' standalone='yes' ?>
<tagfile>
  <compound kind="class">
    <name>OpenMM::AndersenThermostat</name>
    <filename>classOpenMM_1_1AndersenThermostat.html</filename>
    <base>OpenMM::Force</base>
    <member kind="function">
      <type></type>
      <name>AndersenThermostat</name>
      <anchorfile>classOpenMM_1_1AndersenThermostat.html</anchorfile>
      <anchor>a7760fc78185b00f86998994e6ae9827b</anchor>
      <arglist>(double defaultTemperature, double defaultCollisionFrequency)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getDefaultTemperature</name>
      <anchorfile>classOpenMM_1_1AndersenThermostat.html</anchorfile>
      <anchor>abc2dbd8fb596a88edbc7c8abf6eb2f7f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getDefaultCollisionFrequency</name>
      <anchorfile>classOpenMM_1_1AndersenThermostat.html</anchorfile>
      <anchor>a2becbaf4e32051c4ec2d711a7d362774</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getRandomNumberSeed</name>
      <anchorfile>classOpenMM_1_1AndersenThermostat.html</anchorfile>
      <anchor>a9f6f1c1064d592c1594696615078e526</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRandomNumberSeed</name>
      <anchorfile>classOpenMM_1_1AndersenThermostat.html</anchorfile>
      <anchor>a6e57a6072a3913e039c5f2da591d7f96</anchor>
      <arglist>(int seed)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const std::string &amp;</type>
      <name>Temperature</name>
      <anchorfile>classOpenMM_1_1AndersenThermostat.html</anchorfile>
      <anchor>a2d0d57759ab7e29b2308a5f0ee893d68</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const std::string &amp;</type>
      <name>CollisionFrequency</name>
      <anchorfile>classOpenMM_1_1AndersenThermostat.html</anchorfile>
      <anchor>aa921ca6657bc6f873b41a8d72ee4496d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>ForceImpl *</type>
      <name>createImpl</name>
      <anchorfile>classOpenMM_1_1AndersenThermostat.html</anchorfile>
      <anchor>aaf8d731f241984dfd636ac8fea33780d</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OpenMM::BrownianIntegrator</name>
    <filename>classOpenMM_1_1BrownianIntegrator.html</filename>
    <base>OpenMM::Integrator</base>
    <member kind="function">
      <type></type>
      <name>BrownianIntegrator</name>
      <anchorfile>classOpenMM_1_1BrownianIntegrator.html</anchorfile>
      <anchor>a3d91501858604f62b4eb8c1ef5ab0753</anchor>
      <arglist>(double temperature, double frictionCoeff, double stepSize)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getTemperature</name>
      <anchorfile>classOpenMM_1_1BrownianIntegrator.html</anchorfile>
      <anchor>a00d75976e31278340ed5550e9f1479da</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTemperature</name>
      <anchorfile>classOpenMM_1_1BrownianIntegrator.html</anchorfile>
      <anchor>a0eaab969662d838cfb0528a4e5cf7e13</anchor>
      <arglist>(double temp)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getFriction</name>
      <anchorfile>classOpenMM_1_1BrownianIntegrator.html</anchorfile>
      <anchor>aeef3b48c4eab3044c61869b3a521f32f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFriction</name>
      <anchorfile>classOpenMM_1_1BrownianIntegrator.html</anchorfile>
      <anchor>a68359308309527032c014d7151ac69c9</anchor>
      <arglist>(double coeff)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getRandomNumberSeed</name>
      <anchorfile>classOpenMM_1_1BrownianIntegrator.html</anchorfile>
      <anchor>a9f6f1c1064d592c1594696615078e526</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRandomNumberSeed</name>
      <anchorfile>classOpenMM_1_1BrownianIntegrator.html</anchorfile>
      <anchor>a6e57a6072a3913e039c5f2da591d7f96</anchor>
      <arglist>(int seed)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>step</name>
      <anchorfile>classOpenMM_1_1BrownianIntegrator.html</anchorfile>
      <anchor>a670ab49c98d37df4ffdd814ff6428fc8</anchor>
      <arglist>(int steps)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>initialize</name>
      <anchorfile>classOpenMM_1_1BrownianIntegrator.html</anchorfile>
      <anchor>a941fcc46a4e6e1fed160f03aa6cb04a5</anchor>
      <arglist>(ContextImpl &amp;context)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>std::vector&lt; std::string &gt;</type>
      <name>getKernelNames</name>
      <anchorfile>classOpenMM_1_1BrownianIntegrator.html</anchorfile>
      <anchor>a227682eb0bbe611b36bb6903e4569af0</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OpenMM::CMAPTorsionForce</name>
    <filename>classOpenMM_1_1CMAPTorsionForce.html</filename>
    <base>OpenMM::Force</base>
    <class kind="class">OpenMM::CMAPTorsionForce::CMAPTorsionInfo</class>
    <class kind="class">OpenMM::CMAPTorsionForce::MapInfo</class>
    <member kind="function">
      <type></type>
      <name>CMAPTorsionForce</name>
      <anchorfile>classOpenMM_1_1CMAPTorsionForce.html</anchorfile>
      <anchor>a38bc8be6c3b4b98d0be84316a4fb379b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumMaps</name>
      <anchorfile>classOpenMM_1_1CMAPTorsionForce.html</anchorfile>
      <anchor>aaa371caaa849f232008ff9c33bd0bf8f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumTorsions</name>
      <anchorfile>classOpenMM_1_1CMAPTorsionForce.html</anchorfile>
      <anchor>a3bb8e6820ac5baede1973c6bb1fd99aa</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>addMap</name>
      <anchorfile>classOpenMM_1_1CMAPTorsionForce.html</anchorfile>
      <anchor>aa5454cecb15beed606ff4a2451a555ce</anchor>
      <arglist>(int size, const std::vector&lt; double &gt; &amp;energy)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getMapParameters</name>
      <anchorfile>classOpenMM_1_1CMAPTorsionForce.html</anchorfile>
      <anchor>a40f6573e6a89d223917d60a9cb475e3c</anchor>
      <arglist>(int index, int &amp;size, std::vector&lt; double &gt; &amp;energy) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMapParameters</name>
      <anchorfile>classOpenMM_1_1CMAPTorsionForce.html</anchorfile>
      <anchor>a120645991253aafe9fb37e29c5fb403c</anchor>
      <arglist>(int index, int size, const std::vector&lt; double &gt; &amp;energy)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>addTorsion</name>
      <anchorfile>classOpenMM_1_1CMAPTorsionForce.html</anchorfile>
      <anchor>a8ec5147600cb1eeb3b65a15801dc641e</anchor>
      <arglist>(int map, int a1, int a2, int a3, int a4, int b1, int b2, int b3, int b4)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getTorsionParameters</name>
      <anchorfile>classOpenMM_1_1CMAPTorsionForce.html</anchorfile>
      <anchor>a8132da7c1b5261dbd373541d4bc8f9e6</anchor>
      <arglist>(int index, int &amp;map, int &amp;a1, int &amp;a2, int &amp;a3, int &amp;a4, int &amp;b1, int &amp;b2, int &amp;b3, int &amp;b4) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTorsionParameters</name>
      <anchorfile>classOpenMM_1_1CMAPTorsionForce.html</anchorfile>
      <anchor>ac0261668a093356fd78c1150b58ed99e</anchor>
      <arglist>(int index, int map, int a1, int a2, int a3, int a4, int b1, int b2, int b3, int b4)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>ForceImpl *</type>
      <name>createImpl</name>
      <anchorfile>classOpenMM_1_1CMAPTorsionForce.html</anchorfile>
      <anchor>aaf8d731f241984dfd636ac8fea33780d</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OpenMM::CMMotionRemover</name>
    <filename>classOpenMM_1_1CMMotionRemover.html</filename>
    <base>OpenMM::Force</base>
    <member kind="function">
      <type></type>
      <name>CMMotionRemover</name>
      <anchorfile>classOpenMM_1_1CMMotionRemover.html</anchorfile>
      <anchor>af5b3eb45ff23d8ae838c19e469298105</anchor>
      <arglist>(int frequency=1)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getFrequency</name>
      <anchorfile>classOpenMM_1_1CMMotionRemover.html</anchorfile>
      <anchor>af2c1e36972f8bac2b133e9148b51b268</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFrequency</name>
      <anchorfile>classOpenMM_1_1CMMotionRemover.html</anchorfile>
      <anchor>ae2dd14a3c0cfc0376dbac59c2d7e56b7</anchor>
      <arglist>(int freq)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>ForceImpl *</type>
      <name>createImpl</name>
      <anchorfile>classOpenMM_1_1CMMotionRemover.html</anchorfile>
      <anchor>aaf8d731f241984dfd636ac8fea33780d</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OpenMM::Context</name>
    <filename>classOpenMM_1_1Context.html</filename>
    <member kind="function">
      <type></type>
      <name>Context</name>
      <anchorfile>classOpenMM_1_1Context.html</anchorfile>
      <anchor>ae310f286371b8fcf2a089b6a56c1a256</anchor>
      <arglist>(System &amp;system, Integrator &amp;integrator)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Context</name>
      <anchorfile>classOpenMM_1_1Context.html</anchorfile>
      <anchor>aa3a250a7b759fd1d70e3ea418f067ccd</anchor>
      <arglist>(System &amp;system, Integrator &amp;integrator, Platform &amp;platform)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Context</name>
      <anchorfile>classOpenMM_1_1Context.html</anchorfile>
      <anchor>a21976eb3ab5ca54d2b099af10a712793</anchor>
      <arglist>(System &amp;system, Integrator &amp;integrator, Platform &amp;platform, const std::map&lt; std::string, std::string &gt; &amp;properties)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Context</name>
      <anchorfile>classOpenMM_1_1Context.html</anchorfile>
      <anchor>ad2cdbdf8ca6efd618beb4f0c416e02f9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const System &amp;</type>
      <name>getSystem</name>
      <anchorfile>classOpenMM_1_1Context.html</anchorfile>
      <anchor>ab4a333d9a9e9041f8c823412d6c90d17</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>System &amp;</type>
      <name>getSystem</name>
      <anchorfile>classOpenMM_1_1Context.html</anchorfile>
      <anchor>a070254611e9f007153f87a8fa977e91c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Integrator &amp;</type>
      <name>getIntegrator</name>
      <anchorfile>classOpenMM_1_1Context.html</anchorfile>
      <anchor>a984898203c574451926774580139721f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Integrator &amp;</type>
      <name>getIntegrator</name>
      <anchorfile>classOpenMM_1_1Context.html</anchorfile>
      <anchor>a7dc958887b803bb56cd249eb7a12dd22</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Platform &amp;</type>
      <name>getPlatform</name>
      <anchorfile>classOpenMM_1_1Context.html</anchorfile>
      <anchor>ad5ee56553b2e21cd22fa317b37e68770</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Platform &amp;</type>
      <name>getPlatform</name>
      <anchorfile>classOpenMM_1_1Context.html</anchorfile>
      <anchor>ac8e8a60a031c2b4110a221b4e7a96ed9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>State</type>
      <name>getState</name>
      <anchorfile>classOpenMM_1_1Context.html</anchorfile>
      <anchor>a5c53803407b6c22454813f668c42a33e</anchor>
      <arglist>(int types, bool enforcePeriodicBox=false, int groups=0xFFFFFFFF) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTime</name>
      <anchorfile>classOpenMM_1_1Context.html</anchorfile>
      <anchor>a57f151321d0f67de82e737e24428362c</anchor>
      <arglist>(double time)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPositions</name>
      <anchorfile>classOpenMM_1_1Context.html</anchorfile>
      <anchor>a039cca95cb781d471d4f07936e2e6488</anchor>
      <arglist>(const std::vector&lt; Vec3 &gt; &amp;positions)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setVelocities</name>
      <anchorfile>classOpenMM_1_1Context.html</anchorfile>
      <anchor>a040f8ddbc2378ccc6f07ac2a60dd22c3</anchor>
      <arglist>(const std::vector&lt; Vec3 &gt; &amp;velocities)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getParameter</name>
      <anchorfile>classOpenMM_1_1Context.html</anchorfile>
      <anchor>ab6a93321f44ed4f322d490fc1ce41a0e</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setParameter</name>
      <anchorfile>classOpenMM_1_1Context.html</anchorfile>
      <anchor>a7756dadc9203b3bb4d76ee3e098af709</anchor>
      <arglist>(const std::string &amp;name, double value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPeriodicBoxVectors</name>
      <anchorfile>classOpenMM_1_1Context.html</anchorfile>
      <anchor>a62fcc50a2c34ff28de9667aabf5ec33f</anchor>
      <arglist>(const Vec3 &amp;a, const Vec3 &amp;b, const Vec3 &amp;c)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>applyConstraints</name>
      <anchorfile>classOpenMM_1_1Context.html</anchorfile>
      <anchor>a74282a7e0e2186059e160cde26a0e2a2</anchor>
      <arglist>(double tol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeVirtualSites</name>
      <anchorfile>classOpenMM_1_1Context.html</anchorfile>
      <anchor>a07a7e8dbbbcec2dd45939d6483f10b5b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reinitialize</name>
      <anchorfile>classOpenMM_1_1Context.html</anchorfile>
      <anchor>ad9882f00bb27345adbf4a46a7ac4124e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>Platform</name>
      <anchorfile>classOpenMM_1_1Context.html</anchorfile>
      <anchor>a9def841f7cd75057805532dab4d0f459</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OpenMM::CustomAngleForce</name>
    <filename>classOpenMM_1_1CustomAngleForce.html</filename>
    <base>OpenMM::Force</base>
    <class kind="class">OpenMM::CustomAngleForce::AngleInfo</class>
    <class kind="class">OpenMM::CustomAngleForce::AngleParameterInfo</class>
    <class kind="class">OpenMM::CustomAngleForce::GlobalParameterInfo</class>
    <member kind="function">
      <type></type>
      <name>CustomAngleForce</name>
      <anchorfile>classOpenMM_1_1CustomAngleForce.html</anchorfile>
      <anchor>a716cf2703a075f495d3d9a10eeb935fe</anchor>
      <arglist>(const std::string &amp;energy)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumAngles</name>
      <anchorfile>classOpenMM_1_1CustomAngleForce.html</anchorfile>
      <anchor>a6d6db7820f5284ccd108921214a49502</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumPerAngleParameters</name>
      <anchorfile>classOpenMM_1_1CustomAngleForce.html</anchorfile>
      <anchor>a87a82b1a86a5239eeeeb28467429d455</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumGlobalParameters</name>
      <anchorfile>classOpenMM_1_1CustomAngleForce.html</anchorfile>
      <anchor>a25c123d3f1927dfb1a970548b747e1ad</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getEnergyFunction</name>
      <anchorfile>classOpenMM_1_1CustomAngleForce.html</anchorfile>
      <anchor>aa9960dbb3bed2cb64315eff6392eea31</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setEnergyFunction</name>
      <anchorfile>classOpenMM_1_1CustomAngleForce.html</anchorfile>
      <anchor>a6b0c9ff70939ed71a202f955dc18ff31</anchor>
      <arglist>(const std::string &amp;energy)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>addPerAngleParameter</name>
      <anchorfile>classOpenMM_1_1CustomAngleForce.html</anchorfile>
      <anchor>a6a3812889e3da7512bd6f5c2384eba1f</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getPerAngleParameterName</name>
      <anchorfile>classOpenMM_1_1CustomAngleForce.html</anchorfile>
      <anchor>a572696de060df64da7a860d540fe2783</anchor>
      <arglist>(int index) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPerAngleParameterName</name>
      <anchorfile>classOpenMM_1_1CustomAngleForce.html</anchorfile>
      <anchor>a3356707183c8b96e6a07d5c35c253328</anchor>
      <arglist>(int index, const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>addGlobalParameter</name>
      <anchorfile>classOpenMM_1_1CustomAngleForce.html</anchorfile>
      <anchor>a6560d40a40578ddaf8b5e4a19e373020</anchor>
      <arglist>(const std::string &amp;name, double defaultValue)</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getGlobalParameterName</name>
      <anchorfile>classOpenMM_1_1CustomAngleForce.html</anchorfile>
      <anchor>a0dcb0e90bae7a35c1bc8196bb47eb3b7</anchor>
      <arglist>(int index) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setGlobalParameterName</name>
      <anchorfile>classOpenMM_1_1CustomAngleForce.html</anchorfile>
      <anchor>a8eacbbd8c5aafb3c565ff9628f14e69b</anchor>
      <arglist>(int index, const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getGlobalParameterDefaultValue</name>
      <anchorfile>classOpenMM_1_1CustomAngleForce.html</anchorfile>
      <anchor>a03e5d3d717bac0e2e31a8bb9065ea508</anchor>
      <arglist>(int index) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setGlobalParameterDefaultValue</name>
      <anchorfile>classOpenMM_1_1CustomAngleForce.html</anchorfile>
      <anchor>a905fad6be1a06a749b6f04aabe42f481</anchor>
      <arglist>(int index, double defaultValue)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>addAngle</name>
      <anchorfile>classOpenMM_1_1CustomAngleForce.html</anchorfile>
      <anchor>a50221318dc46d1ad4a6e6d1e54151541</anchor>
      <arglist>(int particle1, int particle2, int particle3, const std::vector&lt; double &gt; &amp;parameters)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getAngleParameters</name>
      <anchorfile>classOpenMM_1_1CustomAngleForce.html</anchorfile>
      <anchor>ad2fbfca012013a6f8af0dffe5ac7c9da</anchor>
      <arglist>(int index, int &amp;particle1, int &amp;particle2, int &amp;particle3, std::vector&lt; double &gt; &amp;parameters) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAngleParameters</name>
      <anchorfile>classOpenMM_1_1CustomAngleForce.html</anchorfile>
      <anchor>af57c16d1f2521334f6c61373391719a2</anchor>
      <arglist>(int index, int particle1, int particle2, int particle3, const std::vector&lt; double &gt; &amp;parameters)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>ForceImpl *</type>
      <name>createImpl</name>
      <anchorfile>classOpenMM_1_1CustomAngleForce.html</anchorfile>
      <anchor>aaf8d731f241984dfd636ac8fea33780d</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OpenMM::CustomBondForce</name>
    <filename>classOpenMM_1_1CustomBondForce.html</filename>
    <base>OpenMM::Force</base>
    <class kind="class">OpenMM::CustomBondForce::BondInfo</class>
    <class kind="class">OpenMM::CustomBondForce::BondParameterInfo</class>
    <class kind="class">OpenMM::CustomBondForce::GlobalParameterInfo</class>
    <member kind="function">
      <type></type>
      <name>CustomBondForce</name>
      <anchorfile>classOpenMM_1_1CustomBondForce.html</anchorfile>
      <anchor>a9d42e99ad10fc44ddcb68e2ee8812c0c</anchor>
      <arglist>(const std::string &amp;energy)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumBonds</name>
      <anchorfile>classOpenMM_1_1CustomBondForce.html</anchorfile>
      <anchor>a16f41cfeb5ee7f6163d00a230a031bcd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumPerBondParameters</name>
      <anchorfile>classOpenMM_1_1CustomBondForce.html</anchorfile>
      <anchor>a75e6c34861c09942e4dbb1267db901cf</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumGlobalParameters</name>
      <anchorfile>classOpenMM_1_1CustomBondForce.html</anchorfile>
      <anchor>a25c123d3f1927dfb1a970548b747e1ad</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getEnergyFunction</name>
      <anchorfile>classOpenMM_1_1CustomBondForce.html</anchorfile>
      <anchor>aa9960dbb3bed2cb64315eff6392eea31</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setEnergyFunction</name>
      <anchorfile>classOpenMM_1_1CustomBondForce.html</anchorfile>
      <anchor>a6b0c9ff70939ed71a202f955dc18ff31</anchor>
      <arglist>(const std::string &amp;energy)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>addPerBondParameter</name>
      <anchorfile>classOpenMM_1_1CustomBondForce.html</anchorfile>
      <anchor>a3fea7c134115e370a2fae30a2149b038</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getPerBondParameterName</name>
      <anchorfile>classOpenMM_1_1CustomBondForce.html</anchorfile>
      <anchor>a0ceeb52a89148d1c4b0293e91ce4574c</anchor>
      <arglist>(int index) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPerBondParameterName</name>
      <anchorfile>classOpenMM_1_1CustomBondForce.html</anchorfile>
      <anchor>abc721748a1f73b7c5cf600d1e0b46dd2</anchor>
      <arglist>(int index, const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>addGlobalParameter</name>
      <anchorfile>classOpenMM_1_1CustomBondForce.html</anchorfile>
      <anchor>a6560d40a40578ddaf8b5e4a19e373020</anchor>
      <arglist>(const std::string &amp;name, double defaultValue)</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getGlobalParameterName</name>
      <anchorfile>classOpenMM_1_1CustomBondForce.html</anchorfile>
      <anchor>a0dcb0e90bae7a35c1bc8196bb47eb3b7</anchor>
      <arglist>(int index) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setGlobalParameterName</name>
      <anchorfile>classOpenMM_1_1CustomBondForce.html</anchorfile>
      <anchor>a8eacbbd8c5aafb3c565ff9628f14e69b</anchor>
      <arglist>(int index, const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getGlobalParameterDefaultValue</name>
      <anchorfile>classOpenMM_1_1CustomBondForce.html</anchorfile>
      <anchor>a03e5d3d717bac0e2e31a8bb9065ea508</anchor>
      <arglist>(int index) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setGlobalParameterDefaultValue</name>
      <anchorfile>classOpenMM_1_1CustomBondForce.html</anchorfile>
      <anchor>a905fad6be1a06a749b6f04aabe42f481</anchor>
      <arglist>(int index, double defaultValue)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>addBond</name>
      <anchorfile>classOpenMM_1_1CustomBondForce.html</anchorfile>
      <anchor>ad90c63eaa3e85f2b09a8a83af271ac0c</anchor>
      <arglist>(int particle1, int particle2, const std::vector&lt; double &gt; &amp;parameters)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getBondParameters</name>
      <anchorfile>classOpenMM_1_1CustomBondForce.html</anchorfile>
      <anchor>a68bdcca328ec43f93ffd0379b99e71c4</anchor>
      <arglist>(int index, int &amp;particle1, int &amp;particle2, std::vector&lt; double &gt; &amp;parameters) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBondParameters</name>
      <anchorfile>classOpenMM_1_1CustomBondForce.html</anchorfile>
      <anchor>aa563965856e91d3eaabcf115cdb9d4fe</anchor>
      <arglist>(int index, int particle1, int particle2, const std::vector&lt; double &gt; &amp;parameters)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>ForceImpl *</type>
      <name>createImpl</name>
      <anchorfile>classOpenMM_1_1CustomBondForce.html</anchorfile>
      <anchor>aaf8d731f241984dfd636ac8fea33780d</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OpenMM::CustomExternalForce</name>
    <filename>classOpenMM_1_1CustomExternalForce.html</filename>
    <base>OpenMM::Force</base>
    <class kind="class">OpenMM::CustomExternalForce::GlobalParameterInfo</class>
    <class kind="class">OpenMM::CustomExternalForce::ParticleInfo</class>
    <class kind="class">OpenMM::CustomExternalForce::ParticleParameterInfo</class>
    <member kind="function">
      <type></type>
      <name>CustomExternalForce</name>
      <anchorfile>classOpenMM_1_1CustomExternalForce.html</anchorfile>
      <anchor>acf14ada3f55e79c9b50a1e3223a87ceb</anchor>
      <arglist>(const std::string &amp;energy)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumParticles</name>
      <anchorfile>classOpenMM_1_1CustomExternalForce.html</anchorfile>
      <anchor>abb6f8d8c14d432090000f19e8beafa99</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumPerParticleParameters</name>
      <anchorfile>classOpenMM_1_1CustomExternalForce.html</anchorfile>
      <anchor>acd9ffeb359356701529a7ffe77694021</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumGlobalParameters</name>
      <anchorfile>classOpenMM_1_1CustomExternalForce.html</anchorfile>
      <anchor>a25c123d3f1927dfb1a970548b747e1ad</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getEnergyFunction</name>
      <anchorfile>classOpenMM_1_1CustomExternalForce.html</anchorfile>
      <anchor>aa9960dbb3bed2cb64315eff6392eea31</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setEnergyFunction</name>
      <anchorfile>classOpenMM_1_1CustomExternalForce.html</anchorfile>
      <anchor>a6b0c9ff70939ed71a202f955dc18ff31</anchor>
      <arglist>(const std::string &amp;energy)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>addPerParticleParameter</name>
      <anchorfile>classOpenMM_1_1CustomExternalForce.html</anchorfile>
      <anchor>a98c86338def0655742c4b0ddb25a219c</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getPerParticleParameterName</name>
      <anchorfile>classOpenMM_1_1CustomExternalForce.html</anchorfile>
      <anchor>a1ac69476629bb277266c55d3317045d0</anchor>
      <arglist>(int index) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPerParticleParameterName</name>
      <anchorfile>classOpenMM_1_1CustomExternalForce.html</anchorfile>
      <anchor>a4bbd3cacdb6f0cfdb20bfb553f3a80ab</anchor>
      <arglist>(int index, const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>addGlobalParameter</name>
      <anchorfile>classOpenMM_1_1CustomExternalForce.html</anchorfile>
      <anchor>a6560d40a40578ddaf8b5e4a19e373020</anchor>
      <arglist>(const std::string &amp;name, double defaultValue)</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getGlobalParameterName</name>
      <anchorfile>classOpenMM_1_1CustomExternalForce.html</anchorfile>
      <anchor>a0dcb0e90bae7a35c1bc8196bb47eb3b7</anchor>
      <arglist>(int index) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setGlobalParameterName</name>
      <anchorfile>classOpenMM_1_1CustomExternalForce.html</anchorfile>
      <anchor>a8eacbbd8c5aafb3c565ff9628f14e69b</anchor>
      <arglist>(int index, const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getGlobalParameterDefaultValue</name>
      <anchorfile>classOpenMM_1_1CustomExternalForce.html</anchorfile>
      <anchor>a03e5d3d717bac0e2e31a8bb9065ea508</anchor>
      <arglist>(int index) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setGlobalParameterDefaultValue</name>
      <anchorfile>classOpenMM_1_1CustomExternalForce.html</anchorfile>
      <anchor>a905fad6be1a06a749b6f04aabe42f481</anchor>
      <arglist>(int index, double defaultValue)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>addParticle</name>
      <anchorfile>classOpenMM_1_1CustomExternalForce.html</anchorfile>
      <anchor>ae2c0111a9dd699fa294ae500c5cfad93</anchor>
      <arglist>(int particle, const std::vector&lt; double &gt; &amp;parameters)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getParticleParameters</name>
      <anchorfile>classOpenMM_1_1CustomExternalForce.html</anchorfile>
      <anchor>a70fd1c1edfe4cb40cfd93d829a84e187</anchor>
      <arglist>(int index, int &amp;particle, std::vector&lt; double &gt; &amp;parameters) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setParticleParameters</name>
      <anchorfile>classOpenMM_1_1CustomExternalForce.html</anchorfile>
      <anchor>a735c4d683336921811d2568620a011c4</anchor>
      <arglist>(int index, int particle, const std::vector&lt; double &gt; &amp;parameters)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>ForceImpl *</type>
      <name>createImpl</name>
      <anchorfile>classOpenMM_1_1CustomExternalForce.html</anchorfile>
      <anchor>aaf8d731f241984dfd636ac8fea33780d</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OpenMM::CustomGBForce</name>
    <filename>classOpenMM_1_1CustomGBForce.html</filename>
    <base>OpenMM::Force</base>
    <class kind="class">OpenMM::CustomGBForce::ComputationInfo</class>
    <class kind="class">OpenMM::CustomGBForce::ExclusionInfo</class>
    <class kind="class">OpenMM::CustomGBForce::FunctionInfo</class>
    <class kind="class">OpenMM::CustomGBForce::GlobalParameterInfo</class>
    <class kind="class">OpenMM::CustomGBForce::ParticleInfo</class>
    <class kind="class">OpenMM::CustomGBForce::PerParticleParameterInfo</class>
    <member kind="enumeration">
      <name>NonbondedMethod</name>
      <anchorfile>classOpenMM_1_1CustomGBForce.html</anchorfile>
      <anchor>afa7d9e69832628b8cf72ef628dca7390</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NoCutoff</name>
      <anchorfile>classOpenMM_1_1CustomGBForce.html</anchorfile>
      <anchor>afa7d9e69832628b8cf72ef628dca7390a007d65056b9c2fce5e5549b28e4e2ffb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CutoffNonPeriodic</name>
      <anchorfile>classOpenMM_1_1CustomGBForce.html</anchorfile>
      <anchor>afa7d9e69832628b8cf72ef628dca7390aa2e57a56c2293e046b2fa2231d6f3d6b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CutoffPeriodic</name>
      <anchorfile>classOpenMM_1_1CustomGBForce.html</anchorfile>
      <anchor>afa7d9e69832628b8cf72ef628dca7390a168a54330e90997ff68501baaaa41ccd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>ComputationType</name>
      <anchorfile>classOpenMM_1_1CustomGBForce.html</anchorfile>
      <anchor>aea586424fa2a5ad53befcfd05e06660a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SingleParticle</name>
      <anchorfile>classOpenMM_1_1CustomGBForce.html</anchorfile>
      <anchor>aea586424fa2a5ad53befcfd05e06660aa10c4f65e13e406d484cda87337400346</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ParticlePair</name>
      <anchorfile>classOpenMM_1_1CustomGBForce.html</anchorfile>
      <anchor>aea586424fa2a5ad53befcfd05e06660aab1f57b1df66f12881f5d4dfe052c5d6f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ParticlePairNoExclusions</name>
      <anchorfile>classOpenMM_1_1CustomGBForce.html</anchorfile>
      <anchor>aea586424fa2a5ad53befcfd05e06660aa120c5bf64d4c0368cc2af4217dbfa70b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CustomGBForce</name>
      <anchorfile>classOpenMM_1_1CustomGBForce.html</anchorfile>
      <anchor>a8285194c5ee55c9c1dd2bde7794a4395</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumParticles</name>
      <anchorfile>classOpenMM_1_1CustomGBForce.html</anchorfile>
      <anchor>abb6f8d8c14d432090000f19e8beafa99</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumExclusions</name>
      <anchorfile>classOpenMM_1_1CustomGBForce.html</anchorfile>
      <anchor>a815d2155ffc24688998dab86cc283849</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumPerParticleParameters</name>
      <anchorfile>classOpenMM_1_1CustomGBForce.html</anchorfile>
      <anchor>acd9ffeb359356701529a7ffe77694021</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumGlobalParameters</name>
      <anchorfile>classOpenMM_1_1CustomGBForce.html</anchorfile>
      <anchor>a25c123d3f1927dfb1a970548b747e1ad</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumFunctions</name>
      <anchorfile>classOpenMM_1_1CustomGBForce.html</anchorfile>
      <anchor>a294b43c63902a615fe3c3db8b5aa0340</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumComputedValues</name>
      <anchorfile>classOpenMM_1_1CustomGBForce.html</anchorfile>
      <anchor>aae3dead7efc045383e37c6dc3ed0a4d6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumEnergyTerms</name>
      <anchorfile>classOpenMM_1_1CustomGBForce.html</anchorfile>
      <anchor>a14657cd2615feabc0b39b9cfbfcda4b3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>NonbondedMethod</type>
      <name>getNonbondedMethod</name>
      <anchorfile>classOpenMM_1_1CustomGBForce.html</anchorfile>
      <anchor>a39b8aa497b6303d1ceaa0c56311f52a9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNonbondedMethod</name>
      <anchorfile>classOpenMM_1_1CustomGBForce.html</anchorfile>
      <anchor>a705d5824b99e09178ec842c46681fe66</anchor>
      <arglist>(NonbondedMethod method)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getCutoffDistance</name>
      <anchorfile>classOpenMM_1_1CustomGBForce.html</anchorfile>
      <anchor>a5ed4b7977b5b798d0119735dc2a2add6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCutoffDistance</name>
      <anchorfile>classOpenMM_1_1CustomGBForce.html</anchorfile>
      <anchor>aca0f3cbeec7aac67e140f0ed2f67b526</anchor>
      <arglist>(double distance)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>addPerParticleParameter</name>
      <anchorfile>classOpenMM_1_1CustomGBForce.html</anchorfile>
      <anchor>a98c86338def0655742c4b0ddb25a219c</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getPerParticleParameterName</name>
      <anchorfile>classOpenMM_1_1CustomGBForce.html</anchorfile>
      <anchor>a1ac69476629bb277266c55d3317045d0</anchor>
      <arglist>(int index) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPerParticleParameterName</name>
      <anchorfile>classOpenMM_1_1CustomGBForce.html</anchorfile>
      <anchor>a4bbd3cacdb6f0cfdb20bfb553f3a80ab</anchor>
      <arglist>(int index, const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>addGlobalParameter</name>
      <anchorfile>classOpenMM_1_1CustomGBForce.html</anchorfile>
      <anchor>a6560d40a40578ddaf8b5e4a19e373020</anchor>
      <arglist>(const std::string &amp;name, double defaultValue)</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getGlobalParameterName</name>
      <anchorfile>classOpenMM_1_1CustomGBForce.html</anchorfile>
      <anchor>a0dcb0e90bae7a35c1bc8196bb47eb3b7</anchor>
      <arglist>(int index) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setGlobalParameterName</name>
      <anchorfile>classOpenMM_1_1CustomGBForce.html</anchorfile>
      <anchor>a8eacbbd8c5aafb3c565ff9628f14e69b</anchor>
      <arglist>(int index, const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getGlobalParameterDefaultValue</name>
      <anchorfile>classOpenMM_1_1CustomGBForce.html</anchorfile>
      <anchor>a03e5d3d717bac0e2e31a8bb9065ea508</anchor>
      <arglist>(int index) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setGlobalParameterDefaultValue</name>
      <anchorfile>classOpenMM_1_1CustomGBForce.html</anchorfile>
      <anchor>a905fad6be1a06a749b6f04aabe42f481</anchor>
      <arglist>(int index, double defaultValue)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>addParticle</name>
      <anchorfile>classOpenMM_1_1CustomGBForce.html</anchorfile>
      <anchor>adf422a3ebd416157d0d18fbcabba50ce</anchor>
      <arglist>(const std::vector&lt; double &gt; &amp;parameters)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getParticleParameters</name>
      <anchorfile>classOpenMM_1_1CustomGBForce.html</anchorfile>
      <anchor>a699b6427b68d93a528e19e4ab025b874</anchor>
      <arglist>(int index, std::vector&lt; double &gt; &amp;parameters) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setParticleParameters</name>
      <anchorfile>classOpenMM_1_1CustomGBForce.html</anchorfile>
      <anchor>a03a5de5245b1dc884cf6b050b1dc49df</anchor>
      <arglist>(int index, const std::vector&lt; double &gt; &amp;parameters)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>addComputedValue</name>
      <anchorfile>classOpenMM_1_1CustomGBForce.html</anchorfile>
      <anchor>a476a8718b1b4e4c2e4e4a004afe4caa9</anchor>
      <arglist>(const std::string &amp;name, const std::string &amp;expression, ComputationType type)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getComputedValueParameters</name>
      <anchorfile>classOpenMM_1_1CustomGBForce.html</anchorfile>
      <anchor>ae977d05ef3848bd68c2701ada27a2b1d</anchor>
      <arglist>(int index, std::string &amp;name, std::string &amp;expression, ComputationType &amp;type) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setComputedValueParameters</name>
      <anchorfile>classOpenMM_1_1CustomGBForce.html</anchorfile>
      <anchor>a751be9b7081db5c4cd22448df8d3afa5</anchor>
      <arglist>(int index, const std::string &amp;name, const std::string &amp;expression, ComputationType type)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>addEnergyTerm</name>
      <anchorfile>classOpenMM_1_1CustomGBForce.html</anchorfile>
      <anchor>a64ae3cbb0d504e5d20787a1b95ceacec</anchor>
      <arglist>(const std::string &amp;expression, ComputationType type)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getEnergyTermParameters</name>
      <anchorfile>classOpenMM_1_1CustomGBForce.html</anchorfile>
      <anchor>a8fed5741a660cc2eaf10abe8e3c2a2ad</anchor>
      <arglist>(int index, std::string &amp;expression, ComputationType &amp;type) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setEnergyTermParameters</name>
      <anchorfile>classOpenMM_1_1CustomGBForce.html</anchorfile>
      <anchor>a5cc725c855b1dccc498ec3321798c260</anchor>
      <arglist>(int index, const std::string &amp;expression, ComputationType type)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>addExclusion</name>
      <anchorfile>classOpenMM_1_1CustomGBForce.html</anchorfile>
      <anchor>ad890e952620cae8e616ccb18eb63737a</anchor>
      <arglist>(int particle1, int particle2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getExclusionParticles</name>
      <anchorfile>classOpenMM_1_1CustomGBForce.html</anchorfile>
      <anchor>aa4f165c0eec62dae9936e5330722f559</anchor>
      <arglist>(int index, int &amp;particle1, int &amp;particle2) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setExclusionParticles</name>
      <anchorfile>classOpenMM_1_1CustomGBForce.html</anchorfile>
      <anchor>a53bbf77cadbd74abd8b6e9acdb85c0dd</anchor>
      <arglist>(int index, int particle1, int particle2)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>addFunction</name>
      <anchorfile>classOpenMM_1_1CustomGBForce.html</anchorfile>
      <anchor>afcc97644875aeb16148a8d53adbfea36</anchor>
      <arglist>(const std::string &amp;name, const std::vector&lt; double &gt; &amp;values, double min, double max)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getFunctionParameters</name>
      <anchorfile>classOpenMM_1_1CustomGBForce.html</anchorfile>
      <anchor>a71ccd77e7d00990e8e02554ec3f05447</anchor>
      <arglist>(int index, std::string &amp;name, std::vector&lt; double &gt; &amp;values, double &amp;min, double &amp;max) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFunctionParameters</name>
      <anchorfile>classOpenMM_1_1CustomGBForce.html</anchorfile>
      <anchor>a49c505e0098204ecb4d372286e157b0c</anchor>
      <arglist>(int index, const std::string &amp;name, const std::vector&lt; double &gt; &amp;values, double min, double max)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>ForceImpl *</type>
      <name>createImpl</name>
      <anchorfile>classOpenMM_1_1CustomGBForce.html</anchorfile>
      <anchor>aaf8d731f241984dfd636ac8fea33780d</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OpenMM::CustomHbondForce</name>
    <filename>classOpenMM_1_1CustomHbondForce.html</filename>
    <base>OpenMM::Force</base>
    <class kind="class">OpenMM::CustomHbondForce::ExclusionInfo</class>
    <class kind="class">OpenMM::CustomHbondForce::FunctionInfo</class>
    <class kind="class">OpenMM::CustomHbondForce::GlobalParameterInfo</class>
    <class kind="class">OpenMM::CustomHbondForce::GroupInfo</class>
    <class kind="class">OpenMM::CustomHbondForce::PerPairParameterInfo</class>
    <member kind="enumeration">
      <name>NonbondedMethod</name>
      <anchorfile>classOpenMM_1_1CustomHbondForce.html</anchorfile>
      <anchor>afa7d9e69832628b8cf72ef628dca7390</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NoCutoff</name>
      <anchorfile>classOpenMM_1_1CustomHbondForce.html</anchorfile>
      <anchor>afa7d9e69832628b8cf72ef628dca7390a007d65056b9c2fce5e5549b28e4e2ffb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CutoffNonPeriodic</name>
      <anchorfile>classOpenMM_1_1CustomHbondForce.html</anchorfile>
      <anchor>afa7d9e69832628b8cf72ef628dca7390aa2e57a56c2293e046b2fa2231d6f3d6b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CutoffPeriodic</name>
      <anchorfile>classOpenMM_1_1CustomHbondForce.html</anchorfile>
      <anchor>afa7d9e69832628b8cf72ef628dca7390a168a54330e90997ff68501baaaa41ccd</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CustomHbondForce</name>
      <anchorfile>classOpenMM_1_1CustomHbondForce.html</anchorfile>
      <anchor>a68ae0ae31b3ad0fbca7c01249a2ecf41</anchor>
      <arglist>(const std::string &amp;energy)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumDonors</name>
      <anchorfile>classOpenMM_1_1CustomHbondForce.html</anchorfile>
      <anchor>ae09aa6c5e74ca3d4813b964619af27f1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumAcceptors</name>
      <anchorfile>classOpenMM_1_1CustomHbondForce.html</anchorfile>
      <anchor>a4362e0b757324796e0528f8274e8ea99</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumExclusions</name>
      <anchorfile>classOpenMM_1_1CustomHbondForce.html</anchorfile>
      <anchor>a815d2155ffc24688998dab86cc283849</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumPerDonorParameters</name>
      <anchorfile>classOpenMM_1_1CustomHbondForce.html</anchorfile>
      <anchor>a74411f5341f13f2ec0b2336fbf6398e9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumPerAcceptorParameters</name>
      <anchorfile>classOpenMM_1_1CustomHbondForce.html</anchorfile>
      <anchor>a157188f9cc9dee147b03f8f87ed3fafc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumGlobalParameters</name>
      <anchorfile>classOpenMM_1_1CustomHbondForce.html</anchorfile>
      <anchor>a25c123d3f1927dfb1a970548b747e1ad</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumFunctions</name>
      <anchorfile>classOpenMM_1_1CustomHbondForce.html</anchorfile>
      <anchor>a294b43c63902a615fe3c3db8b5aa0340</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getEnergyFunction</name>
      <anchorfile>classOpenMM_1_1CustomHbondForce.html</anchorfile>
      <anchor>aa9960dbb3bed2cb64315eff6392eea31</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setEnergyFunction</name>
      <anchorfile>classOpenMM_1_1CustomHbondForce.html</anchorfile>
      <anchor>a6b0c9ff70939ed71a202f955dc18ff31</anchor>
      <arglist>(const std::string &amp;energy)</arglist>
    </member>
    <member kind="function">
      <type>NonbondedMethod</type>
      <name>getNonbondedMethod</name>
      <anchorfile>classOpenMM_1_1CustomHbondForce.html</anchorfile>
      <anchor>a39b8aa497b6303d1ceaa0c56311f52a9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNonbondedMethod</name>
      <anchorfile>classOpenMM_1_1CustomHbondForce.html</anchorfile>
      <anchor>a705d5824b99e09178ec842c46681fe66</anchor>
      <arglist>(NonbondedMethod method)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getCutoffDistance</name>
      <anchorfile>classOpenMM_1_1CustomHbondForce.html</anchorfile>
      <anchor>a5ed4b7977b5b798d0119735dc2a2add6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCutoffDistance</name>
      <anchorfile>classOpenMM_1_1CustomHbondForce.html</anchorfile>
      <anchor>aca0f3cbeec7aac67e140f0ed2f67b526</anchor>
      <arglist>(double distance)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>addPerDonorParameter</name>
      <anchorfile>classOpenMM_1_1CustomHbondForce.html</anchorfile>
      <anchor>a3b2e0d6b6ac4e564f26136ae8e796b34</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getPerDonorParameterName</name>
      <anchorfile>classOpenMM_1_1CustomHbondForce.html</anchorfile>
      <anchor>a5986e4459867a4cbcaac887f9d349a8a</anchor>
      <arglist>(int index) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPerDonorParameterName</name>
      <anchorfile>classOpenMM_1_1CustomHbondForce.html</anchorfile>
      <anchor>ab1de3e49cb905c294bdf487397922032</anchor>
      <arglist>(int index, const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>addPerAcceptorParameter</name>
      <anchorfile>classOpenMM_1_1CustomHbondForce.html</anchorfile>
      <anchor>aed94194a42b4bd840aec695886894bc8</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getPerAcceptorParameterName</name>
      <anchorfile>classOpenMM_1_1CustomHbondForce.html</anchorfile>
      <anchor>aa4b333b15644e7cf1b9f5015a5287878</anchor>
      <arglist>(int index) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPerAcceptorParameterName</name>
      <anchorfile>classOpenMM_1_1CustomHbondForce.html</anchorfile>
      <anchor>aad2755414ecca8a726eeae317a47e36e</anchor>
      <arglist>(int index, const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>addGlobalParameter</name>
      <anchorfile>classOpenMM_1_1CustomHbondForce.html</anchorfile>
      <anchor>a6560d40a40578ddaf8b5e4a19e373020</anchor>
      <arglist>(const std::string &amp;name, double defaultValue)</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getGlobalParameterName</name>
      <anchorfile>classOpenMM_1_1CustomHbondForce.html</anchorfile>
      <anchor>a0dcb0e90bae7a35c1bc8196bb47eb3b7</anchor>
      <arglist>(int index) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setGlobalParameterName</name>
      <anchorfile>classOpenMM_1_1CustomHbondForce.html</anchorfile>
      <anchor>a8eacbbd8c5aafb3c565ff9628f14e69b</anchor>
      <arglist>(int index, const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getGlobalParameterDefaultValue</name>
      <anchorfile>classOpenMM_1_1CustomHbondForce.html</anchorfile>
      <anchor>a03e5d3d717bac0e2e31a8bb9065ea508</anchor>
      <arglist>(int index) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setGlobalParameterDefaultValue</name>
      <anchorfile>classOpenMM_1_1CustomHbondForce.html</anchorfile>
      <anchor>a905fad6be1a06a749b6f04aabe42f481</anchor>
      <arglist>(int index, double defaultValue)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>addDonor</name>
      <anchorfile>classOpenMM_1_1CustomHbondForce.html</anchorfile>
      <anchor>af33fae9704b5ad94904858b8b06c84ec</anchor>
      <arglist>(int d1, int d2, int d3, const std::vector&lt; double &gt; &amp;parameters)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getDonorParameters</name>
      <anchorfile>classOpenMM_1_1CustomHbondForce.html</anchorfile>
      <anchor>a7d5f881292d24e222187a221f6f3044e</anchor>
      <arglist>(int index, int &amp;d1, int &amp;d2, int &amp;d3, std::vector&lt; double &gt; &amp;parameters) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDonorParameters</name>
      <anchorfile>classOpenMM_1_1CustomHbondForce.html</anchorfile>
      <anchor>a0fa4d5335b14b7e169936005d731aa76</anchor>
      <arglist>(int index, int d1, int d2, int d3, const std::vector&lt; double &gt; &amp;parameters)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>addAcceptor</name>
      <anchorfile>classOpenMM_1_1CustomHbondForce.html</anchorfile>
      <anchor>a35a3c52c035381a6dc061ffb7ccab681</anchor>
      <arglist>(int a1, int a2, int a3, const std::vector&lt; double &gt; &amp;parameters)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getAcceptorParameters</name>
      <anchorfile>classOpenMM_1_1CustomHbondForce.html</anchorfile>
      <anchor>a6cd7dddeb4531dda70cd7090f9a8a685</anchor>
      <arglist>(int index, int &amp;a1, int &amp;a2, int &amp;a3, std::vector&lt; double &gt; &amp;parameters) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAcceptorParameters</name>
      <anchorfile>classOpenMM_1_1CustomHbondForce.html</anchorfile>
      <anchor>a0634b4cf3a445ce68d5c739f57061292</anchor>
      <arglist>(int index, int a1, int a2, int a3, const std::vector&lt; double &gt; &amp;parameters)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>addExclusion</name>
      <anchorfile>classOpenMM_1_1CustomHbondForce.html</anchorfile>
      <anchor>a1f3921501a0e2dfc156e1a0878da0df1</anchor>
      <arglist>(int donor, int acceptor)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getExclusionParticles</name>
      <anchorfile>classOpenMM_1_1CustomHbondForce.html</anchorfile>
      <anchor>a21f4dea5897dd4dab80beb6aa2548f7d</anchor>
      <arglist>(int index, int &amp;donor, int &amp;acceptor) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setExclusionParticles</name>
      <anchorfile>classOpenMM_1_1CustomHbondForce.html</anchorfile>
      <anchor>a6c049903d9a1f98990f437c892068bd5</anchor>
      <arglist>(int index, int donor, int acceptor)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>addFunction</name>
      <anchorfile>classOpenMM_1_1CustomHbondForce.html</anchorfile>
      <anchor>afcc97644875aeb16148a8d53adbfea36</anchor>
      <arglist>(const std::string &amp;name, const std::vector&lt; double &gt; &amp;values, double min, double max)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getFunctionParameters</name>
      <anchorfile>classOpenMM_1_1CustomHbondForce.html</anchorfile>
      <anchor>a71ccd77e7d00990e8e02554ec3f05447</anchor>
      <arglist>(int index, std::string &amp;name, std::vector&lt; double &gt; &amp;values, double &amp;min, double &amp;max) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFunctionParameters</name>
      <anchorfile>classOpenMM_1_1CustomHbondForce.html</anchorfile>
      <anchor>a49c505e0098204ecb4d372286e157b0c</anchor>
      <arglist>(int index, const std::string &amp;name, const std::vector&lt; double &gt; &amp;values, double min, double max)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>ForceImpl *</type>
      <name>createImpl</name>
      <anchorfile>classOpenMM_1_1CustomHbondForce.html</anchorfile>
      <anchor>aaf8d731f241984dfd636ac8fea33780d</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OpenMM::CustomIntegrator</name>
    <filename>classOpenMM_1_1CustomIntegrator.html</filename>
    <base>OpenMM::Integrator</base>
    <class kind="class">OpenMM::CustomIntegrator::ComputationInfo</class>
    <member kind="enumeration">
      <name>ComputationType</name>
      <anchorfile>classOpenMM_1_1CustomIntegrator.html</anchorfile>
      <anchor>aea586424fa2a5ad53befcfd05e06660a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ComputeGlobal</name>
      <anchorfile>classOpenMM_1_1CustomIntegrator.html</anchorfile>
      <anchor>aea586424fa2a5ad53befcfd05e06660aa92685e72c262c48e32ac0769ef816ea2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ComputePerDof</name>
      <anchorfile>classOpenMM_1_1CustomIntegrator.html</anchorfile>
      <anchor>aea586424fa2a5ad53befcfd05e06660aa72ac252c5090454ed63bcb5a701c174f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ComputeSum</name>
      <anchorfile>classOpenMM_1_1CustomIntegrator.html</anchorfile>
      <anchor>aea586424fa2a5ad53befcfd05e06660aab173527500d3e9f759d6eaa78cd58f1f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ConstrainPositions</name>
      <anchorfile>classOpenMM_1_1CustomIntegrator.html</anchorfile>
      <anchor>aea586424fa2a5ad53befcfd05e06660aa1d71d30083000d353b20ec1a9c1e16e6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ConstrainVelocities</name>
      <anchorfile>classOpenMM_1_1CustomIntegrator.html</anchorfile>
      <anchor>aea586424fa2a5ad53befcfd05e06660aa8c102f9733d685da08467cc98c9c1644</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UpdateContextState</name>
      <anchorfile>classOpenMM_1_1CustomIntegrator.html</anchorfile>
      <anchor>aea586424fa2a5ad53befcfd05e06660aa24c98f17ed20b9adc7df0b3acd6b2779</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CustomIntegrator</name>
      <anchorfile>classOpenMM_1_1CustomIntegrator.html</anchorfile>
      <anchor>a426f88e5ff4fa70bb2e7199ebf4157f6</anchor>
      <arglist>(double stepSize)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumGlobalVariables</name>
      <anchorfile>classOpenMM_1_1CustomIntegrator.html</anchorfile>
      <anchor>a9c6cd845528ae56ab442ea5679c1a0b0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumPerDofVariables</name>
      <anchorfile>classOpenMM_1_1CustomIntegrator.html</anchorfile>
      <anchor>aee7d5aec84aa1e13f098c4a5af846c1d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumComputations</name>
      <anchorfile>classOpenMM_1_1CustomIntegrator.html</anchorfile>
      <anchor>a6a4a4b696d3ac58b79c55512ca7e5cb7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>addGlobalVariable</name>
      <anchorfile>classOpenMM_1_1CustomIntegrator.html</anchorfile>
      <anchor>a85bfcfb2d039b95480a90fecdb64cdb6</anchor>
      <arglist>(const std::string &amp;name, double initialValue)</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getGlobalVariableName</name>
      <anchorfile>classOpenMM_1_1CustomIntegrator.html</anchorfile>
      <anchor>a6316c99bcb634089498e48388bd50dd4</anchor>
      <arglist>(int index) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>addPerDofVariable</name>
      <anchorfile>classOpenMM_1_1CustomIntegrator.html</anchorfile>
      <anchor>a3aa1234c1c026d66bf12f545df49d5ac</anchor>
      <arglist>(const std::string &amp;name, double initialValue)</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getPerDofVariableName</name>
      <anchorfile>classOpenMM_1_1CustomIntegrator.html</anchorfile>
      <anchor>a9aaef7c4d5e4bff1b1374fe91148a4ac</anchor>
      <arglist>(int index) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getGlobalVariable</name>
      <anchorfile>classOpenMM_1_1CustomIntegrator.html</anchorfile>
      <anchor>a994c9ba5125abc4a120bd89943abf4ee</anchor>
      <arglist>(int index) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setGlobalVariable</name>
      <anchorfile>classOpenMM_1_1CustomIntegrator.html</anchorfile>
      <anchor>aa7805a1ba7e29fcfad0e29ef67209bc0</anchor>
      <arglist>(int index, double value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setGlobalVariableByName</name>
      <anchorfile>classOpenMM_1_1CustomIntegrator.html</anchorfile>
      <anchor>af4bfe319f6534fa49ca4fd09e8cefc72</anchor>
      <arglist>(const std::string &amp;name, double value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getPerDofVariable</name>
      <anchorfile>classOpenMM_1_1CustomIntegrator.html</anchorfile>
      <anchor>aa977c90ec4a8714647e191ba40a54b9c</anchor>
      <arglist>(int index, std::vector&lt; Vec3 &gt; &amp;values) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPerDofVariable</name>
      <anchorfile>classOpenMM_1_1CustomIntegrator.html</anchorfile>
      <anchor>a0a97ba14a8402c1d6ac558c1d8fc3ca0</anchor>
      <arglist>(int index, const std::vector&lt; Vec3 &gt; &amp;values)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPerDofVariableByName</name>
      <anchorfile>classOpenMM_1_1CustomIntegrator.html</anchorfile>
      <anchor>a87c2dcc00741eff3e5d5c8357a615fa1</anchor>
      <arglist>(const std::string &amp;name, const std::vector&lt; Vec3 &gt; &amp;values)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>addComputeGlobal</name>
      <anchorfile>classOpenMM_1_1CustomIntegrator.html</anchorfile>
      <anchor>a929eeaf65ded33c5bc810f8ace09a843</anchor>
      <arglist>(const std::string &amp;variable, const std::string &amp;expression)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>addComputePerDof</name>
      <anchorfile>classOpenMM_1_1CustomIntegrator.html</anchorfile>
      <anchor>ac41a9dd75a3bd5a4f7a5c03060e5a66f</anchor>
      <arglist>(const std::string &amp;variable, const std::string &amp;expression)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>addComputeSum</name>
      <anchorfile>classOpenMM_1_1CustomIntegrator.html</anchorfile>
      <anchor>a7a79ad62ee5b77733476f7b29b445437</anchor>
      <arglist>(const std::string &amp;variable, const std::string &amp;expression)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>addConstrainPositions</name>
      <anchorfile>classOpenMM_1_1CustomIntegrator.html</anchorfile>
      <anchor>a31d5eac5d0ac176c3e5c2278d4abffc7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>addConstrainVelocities</name>
      <anchorfile>classOpenMM_1_1CustomIntegrator.html</anchorfile>
      <anchor>a0644650d10dfe1817d3422bd43c7d13d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>addUpdateContextState</name>
      <anchorfile>classOpenMM_1_1CustomIntegrator.html</anchorfile>
      <anchor>ab41076f951e5587ae21af7ebeb4867ce</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getComputationStep</name>
      <anchorfile>classOpenMM_1_1CustomIntegrator.html</anchorfile>
      <anchor>ad8d27cc27d15572e27ec09f5d5d7a0e0</anchor>
      <arglist>(int index, ComputationType &amp;type, std::string &amp;variable, std::string &amp;expression) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getRandomNumberSeed</name>
      <anchorfile>classOpenMM_1_1CustomIntegrator.html</anchorfile>
      <anchor>a9f6f1c1064d592c1594696615078e526</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRandomNumberSeed</name>
      <anchorfile>classOpenMM_1_1CustomIntegrator.html</anchorfile>
      <anchor>a6e57a6072a3913e039c5f2da591d7f96</anchor>
      <arglist>(int seed)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>step</name>
      <anchorfile>classOpenMM_1_1CustomIntegrator.html</anchorfile>
      <anchor>a670ab49c98d37df4ffdd814ff6428fc8</anchor>
      <arglist>(int steps)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>initialize</name>
      <anchorfile>classOpenMM_1_1CustomIntegrator.html</anchorfile>
      <anchor>a941fcc46a4e6e1fed160f03aa6cb04a5</anchor>
      <arglist>(ContextImpl &amp;context)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>stateChanged</name>
      <anchorfile>classOpenMM_1_1CustomIntegrator.html</anchorfile>
      <anchor>ad8e72eb830cf0f4b2365aec4a7cc475d</anchor>
      <arglist>(State::DataType changed)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>std::vector&lt; std::string &gt;</type>
      <name>getKernelNames</name>
      <anchorfile>classOpenMM_1_1CustomIntegrator.html</anchorfile>
      <anchor>a227682eb0bbe611b36bb6903e4569af0</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OpenMM::CustomNonbondedForce</name>
    <filename>classOpenMM_1_1CustomNonbondedForce.html</filename>
    <base>OpenMM::Force</base>
    <class kind="class">OpenMM::CustomNonbondedForce::ExclusionInfo</class>
    <class kind="class">OpenMM::CustomNonbondedForce::FunctionInfo</class>
    <class kind="class">OpenMM::CustomNonbondedForce::GlobalParameterInfo</class>
    <class kind="class">OpenMM::CustomNonbondedForce::ParticleInfo</class>
    <class kind="class">OpenMM::CustomNonbondedForce::PerParticleParameterInfo</class>
    <member kind="enumeration">
      <name>NonbondedMethod</name>
      <anchorfile>classOpenMM_1_1CustomNonbondedForce.html</anchorfile>
      <anchor>afa7d9e69832628b8cf72ef628dca7390</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NoCutoff</name>
      <anchorfile>classOpenMM_1_1CustomNonbondedForce.html</anchorfile>
      <anchor>afa7d9e69832628b8cf72ef628dca7390a007d65056b9c2fce5e5549b28e4e2ffb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CutoffNonPeriodic</name>
      <anchorfile>classOpenMM_1_1CustomNonbondedForce.html</anchorfile>
      <anchor>afa7d9e69832628b8cf72ef628dca7390aa2e57a56c2293e046b2fa2231d6f3d6b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CutoffPeriodic</name>
      <anchorfile>classOpenMM_1_1CustomNonbondedForce.html</anchorfile>
      <anchor>afa7d9e69832628b8cf72ef628dca7390a168a54330e90997ff68501baaaa41ccd</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CustomNonbondedForce</name>
      <anchorfile>classOpenMM_1_1CustomNonbondedForce.html</anchorfile>
      <anchor>a8b5e9921bb98a5e4787133c454f55c4b</anchor>
      <arglist>(const std::string &amp;energy)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumParticles</name>
      <anchorfile>classOpenMM_1_1CustomNonbondedForce.html</anchorfile>
      <anchor>abb6f8d8c14d432090000f19e8beafa99</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumExclusions</name>
      <anchorfile>classOpenMM_1_1CustomNonbondedForce.html</anchorfile>
      <anchor>a815d2155ffc24688998dab86cc283849</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumPerParticleParameters</name>
      <anchorfile>classOpenMM_1_1CustomNonbondedForce.html</anchorfile>
      <anchor>acd9ffeb359356701529a7ffe77694021</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumGlobalParameters</name>
      <anchorfile>classOpenMM_1_1CustomNonbondedForce.html</anchorfile>
      <anchor>a25c123d3f1927dfb1a970548b747e1ad</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumFunctions</name>
      <anchorfile>classOpenMM_1_1CustomNonbondedForce.html</anchorfile>
      <anchor>a294b43c63902a615fe3c3db8b5aa0340</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getEnergyFunction</name>
      <anchorfile>classOpenMM_1_1CustomNonbondedForce.html</anchorfile>
      <anchor>aa9960dbb3bed2cb64315eff6392eea31</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setEnergyFunction</name>
      <anchorfile>classOpenMM_1_1CustomNonbondedForce.html</anchorfile>
      <anchor>a6b0c9ff70939ed71a202f955dc18ff31</anchor>
      <arglist>(const std::string &amp;energy)</arglist>
    </member>
    <member kind="function">
      <type>NonbondedMethod</type>
      <name>getNonbondedMethod</name>
      <anchorfile>classOpenMM_1_1CustomNonbondedForce.html</anchorfile>
      <anchor>a39b8aa497b6303d1ceaa0c56311f52a9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNonbondedMethod</name>
      <anchorfile>classOpenMM_1_1CustomNonbondedForce.html</anchorfile>
      <anchor>a705d5824b99e09178ec842c46681fe66</anchor>
      <arglist>(NonbondedMethod method)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getCutoffDistance</name>
      <anchorfile>classOpenMM_1_1CustomNonbondedForce.html</anchorfile>
      <anchor>a5ed4b7977b5b798d0119735dc2a2add6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCutoffDistance</name>
      <anchorfile>classOpenMM_1_1CustomNonbondedForce.html</anchorfile>
      <anchor>aca0f3cbeec7aac67e140f0ed2f67b526</anchor>
      <arglist>(double distance)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>addPerParticleParameter</name>
      <anchorfile>classOpenMM_1_1CustomNonbondedForce.html</anchorfile>
      <anchor>a98c86338def0655742c4b0ddb25a219c</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getPerParticleParameterName</name>
      <anchorfile>classOpenMM_1_1CustomNonbondedForce.html</anchorfile>
      <anchor>a1ac69476629bb277266c55d3317045d0</anchor>
      <arglist>(int index) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPerParticleParameterName</name>
      <anchorfile>classOpenMM_1_1CustomNonbondedForce.html</anchorfile>
      <anchor>a4bbd3cacdb6f0cfdb20bfb553f3a80ab</anchor>
      <arglist>(int index, const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>addGlobalParameter</name>
      <anchorfile>classOpenMM_1_1CustomNonbondedForce.html</anchorfile>
      <anchor>a6560d40a40578ddaf8b5e4a19e373020</anchor>
      <arglist>(const std::string &amp;name, double defaultValue)</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getGlobalParameterName</name>
      <anchorfile>classOpenMM_1_1CustomNonbondedForce.html</anchorfile>
      <anchor>a0dcb0e90bae7a35c1bc8196bb47eb3b7</anchor>
      <arglist>(int index) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setGlobalParameterName</name>
      <anchorfile>classOpenMM_1_1CustomNonbondedForce.html</anchorfile>
      <anchor>a8eacbbd8c5aafb3c565ff9628f14e69b</anchor>
      <arglist>(int index, const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getGlobalParameterDefaultValue</name>
      <anchorfile>classOpenMM_1_1CustomNonbondedForce.html</anchorfile>
      <anchor>a03e5d3d717bac0e2e31a8bb9065ea508</anchor>
      <arglist>(int index) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setGlobalParameterDefaultValue</name>
      <anchorfile>classOpenMM_1_1CustomNonbondedForce.html</anchorfile>
      <anchor>a905fad6be1a06a749b6f04aabe42f481</anchor>
      <arglist>(int index, double defaultValue)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>addParticle</name>
      <anchorfile>classOpenMM_1_1CustomNonbondedForce.html</anchorfile>
      <anchor>adf422a3ebd416157d0d18fbcabba50ce</anchor>
      <arglist>(const std::vector&lt; double &gt; &amp;parameters)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getParticleParameters</name>
      <anchorfile>classOpenMM_1_1CustomNonbondedForce.html</anchorfile>
      <anchor>a699b6427b68d93a528e19e4ab025b874</anchor>
      <arglist>(int index, std::vector&lt; double &gt; &amp;parameters) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setParticleParameters</name>
      <anchorfile>classOpenMM_1_1CustomNonbondedForce.html</anchorfile>
      <anchor>a03a5de5245b1dc884cf6b050b1dc49df</anchor>
      <arglist>(int index, const std::vector&lt; double &gt; &amp;parameters)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>addExclusion</name>
      <anchorfile>classOpenMM_1_1CustomNonbondedForce.html</anchorfile>
      <anchor>ad890e952620cae8e616ccb18eb63737a</anchor>
      <arglist>(int particle1, int particle2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getExclusionParticles</name>
      <anchorfile>classOpenMM_1_1CustomNonbondedForce.html</anchorfile>
      <anchor>aa4f165c0eec62dae9936e5330722f559</anchor>
      <arglist>(int index, int &amp;particle1, int &amp;particle2) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setExclusionParticles</name>
      <anchorfile>classOpenMM_1_1CustomNonbondedForce.html</anchorfile>
      <anchor>a53bbf77cadbd74abd8b6e9acdb85c0dd</anchor>
      <arglist>(int index, int particle1, int particle2)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>addFunction</name>
      <anchorfile>classOpenMM_1_1CustomNonbondedForce.html</anchorfile>
      <anchor>afcc97644875aeb16148a8d53adbfea36</anchor>
      <arglist>(const std::string &amp;name, const std::vector&lt; double &gt; &amp;values, double min, double max)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getFunctionParameters</name>
      <anchorfile>classOpenMM_1_1CustomNonbondedForce.html</anchorfile>
      <anchor>a71ccd77e7d00990e8e02554ec3f05447</anchor>
      <arglist>(int index, std::string &amp;name, std::vector&lt; double &gt; &amp;values, double &amp;min, double &amp;max) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFunctionParameters</name>
      <anchorfile>classOpenMM_1_1CustomNonbondedForce.html</anchorfile>
      <anchor>a49c505e0098204ecb4d372286e157b0c</anchor>
      <arglist>(int index, const std::string &amp;name, const std::vector&lt; double &gt; &amp;values, double min, double max)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>ForceImpl *</type>
      <name>createImpl</name>
      <anchorfile>classOpenMM_1_1CustomNonbondedForce.html</anchorfile>
      <anchor>aaf8d731f241984dfd636ac8fea33780d</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OpenMM::CustomTorsionForce</name>
    <filename>classOpenMM_1_1CustomTorsionForce.html</filename>
    <base>OpenMM::Force</base>
    <class kind="class">OpenMM::CustomTorsionForce::GlobalParameterInfo</class>
    <class kind="class">OpenMM::CustomTorsionForce::TorsionInfo</class>
    <class kind="class">OpenMM::CustomTorsionForce::TorsionParameterInfo</class>
    <member kind="function">
      <type></type>
      <name>CustomTorsionForce</name>
      <anchorfile>classOpenMM_1_1CustomTorsionForce.html</anchorfile>
      <anchor>a973acb6796c67afdaf8505d0a06aead2</anchor>
      <arglist>(const std::string &amp;energy)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumTorsions</name>
      <anchorfile>classOpenMM_1_1CustomTorsionForce.html</anchorfile>
      <anchor>a3bb8e6820ac5baede1973c6bb1fd99aa</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumPerTorsionParameters</name>
      <anchorfile>classOpenMM_1_1CustomTorsionForce.html</anchorfile>
      <anchor>a243aa2b8e8246b13ff61efd0fcc9a135</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumGlobalParameters</name>
      <anchorfile>classOpenMM_1_1CustomTorsionForce.html</anchorfile>
      <anchor>a25c123d3f1927dfb1a970548b747e1ad</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getEnergyFunction</name>
      <anchorfile>classOpenMM_1_1CustomTorsionForce.html</anchorfile>
      <anchor>aa9960dbb3bed2cb64315eff6392eea31</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setEnergyFunction</name>
      <anchorfile>classOpenMM_1_1CustomTorsionForce.html</anchorfile>
      <anchor>a6b0c9ff70939ed71a202f955dc18ff31</anchor>
      <arglist>(const std::string &amp;energy)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>addPerTorsionParameter</name>
      <anchorfile>classOpenMM_1_1CustomTorsionForce.html</anchorfile>
      <anchor>a8f95f21c6b4ccfa75b7e929d8d08fa84</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getPerTorsionParameterName</name>
      <anchorfile>classOpenMM_1_1CustomTorsionForce.html</anchorfile>
      <anchor>a6c40480c4b4182c64a58dc494a2edd8a</anchor>
      <arglist>(int index) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPerTorsionParameterName</name>
      <anchorfile>classOpenMM_1_1CustomTorsionForce.html</anchorfile>
      <anchor>aa2ec33e7a69236261dc3ed29573e76a8</anchor>
      <arglist>(int index, const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>addGlobalParameter</name>
      <anchorfile>classOpenMM_1_1CustomTorsionForce.html</anchorfile>
      <anchor>a6560d40a40578ddaf8b5e4a19e373020</anchor>
      <arglist>(const std::string &amp;name, double defaultValue)</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getGlobalParameterName</name>
      <anchorfile>classOpenMM_1_1CustomTorsionForce.html</anchorfile>
      <anchor>a0dcb0e90bae7a35c1bc8196bb47eb3b7</anchor>
      <arglist>(int index) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setGlobalParameterName</name>
      <anchorfile>classOpenMM_1_1CustomTorsionForce.html</anchorfile>
      <anchor>a8eacbbd8c5aafb3c565ff9628f14e69b</anchor>
      <arglist>(int index, const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getGlobalParameterDefaultValue</name>
      <anchorfile>classOpenMM_1_1CustomTorsionForce.html</anchorfile>
      <anchor>a03e5d3d717bac0e2e31a8bb9065ea508</anchor>
      <arglist>(int index) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setGlobalParameterDefaultValue</name>
      <anchorfile>classOpenMM_1_1CustomTorsionForce.html</anchorfile>
      <anchor>a905fad6be1a06a749b6f04aabe42f481</anchor>
      <arglist>(int index, double defaultValue)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>addTorsion</name>
      <anchorfile>classOpenMM_1_1CustomTorsionForce.html</anchorfile>
      <anchor>aa7a9485094c250184dad6a39d93805c3</anchor>
      <arglist>(int particle1, int particle2, int particle3, int particle4, const std::vector&lt; double &gt; &amp;parameters)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getTorsionParameters</name>
      <anchorfile>classOpenMM_1_1CustomTorsionForce.html</anchorfile>
      <anchor>acf856421e4b825c53c5288c0162ebcf7</anchor>
      <arglist>(int index, int &amp;particle1, int &amp;particle2, int &amp;particle3, int &amp;particle4, std::vector&lt; double &gt; &amp;parameters) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTorsionParameters</name>
      <anchorfile>classOpenMM_1_1CustomTorsionForce.html</anchorfile>
      <anchor>aafd17ab777f4ce4b67ff6de2635e1ba2</anchor>
      <arglist>(int index, int particle1, int particle2, int particle3, int particle4, const std::vector&lt; double &gt; &amp;parameters)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>ForceImpl *</type>
      <name>createImpl</name>
      <anchorfile>classOpenMM_1_1CustomTorsionForce.html</anchorfile>
      <anchor>aaf8d731f241984dfd636ac8fea33780d</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OpenMM::Force</name>
    <filename>classOpenMM_1_1Force.html</filename>
    <member kind="function">
      <type></type>
      <name>Force</name>
      <anchorfile>classOpenMM_1_1Force.html</anchorfile>
      <anchor>afb0f4de1af73df67ed17260f56a9e6cb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Force</name>
      <anchorfile>classOpenMM_1_1Force.html</anchorfile>
      <anchor>abe43937e5f4d66313e5084556992b92b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getForceGroup</name>
      <anchorfile>classOpenMM_1_1Force.html</anchorfile>
      <anchor>a295e039e00957b745da507e18f3ec8b8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setForceGroup</name>
      <anchorfile>classOpenMM_1_1Force.html</anchorfile>
      <anchor>a159d60bf415030829c9ac2e3c493cb0a</anchor>
      <arglist>(int group)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual ForceImpl *</type>
      <name>createImpl</name>
      <anchorfile>classOpenMM_1_1Force.html</anchorfile>
      <anchor>abadee0d400433c18bfe04a9c450e117f</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="friend" protection="protected">
      <type>friend class</type>
      <name>ContextImpl</name>
      <anchorfile>classOpenMM_1_1Force.html</anchorfile>
      <anchor>a7e2f3e20ff3f49ee3b9c0e529422b663</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OpenMM::GBSAOBCForce</name>
    <filename>classOpenMM_1_1GBSAOBCForce.html</filename>
    <base>OpenMM::Force</base>
    <class kind="class">OpenMM::GBSAOBCForce::ParticleInfo</class>
    <member kind="enumeration">
      <name>NonbondedMethod</name>
      <anchorfile>classOpenMM_1_1GBSAOBCForce.html</anchorfile>
      <anchor>afa7d9e69832628b8cf72ef628dca7390</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NoCutoff</name>
      <anchorfile>classOpenMM_1_1GBSAOBCForce.html</anchorfile>
      <anchor>afa7d9e69832628b8cf72ef628dca7390a007d65056b9c2fce5e5549b28e4e2ffb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CutoffNonPeriodic</name>
      <anchorfile>classOpenMM_1_1GBSAOBCForce.html</anchorfile>
      <anchor>afa7d9e69832628b8cf72ef628dca7390aa2e57a56c2293e046b2fa2231d6f3d6b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CutoffPeriodic</name>
      <anchorfile>classOpenMM_1_1GBSAOBCForce.html</anchorfile>
      <anchor>afa7d9e69832628b8cf72ef628dca7390a168a54330e90997ff68501baaaa41ccd</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GBSAOBCForce</name>
      <anchorfile>classOpenMM_1_1GBSAOBCForce.html</anchorfile>
      <anchor>a58d09c91fa9b78b2da95bd7d88833cbd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumParticles</name>
      <anchorfile>classOpenMM_1_1GBSAOBCForce.html</anchorfile>
      <anchor>abb6f8d8c14d432090000f19e8beafa99</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>addParticle</name>
      <anchorfile>classOpenMM_1_1GBSAOBCForce.html</anchorfile>
      <anchor>abad74551810bef20798fe24ffa7b4e91</anchor>
      <arglist>(double charge, double radius, double scalingFactor)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getParticleParameters</name>
      <anchorfile>classOpenMM_1_1GBSAOBCForce.html</anchorfile>
      <anchor>a8bfd0a9cbdb7491ca431ae005c351bef</anchor>
      <arglist>(int index, double &amp;charge, double &amp;radius, double &amp;scalingFactor) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setParticleParameters</name>
      <anchorfile>classOpenMM_1_1GBSAOBCForce.html</anchorfile>
      <anchor>a2e41c8f2ca482df7f8b5ca289674f7c5</anchor>
      <arglist>(int index, double charge, double radius, double scalingFactor)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getSolventDielectric</name>
      <anchorfile>classOpenMM_1_1GBSAOBCForce.html</anchorfile>
      <anchor>a936397a02cce817fc3c91317bb9009cd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSolventDielectric</name>
      <anchorfile>classOpenMM_1_1GBSAOBCForce.html</anchorfile>
      <anchor>a87536d9d2f9c494220b1fc2c8e3f004b</anchor>
      <arglist>(double dielectric)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getSoluteDielectric</name>
      <anchorfile>classOpenMM_1_1GBSAOBCForce.html</anchorfile>
      <anchor>ab69b68443225c10dc15f54ec5d4ba0d2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSoluteDielectric</name>
      <anchorfile>classOpenMM_1_1GBSAOBCForce.html</anchorfile>
      <anchor>a77c95618f97773dced0ac319a07f139c</anchor>
      <arglist>(double dielectric)</arglist>
    </member>
    <member kind="function">
      <type>NonbondedMethod</type>
      <name>getNonbondedMethod</name>
      <anchorfile>classOpenMM_1_1GBSAOBCForce.html</anchorfile>
      <anchor>a39b8aa497b6303d1ceaa0c56311f52a9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNonbondedMethod</name>
      <anchorfile>classOpenMM_1_1GBSAOBCForce.html</anchorfile>
      <anchor>a705d5824b99e09178ec842c46681fe66</anchor>
      <arglist>(NonbondedMethod method)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getCutoffDistance</name>
      <anchorfile>classOpenMM_1_1GBSAOBCForce.html</anchorfile>
      <anchor>a5ed4b7977b5b798d0119735dc2a2add6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCutoffDistance</name>
      <anchorfile>classOpenMM_1_1GBSAOBCForce.html</anchorfile>
      <anchor>aca0f3cbeec7aac67e140f0ed2f67b526</anchor>
      <arglist>(double distance)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>ForceImpl *</type>
      <name>createImpl</name>
      <anchorfile>classOpenMM_1_1GBSAOBCForce.html</anchorfile>
      <anchor>aaf8d731f241984dfd636ac8fea33780d</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OpenMM::GBVIForce</name>
    <filename>classOpenMM_1_1GBVIForce.html</filename>
    <base>OpenMM::Force</base>
    <class kind="class">OpenMM::GBVIForce::BondInfo</class>
    <class kind="class">OpenMM::GBVIForce::ParticleInfo</class>
    <member kind="enumeration">
      <name>NonbondedMethod</name>
      <anchorfile>classOpenMM_1_1GBVIForce.html</anchorfile>
      <anchor>afa7d9e69832628b8cf72ef628dca7390</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NoCutoff</name>
      <anchorfile>classOpenMM_1_1GBVIForce.html</anchorfile>
      <anchor>afa7d9e69832628b8cf72ef628dca7390a007d65056b9c2fce5e5549b28e4e2ffb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CutoffNonPeriodic</name>
      <anchorfile>classOpenMM_1_1GBVIForce.html</anchorfile>
      <anchor>afa7d9e69832628b8cf72ef628dca7390aa2e57a56c2293e046b2fa2231d6f3d6b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CutoffPeriodic</name>
      <anchorfile>classOpenMM_1_1GBVIForce.html</anchorfile>
      <anchor>afa7d9e69832628b8cf72ef628dca7390a168a54330e90997ff68501baaaa41ccd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>BornRadiusScalingMethod</name>
      <anchorfile>classOpenMM_1_1GBVIForce.html</anchorfile>
      <anchor>a19caf4f7812ef42b2af35924aa272699</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NoScaling</name>
      <anchorfile>classOpenMM_1_1GBVIForce.html</anchorfile>
      <anchor>a19caf4f7812ef42b2af35924aa272699a4eb4ab774bb569ff0d1197fa91534265</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>QuinticSpline</name>
      <anchorfile>classOpenMM_1_1GBVIForce.html</anchorfile>
      <anchor>a19caf4f7812ef42b2af35924aa272699a4c8464e42f753239e02c195d5ebea5a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GBVIForce</name>
      <anchorfile>classOpenMM_1_1GBVIForce.html</anchorfile>
      <anchor>a9f88e3b39de4f7ec1d3ef50cc27d9ea5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumParticles</name>
      <anchorfile>classOpenMM_1_1GBVIForce.html</anchorfile>
      <anchor>abb6f8d8c14d432090000f19e8beafa99</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>addParticle</name>
      <anchorfile>classOpenMM_1_1GBVIForce.html</anchorfile>
      <anchor>a9bcacc5a829b95a3a80fd0570d0a961a</anchor>
      <arglist>(double charge, double radius, double gamma)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getParticleParameters</name>
      <anchorfile>classOpenMM_1_1GBVIForce.html</anchorfile>
      <anchor>a172fe08265497aa3529c09d138b3efd5</anchor>
      <arglist>(int index, double &amp;charge, double &amp;radius, double &amp;gamma) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setParticleParameters</name>
      <anchorfile>classOpenMM_1_1GBVIForce.html</anchorfile>
      <anchor>afe6668bdb022cc46eec6284e8ea793ff</anchor>
      <arglist>(int index, double charge, double radius, double gamma)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>addBond</name>
      <anchorfile>classOpenMM_1_1GBVIForce.html</anchorfile>
      <anchor>a7c3dd3f640d5f4788dce49d7e1032b24</anchor>
      <arglist>(int particle1, int particle2, double distance)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getBondParameters</name>
      <anchorfile>classOpenMM_1_1GBVIForce.html</anchorfile>
      <anchor>a7ce70a59446a79b67c0100d230f5cb22</anchor>
      <arglist>(int index, int &amp;particle1, int &amp;particle2, double &amp;distance) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBondParameters</name>
      <anchorfile>classOpenMM_1_1GBVIForce.html</anchorfile>
      <anchor>aef2965f325a14421afae18aad085f8ac</anchor>
      <arglist>(int index, int particle1, int particle2, double bondLength)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumBonds</name>
      <anchorfile>classOpenMM_1_1GBVIForce.html</anchorfile>
      <anchor>a99bb826114c2cc3f2cd3ce0ad49bee89</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getSolventDielectric</name>
      <anchorfile>classOpenMM_1_1GBVIForce.html</anchorfile>
      <anchor>a936397a02cce817fc3c91317bb9009cd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSolventDielectric</name>
      <anchorfile>classOpenMM_1_1GBVIForce.html</anchorfile>
      <anchor>a87536d9d2f9c494220b1fc2c8e3f004b</anchor>
      <arglist>(double dielectric)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getSoluteDielectric</name>
      <anchorfile>classOpenMM_1_1GBVIForce.html</anchorfile>
      <anchor>ab69b68443225c10dc15f54ec5d4ba0d2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSoluteDielectric</name>
      <anchorfile>classOpenMM_1_1GBVIForce.html</anchorfile>
      <anchor>a77c95618f97773dced0ac319a07f139c</anchor>
      <arglist>(double dielectric)</arglist>
    </member>
    <member kind="function">
      <type>NonbondedMethod</type>
      <name>getNonbondedMethod</name>
      <anchorfile>classOpenMM_1_1GBVIForce.html</anchorfile>
      <anchor>a39b8aa497b6303d1ceaa0c56311f52a9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNonbondedMethod</name>
      <anchorfile>classOpenMM_1_1GBVIForce.html</anchorfile>
      <anchor>a705d5824b99e09178ec842c46681fe66</anchor>
      <arglist>(NonbondedMethod method)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getCutoffDistance</name>
      <anchorfile>classOpenMM_1_1GBVIForce.html</anchorfile>
      <anchor>a5ed4b7977b5b798d0119735dc2a2add6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCutoffDistance</name>
      <anchorfile>classOpenMM_1_1GBVIForce.html</anchorfile>
      <anchor>aca0f3cbeec7aac67e140f0ed2f67b526</anchor>
      <arglist>(double distance)</arglist>
    </member>
    <member kind="function">
      <type>BornRadiusScalingMethod</type>
      <name>getBornRadiusScalingMethod</name>
      <anchorfile>classOpenMM_1_1GBVIForce.html</anchorfile>
      <anchor>a317dde2d10862ae92cffddda0513bc32</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBornRadiusScalingMethod</name>
      <anchorfile>classOpenMM_1_1GBVIForce.html</anchorfile>
      <anchor>a65adc8268402bc09c84451b2d13f6868</anchor>
      <arglist>(BornRadiusScalingMethod method)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getQuinticLowerLimitFactor</name>
      <anchorfile>classOpenMM_1_1GBVIForce.html</anchorfile>
      <anchor>a5bfb3d6f7eb5335a9ac7678d5aa64d20</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setQuinticLowerLimitFactor</name>
      <anchorfile>classOpenMM_1_1GBVIForce.html</anchorfile>
      <anchor>a631d592007b8d69c6db03c13aba047ba</anchor>
      <arglist>(double quinticLowerLimitFactor)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getQuinticUpperBornRadiusLimit</name>
      <anchorfile>classOpenMM_1_1GBVIForce.html</anchorfile>
      <anchor>a4ee5fdcd264372d3ace53b465daef470</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setQuinticUpperBornRadiusLimit</name>
      <anchorfile>classOpenMM_1_1GBVIForce.html</anchorfile>
      <anchor>aad59ae7274adb0e8ddcc2c5663fe1605</anchor>
      <arglist>(double quinticUpperBornRadiusLimit)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>ForceImpl *</type>
      <name>createImpl</name>
      <anchorfile>classOpenMM_1_1GBVIForce.html</anchorfile>
      <anchor>aaf8d731f241984dfd636ac8fea33780d</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OpenMM::HarmonicAngleForce</name>
    <filename>classOpenMM_1_1HarmonicAngleForce.html</filename>
    <base>OpenMM::Force</base>
    <class kind="class">OpenMM::HarmonicAngleForce::AngleInfo</class>
    <member kind="function">
      <type></type>
      <name>HarmonicAngleForce</name>
      <anchorfile>classOpenMM_1_1HarmonicAngleForce.html</anchorfile>
      <anchor>a2520d5a39f3d88f1c53357be39a62a86</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumAngles</name>
      <anchorfile>classOpenMM_1_1HarmonicAngleForce.html</anchorfile>
      <anchor>a6d6db7820f5284ccd108921214a49502</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>addAngle</name>
      <anchorfile>classOpenMM_1_1HarmonicAngleForce.html</anchorfile>
      <anchor>a14724094ec5cfb1b7157545e3ce3b4c6</anchor>
      <arglist>(int particle1, int particle2, int particle3, double angle, double k)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getAngleParameters</name>
      <anchorfile>classOpenMM_1_1HarmonicAngleForce.html</anchorfile>
      <anchor>a4cbdad168d5d124ff05e50aee89d139f</anchor>
      <arglist>(int index, int &amp;particle1, int &amp;particle2, int &amp;particle3, double &amp;angle, double &amp;k) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAngleParameters</name>
      <anchorfile>classOpenMM_1_1HarmonicAngleForce.html</anchorfile>
      <anchor>a7bf805d32758b36678ca7b6f865986ec</anchor>
      <arglist>(int index, int particle1, int particle2, int particle3, double angle, double k)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>ForceImpl *</type>
      <name>createImpl</name>
      <anchorfile>classOpenMM_1_1HarmonicAngleForce.html</anchorfile>
      <anchor>aaf8d731f241984dfd636ac8fea33780d</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OpenMM::HarmonicBondForce</name>
    <filename>classOpenMM_1_1HarmonicBondForce.html</filename>
    <base>OpenMM::Force</base>
    <class kind="class">OpenMM::HarmonicBondForce::BondInfo</class>
    <member kind="function">
      <type></type>
      <name>HarmonicBondForce</name>
      <anchorfile>classOpenMM_1_1HarmonicBondForce.html</anchorfile>
      <anchor>ab8fb81a6182ba771322aef78cc907143</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumBonds</name>
      <anchorfile>classOpenMM_1_1HarmonicBondForce.html</anchorfile>
      <anchor>a16f41cfeb5ee7f6163d00a230a031bcd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>addBond</name>
      <anchorfile>classOpenMM_1_1HarmonicBondForce.html</anchorfile>
      <anchor>a7adef2195d5fde6d61deea685d79ca43</anchor>
      <arglist>(int particle1, int particle2, double length, double k)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getBondParameters</name>
      <anchorfile>classOpenMM_1_1HarmonicBondForce.html</anchorfile>
      <anchor>a4abbf670b765860f952b5a08f84bad19</anchor>
      <arglist>(int index, int &amp;particle1, int &amp;particle2, double &amp;length, double &amp;k) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBondParameters</name>
      <anchorfile>classOpenMM_1_1HarmonicBondForce.html</anchorfile>
      <anchor>a1a944df5b35209e5d636bdf30ecea819</anchor>
      <arglist>(int index, int particle1, int particle2, double length, double k)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>ForceImpl *</type>
      <name>createImpl</name>
      <anchorfile>classOpenMM_1_1HarmonicBondForce.html</anchorfile>
      <anchor>aaf8d731f241984dfd636ac8fea33780d</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OpenMM::Integrator</name>
    <filename>classOpenMM_1_1Integrator.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Integrator</name>
      <anchorfile>classOpenMM_1_1Integrator.html</anchorfile>
      <anchor>ac13ff1f4b36510ac4bcd076d4c1773ab</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getStepSize</name>
      <anchorfile>classOpenMM_1_1Integrator.html</anchorfile>
      <anchor>a65c3266b2f624486c8135a4bb3574886</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setStepSize</name>
      <anchorfile>classOpenMM_1_1Integrator.html</anchorfile>
      <anchor>aa89401f4909b94423a6dc01888d8cec2</anchor>
      <arglist>(double size)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getConstraintTolerance</name>
      <anchorfile>classOpenMM_1_1Integrator.html</anchorfile>
      <anchor>a76f57a9f127f12bb12b2842250b25eb0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setConstraintTolerance</name>
      <anchorfile>classOpenMM_1_1Integrator.html</anchorfile>
      <anchor>a93f89409cfa7f3b7a3092c145ee8c4fa</anchor>
      <arglist>(double tol)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>step</name>
      <anchorfile>classOpenMM_1_1Integrator.html</anchorfile>
      <anchor>a53edbe718bcc136ba59e8ba840f6774d</anchor>
      <arglist>(int steps)=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>classOpenMM_1_1Integrator.html</anchorfile>
      <anchor>afe316586ff785422c7a79a35bfa532e5</anchor>
      <arglist>(ContextImpl &amp;context)=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual std::vector&lt; std::string &gt;</type>
      <name>getKernelNames</name>
      <anchorfile>classOpenMM_1_1Integrator.html</anchorfile>
      <anchor>ab39a8e99fce4c32b97e1292a36527c71</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>stateChanged</name>
      <anchorfile>classOpenMM_1_1Integrator.html</anchorfile>
      <anchor>a4398cf1e763c068e4801b2d6dae9d0ad</anchor>
      <arglist>(State::DataType changed)</arglist>
    </member>
    <member kind="friend" protection="protected">
      <type>friend class</type>
      <name>ContextImpl</name>
      <anchorfile>classOpenMM_1_1Integrator.html</anchorfile>
      <anchor>a7e2f3e20ff3f49ee3b9c0e529422b663</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OpenMM::AndersenThermostatImpl</name>
    <filename>classOpenMM_1_1AndersenThermostatImpl.html</filename>
    <base>OpenMM::ForceImpl</base>
    <member kind="function">
      <type></type>
      <name>AndersenThermostatImpl</name>
      <anchorfile>classOpenMM_1_1AndersenThermostatImpl.html</anchorfile>
      <anchor>aa7ebb17df27915172206a7fb6ee8df07</anchor>
      <arglist>(AndersenThermostat &amp;owner)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initialize</name>
      <anchorfile>classOpenMM_1_1AndersenThermostatImpl.html</anchorfile>
      <anchor>a941fcc46a4e6e1fed160f03aa6cb04a5</anchor>
      <arglist>(ContextImpl &amp;context)</arglist>
    </member>
    <member kind="function">
      <type>AndersenThermostat &amp;</type>
      <name>getOwner</name>
      <anchorfile>classOpenMM_1_1AndersenThermostatImpl.html</anchorfile>
      <anchor>a80d54590933eb368a707942ebec27c9a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateContextState</name>
      <anchorfile>classOpenMM_1_1AndersenThermostatImpl.html</anchorfile>
      <anchor>aa58bd007a4baeabc2d1c4dadf95264b2</anchor>
      <arglist>(ContextImpl &amp;context)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>calcForcesAndEnergy</name>
      <anchorfile>classOpenMM_1_1AndersenThermostatImpl.html</anchorfile>
      <anchor>a99678112ae1a7185b5b245538de11a54</anchor>
      <arglist>(ContextImpl &amp;context, bool includeForces, bool includeEnergy, int groups)</arglist>
    </member>
    <member kind="function">
      <type>std::map&lt; std::string, double &gt;</type>
      <name>getDefaultParameters</name>
      <anchorfile>classOpenMM_1_1AndersenThermostatImpl.html</anchorfile>
      <anchor>ade8bd2bd4df0d8ff3c692d3b86b17b27</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; std::string &gt;</type>
      <name>getKernelNames</name>
      <anchorfile>classOpenMM_1_1AndersenThermostatImpl.html</anchorfile>
      <anchor>a227682eb0bbe611b36bb6903e4569af0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::vector&lt; std::vector&lt; int &gt; &gt;</type>
      <name>calcParticleGroups</name>
      <anchorfile>classOpenMM_1_1AndersenThermostatImpl.html</anchorfile>
      <anchor>a6b606e3ce15c98be52a43c749b0c3aa8</anchor>
      <arglist>(const System &amp;system)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OpenMM::CMAPTorsionForceImpl</name>
    <filename>classOpenMM_1_1CMAPTorsionForceImpl.html</filename>
    <base>OpenMM::ForceImpl</base>
    <member kind="function">
      <type></type>
      <name>CMAPTorsionForceImpl</name>
      <anchorfile>classOpenMM_1_1CMAPTorsionForceImpl.html</anchorfile>
      <anchor>ae8084aff75491b8c5a6c1d506d031937</anchor>
      <arglist>(CMAPTorsionForce &amp;owner)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~CMAPTorsionForceImpl</name>
      <anchorfile>classOpenMM_1_1CMAPTorsionForceImpl.html</anchorfile>
      <anchor>a565296192c396ed8ad4e51be4d935fba</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initialize</name>
      <anchorfile>classOpenMM_1_1CMAPTorsionForceImpl.html</anchorfile>
      <anchor>a941fcc46a4e6e1fed160f03aa6cb04a5</anchor>
      <arglist>(ContextImpl &amp;context)</arglist>
    </member>
    <member kind="function">
      <type>CMAPTorsionForce &amp;</type>
      <name>getOwner</name>
      <anchorfile>classOpenMM_1_1CMAPTorsionForceImpl.html</anchorfile>
      <anchor>a4e2c0b511a8ec1adda8acba8ecdd7346</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateContextState</name>
      <anchorfile>classOpenMM_1_1CMAPTorsionForceImpl.html</anchorfile>
      <anchor>aa58bd007a4baeabc2d1c4dadf95264b2</anchor>
      <arglist>(ContextImpl &amp;context)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>calcForcesAndEnergy</name>
      <anchorfile>classOpenMM_1_1CMAPTorsionForceImpl.html</anchorfile>
      <anchor>a99678112ae1a7185b5b245538de11a54</anchor>
      <arglist>(ContextImpl &amp;context, bool includeForces, bool includeEnergy, int groups)</arglist>
    </member>
    <member kind="function">
      <type>std::map&lt; std::string, double &gt;</type>
      <name>getDefaultParameters</name>
      <anchorfile>classOpenMM_1_1CMAPTorsionForceImpl.html</anchorfile>
      <anchor>ade8bd2bd4df0d8ff3c692d3b86b17b27</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; std::string &gt;</type>
      <name>getKernelNames</name>
      <anchorfile>classOpenMM_1_1CMAPTorsionForceImpl.html</anchorfile>
      <anchor>a227682eb0bbe611b36bb6903e4569af0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>calcMapDerivatives</name>
      <anchorfile>classOpenMM_1_1CMAPTorsionForceImpl.html</anchorfile>
      <anchor>a1f338995bbc3c43c6a142035970d1759</anchor>
      <arglist>(int size, const std::vector&lt; double &gt; &amp;energy, std::vector&lt; std::vector&lt; double &gt; &gt; &amp;c)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OpenMM::CMMotionRemoverImpl</name>
    <filename>classOpenMM_1_1CMMotionRemoverImpl.html</filename>
    <base>OpenMM::ForceImpl</base>
    <member kind="function">
      <type></type>
      <name>CMMotionRemoverImpl</name>
      <anchorfile>classOpenMM_1_1CMMotionRemoverImpl.html</anchorfile>
      <anchor>ab13affad27fbf1af09863f97941dae41</anchor>
      <arglist>(CMMotionRemover &amp;owner)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initialize</name>
      <anchorfile>classOpenMM_1_1CMMotionRemoverImpl.html</anchorfile>
      <anchor>a941fcc46a4e6e1fed160f03aa6cb04a5</anchor>
      <arglist>(ContextImpl &amp;context)</arglist>
    </member>
    <member kind="function">
      <type>CMMotionRemover &amp;</type>
      <name>getOwner</name>
      <anchorfile>classOpenMM_1_1CMMotionRemoverImpl.html</anchorfile>
      <anchor>afa1a4424a50be78b02a91ba863fd11f8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateContextState</name>
      <anchorfile>classOpenMM_1_1CMMotionRemoverImpl.html</anchorfile>
      <anchor>aa58bd007a4baeabc2d1c4dadf95264b2</anchor>
      <arglist>(ContextImpl &amp;context)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>calcForcesAndEnergy</name>
      <anchorfile>classOpenMM_1_1CMMotionRemoverImpl.html</anchorfile>
      <anchor>a99678112ae1a7185b5b245538de11a54</anchor>
      <arglist>(ContextImpl &amp;context, bool includeForces, bool includeEnergy, int groups)</arglist>
    </member>
    <member kind="function">
      <type>std::map&lt; std::string, double &gt;</type>
      <name>getDefaultParameters</name>
      <anchorfile>classOpenMM_1_1CMMotionRemoverImpl.html</anchorfile>
      <anchor>ade8bd2bd4df0d8ff3c692d3b86b17b27</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; std::string &gt;</type>
      <name>getKernelNames</name>
      <anchorfile>classOpenMM_1_1CMMotionRemoverImpl.html</anchorfile>
      <anchor>a227682eb0bbe611b36bb6903e4569af0</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OpenMM::ContextImpl</name>
    <filename>classOpenMM_1_1ContextImpl.html</filename>
    <member kind="function">
      <type></type>
      <name>ContextImpl</name>
      <anchorfile>classOpenMM_1_1ContextImpl.html</anchorfile>
      <anchor>a889a4b0a7d3e0a661e1b4c513ca194b1</anchor>
      <arglist>(Context &amp;owner, System &amp;system, Integrator &amp;integrator, Platform *platform, const std::map&lt; std::string, std::string &gt; &amp;properties)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ContextImpl</name>
      <anchorfile>classOpenMM_1_1ContextImpl.html</anchorfile>
      <anchor>ae2075520f19b4665e3bf064f4e1efc7c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Context &amp;</type>
      <name>getOwner</name>
      <anchorfile>classOpenMM_1_1ContextImpl.html</anchorfile>
      <anchor>ae41062f611a721569092e1040551ad4b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>System &amp;</type>
      <name>getSystem</name>
      <anchorfile>classOpenMM_1_1ContextImpl.html</anchorfile>
      <anchor>a070254611e9f007153f87a8fa977e91c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Integrator &amp;</type>
      <name>getIntegrator</name>
      <anchorfile>classOpenMM_1_1ContextImpl.html</anchorfile>
      <anchor>a7dc958887b803bb56cd249eb7a12dd22</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Platform &amp;</type>
      <name>getPlatform</name>
      <anchorfile>classOpenMM_1_1ContextImpl.html</anchorfile>
      <anchor>ac8e8a60a031c2b4110a221b4e7a96ed9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getTime</name>
      <anchorfile>classOpenMM_1_1ContextImpl.html</anchorfile>
      <anchor>a438aa7c8c22ebadc95b00bcae18ef20e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTime</name>
      <anchorfile>classOpenMM_1_1ContextImpl.html</anchorfile>
      <anchor>acd2ceab987abdc16c17101e97db10ada</anchor>
      <arglist>(double t)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getPositions</name>
      <anchorfile>classOpenMM_1_1ContextImpl.html</anchorfile>
      <anchor>a11da33bbb631500dd85f5c7ccf69655a</anchor>
      <arglist>(std::vector&lt; Vec3 &gt; &amp;positions)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPositions</name>
      <anchorfile>classOpenMM_1_1ContextImpl.html</anchorfile>
      <anchor>a039cca95cb781d471d4f07936e2e6488</anchor>
      <arglist>(const std::vector&lt; Vec3 &gt; &amp;positions)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getVelocities</name>
      <anchorfile>classOpenMM_1_1ContextImpl.html</anchorfile>
      <anchor>add58ea583692b69a5e79380701892394</anchor>
      <arglist>(std::vector&lt; Vec3 &gt; &amp;velocities)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setVelocities</name>
      <anchorfile>classOpenMM_1_1ContextImpl.html</anchorfile>
      <anchor>a040f8ddbc2378ccc6f07ac2a60dd22c3</anchor>
      <arglist>(const std::vector&lt; Vec3 &gt; &amp;velocities)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getForces</name>
      <anchorfile>classOpenMM_1_1ContextImpl.html</anchorfile>
      <anchor>a4928e77d7a97d652465595f09f2c824c</anchor>
      <arglist>(std::vector&lt; Vec3 &gt; &amp;forces)</arglist>
    </member>
    <member kind="function">
      <type>const std::map&lt; std::string, double &gt; &amp;</type>
      <name>getParameters</name>
      <anchorfile>classOpenMM_1_1ContextImpl.html</anchorfile>
      <anchor>a5c2d6cd821539589a050f9c33bfb44ae</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getParameter</name>
      <anchorfile>classOpenMM_1_1ContextImpl.html</anchorfile>
      <anchor>a6b70ac42da5141a5721d25c3f145c948</anchor>
      <arglist>(std::string name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setParameter</name>
      <anchorfile>classOpenMM_1_1ContextImpl.html</anchorfile>
      <anchor>a167b37c85e8ba987dc9f4d949c2dc0a2</anchor>
      <arglist>(std::string name, double value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getPeriodicBoxVectors</name>
      <anchorfile>classOpenMM_1_1ContextImpl.html</anchorfile>
      <anchor>a6bae740ccda4b45ce41edaf4d9563afd</anchor>
      <arglist>(Vec3 &amp;a, Vec3 &amp;b, Vec3 &amp;c)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPeriodicBoxVectors</name>
      <anchorfile>classOpenMM_1_1ContextImpl.html</anchorfile>
      <anchor>a62fcc50a2c34ff28de9667aabf5ec33f</anchor>
      <arglist>(const Vec3 &amp;a, const Vec3 &amp;b, const Vec3 &amp;c)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>applyConstraints</name>
      <anchorfile>classOpenMM_1_1ContextImpl.html</anchorfile>
      <anchor>a74282a7e0e2186059e160cde26a0e2a2</anchor>
      <arglist>(double tol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeVirtualSites</name>
      <anchorfile>classOpenMM_1_1ContextImpl.html</anchorfile>
      <anchor>a07a7e8dbbbcec2dd45939d6483f10b5b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>calcForcesAndEnergy</name>
      <anchorfile>classOpenMM_1_1ContextImpl.html</anchorfile>
      <anchor>aa933c2b035860475596b1ca82d8ab515</anchor>
      <arglist>(bool includeForces, bool includeEnergy, int groups=0xFFFFFFFF)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getLastForceGroups</name>
      <anchorfile>classOpenMM_1_1ContextImpl.html</anchorfile>
      <anchor>a0c6a602b8e00bff0c4334a92c9ff3c55</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>calcKineticEnergy</name>
      <anchorfile>classOpenMM_1_1ContextImpl.html</anchorfile>
      <anchor>a0d52618d2374daf98fca5c6f91c8f1cf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateContextState</name>
      <anchorfile>classOpenMM_1_1ContextImpl.html</anchorfile>
      <anchor>a884c48b78560b9ec402ac25998268771</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; ForceImpl * &gt; &amp;</type>
      <name>getForceImpls</name>
      <anchorfile>classOpenMM_1_1ContextImpl.html</anchorfile>
      <anchor>a5a3851e68b642cb68c26dfdd9b0f325a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>getPlatformData</name>
      <anchorfile>classOpenMM_1_1ContextImpl.html</anchorfile>
      <anchor>a2656481d420fb9577be4d626f202309c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const void *</type>
      <name>getPlatformData</name>
      <anchorfile>classOpenMM_1_1ContextImpl.html</anchorfile>
      <anchor>a7a954112df55835d7f6a30efe6e26235</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPlatformData</name>
      <anchorfile>classOpenMM_1_1ContextImpl.html</anchorfile>
      <anchor>a63252183e3a2c33e0f1f58ac4e70fa1b</anchor>
      <arglist>(void *data)</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; std::vector&lt; int &gt; &gt; &amp;</type>
      <name>getMolecules</name>
      <anchorfile>classOpenMM_1_1ContextImpl.html</anchorfile>
      <anchor>aff306ec24eadf3c1c504515af394dba5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>Context</name>
      <anchorfile>classOpenMM_1_1ContextImpl.html</anchorfile>
      <anchor>ac26c806e60ca4a0547680edb68f6e39b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OpenMM::CustomAngleForceImpl</name>
    <filename>classOpenMM_1_1CustomAngleForceImpl.html</filename>
    <base>OpenMM::ForceImpl</base>
    <member kind="function">
      <type></type>
      <name>CustomAngleForceImpl</name>
      <anchorfile>classOpenMM_1_1CustomAngleForceImpl.html</anchorfile>
      <anchor>a69217c1091ceaed0ae4406720cafbde8</anchor>
      <arglist>(CustomAngleForce &amp;owner)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~CustomAngleForceImpl</name>
      <anchorfile>classOpenMM_1_1CustomAngleForceImpl.html</anchorfile>
      <anchor>abf7ca4092a0357191750f9b033786268</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initialize</name>
      <anchorfile>classOpenMM_1_1CustomAngleForceImpl.html</anchorfile>
      <anchor>a941fcc46a4e6e1fed160f03aa6cb04a5</anchor>
      <arglist>(ContextImpl &amp;context)</arglist>
    </member>
    <member kind="function">
      <type>CustomAngleForce &amp;</type>
      <name>getOwner</name>
      <anchorfile>classOpenMM_1_1CustomAngleForceImpl.html</anchorfile>
      <anchor>aa4ae8c8a7168c25e0621d292f6f0b6e9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateContextState</name>
      <anchorfile>classOpenMM_1_1CustomAngleForceImpl.html</anchorfile>
      <anchor>aa58bd007a4baeabc2d1c4dadf95264b2</anchor>
      <arglist>(ContextImpl &amp;context)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>calcForcesAndEnergy</name>
      <anchorfile>classOpenMM_1_1CustomAngleForceImpl.html</anchorfile>
      <anchor>a99678112ae1a7185b5b245538de11a54</anchor>
      <arglist>(ContextImpl &amp;context, bool includeForces, bool includeEnergy, int groups)</arglist>
    </member>
    <member kind="function">
      <type>std::map&lt; std::string, double &gt;</type>
      <name>getDefaultParameters</name>
      <anchorfile>classOpenMM_1_1CustomAngleForceImpl.html</anchorfile>
      <anchor>ade8bd2bd4df0d8ff3c692d3b86b17b27</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; std::string &gt;</type>
      <name>getKernelNames</name>
      <anchorfile>classOpenMM_1_1CustomAngleForceImpl.html</anchorfile>
      <anchor>a227682eb0bbe611b36bb6903e4569af0</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OpenMM::CustomBondForceImpl</name>
    <filename>classOpenMM_1_1CustomBondForceImpl.html</filename>
    <base>OpenMM::ForceImpl</base>
    <member kind="function">
      <type></type>
      <name>CustomBondForceImpl</name>
      <anchorfile>classOpenMM_1_1CustomBondForceImpl.html</anchorfile>
      <anchor>adbc3ce5a203c5894c90d37abe70c29a4</anchor>
      <arglist>(CustomBondForce &amp;owner)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~CustomBondForceImpl</name>
      <anchorfile>classOpenMM_1_1CustomBondForceImpl.html</anchorfile>
      <anchor>a361bc733b20e0ef1d5662872367c2a08</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initialize</name>
      <anchorfile>classOpenMM_1_1CustomBondForceImpl.html</anchorfile>
      <anchor>a941fcc46a4e6e1fed160f03aa6cb04a5</anchor>
      <arglist>(ContextImpl &amp;context)</arglist>
    </member>
    <member kind="function">
      <type>CustomBondForce &amp;</type>
      <name>getOwner</name>
      <anchorfile>classOpenMM_1_1CustomBondForceImpl.html</anchorfile>
      <anchor>a0fe95869fc0b2b2e8f2cc367634f594e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateContextState</name>
      <anchorfile>classOpenMM_1_1CustomBondForceImpl.html</anchorfile>
      <anchor>aa58bd007a4baeabc2d1c4dadf95264b2</anchor>
      <arglist>(ContextImpl &amp;context)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>calcForcesAndEnergy</name>
      <anchorfile>classOpenMM_1_1CustomBondForceImpl.html</anchorfile>
      <anchor>a99678112ae1a7185b5b245538de11a54</anchor>
      <arglist>(ContextImpl &amp;context, bool includeForces, bool includeEnergy, int groups)</arglist>
    </member>
    <member kind="function">
      <type>std::map&lt; std::string, double &gt;</type>
      <name>getDefaultParameters</name>
      <anchorfile>classOpenMM_1_1CustomBondForceImpl.html</anchorfile>
      <anchor>ade8bd2bd4df0d8ff3c692d3b86b17b27</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; std::string &gt;</type>
      <name>getKernelNames</name>
      <anchorfile>classOpenMM_1_1CustomBondForceImpl.html</anchorfile>
      <anchor>a227682eb0bbe611b36bb6903e4569af0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; std::pair&lt; int, int &gt; &gt;</type>
      <name>getBondedParticles</name>
      <anchorfile>classOpenMM_1_1CustomBondForceImpl.html</anchorfile>
      <anchor>abde04728aa3bc956a231280c23b1f552</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OpenMM::CustomExternalForceImpl</name>
    <filename>classOpenMM_1_1CustomExternalForceImpl.html</filename>
    <base>OpenMM::ForceImpl</base>
    <member kind="function">
      <type></type>
      <name>CustomExternalForceImpl</name>
      <anchorfile>classOpenMM_1_1CustomExternalForceImpl.html</anchorfile>
      <anchor>a79a4a78d26e462b4a420a73a6922cf7a</anchor>
      <arglist>(CustomExternalForce &amp;owner)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~CustomExternalForceImpl</name>
      <anchorfile>classOpenMM_1_1CustomExternalForceImpl.html</anchorfile>
      <anchor>ae445ff42a36fa9f699e8c1fcd17e4c6a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initialize</name>
      <anchorfile>classOpenMM_1_1CustomExternalForceImpl.html</anchorfile>
      <anchor>a941fcc46a4e6e1fed160f03aa6cb04a5</anchor>
      <arglist>(ContextImpl &amp;context)</arglist>
    </member>
    <member kind="function">
      <type>CustomExternalForce &amp;</type>
      <name>getOwner</name>
      <anchorfile>classOpenMM_1_1CustomExternalForceImpl.html</anchorfile>
      <anchor>a5950516d8356a73cd089d9d027e6f71d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateContextState</name>
      <anchorfile>classOpenMM_1_1CustomExternalForceImpl.html</anchorfile>
      <anchor>aa58bd007a4baeabc2d1c4dadf95264b2</anchor>
      <arglist>(ContextImpl &amp;context)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>calcForcesAndEnergy</name>
      <anchorfile>classOpenMM_1_1CustomExternalForceImpl.html</anchorfile>
      <anchor>a99678112ae1a7185b5b245538de11a54</anchor>
      <arglist>(ContextImpl &amp;context, bool includeForces, bool includeEnergy, int groups)</arglist>
    </member>
    <member kind="function">
      <type>std::map&lt; std::string, double &gt;</type>
      <name>getDefaultParameters</name>
      <anchorfile>classOpenMM_1_1CustomExternalForceImpl.html</anchorfile>
      <anchor>ade8bd2bd4df0d8ff3c692d3b86b17b27</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; std::string &gt;</type>
      <name>getKernelNames</name>
      <anchorfile>classOpenMM_1_1CustomExternalForceImpl.html</anchorfile>
      <anchor>a227682eb0bbe611b36bb6903e4569af0</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OpenMM::CustomGBForceImpl</name>
    <filename>classOpenMM_1_1CustomGBForceImpl.html</filename>
    <base>OpenMM::ForceImpl</base>
    <member kind="function">
      <type></type>
      <name>CustomGBForceImpl</name>
      <anchorfile>classOpenMM_1_1CustomGBForceImpl.html</anchorfile>
      <anchor>a72efafe82b44cfbb00ea5644a448e403</anchor>
      <arglist>(CustomGBForce &amp;owner)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~CustomGBForceImpl</name>
      <anchorfile>classOpenMM_1_1CustomGBForceImpl.html</anchorfile>
      <anchor>a73a91daa919ac39e7582fcaa5f7b6e86</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initialize</name>
      <anchorfile>classOpenMM_1_1CustomGBForceImpl.html</anchorfile>
      <anchor>a941fcc46a4e6e1fed160f03aa6cb04a5</anchor>
      <arglist>(ContextImpl &amp;context)</arglist>
    </member>
    <member kind="function">
      <type>CustomGBForce &amp;</type>
      <name>getOwner</name>
      <anchorfile>classOpenMM_1_1CustomGBForceImpl.html</anchorfile>
      <anchor>aa10d8bc7f9d8938ae1ed100f480367f0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateContextState</name>
      <anchorfile>classOpenMM_1_1CustomGBForceImpl.html</anchorfile>
      <anchor>aa58bd007a4baeabc2d1c4dadf95264b2</anchor>
      <arglist>(ContextImpl &amp;context)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>calcForcesAndEnergy</name>
      <anchorfile>classOpenMM_1_1CustomGBForceImpl.html</anchorfile>
      <anchor>a99678112ae1a7185b5b245538de11a54</anchor>
      <arglist>(ContextImpl &amp;context, bool includeForces, bool includeEnergy, int groups)</arglist>
    </member>
    <member kind="function">
      <type>std::map&lt; std::string, double &gt;</type>
      <name>getDefaultParameters</name>
      <anchorfile>classOpenMM_1_1CustomGBForceImpl.html</anchorfile>
      <anchor>ade8bd2bd4df0d8ff3c692d3b86b17b27</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; std::string &gt;</type>
      <name>getKernelNames</name>
      <anchorfile>classOpenMM_1_1CustomGBForceImpl.html</anchorfile>
      <anchor>a227682eb0bbe611b36bb6903e4569af0</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OpenMM::CustomHbondForceImpl</name>
    <filename>classOpenMM_1_1CustomHbondForceImpl.html</filename>
    <base>OpenMM::ForceImpl</base>
    <member kind="function">
      <type></type>
      <name>CustomHbondForceImpl</name>
      <anchorfile>classOpenMM_1_1CustomHbondForceImpl.html</anchorfile>
      <anchor>ab0447d7e6517cecf445dc785d209e8cf</anchor>
      <arglist>(CustomHbondForce &amp;owner)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~CustomHbondForceImpl</name>
      <anchorfile>classOpenMM_1_1CustomHbondForceImpl.html</anchorfile>
      <anchor>a6ae1c465e0fdefc86ff77ae55c7d2540</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initialize</name>
      <anchorfile>classOpenMM_1_1CustomHbondForceImpl.html</anchorfile>
      <anchor>a941fcc46a4e6e1fed160f03aa6cb04a5</anchor>
      <arglist>(ContextImpl &amp;context)</arglist>
    </member>
    <member kind="function">
      <type>CustomHbondForce &amp;</type>
      <name>getOwner</name>
      <anchorfile>classOpenMM_1_1CustomHbondForceImpl.html</anchorfile>
      <anchor>ac887dcb40be82c66d3bae50382b323f9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateContextState</name>
      <anchorfile>classOpenMM_1_1CustomHbondForceImpl.html</anchorfile>
      <anchor>aa58bd007a4baeabc2d1c4dadf95264b2</anchor>
      <arglist>(ContextImpl &amp;context)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>calcForcesAndEnergy</name>
      <anchorfile>classOpenMM_1_1CustomHbondForceImpl.html</anchorfile>
      <anchor>a99678112ae1a7185b5b245538de11a54</anchor>
      <arglist>(ContextImpl &amp;context, bool includeForces, bool includeEnergy, int groups)</arglist>
    </member>
    <member kind="function">
      <type>std::map&lt; std::string, double &gt;</type>
      <name>getDefaultParameters</name>
      <anchorfile>classOpenMM_1_1CustomHbondForceImpl.html</anchorfile>
      <anchor>ade8bd2bd4df0d8ff3c692d3b86b17b27</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; std::string &gt;</type>
      <name>getKernelNames</name>
      <anchorfile>classOpenMM_1_1CustomHbondForceImpl.html</anchorfile>
      <anchor>a227682eb0bbe611b36bb6903e4569af0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Lepton::ParsedExpression</type>
      <name>prepareExpression</name>
      <anchorfile>classOpenMM_1_1CustomHbondForceImpl.html</anchorfile>
      <anchor>aa33f1ae37014c3da8d587a3c3a528d9b</anchor>
      <arglist>(const CustomHbondForce &amp;force, const std::map&lt; std::string, Lepton::CustomFunction * &gt; &amp;functions, std::map&lt; std::string, std::vector&lt; int &gt; &gt; &amp;distances, std::map&lt; std::string, std::vector&lt; int &gt; &gt; &amp;angles, std::map&lt; std::string, std::vector&lt; int &gt; &gt; &amp;dihedrals)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OpenMM::CustomNonbondedForceImpl</name>
    <filename>classOpenMM_1_1CustomNonbondedForceImpl.html</filename>
    <base>OpenMM::ForceImpl</base>
    <member kind="function">
      <type></type>
      <name>CustomNonbondedForceImpl</name>
      <anchorfile>classOpenMM_1_1CustomNonbondedForceImpl.html</anchorfile>
      <anchor>a53348b35cc8f4992bc4edc9ec86327b3</anchor>
      <arglist>(CustomNonbondedForce &amp;owner)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~CustomNonbondedForceImpl</name>
      <anchorfile>classOpenMM_1_1CustomNonbondedForceImpl.html</anchorfile>
      <anchor>a1cf3662ed69a0287594918371ec010b5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initialize</name>
      <anchorfile>classOpenMM_1_1CustomNonbondedForceImpl.html</anchorfile>
      <anchor>a941fcc46a4e6e1fed160f03aa6cb04a5</anchor>
      <arglist>(ContextImpl &amp;context)</arglist>
    </member>
    <member kind="function">
      <type>CustomNonbondedForce &amp;</type>
      <name>getOwner</name>
      <anchorfile>classOpenMM_1_1CustomNonbondedForceImpl.html</anchorfile>
      <anchor>a3432b58609985735ecb2bf792f1d59af</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateContextState</name>
      <anchorfile>classOpenMM_1_1CustomNonbondedForceImpl.html</anchorfile>
      <anchor>aa58bd007a4baeabc2d1c4dadf95264b2</anchor>
      <arglist>(ContextImpl &amp;context)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>calcForcesAndEnergy</name>
      <anchorfile>classOpenMM_1_1CustomNonbondedForceImpl.html</anchorfile>
      <anchor>a99678112ae1a7185b5b245538de11a54</anchor>
      <arglist>(ContextImpl &amp;context, bool includeForces, bool includeEnergy, int groups)</arglist>
    </member>
    <member kind="function">
      <type>std::map&lt; std::string, double &gt;</type>
      <name>getDefaultParameters</name>
      <anchorfile>classOpenMM_1_1CustomNonbondedForceImpl.html</anchorfile>
      <anchor>ade8bd2bd4df0d8ff3c692d3b86b17b27</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; std::string &gt;</type>
      <name>getKernelNames</name>
      <anchorfile>classOpenMM_1_1CustomNonbondedForceImpl.html</anchorfile>
      <anchor>a227682eb0bbe611b36bb6903e4569af0</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OpenMM::CustomTorsionForceImpl</name>
    <filename>classOpenMM_1_1CustomTorsionForceImpl.html</filename>
    <base>OpenMM::ForceImpl</base>
    <member kind="function">
      <type></type>
      <name>CustomTorsionForceImpl</name>
      <anchorfile>classOpenMM_1_1CustomTorsionForceImpl.html</anchorfile>
      <anchor>a7e5e91846a5e0ee9abae729a450c7857</anchor>
      <arglist>(CustomTorsionForce &amp;owner)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~CustomTorsionForceImpl</name>
      <anchorfile>classOpenMM_1_1CustomTorsionForceImpl.html</anchorfile>
      <anchor>aa4902fb626949c02fbc40ac470324c04</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initialize</name>
      <anchorfile>classOpenMM_1_1CustomTorsionForceImpl.html</anchorfile>
      <anchor>a941fcc46a4e6e1fed160f03aa6cb04a5</anchor>
      <arglist>(ContextImpl &amp;context)</arglist>
    </member>
    <member kind="function">
      <type>CustomTorsionForce &amp;</type>
      <name>getOwner</name>
      <anchorfile>classOpenMM_1_1CustomTorsionForceImpl.html</anchorfile>
      <anchor>a9b2ac6eb62eb40207dfd098316afa12d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateContextState</name>
      <anchorfile>classOpenMM_1_1CustomTorsionForceImpl.html</anchorfile>
      <anchor>aa58bd007a4baeabc2d1c4dadf95264b2</anchor>
      <arglist>(ContextImpl &amp;context)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>calcForcesAndEnergy</name>
      <anchorfile>classOpenMM_1_1CustomTorsionForceImpl.html</anchorfile>
      <anchor>a99678112ae1a7185b5b245538de11a54</anchor>
      <arglist>(ContextImpl &amp;context, bool includeForces, bool includeEnergy, int groups)</arglist>
    </member>
    <member kind="function">
      <type>std::map&lt; std::string, double &gt;</type>
      <name>getDefaultParameters</name>
      <anchorfile>classOpenMM_1_1CustomTorsionForceImpl.html</anchorfile>
      <anchor>ade8bd2bd4df0d8ff3c692d3b86b17b27</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; std::string &gt;</type>
      <name>getKernelNames</name>
      <anchorfile>classOpenMM_1_1CustomTorsionForceImpl.html</anchorfile>
      <anchor>a227682eb0bbe611b36bb6903e4569af0</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OpenMM::ForceImpl</name>
    <filename>classOpenMM_1_1ForceImpl.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ForceImpl</name>
      <anchorfile>classOpenMM_1_1ForceImpl.html</anchorfile>
      <anchor>acf5f6fc87f53ea70326be3ae5f4ee6a4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>classOpenMM_1_1ForceImpl.html</anchorfile>
      <anchor>afe316586ff785422c7a79a35bfa532e5</anchor>
      <arglist>(ContextImpl &amp;context)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Force &amp;</type>
      <name>getOwner</name>
      <anchorfile>classOpenMM_1_1ForceImpl.html</anchorfile>
      <anchor>af56e5269cfd8b364dd47e46dff131452</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>updateContextState</name>
      <anchorfile>classOpenMM_1_1ForceImpl.html</anchorfile>
      <anchor>afb4ec503570b3cc290dc48421cf67cad</anchor>
      <arglist>(ContextImpl &amp;context)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>calcForcesAndEnergy</name>
      <anchorfile>classOpenMM_1_1ForceImpl.html</anchorfile>
      <anchor>a34c668d56ca3d9041e979caf5755c12a</anchor>
      <arglist>(ContextImpl &amp;context, bool includeForces, bool includeEnergy, int groups)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::map&lt; std::string, double &gt;</type>
      <name>getDefaultParameters</name>
      <anchorfile>classOpenMM_1_1ForceImpl.html</anchorfile>
      <anchor>a199b5951a15c88f0ce196c9969c37335</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::vector&lt; std::string &gt;</type>
      <name>getKernelNames</name>
      <anchorfile>classOpenMM_1_1ForceImpl.html</anchorfile>
      <anchor>ab39a8e99fce4c32b97e1292a36527c71</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::vector&lt; std::pair&lt; int, int &gt; &gt;</type>
      <name>getBondedParticles</name>
      <anchorfile>classOpenMM_1_1ForceImpl.html</anchorfile>
      <anchor>aa397f9446d1398232716932844d14ea3</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OpenMM::GBSAOBCForceImpl</name>
    <filename>classOpenMM_1_1GBSAOBCForceImpl.html</filename>
    <base>OpenMM::ForceImpl</base>
    <member kind="function">
      <type></type>
      <name>GBSAOBCForceImpl</name>
      <anchorfile>classOpenMM_1_1GBSAOBCForceImpl.html</anchorfile>
      <anchor>a0dc4d2ef76a50bbd0066d6a09b42a69d</anchor>
      <arglist>(GBSAOBCForce &amp;owner)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initialize</name>
      <anchorfile>classOpenMM_1_1GBSAOBCForceImpl.html</anchorfile>
      <anchor>a941fcc46a4e6e1fed160f03aa6cb04a5</anchor>
      <arglist>(ContextImpl &amp;context)</arglist>
    </member>
    <member kind="function">
      <type>GBSAOBCForce &amp;</type>
      <name>getOwner</name>
      <anchorfile>classOpenMM_1_1GBSAOBCForceImpl.html</anchorfile>
      <anchor>a0a26f526293071bb12bb12253092638e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateContextState</name>
      <anchorfile>classOpenMM_1_1GBSAOBCForceImpl.html</anchorfile>
      <anchor>aa58bd007a4baeabc2d1c4dadf95264b2</anchor>
      <arglist>(ContextImpl &amp;context)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>calcForcesAndEnergy</name>
      <anchorfile>classOpenMM_1_1GBSAOBCForceImpl.html</anchorfile>
      <anchor>a99678112ae1a7185b5b245538de11a54</anchor>
      <arglist>(ContextImpl &amp;context, bool includeForces, bool includeEnergy, int groups)</arglist>
    </member>
    <member kind="function">
      <type>std::map&lt; std::string, double &gt;</type>
      <name>getDefaultParameters</name>
      <anchorfile>classOpenMM_1_1GBSAOBCForceImpl.html</anchorfile>
      <anchor>ade8bd2bd4df0d8ff3c692d3b86b17b27</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; std::string &gt;</type>
      <name>getKernelNames</name>
      <anchorfile>classOpenMM_1_1GBSAOBCForceImpl.html</anchorfile>
      <anchor>a227682eb0bbe611b36bb6903e4569af0</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OpenMM::GBVIForceImpl</name>
    <filename>classOpenMM_1_1GBVIForceImpl.html</filename>
    <base>OpenMM::ForceImpl</base>
    <member kind="function">
      <type></type>
      <name>GBVIForceImpl</name>
      <anchorfile>classOpenMM_1_1GBVIForceImpl.html</anchorfile>
      <anchor>a769ccae8854423c76f3a47920db6ee83</anchor>
      <arglist>(GBVIForce &amp;owner)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initialize</name>
      <anchorfile>classOpenMM_1_1GBVIForceImpl.html</anchorfile>
      <anchor>a941fcc46a4e6e1fed160f03aa6cb04a5</anchor>
      <arglist>(ContextImpl &amp;context)</arglist>
    </member>
    <member kind="function">
      <type>GBVIForce &amp;</type>
      <name>getOwner</name>
      <anchorfile>classOpenMM_1_1GBVIForceImpl.html</anchorfile>
      <anchor>ae542c7f8bb5069553993696001bf0f70</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>findScaledRadii</name>
      <anchorfile>classOpenMM_1_1GBVIForceImpl.html</anchorfile>
      <anchor>a36512622c8406a42796765c6c0fb8164</anchor>
      <arglist>(int numberOfParticles, const std::vector&lt; std::vector&lt; int &gt; &gt; &amp;bondIndices, const std::vector&lt; double &gt; &amp;bondLengths, std::vector&lt; double &gt; &amp;scaledRadii) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getBondsFromForces</name>
      <anchorfile>classOpenMM_1_1GBVIForceImpl.html</anchorfile>
      <anchor>a7a2848c0654a66945e65f5f503e9195f</anchor>
      <arglist>(ContextImpl &amp;context)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateContextState</name>
      <anchorfile>classOpenMM_1_1GBVIForceImpl.html</anchorfile>
      <anchor>aa58bd007a4baeabc2d1c4dadf95264b2</anchor>
      <arglist>(ContextImpl &amp;context)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>calcForcesAndEnergy</name>
      <anchorfile>classOpenMM_1_1GBVIForceImpl.html</anchorfile>
      <anchor>a99678112ae1a7185b5b245538de11a54</anchor>
      <arglist>(ContextImpl &amp;context, bool includeForces, bool includeEnergy, int groups)</arglist>
    </member>
    <member kind="function">
      <type>std::map&lt; std::string, double &gt;</type>
      <name>getDefaultParameters</name>
      <anchorfile>classOpenMM_1_1GBVIForceImpl.html</anchorfile>
      <anchor>ade8bd2bd4df0d8ff3c692d3b86b17b27</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; std::string &gt;</type>
      <name>getKernelNames</name>
      <anchorfile>classOpenMM_1_1GBVIForceImpl.html</anchorfile>
      <anchor>a227682eb0bbe611b36bb6903e4569af0</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OpenMM::HarmonicAngleForceImpl</name>
    <filename>classOpenMM_1_1HarmonicAngleForceImpl.html</filename>
    <base>OpenMM::ForceImpl</base>
    <member kind="function">
      <type></type>
      <name>HarmonicAngleForceImpl</name>
      <anchorfile>classOpenMM_1_1HarmonicAngleForceImpl.html</anchorfile>
      <anchor>af9201cfffa8f1141629d958ac66637b1</anchor>
      <arglist>(HarmonicAngleForce &amp;owner)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~HarmonicAngleForceImpl</name>
      <anchorfile>classOpenMM_1_1HarmonicAngleForceImpl.html</anchorfile>
      <anchor>a060a077b0072ab6052eaaf74b9124b67</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initialize</name>
      <anchorfile>classOpenMM_1_1HarmonicAngleForceImpl.html</anchorfile>
      <anchor>a941fcc46a4e6e1fed160f03aa6cb04a5</anchor>
      <arglist>(ContextImpl &amp;context)</arglist>
    </member>
    <member kind="function">
      <type>HarmonicAngleForce &amp;</type>
      <name>getOwner</name>
      <anchorfile>classOpenMM_1_1HarmonicAngleForceImpl.html</anchorfile>
      <anchor>afc129d773e21677c7619d9dec7144af5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateContextState</name>
      <anchorfile>classOpenMM_1_1HarmonicAngleForceImpl.html</anchorfile>
      <anchor>aa58bd007a4baeabc2d1c4dadf95264b2</anchor>
      <arglist>(ContextImpl &amp;context)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>calcForcesAndEnergy</name>
      <anchorfile>classOpenMM_1_1HarmonicAngleForceImpl.html</anchorfile>
      <anchor>a99678112ae1a7185b5b245538de11a54</anchor>
      <arglist>(ContextImpl &amp;context, bool includeForces, bool includeEnergy, int groups)</arglist>
    </member>
    <member kind="function">
      <type>std::map&lt; std::string, double &gt;</type>
      <name>getDefaultParameters</name>
      <anchorfile>classOpenMM_1_1HarmonicAngleForceImpl.html</anchorfile>
      <anchor>ade8bd2bd4df0d8ff3c692d3b86b17b27</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; std::string &gt;</type>
      <name>getKernelNames</name>
      <anchorfile>classOpenMM_1_1HarmonicAngleForceImpl.html</anchorfile>
      <anchor>a227682eb0bbe611b36bb6903e4569af0</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OpenMM::HarmonicBondForceImpl</name>
    <filename>classOpenMM_1_1HarmonicBondForceImpl.html</filename>
    <base>OpenMM::ForceImpl</base>
    <member kind="function">
      <type></type>
      <name>HarmonicBondForceImpl</name>
      <anchorfile>classOpenMM_1_1HarmonicBondForceImpl.html</anchorfile>
      <anchor>a062c046246dfe4246e5bfcc3b05ccbe3</anchor>
      <arglist>(HarmonicBondForce &amp;owner)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~HarmonicBondForceImpl</name>
      <anchorfile>classOpenMM_1_1HarmonicBondForceImpl.html</anchorfile>
      <anchor>a00935976b40020a6394c1dd91107d50e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initialize</name>
      <anchorfile>classOpenMM_1_1HarmonicBondForceImpl.html</anchorfile>
      <anchor>a941fcc46a4e6e1fed160f03aa6cb04a5</anchor>
      <arglist>(ContextImpl &amp;context)</arglist>
    </member>
    <member kind="function">
      <type>HarmonicBondForce &amp;</type>
      <name>getOwner</name>
      <anchorfile>classOpenMM_1_1HarmonicBondForceImpl.html</anchorfile>
      <anchor>a1e36ae34c0d60210efeaf64572dfb6c3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateContextState</name>
      <anchorfile>classOpenMM_1_1HarmonicBondForceImpl.html</anchorfile>
      <anchor>aa58bd007a4baeabc2d1c4dadf95264b2</anchor>
      <arglist>(ContextImpl &amp;context)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>calcForcesAndEnergy</name>
      <anchorfile>classOpenMM_1_1HarmonicBondForceImpl.html</anchorfile>
      <anchor>a99678112ae1a7185b5b245538de11a54</anchor>
      <arglist>(ContextImpl &amp;context, bool includeForces, bool includeEnergy, int groups)</arglist>
    </member>
    <member kind="function">
      <type>std::map&lt; std::string, double &gt;</type>
      <name>getDefaultParameters</name>
      <anchorfile>classOpenMM_1_1HarmonicBondForceImpl.html</anchorfile>
      <anchor>ade8bd2bd4df0d8ff3c692d3b86b17b27</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; std::string &gt;</type>
      <name>getKernelNames</name>
      <anchorfile>classOpenMM_1_1HarmonicBondForceImpl.html</anchorfile>
      <anchor>a227682eb0bbe611b36bb6903e4569af0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; std::pair&lt; int, int &gt; &gt;</type>
      <name>getBondedParticles</name>
      <anchorfile>classOpenMM_1_1HarmonicBondForceImpl.html</anchorfile>
      <anchor>abde04728aa3bc956a231280c23b1f552</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OpenMM::MonteCarloBarostatImpl</name>
    <filename>classOpenMM_1_1MonteCarloBarostatImpl.html</filename>
    <base>OpenMM::ForceImpl</base>
    <member kind="function">
      <type></type>
      <name>MonteCarloBarostatImpl</name>
      <anchorfile>classOpenMM_1_1MonteCarloBarostatImpl.html</anchorfile>
      <anchor>a6ae30dea89c7c58098e23410fadf6992</anchor>
      <arglist>(MonteCarloBarostat &amp;owner)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initialize</name>
      <anchorfile>classOpenMM_1_1MonteCarloBarostatImpl.html</anchorfile>
      <anchor>a941fcc46a4e6e1fed160f03aa6cb04a5</anchor>
      <arglist>(ContextImpl &amp;context)</arglist>
    </member>
    <member kind="function">
      <type>MonteCarloBarostat &amp;</type>
      <name>getOwner</name>
      <anchorfile>classOpenMM_1_1MonteCarloBarostatImpl.html</anchorfile>
      <anchor>acc83cb272edb8882b13b40978c6e8cdf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateContextState</name>
      <anchorfile>classOpenMM_1_1MonteCarloBarostatImpl.html</anchorfile>
      <anchor>aa58bd007a4baeabc2d1c4dadf95264b2</anchor>
      <arglist>(ContextImpl &amp;context)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>calcForcesAndEnergy</name>
      <anchorfile>classOpenMM_1_1MonteCarloBarostatImpl.html</anchorfile>
      <anchor>a99678112ae1a7185b5b245538de11a54</anchor>
      <arglist>(ContextImpl &amp;context, bool includeForces, bool includeEnergy, int groups)</arglist>
    </member>
    <member kind="function">
      <type>std::map&lt; std::string, double &gt;</type>
      <name>getDefaultParameters</name>
      <anchorfile>classOpenMM_1_1MonteCarloBarostatImpl.html</anchorfile>
      <anchor>ade8bd2bd4df0d8ff3c692d3b86b17b27</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; std::string &gt;</type>
      <name>getKernelNames</name>
      <anchorfile>classOpenMM_1_1MonteCarloBarostatImpl.html</anchorfile>
      <anchor>a227682eb0bbe611b36bb6903e4569af0</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OpenMM::NonbondedForceImpl</name>
    <filename>classOpenMM_1_1NonbondedForceImpl.html</filename>
    <base>OpenMM::ForceImpl</base>
    <member kind="function">
      <type></type>
      <name>NonbondedForceImpl</name>
      <anchorfile>classOpenMM_1_1NonbondedForceImpl.html</anchorfile>
      <anchor>afa6a94430d663337afbe990e2de815ac</anchor>
      <arglist>(NonbondedForce &amp;owner)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~NonbondedForceImpl</name>
      <anchorfile>classOpenMM_1_1NonbondedForceImpl.html</anchorfile>
      <anchor>a2dc30a877a824272860e0de6c368d085</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initialize</name>
      <anchorfile>classOpenMM_1_1NonbondedForceImpl.html</anchorfile>
      <anchor>a941fcc46a4e6e1fed160f03aa6cb04a5</anchor>
      <arglist>(ContextImpl &amp;context)</arglist>
    </member>
    <member kind="function">
      <type>NonbondedForce &amp;</type>
      <name>getOwner</name>
      <anchorfile>classOpenMM_1_1NonbondedForceImpl.html</anchorfile>
      <anchor>a2e386b0fa0ed0d08aca98b56fe0c792c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateContextState</name>
      <anchorfile>classOpenMM_1_1NonbondedForceImpl.html</anchorfile>
      <anchor>aa58bd007a4baeabc2d1c4dadf95264b2</anchor>
      <arglist>(ContextImpl &amp;context)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>calcForcesAndEnergy</name>
      <anchorfile>classOpenMM_1_1NonbondedForceImpl.html</anchorfile>
      <anchor>a99678112ae1a7185b5b245538de11a54</anchor>
      <arglist>(ContextImpl &amp;context, bool includeForces, bool includeEnergy, int groups)</arglist>
    </member>
    <member kind="function">
      <type>std::map&lt; std::string, double &gt;</type>
      <name>getDefaultParameters</name>
      <anchorfile>classOpenMM_1_1NonbondedForceImpl.html</anchorfile>
      <anchor>ade8bd2bd4df0d8ff3c692d3b86b17b27</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; std::string &gt;</type>
      <name>getKernelNames</name>
      <anchorfile>classOpenMM_1_1NonbondedForceImpl.html</anchorfile>
      <anchor>a227682eb0bbe611b36bb6903e4569af0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>calcEwaldParameters</name>
      <anchorfile>classOpenMM_1_1NonbondedForceImpl.html</anchorfile>
      <anchor>a7184652d7c64502b7a14400dff25c753</anchor>
      <arglist>(const System &amp;system, const NonbondedForce &amp;force, double &amp;alpha, int &amp;kmaxx, int &amp;kmaxy, int &amp;kmaxz)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>calcPMEParameters</name>
      <anchorfile>classOpenMM_1_1NonbondedForceImpl.html</anchorfile>
      <anchor>ab0899b9a0d72837d830504b60bc56fe6</anchor>
      <arglist>(const System &amp;system, const NonbondedForce &amp;force, double &amp;alpha, int &amp;xsize, int &amp;ysize, int &amp;zsize)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>calcDispersionCorrection</name>
      <anchorfile>classOpenMM_1_1NonbondedForceImpl.html</anchorfile>
      <anchor>a8f89f9d8b5f7e564d7664e744592e306</anchor>
      <arglist>(const System &amp;system, const NonbondedForce &amp;force)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OpenMM::PeriodicTorsionForceImpl</name>
    <filename>classOpenMM_1_1PeriodicTorsionForceImpl.html</filename>
    <base>OpenMM::ForceImpl</base>
    <member kind="function">
      <type></type>
      <name>PeriodicTorsionForceImpl</name>
      <anchorfile>classOpenMM_1_1PeriodicTorsionForceImpl.html</anchorfile>
      <anchor>a537418384fb14d30b8840a9f07ab58df</anchor>
      <arglist>(PeriodicTorsionForce &amp;owner)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~PeriodicTorsionForceImpl</name>
      <anchorfile>classOpenMM_1_1PeriodicTorsionForceImpl.html</anchorfile>
      <anchor>a75636b5f8aef61fdd86548e5a6b01b74</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initialize</name>
      <anchorfile>classOpenMM_1_1PeriodicTorsionForceImpl.html</anchorfile>
      <anchor>a941fcc46a4e6e1fed160f03aa6cb04a5</anchor>
      <arglist>(ContextImpl &amp;context)</arglist>
    </member>
    <member kind="function">
      <type>PeriodicTorsionForce &amp;</type>
      <name>getOwner</name>
      <anchorfile>classOpenMM_1_1PeriodicTorsionForceImpl.html</anchorfile>
      <anchor>a40bae5bd6356dfd931d636444d60540c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateContextState</name>
      <anchorfile>classOpenMM_1_1PeriodicTorsionForceImpl.html</anchorfile>
      <anchor>aa58bd007a4baeabc2d1c4dadf95264b2</anchor>
      <arglist>(ContextImpl &amp;context)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>calcForcesAndEnergy</name>
      <anchorfile>classOpenMM_1_1PeriodicTorsionForceImpl.html</anchorfile>
      <anchor>a99678112ae1a7185b5b245538de11a54</anchor>
      <arglist>(ContextImpl &amp;context, bool includeForces, bool includeEnergy, int groups)</arglist>
    </member>
    <member kind="function">
      <type>std::map&lt; std::string, double &gt;</type>
      <name>getDefaultParameters</name>
      <anchorfile>classOpenMM_1_1PeriodicTorsionForceImpl.html</anchorfile>
      <anchor>ade8bd2bd4df0d8ff3c692d3b86b17b27</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; std::string &gt;</type>
      <name>getKernelNames</name>
      <anchorfile>classOpenMM_1_1PeriodicTorsionForceImpl.html</anchorfile>
      <anchor>a227682eb0bbe611b36bb6903e4569af0</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OpenMM::RBTorsionForceImpl</name>
    <filename>classOpenMM_1_1RBTorsionForceImpl.html</filename>
    <base>OpenMM::ForceImpl</base>
    <member kind="function">
      <type></type>
      <name>RBTorsionForceImpl</name>
      <anchorfile>classOpenMM_1_1RBTorsionForceImpl.html</anchorfile>
      <anchor>a8d175c505f465865dc48b5d15068b4ff</anchor>
      <arglist>(RBTorsionForce &amp;owner)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~RBTorsionForceImpl</name>
      <anchorfile>classOpenMM_1_1RBTorsionForceImpl.html</anchorfile>
      <anchor>af38c723bc3e1f4c6103e7cfcb9e15b8d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initialize</name>
      <anchorfile>classOpenMM_1_1RBTorsionForceImpl.html</anchorfile>
      <anchor>a941fcc46a4e6e1fed160f03aa6cb04a5</anchor>
      <arglist>(ContextImpl &amp;context)</arglist>
    </member>
    <member kind="function">
      <type>RBTorsionForce &amp;</type>
      <name>getOwner</name>
      <anchorfile>classOpenMM_1_1RBTorsionForceImpl.html</anchorfile>
      <anchor>a9e962933b83857f50700c7c922de2306</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateContextState</name>
      <anchorfile>classOpenMM_1_1RBTorsionForceImpl.html</anchorfile>
      <anchor>aa58bd007a4baeabc2d1c4dadf95264b2</anchor>
      <arglist>(ContextImpl &amp;context)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>calcForcesAndEnergy</name>
      <anchorfile>classOpenMM_1_1RBTorsionForceImpl.html</anchorfile>
      <anchor>a99678112ae1a7185b5b245538de11a54</anchor>
      <arglist>(ContextImpl &amp;context, bool includeForces, bool includeEnergy, int groups)</arglist>
    </member>
    <member kind="function">
      <type>std::map&lt; std::string, double &gt;</type>
      <name>getDefaultParameters</name>
      <anchorfile>classOpenMM_1_1RBTorsionForceImpl.html</anchorfile>
      <anchor>ade8bd2bd4df0d8ff3c692d3b86b17b27</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; std::string &gt;</type>
      <name>getKernelNames</name>
      <anchorfile>classOpenMM_1_1RBTorsionForceImpl.html</anchorfile>
      <anchor>a227682eb0bbe611b36bb6903e4569af0</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OpenMM::SplineFitter</name>
    <filename>classOpenMM_1_1SplineFitter.html</filename>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>createNaturalSpline</name>
      <anchorfile>classOpenMM_1_1SplineFitter.html</anchorfile>
      <anchor>a1fe878973b037a6f6b15217cd928295a</anchor>
      <arglist>(const std::vector&lt; double &gt; &amp;x, const std::vector&lt; double &gt; &amp;y, std::vector&lt; double &gt; &amp;deriv)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>createPeriodicSpline</name>
      <anchorfile>classOpenMM_1_1SplineFitter.html</anchorfile>
      <anchor>ab3e59176af1b94a61fe476ccf45139a6</anchor>
      <arglist>(const std::vector&lt; double &gt; &amp;x, const std::vector&lt; double &gt; &amp;y, std::vector&lt; double &gt; &amp;deriv)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>evaluateSpline</name>
      <anchorfile>classOpenMM_1_1SplineFitter.html</anchorfile>
      <anchor>aff1ae90024673736b750738db3c37995</anchor>
      <arglist>(const std::vector&lt; double &gt; &amp;x, const std::vector&lt; double &gt; &amp;y, const std::vector&lt; double &gt; &amp;deriv, double t)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>evaluateSplineDerivative</name>
      <anchorfile>classOpenMM_1_1SplineFitter.html</anchorfile>
      <anchor>a1271aecff7c6992dca9247ecb733bacc</anchor>
      <arglist>(const std::vector&lt; double &gt; &amp;x, const std::vector&lt; double &gt; &amp;y, const std::vector&lt; double &gt; &amp;deriv, double t)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OpenMM::LangevinIntegrator</name>
    <filename>classOpenMM_1_1LangevinIntegrator.html</filename>
    <base>OpenMM::Integrator</base>
    <member kind="function">
      <type></type>
      <name>LangevinIntegrator</name>
      <anchorfile>classOpenMM_1_1LangevinIntegrator.html</anchorfile>
      <anchor>a10b676a63b851d32f9a093fba312dfdd</anchor>
      <arglist>(double temperature, double frictionCoeff, double stepSize)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getTemperature</name>
      <anchorfile>classOpenMM_1_1LangevinIntegrator.html</anchorfile>
      <anchor>a00d75976e31278340ed5550e9f1479da</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTemperature</name>
      <anchorfile>classOpenMM_1_1LangevinIntegrator.html</anchorfile>
      <anchor>a0eaab969662d838cfb0528a4e5cf7e13</anchor>
      <arglist>(double temp)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getFriction</name>
      <anchorfile>classOpenMM_1_1LangevinIntegrator.html</anchorfile>
      <anchor>aeef3b48c4eab3044c61869b3a521f32f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFriction</name>
      <anchorfile>classOpenMM_1_1LangevinIntegrator.html</anchorfile>
      <anchor>a68359308309527032c014d7151ac69c9</anchor>
      <arglist>(double coeff)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getRandomNumberSeed</name>
      <anchorfile>classOpenMM_1_1LangevinIntegrator.html</anchorfile>
      <anchor>a9f6f1c1064d592c1594696615078e526</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRandomNumberSeed</name>
      <anchorfile>classOpenMM_1_1LangevinIntegrator.html</anchorfile>
      <anchor>a6e57a6072a3913e039c5f2da591d7f96</anchor>
      <arglist>(int seed)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>step</name>
      <anchorfile>classOpenMM_1_1LangevinIntegrator.html</anchorfile>
      <anchor>a670ab49c98d37df4ffdd814ff6428fc8</anchor>
      <arglist>(int steps)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>initialize</name>
      <anchorfile>classOpenMM_1_1LangevinIntegrator.html</anchorfile>
      <anchor>a941fcc46a4e6e1fed160f03aa6cb04a5</anchor>
      <arglist>(ContextImpl &amp;context)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>std::vector&lt; std::string &gt;</type>
      <name>getKernelNames</name>
      <anchorfile>classOpenMM_1_1LangevinIntegrator.html</anchorfile>
      <anchor>a227682eb0bbe611b36bb6903e4569af0</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OpenMM::LocalEnergyMinimizer</name>
    <filename>classOpenMM_1_1LocalEnergyMinimizer.html</filename>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>minimize</name>
      <anchorfile>classOpenMM_1_1LocalEnergyMinimizer.html</anchorfile>
      <anchor>a5cfc6189e307e453bd37b8a355c5cb25</anchor>
      <arglist>(Context &amp;context, double tolerance=1, int maxIterations=0)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OpenMM::MonteCarloBarostat</name>
    <filename>classOpenMM_1_1MonteCarloBarostat.html</filename>
    <base>OpenMM::Force</base>
    <member kind="function">
      <type></type>
      <name>MonteCarloBarostat</name>
      <anchorfile>classOpenMM_1_1MonteCarloBarostat.html</anchorfile>
      <anchor>a566a59be63abf55d614834deaac8c627</anchor>
      <arglist>(double defaultPressure, double temperature, int frequency=25)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getDefaultPressure</name>
      <anchorfile>classOpenMM_1_1MonteCarloBarostat.html</anchorfile>
      <anchor>a7c6f9fa17a7b4639ce267e313522a058</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getFrequency</name>
      <anchorfile>classOpenMM_1_1MonteCarloBarostat.html</anchorfile>
      <anchor>af2c1e36972f8bac2b133e9148b51b268</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFrequency</name>
      <anchorfile>classOpenMM_1_1MonteCarloBarostat.html</anchorfile>
      <anchor>ae2dd14a3c0cfc0376dbac59c2d7e56b7</anchor>
      <arglist>(int freq)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getTemperature</name>
      <anchorfile>classOpenMM_1_1MonteCarloBarostat.html</anchorfile>
      <anchor>a00d75976e31278340ed5550e9f1479da</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTemperature</name>
      <anchorfile>classOpenMM_1_1MonteCarloBarostat.html</anchorfile>
      <anchor>a0eaab969662d838cfb0528a4e5cf7e13</anchor>
      <arglist>(double temp)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getRandomNumberSeed</name>
      <anchorfile>classOpenMM_1_1MonteCarloBarostat.html</anchorfile>
      <anchor>a9f6f1c1064d592c1594696615078e526</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRandomNumberSeed</name>
      <anchorfile>classOpenMM_1_1MonteCarloBarostat.html</anchorfile>
      <anchor>a6e57a6072a3913e039c5f2da591d7f96</anchor>
      <arglist>(int seed)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const std::string &amp;</type>
      <name>Pressure</name>
      <anchorfile>classOpenMM_1_1MonteCarloBarostat.html</anchorfile>
      <anchor>a9402576e9d2e189e8069e79fbf709c63</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>ForceImpl *</type>
      <name>createImpl</name>
      <anchorfile>classOpenMM_1_1MonteCarloBarostat.html</anchorfile>
      <anchor>aaf8d731f241984dfd636ac8fea33780d</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OpenMM::NonbondedForce</name>
    <filename>classOpenMM_1_1NonbondedForce.html</filename>
    <base>OpenMM::Force</base>
    <class kind="class">OpenMM::NonbondedForce::ExceptionInfo</class>
    <class kind="class">OpenMM::NonbondedForce::ParticleInfo</class>
    <member kind="enumeration">
      <name>NonbondedMethod</name>
      <anchorfile>classOpenMM_1_1NonbondedForce.html</anchorfile>
      <anchor>afa7d9e69832628b8cf72ef628dca7390</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NoCutoff</name>
      <anchorfile>classOpenMM_1_1NonbondedForce.html</anchorfile>
      <anchor>afa7d9e69832628b8cf72ef628dca7390a007d65056b9c2fce5e5549b28e4e2ffb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CutoffNonPeriodic</name>
      <anchorfile>classOpenMM_1_1NonbondedForce.html</anchorfile>
      <anchor>afa7d9e69832628b8cf72ef628dca7390aa2e57a56c2293e046b2fa2231d6f3d6b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CutoffPeriodic</name>
      <anchorfile>classOpenMM_1_1NonbondedForce.html</anchorfile>
      <anchor>afa7d9e69832628b8cf72ef628dca7390a168a54330e90997ff68501baaaa41ccd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Ewald</name>
      <anchorfile>classOpenMM_1_1NonbondedForce.html</anchorfile>
      <anchor>afa7d9e69832628b8cf72ef628dca7390af1eddced98423d324d5f77dbef2baf65</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PME</name>
      <anchorfile>classOpenMM_1_1NonbondedForce.html</anchorfile>
      <anchor>afa7d9e69832628b8cf72ef628dca7390a6d2e0d14bacd7aea16f4739b89d4b463</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NonbondedForce</name>
      <anchorfile>classOpenMM_1_1NonbondedForce.html</anchorfile>
      <anchor>a2f2dcf9de53f8dfccc14e51dd8b30379</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumParticles</name>
      <anchorfile>classOpenMM_1_1NonbondedForce.html</anchorfile>
      <anchor>abb6f8d8c14d432090000f19e8beafa99</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumExceptions</name>
      <anchorfile>classOpenMM_1_1NonbondedForce.html</anchorfile>
      <anchor>ada496abdde3091adfe3f6b12eb7fb91d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>NonbondedMethod</type>
      <name>getNonbondedMethod</name>
      <anchorfile>classOpenMM_1_1NonbondedForce.html</anchorfile>
      <anchor>a39b8aa497b6303d1ceaa0c56311f52a9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNonbondedMethod</name>
      <anchorfile>classOpenMM_1_1NonbondedForce.html</anchorfile>
      <anchor>a705d5824b99e09178ec842c46681fe66</anchor>
      <arglist>(NonbondedMethod method)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getCutoffDistance</name>
      <anchorfile>classOpenMM_1_1NonbondedForce.html</anchorfile>
      <anchor>a5ed4b7977b5b798d0119735dc2a2add6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCutoffDistance</name>
      <anchorfile>classOpenMM_1_1NonbondedForce.html</anchorfile>
      <anchor>aca0f3cbeec7aac67e140f0ed2f67b526</anchor>
      <arglist>(double distance)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getReactionFieldDielectric</name>
      <anchorfile>classOpenMM_1_1NonbondedForce.html</anchorfile>
      <anchor>a135905a665143f2630f48f4cc10959ca</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setReactionFieldDielectric</name>
      <anchorfile>classOpenMM_1_1NonbondedForce.html</anchorfile>
      <anchor>a58a833182e564d92332d0effb9644791</anchor>
      <arglist>(double dielectric)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getEwaldErrorTolerance</name>
      <anchorfile>classOpenMM_1_1NonbondedForce.html</anchorfile>
      <anchor>a2c0018057264fe973ca77aff480f997a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setEwaldErrorTolerance</name>
      <anchorfile>classOpenMM_1_1NonbondedForce.html</anchorfile>
      <anchor>a847ca50353d560e71f9de06af503438b</anchor>
      <arglist>(double tol)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>addParticle</name>
      <anchorfile>classOpenMM_1_1NonbondedForce.html</anchorfile>
      <anchor>aeda141e1e69214c2163e511c13ecfa4b</anchor>
      <arglist>(double charge, double sigma, double epsilon)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getParticleParameters</name>
      <anchorfile>classOpenMM_1_1NonbondedForce.html</anchorfile>
      <anchor>a62e2a2b57badb13521c072a11594c330</anchor>
      <arglist>(int index, double &amp;charge, double &amp;sigma, double &amp;epsilon) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setParticleParameters</name>
      <anchorfile>classOpenMM_1_1NonbondedForce.html</anchorfile>
      <anchor>a239e17c66a86e784d5172f7e3d760feb</anchor>
      <arglist>(int index, double charge, double sigma, double epsilon)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>addException</name>
      <anchorfile>classOpenMM_1_1NonbondedForce.html</anchorfile>
      <anchor>aa71fccf37957165d7ea923b985cbee86</anchor>
      <arglist>(int particle1, int particle2, double chargeProd, double sigma, double epsilon, bool replace=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getExceptionParameters</name>
      <anchorfile>classOpenMM_1_1NonbondedForce.html</anchorfile>
      <anchor>a46d0995f8eef89be0d1fc252793d1965</anchor>
      <arglist>(int index, int &amp;particle1, int &amp;particle2, double &amp;chargeProd, double &amp;sigma, double &amp;epsilon) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setExceptionParameters</name>
      <anchorfile>classOpenMM_1_1NonbondedForce.html</anchorfile>
      <anchor>a37aace3c83616e62529aa2969270410c</anchor>
      <arglist>(int index, int particle1, int particle2, double chargeProd, double sigma, double epsilon)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>createExceptionsFromBonds</name>
      <anchorfile>classOpenMM_1_1NonbondedForce.html</anchorfile>
      <anchor>af678ee1383c0a86bdd402d4ebd996141</anchor>
      <arglist>(const std::vector&lt; std::pair&lt; int, int &gt; &gt; &amp;bonds, double coulomb14Scale, double lj14Scale)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getUseDispersionCorrection</name>
      <anchorfile>classOpenMM_1_1NonbondedForce.html</anchorfile>
      <anchor>a839b52f41aac7e709c3d68126db75b8e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setUseDispersionCorrection</name>
      <anchorfile>classOpenMM_1_1NonbondedForce.html</anchorfile>
      <anchor>aec6d1c5b7ed41eae62c2550f75ac401d</anchor>
      <arglist>(bool useCorrection)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getReciprocalSpaceForceGroup</name>
      <anchorfile>classOpenMM_1_1NonbondedForce.html</anchorfile>
      <anchor>aa6c28a860ce529c19b90afe26ccf9d03</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setReciprocalSpaceForceGroup</name>
      <anchorfile>classOpenMM_1_1NonbondedForce.html</anchorfile>
      <anchor>a7d30b8512bba5e105304ef3530e676bb</anchor>
      <arglist>(int group)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>ForceImpl *</type>
      <name>createImpl</name>
      <anchorfile>classOpenMM_1_1NonbondedForce.html</anchorfile>
      <anchor>aaf8d731f241984dfd636ac8fea33780d</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OpenMM::OpenMMException</name>
    <filename>classOpenMM_1_1OpenMMException.html</filename>
    <member kind="function">
      <type></type>
      <name>OpenMMException</name>
      <anchorfile>classOpenMM_1_1OpenMMException.html</anchorfile>
      <anchor>a719cc9bd2ea397a3a2dc07dbdd356b10</anchor>
      <arglist>(const std::string &amp;message)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~OpenMMException</name>
      <anchorfile>classOpenMM_1_1OpenMMException.html</anchorfile>
      <anchor>a77ee80155bdd5c8047062ed2880c24ef</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>what</name>
      <anchorfile>classOpenMM_1_1OpenMMException.html</anchorfile>
      <anchor>a586eee248fedb7de1b50219e14b99c7b</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OpenMM::PeriodicTorsionForce</name>
    <filename>classOpenMM_1_1PeriodicTorsionForce.html</filename>
    <base>OpenMM::Force</base>
    <class kind="class">OpenMM::PeriodicTorsionForce::PeriodicTorsionInfo</class>
    <member kind="function">
      <type></type>
      <name>PeriodicTorsionForce</name>
      <anchorfile>classOpenMM_1_1PeriodicTorsionForce.html</anchorfile>
      <anchor>acb50452929ed48577c4376cbd78c056d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumTorsions</name>
      <anchorfile>classOpenMM_1_1PeriodicTorsionForce.html</anchorfile>
      <anchor>a3bb8e6820ac5baede1973c6bb1fd99aa</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>addTorsion</name>
      <anchorfile>classOpenMM_1_1PeriodicTorsionForce.html</anchorfile>
      <anchor>af31df063a0cba872b463ddcb53e52079</anchor>
      <arglist>(int particle1, int particle2, int particle3, int particle4, int periodicity, double phase, double k)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getTorsionParameters</name>
      <anchorfile>classOpenMM_1_1PeriodicTorsionForce.html</anchorfile>
      <anchor>aa79e6fb46d314b4694c487c204536d24</anchor>
      <arglist>(int index, int &amp;particle1, int &amp;particle2, int &amp;particle3, int &amp;particle4, int &amp;periodicity, double &amp;phase, double &amp;k) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTorsionParameters</name>
      <anchorfile>classOpenMM_1_1PeriodicTorsionForce.html</anchorfile>
      <anchor>aa35e8c11189971e863944f0b601d51ad</anchor>
      <arglist>(int index, int particle1, int particle2, int particle3, int particle4, int periodicity, double phase, double k)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>ForceImpl *</type>
      <name>createImpl</name>
      <anchorfile>classOpenMM_1_1PeriodicTorsionForce.html</anchorfile>
      <anchor>aaf8d731f241984dfd636ac8fea33780d</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OpenMM::RBTorsionForce</name>
    <filename>classOpenMM_1_1RBTorsionForce.html</filename>
    <base>OpenMM::Force</base>
    <class kind="class">OpenMM::RBTorsionForce::RBTorsionInfo</class>
    <member kind="function">
      <type></type>
      <name>RBTorsionForce</name>
      <anchorfile>classOpenMM_1_1RBTorsionForce.html</anchorfile>
      <anchor>a61c23966706ff87a5f81c818f7d2f16d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumTorsions</name>
      <anchorfile>classOpenMM_1_1RBTorsionForce.html</anchorfile>
      <anchor>a3bb8e6820ac5baede1973c6bb1fd99aa</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>addTorsion</name>
      <anchorfile>classOpenMM_1_1RBTorsionForce.html</anchorfile>
      <anchor>a7cb868b2b26fe6184eb51de664583a20</anchor>
      <arglist>(int particle1, int particle2, int particle3, int particle4, double c0, double c1, double c2, double c3, double c4, double c5)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getTorsionParameters</name>
      <anchorfile>classOpenMM_1_1RBTorsionForce.html</anchorfile>
      <anchor>af9a006c6cff2e1d2824a0badcb836c62</anchor>
      <arglist>(int index, int &amp;particle1, int &amp;particle2, int &amp;particle3, int &amp;particle4, double &amp;c0, double &amp;c1, double &amp;c2, double &amp;c3, double &amp;c4, double &amp;c5) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTorsionParameters</name>
      <anchorfile>classOpenMM_1_1RBTorsionForce.html</anchorfile>
      <anchor>a4d7aa648a4934863b8818d9261cffd80</anchor>
      <arglist>(int index, int particle1, int particle2, int particle3, int particle4, double c0, double c1, double c2, double c3, double c4, double c5)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>ForceImpl *</type>
      <name>createImpl</name>
      <anchorfile>classOpenMM_1_1RBTorsionForce.html</anchorfile>
      <anchor>aaf8d731f241984dfd636ac8fea33780d</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OpenMM::State</name>
    <filename>classOpenMM_1_1State.html</filename>
    <member kind="enumeration">
      <name>DataType</name>
      <anchorfile>classOpenMM_1_1State.html</anchorfile>
      <anchor>ad8ed01ff3ff33333d8e19db4d2818bb6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Positions</name>
      <anchorfile>classOpenMM_1_1State.html</anchorfile>
      <anchor>ad8ed01ff3ff33333d8e19db4d2818bb6af9105fa5840837921d8fc9be42f93b51</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Velocities</name>
      <anchorfile>classOpenMM_1_1State.html</anchorfile>
      <anchor>ad8ed01ff3ff33333d8e19db4d2818bb6a2454a9d7199365988fad941b7973f3ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Forces</name>
      <anchorfile>classOpenMM_1_1State.html</anchorfile>
      <anchor>ad8ed01ff3ff33333d8e19db4d2818bb6a596e16b0fa39ac621d7e51fa07fad38d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Energy</name>
      <anchorfile>classOpenMM_1_1State.html</anchorfile>
      <anchor>ad8ed01ff3ff33333d8e19db4d2818bb6a52549afe87628ebdafaca441e36d0f54</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Parameters</name>
      <anchorfile>classOpenMM_1_1State.html</anchorfile>
      <anchor>ad8ed01ff3ff33333d8e19db4d2818bb6a19cf4b69b8d66e6a642673baa60d9a63</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>State</name>
      <anchorfile>classOpenMM_1_1State.html</anchorfile>
      <anchor>a790355057d12e9c1ce7643551c16fecd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getTime</name>
      <anchorfile>classOpenMM_1_1State.html</anchorfile>
      <anchor>a438aa7c8c22ebadc95b00bcae18ef20e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; Vec3 &gt; &amp;</type>
      <name>getPositions</name>
      <anchorfile>classOpenMM_1_1State.html</anchorfile>
      <anchor>af08eb5f8f587f66749a68a7f44644823</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; Vec3 &gt; &amp;</type>
      <name>getVelocities</name>
      <anchorfile>classOpenMM_1_1State.html</anchorfile>
      <anchor>a771106a51b158c2ef5433a89f49b0eb5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; Vec3 &gt; &amp;</type>
      <name>getForces</name>
      <anchorfile>classOpenMM_1_1State.html</anchorfile>
      <anchor>a0942f0190f5dab5da366c59ad1e073c3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getKineticEnergy</name>
      <anchorfile>classOpenMM_1_1State.html</anchorfile>
      <anchor>a15194533d2278967449e3b05df9bcd1c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getPotentialEnergy</name>
      <anchorfile>classOpenMM_1_1State.html</anchorfile>
      <anchor>a59a0566836acf8d2e39508a605921d01</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getPeriodicBoxVectors</name>
      <anchorfile>classOpenMM_1_1State.html</anchorfile>
      <anchor>a3baf8c5038aca429ff3cc2fc3bcca48e</anchor>
      <arglist>(Vec3 &amp;a, Vec3 &amp;b, Vec3 &amp;c) const </arglist>
    </member>
    <member kind="function">
      <type>const std::map&lt; std::string, double &gt; &amp;</type>
      <name>getParameters</name>
      <anchorfile>classOpenMM_1_1State.html</anchorfile>
      <anchor>a5c2d6cd821539589a050f9c33bfb44ae</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>Context</name>
      <anchorfile>classOpenMM_1_1State.html</anchorfile>
      <anchor>ac26c806e60ca4a0547680edb68f6e39b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OpenMM::System</name>
    <filename>classOpenMM_1_1System.html</filename>
    <class kind="class">OpenMM::System::ConstraintInfo</class>
    <member kind="function">
      <type></type>
      <name>System</name>
      <anchorfile>classOpenMM_1_1System.html</anchorfile>
      <anchor>aa99f92b482c36f6e72a05b28c3d6f748</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~System</name>
      <anchorfile>classOpenMM_1_1System.html</anchorfile>
      <anchor>a3bfbca0e3ddd7ea1f8709c986454d753</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumParticles</name>
      <anchorfile>classOpenMM_1_1System.html</anchorfile>
      <anchor>abb6f8d8c14d432090000f19e8beafa99</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>addParticle</name>
      <anchorfile>classOpenMM_1_1System.html</anchorfile>
      <anchor>af2fc831bbb8f24c17001fd3a52b6f605</anchor>
      <arglist>(double mass)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getParticleMass</name>
      <anchorfile>classOpenMM_1_1System.html</anchorfile>
      <anchor>a10bd04997d60a3f139b670f7c6ee4182</anchor>
      <arglist>(int index) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setParticleMass</name>
      <anchorfile>classOpenMM_1_1System.html</anchorfile>
      <anchor>a28a61e8e79b6176590696f0d1e6a6f01</anchor>
      <arglist>(int index, double mass)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setVirtualSite</name>
      <anchorfile>classOpenMM_1_1System.html</anchorfile>
      <anchor>ac3864c4e330f9c48488a5e2725de6f96</anchor>
      <arglist>(int index, VirtualSite *virtualSite)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isVirtualSite</name>
      <anchorfile>classOpenMM_1_1System.html</anchorfile>
      <anchor>acec330e19b256bea20b4ae4bd164e8ae</anchor>
      <arglist>(int index) const </arglist>
    </member>
    <member kind="function">
      <type>const VirtualSite &amp;</type>
      <name>getVirtualSite</name>
      <anchorfile>classOpenMM_1_1System.html</anchorfile>
      <anchor>a3574532629075a26bb32258d805919a2</anchor>
      <arglist>(int index) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumConstraints</name>
      <anchorfile>classOpenMM_1_1System.html</anchorfile>
      <anchor>a8a2f3b092ceea43bf47e68c238626e4d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>addConstraint</name>
      <anchorfile>classOpenMM_1_1System.html</anchorfile>
      <anchor>a3f6c85aca31da39b1453c5d8b4f7f6a2</anchor>
      <arglist>(int particle1, int particle2, double distance)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getConstraintParameters</name>
      <anchorfile>classOpenMM_1_1System.html</anchorfile>
      <anchor>a80e1823375f88f37cdc37c4a7c88308a</anchor>
      <arglist>(int index, int &amp;particle1, int &amp;particle2, double &amp;distance) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setConstraintParameters</name>
      <anchorfile>classOpenMM_1_1System.html</anchorfile>
      <anchor>a06f7ea00d1bc0de5d4421255de4a6dff</anchor>
      <arglist>(int index, int particle1, int particle2, double distance)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>addForce</name>
      <anchorfile>classOpenMM_1_1System.html</anchorfile>
      <anchor>a0ef8fa07d1bb205c0fefc28c9d6b5281</anchor>
      <arglist>(Force *force)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumForces</name>
      <anchorfile>classOpenMM_1_1System.html</anchorfile>
      <anchor>a182de328de797b16841c953a5a725d39</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Force &amp;</type>
      <name>getForce</name>
      <anchorfile>classOpenMM_1_1System.html</anchorfile>
      <anchor>a4f1ab7ae1a90ee6ff684f4cdf12ed1ec</anchor>
      <arglist>(int index) const </arglist>
    </member>
    <member kind="function">
      <type>Force &amp;</type>
      <name>getForce</name>
      <anchorfile>classOpenMM_1_1System.html</anchorfile>
      <anchor>af841d03c4214a0bb49cc0dd9806a419e</anchor>
      <arglist>(int index)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getDefaultPeriodicBoxVectors</name>
      <anchorfile>classOpenMM_1_1System.html</anchorfile>
      <anchor>a863d996e748c6233ad068e43deeab219</anchor>
      <arglist>(Vec3 &amp;a, Vec3 &amp;b, Vec3 &amp;c) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDefaultPeriodicBoxVectors</name>
      <anchorfile>classOpenMM_1_1System.html</anchorfile>
      <anchor>a89231a9c395633cb25a72d4168915b4d</anchor>
      <arglist>(const Vec3 &amp;a, const Vec3 &amp;b, const Vec3 &amp;c)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OpenMM::VariableLangevinIntegrator</name>
    <filename>classOpenMM_1_1VariableLangevinIntegrator.html</filename>
    <base>OpenMM::Integrator</base>
    <member kind="function">
      <type></type>
      <name>VariableLangevinIntegrator</name>
      <anchorfile>classOpenMM_1_1VariableLangevinIntegrator.html</anchorfile>
      <anchor>aa5b4f43a19d837102ba1c312b577ad10</anchor>
      <arglist>(double temperature, double frictionCoeff, double errorTol)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getTemperature</name>
      <anchorfile>classOpenMM_1_1VariableLangevinIntegrator.html</anchorfile>
      <anchor>a00d75976e31278340ed5550e9f1479da</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTemperature</name>
      <anchorfile>classOpenMM_1_1VariableLangevinIntegrator.html</anchorfile>
      <anchor>a0eaab969662d838cfb0528a4e5cf7e13</anchor>
      <arglist>(double temp)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getFriction</name>
      <anchorfile>classOpenMM_1_1VariableLangevinIntegrator.html</anchorfile>
      <anchor>aeef3b48c4eab3044c61869b3a521f32f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFriction</name>
      <anchorfile>classOpenMM_1_1VariableLangevinIntegrator.html</anchorfile>
      <anchor>a68359308309527032c014d7151ac69c9</anchor>
      <arglist>(double coeff)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getErrorTolerance</name>
      <anchorfile>classOpenMM_1_1VariableLangevinIntegrator.html</anchorfile>
      <anchor>a0f3200908f07a9b4e8b5393e8683d79e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setErrorTolerance</name>
      <anchorfile>classOpenMM_1_1VariableLangevinIntegrator.html</anchorfile>
      <anchor>a754ecd536727fceaf9f8b972e0bd1a22</anchor>
      <arglist>(double tol)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getRandomNumberSeed</name>
      <anchorfile>classOpenMM_1_1VariableLangevinIntegrator.html</anchorfile>
      <anchor>a9f6f1c1064d592c1594696615078e526</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRandomNumberSeed</name>
      <anchorfile>classOpenMM_1_1VariableLangevinIntegrator.html</anchorfile>
      <anchor>a6e57a6072a3913e039c5f2da591d7f96</anchor>
      <arglist>(int seed)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>step</name>
      <anchorfile>classOpenMM_1_1VariableLangevinIntegrator.html</anchorfile>
      <anchor>a670ab49c98d37df4ffdd814ff6428fc8</anchor>
      <arglist>(int steps)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>stepTo</name>
      <anchorfile>classOpenMM_1_1VariableLangevinIntegrator.html</anchorfile>
      <anchor>a6d57b943a53b497d973a320eac09a10c</anchor>
      <arglist>(double time)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>initialize</name>
      <anchorfile>classOpenMM_1_1VariableLangevinIntegrator.html</anchorfile>
      <anchor>a941fcc46a4e6e1fed160f03aa6cb04a5</anchor>
      <arglist>(ContextImpl &amp;context)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>std::vector&lt; std::string &gt;</type>
      <name>getKernelNames</name>
      <anchorfile>classOpenMM_1_1VariableLangevinIntegrator.html</anchorfile>
      <anchor>a227682eb0bbe611b36bb6903e4569af0</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OpenMM::VariableVerletIntegrator</name>
    <filename>classOpenMM_1_1VariableVerletIntegrator.html</filename>
    <base>OpenMM::Integrator</base>
    <member kind="function">
      <type></type>
      <name>VariableVerletIntegrator</name>
      <anchorfile>classOpenMM_1_1VariableVerletIntegrator.html</anchorfile>
      <anchor>af7fe841dd2aba3201a6eef532bc16f52</anchor>
      <arglist>(double errorTol)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getErrorTolerance</name>
      <anchorfile>classOpenMM_1_1VariableVerletIntegrator.html</anchorfile>
      <anchor>a0f3200908f07a9b4e8b5393e8683d79e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setErrorTolerance</name>
      <anchorfile>classOpenMM_1_1VariableVerletIntegrator.html</anchorfile>
      <anchor>a754ecd536727fceaf9f8b972e0bd1a22</anchor>
      <arglist>(double tol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>step</name>
      <anchorfile>classOpenMM_1_1VariableVerletIntegrator.html</anchorfile>
      <anchor>a670ab49c98d37df4ffdd814ff6428fc8</anchor>
      <arglist>(int steps)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>stepTo</name>
      <anchorfile>classOpenMM_1_1VariableVerletIntegrator.html</anchorfile>
      <anchor>a6d57b943a53b497d973a320eac09a10c</anchor>
      <arglist>(double time)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>initialize</name>
      <anchorfile>classOpenMM_1_1VariableVerletIntegrator.html</anchorfile>
      <anchor>a941fcc46a4e6e1fed160f03aa6cb04a5</anchor>
      <arglist>(ContextImpl &amp;context)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>std::vector&lt; std::string &gt;</type>
      <name>getKernelNames</name>
      <anchorfile>classOpenMM_1_1VariableVerletIntegrator.html</anchorfile>
      <anchor>a227682eb0bbe611b36bb6903e4569af0</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OpenMM::Vec3</name>
    <filename>classOpenMM_1_1Vec3.html</filename>
    <member kind="function">
      <type></type>
      <name>Vec3</name>
      <anchorfile>classOpenMM_1_1Vec3.html</anchorfile>
      <anchor>a9776ee60566203dbcdc410d8a28edfce</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Vec3</name>
      <anchorfile>classOpenMM_1_1Vec3.html</anchorfile>
      <anchor>ad815a2cb1433c4508a450d9a791fc5c8</anchor>
      <arglist>(double x, double y, double z)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>operator[]</name>
      <anchorfile>classOpenMM_1_1Vec3.html</anchorfile>
      <anchor>a8e49d387cc3f18022daaebf5fe2035e3</anchor>
      <arglist>(int index) const </arglist>
    </member>
    <member kind="function">
      <type>double &amp;</type>
      <name>operator[]</name>
      <anchorfile>classOpenMM_1_1Vec3.html</anchorfile>
      <anchor>a78dc86d75ae6a17d5b35762d60c7bfbd</anchor>
      <arglist>(int index)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classOpenMM_1_1Vec3.html</anchorfile>
      <anchor>a4e93267e644920d6926c6568c5784748</anchor>
      <arglist>(const Vec3 &amp;rhs) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classOpenMM_1_1Vec3.html</anchorfile>
      <anchor>a85dc0c8426ce5ce4d7d57e75c03d2a87</anchor>
      <arglist>(const Vec3 &amp;rhs) const </arglist>
    </member>
    <member kind="function">
      <type>Vec3</type>
      <name>operator+</name>
      <anchorfile>classOpenMM_1_1Vec3.html</anchorfile>
      <anchor>ac5e36ce5791860be81e941f570c72b10</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec3</type>
      <name>operator+</name>
      <anchorfile>classOpenMM_1_1Vec3.html</anchorfile>
      <anchor>afff07dc0407252f19cf560d3132bd63b</anchor>
      <arglist>(const Vec3 &amp;rhs) const </arglist>
    </member>
    <member kind="function">
      <type>Vec3 &amp;</type>
      <name>operator+=</name>
      <anchorfile>classOpenMM_1_1Vec3.html</anchorfile>
      <anchor>ace98f21186feb162581c4bf06685aa1f</anchor>
      <arglist>(const Vec3 &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>Vec3</type>
      <name>operator-</name>
      <anchorfile>classOpenMM_1_1Vec3.html</anchorfile>
      <anchor>a704ee3e7085c76db0352e51e4103dbae</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec3</type>
      <name>operator-</name>
      <anchorfile>classOpenMM_1_1Vec3.html</anchorfile>
      <anchor>add887bb383d6e340995e4aa4966d0bdb</anchor>
      <arglist>(const Vec3 &amp;rhs) const </arglist>
    </member>
    <member kind="function">
      <type>Vec3 &amp;</type>
      <name>operator-=</name>
      <anchorfile>classOpenMM_1_1Vec3.html</anchorfile>
      <anchor>a6d3315d4fd7ebe3463a5b363ea382ab2</anchor>
      <arglist>(const Vec3 &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>Vec3</type>
      <name>operator*</name>
      <anchorfile>classOpenMM_1_1Vec3.html</anchorfile>
      <anchor>a904ac1c1b95b3de23aed71cf2cd36020</anchor>
      <arglist>(double rhs) const </arglist>
    </member>
    <member kind="function">
      <type>Vec3 &amp;</type>
      <name>operator*=</name>
      <anchorfile>classOpenMM_1_1Vec3.html</anchorfile>
      <anchor>a60454d6b0d61add92e238268ef0f0d8d</anchor>
      <arglist>(double rhs)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>dot</name>
      <anchorfile>classOpenMM_1_1Vec3.html</anchorfile>
      <anchor>a2c6042e383582bf3157fbda510b7d17c</anchor>
      <arglist>(const Vec3 &amp;rhs) const </arglist>
    </member>
    <member kind="function">
      <type>Vec3</type>
      <name>cross</name>
      <anchorfile>classOpenMM_1_1Vec3.html</anchorfile>
      <anchor>a7064a64061260527d5a184f9da2510ae</anchor>
      <arglist>(const Vec3 &amp;rhs) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OpenMM::VerletIntegrator</name>
    <filename>classOpenMM_1_1VerletIntegrator.html</filename>
    <base>OpenMM::Integrator</base>
    <member kind="function">
      <type></type>
      <name>VerletIntegrator</name>
      <anchorfile>classOpenMM_1_1VerletIntegrator.html</anchorfile>
      <anchor>a7d4cee56a70d9b039364a59efc43c2ef</anchor>
      <arglist>(double stepSize)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>step</name>
      <anchorfile>classOpenMM_1_1VerletIntegrator.html</anchorfile>
      <anchor>a670ab49c98d37df4ffdd814ff6428fc8</anchor>
      <arglist>(int steps)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>initialize</name>
      <anchorfile>classOpenMM_1_1VerletIntegrator.html</anchorfile>
      <anchor>a941fcc46a4e6e1fed160f03aa6cb04a5</anchor>
      <arglist>(ContextImpl &amp;context)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>std::vector&lt; std::string &gt;</type>
      <name>getKernelNames</name>
      <anchorfile>classOpenMM_1_1VerletIntegrator.html</anchorfile>
      <anchor>a227682eb0bbe611b36bb6903e4569af0</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OpenMM::VirtualSite</name>
    <filename>classOpenMM_1_1VirtualSite.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~VirtualSite</name>
      <anchorfile>classOpenMM_1_1VirtualSite.html</anchorfile>
      <anchor>af32ceaf9c5e53560493d00108fd23e61</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumParticles</name>
      <anchorfile>classOpenMM_1_1VirtualSite.html</anchorfile>
      <anchor>abb6f8d8c14d432090000f19e8beafa99</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getParticle</name>
      <anchorfile>classOpenMM_1_1VirtualSite.html</anchorfile>
      <anchor>a3574861bce4fc8bc849f6f23c74ce630</anchor>
      <arglist>(int particle) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>VirtualSite</name>
      <anchorfile>classOpenMM_1_1VirtualSite.html</anchorfile>
      <anchor>ae2cebbf8ffefd3da4086bcf33505f2a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setParticles</name>
      <anchorfile>classOpenMM_1_1VirtualSite.html</anchorfile>
      <anchor>ad3ca2daaa916c80122c2856041d5e2d9</anchor>
      <arglist>(const std::vector&lt; int &gt; &amp;particleIndices)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OpenMM::TwoParticleAverageSite</name>
    <filename>classOpenMM_1_1TwoParticleAverageSite.html</filename>
    <base>OpenMM::VirtualSite</base>
    <member kind="function">
      <type></type>
      <name>TwoParticleAverageSite</name>
      <anchorfile>classOpenMM_1_1TwoParticleAverageSite.html</anchorfile>
      <anchor>a42015bfc58d5593514faf069943a2f58</anchor>
      <arglist>(int particle1, int particle2, double weight1, double weight2)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getWeight</name>
      <anchorfile>classOpenMM_1_1TwoParticleAverageSite.html</anchorfile>
      <anchor>ac6e23479f2a71c24e8396b726e44d671</anchor>
      <arglist>(int particle) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OpenMM::ThreeParticleAverageSite</name>
    <filename>classOpenMM_1_1ThreeParticleAverageSite.html</filename>
    <base>OpenMM::VirtualSite</base>
    <member kind="function">
      <type></type>
      <name>ThreeParticleAverageSite</name>
      <anchorfile>classOpenMM_1_1ThreeParticleAverageSite.html</anchorfile>
      <anchor>a838df882ad3722e808984e35100cf931</anchor>
      <arglist>(int particle1, int particle2, int particle3, double weight1, double weight2, double weight3)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getWeight</name>
      <anchorfile>classOpenMM_1_1ThreeParticleAverageSite.html</anchorfile>
      <anchor>ac6e23479f2a71c24e8396b726e44d671</anchor>
      <arglist>(int particle) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OpenMM::OutOfPlaneSite</name>
    <filename>classOpenMM_1_1OutOfPlaneSite.html</filename>
    <base>OpenMM::VirtualSite</base>
    <member kind="function">
      <type></type>
      <name>OutOfPlaneSite</name>
      <anchorfile>classOpenMM_1_1OutOfPlaneSite.html</anchorfile>
      <anchor>a6eb3deecc5b4f72da9f38f6969d44c0f</anchor>
      <arglist>(int particle1, int particle2, int particle3, double weight12, double weight13, double weightCross)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getWeight12</name>
      <anchorfile>classOpenMM_1_1OutOfPlaneSite.html</anchorfile>
      <anchor>a45882850cffa3a64dee00add4510cb6d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getWeight13</name>
      <anchorfile>classOpenMM_1_1OutOfPlaneSite.html</anchorfile>
      <anchor>af16e9a657befcf10d29c10e466e34924</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getWeightCross</name>
      <anchorfile>classOpenMM_1_1OutOfPlaneSite.html</anchorfile>
      <anchor>af80dfcb9b7bc2bd0ec1d0fa288ca3f28</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OpenMM::Kernel</name>
    <filename>classOpenMM_1_1Kernel.html</filename>
    <member kind="function">
      <type></type>
      <name>Kernel</name>
      <anchorfile>classOpenMM_1_1Kernel.html</anchorfile>
      <anchor>a4d7fb588e6d609d95d8cd491492ed420</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Kernel</name>
      <anchorfile>classOpenMM_1_1Kernel.html</anchorfile>
      <anchor>a02a6120b4d386cfe5b1b574a741c4db5</anchor>
      <arglist>(const Kernel &amp;copy)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Kernel</name>
      <anchorfile>classOpenMM_1_1Kernel.html</anchorfile>
      <anchor>a3dcb03991bf1a79eec1925f73123aa84</anchor>
      <arglist>(KernelImpl *impl)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Kernel</name>
      <anchorfile>classOpenMM_1_1Kernel.html</anchorfile>
      <anchor>a00edfda44e9c85e50370a302a8fe8558</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Kernel &amp;</type>
      <name>operator=</name>
      <anchorfile>classOpenMM_1_1Kernel.html</anchorfile>
      <anchor>a1ca119af2cb88c8ce6abd35df7985f8d</anchor>
      <arglist>(const Kernel &amp;copy)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getName</name>
      <anchorfile>classOpenMM_1_1Kernel.html</anchorfile>
      <anchor>a5e164ba33b1dfc211559756aa5d486c0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const KernelImpl &amp;</type>
      <name>getImpl</name>
      <anchorfile>classOpenMM_1_1Kernel.html</anchorfile>
      <anchor>ac9fd118499c44fe7e7189b6e2a9d1bdf</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>KernelImpl &amp;</type>
      <name>getImpl</name>
      <anchorfile>classOpenMM_1_1Kernel.html</anchorfile>
      <anchor>a7f52dd31b5ba7c491a5d49f1c38ea9c7</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OpenMM::KernelFactory</name>
    <filename>classOpenMM_1_1KernelFactory.html</filename>
    <member kind="function" virtualness="pure">
      <type>virtual KernelImpl *</type>
      <name>createKernelImpl</name>
      <anchorfile>classOpenMM_1_1KernelFactory.html</anchorfile>
      <anchor>a6725fd4766718b1da9c55eb8406895ae</anchor>
      <arglist>(std::string name, const Platform &amp;platform, ContextImpl &amp;context) const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~KernelFactory</name>
      <anchorfile>classOpenMM_1_1KernelFactory.html</anchorfile>
      <anchor>a65199c8de5d7e8930498f3e1ceab6691</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OpenMM::KernelImpl</name>
    <filename>classOpenMM_1_1KernelImpl.html</filename>
    <member kind="function">
      <type></type>
      <name>KernelImpl</name>
      <anchorfile>classOpenMM_1_1KernelImpl.html</anchorfile>
      <anchor>ac09428ee97f551559a68dc5263a8d326</anchor>
      <arglist>(std::string name, const Platform &amp;platform)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~KernelImpl</name>
      <anchorfile>classOpenMM_1_1KernelImpl.html</anchorfile>
      <anchor>a5f786e9103e3c0390749cd1acaf793ca</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getName</name>
      <anchorfile>classOpenMM_1_1KernelImpl.html</anchorfile>
      <anchor>a33957ff81d96d5eb86be59fea5034afd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Platform &amp;</type>
      <name>getPlatform</name>
      <anchorfile>classOpenMM_1_1KernelImpl.html</anchorfile>
      <anchor>acca12ce0cccb3112794e9c85389075a5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>Kernel</name>
      <anchorfile>classOpenMM_1_1KernelImpl.html</anchorfile>
      <anchor>a3807a3ebd0e05ca8cb4d928025a943d2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OpenMM::Platform</name>
    <filename>classOpenMM_1_1Platform.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Platform</name>
      <anchorfile>classOpenMM_1_1Platform.html</anchorfile>
      <anchor>ac9776566b67c64e4c343b6e6546cb177</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const std::string &amp;</type>
      <name>getName</name>
      <anchorfile>classOpenMM_1_1Platform.html</anchorfile>
      <anchor>a5d7b0bf125fba4d708903ab3abba2b57</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>getSpeed</name>
      <anchorfile>classOpenMM_1_1Platform.html</anchorfile>
      <anchor>a1045a04584dbb532043a64847285c888</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>supportsDoublePrecision</name>
      <anchorfile>classOpenMM_1_1Platform.html</anchorfile>
      <anchor>aa02bf7000b6d19193ef2ffdd7194b4cb</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; std::string &gt; &amp;</type>
      <name>getPropertyNames</name>
      <anchorfile>classOpenMM_1_1Platform.html</anchorfile>
      <anchor>a51de074fede8e21a0a12e9d44829c04d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const std::string &amp;</type>
      <name>getPropertyValue</name>
      <anchorfile>classOpenMM_1_1Platform.html</anchorfile>
      <anchor>a5d821cd5b1f3b8042b8a04705f0a5919</anchor>
      <arglist>(const Context &amp;context, const std::string &amp;property) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setPropertyValue</name>
      <anchorfile>classOpenMM_1_1Platform.html</anchorfile>
      <anchor>a65d35410aa94c99edc93d612f047814f</anchor>
      <arglist>(Context &amp;context, const std::string &amp;property, const std::string &amp;value) const </arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getPropertyDefaultValue</name>
      <anchorfile>classOpenMM_1_1Platform.html</anchorfile>
      <anchor>a2c75bae41f5ab657c9b00760963f2e6a</anchor>
      <arglist>(const std::string &amp;property) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPropertyDefaultValue</name>
      <anchorfile>classOpenMM_1_1Platform.html</anchorfile>
      <anchor>a8fd4f77d0b269cf214b553b630373ee2</anchor>
      <arglist>(const std::string &amp;property, const std::string &amp;value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>contextCreated</name>
      <anchorfile>classOpenMM_1_1Platform.html</anchorfile>
      <anchor>a8a781cbc8ea9eb145c3d6e9cafe9a6f3</anchor>
      <arglist>(ContextImpl &amp;context, const std::map&lt; std::string, std::string &gt; &amp;properties) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>contextDestroyed</name>
      <anchorfile>classOpenMM_1_1Platform.html</anchorfile>
      <anchor>a79221762a29c1118e8ff77946168a9c4</anchor>
      <arglist>(ContextImpl &amp;context) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>registerKernelFactory</name>
      <anchorfile>classOpenMM_1_1Platform.html</anchorfile>
      <anchor>a76d1db1f96d3161aef7065bd25c1a49d</anchor>
      <arglist>(const std::string &amp;name, KernelFactory *factory)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>supportsKernels</name>
      <anchorfile>classOpenMM_1_1Platform.html</anchorfile>
      <anchor>a354d0de0ba10bbeb6de3e5ec3dedf69e</anchor>
      <arglist>(const std::vector&lt; std::string &gt; &amp;kernelNames) const </arglist>
    </member>
    <member kind="function">
      <type>Kernel</type>
      <name>createKernel</name>
      <anchorfile>classOpenMM_1_1Platform.html</anchorfile>
      <anchor>ad908c32a7b6e3623e46bed602b6097d2</anchor>
      <arglist>(const std::string &amp;name, ContextImpl &amp;context) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>registerPlatform</name>
      <anchorfile>classOpenMM_1_1Platform.html</anchorfile>
      <anchor>aeba0e1725cf1727c6b4a0490e39b1f9b</anchor>
      <arglist>(Platform *platform)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>getNumPlatforms</name>
      <anchorfile>classOpenMM_1_1Platform.html</anchorfile>
      <anchor>a247c6c8ee9b97691f5d0c8ab5865c6d0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Platform &amp;</type>
      <name>getPlatform</name>
      <anchorfile>classOpenMM_1_1Platform.html</anchorfile>
      <anchor>a587fe32173fc690d2f5b9f4780ec4d8d</anchor>
      <arglist>(int index)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Platform &amp;</type>
      <name>getPlatformByName</name>
      <anchorfile>classOpenMM_1_1Platform.html</anchorfile>
      <anchor>a45fbfd23dd585da00f2266f72f832efd</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Platform &amp;</type>
      <name>findPlatform</name>
      <anchorfile>classOpenMM_1_1Platform.html</anchorfile>
      <anchor>a8c6cac2b363ff1e84beffb182a0a16e4</anchor>
      <arglist>(const std::vector&lt; std::string &gt; &amp;kernelNames)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>loadPluginLibrary</name>
      <anchorfile>classOpenMM_1_1Platform.html</anchorfile>
      <anchor>a79d4349749ec8cc84c833bc47024b1c0</anchor>
      <arglist>(const std::string &amp;file)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::vector&lt; std::string &gt;</type>
      <name>loadPluginsFromDirectory</name>
      <anchorfile>classOpenMM_1_1Platform.html</anchorfile>
      <anchor>a2313aa93ac5b29b1f85d64230e760f84</anchor>
      <arglist>(const std::string &amp;directory)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const std::string &amp;</type>
      <name>getDefaultPluginsDirectory</name>
      <anchorfile>classOpenMM_1_1Platform.html</anchorfile>
      <anchor>a361733729e5a1b63f5b11c133435a8e2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const std::string &amp;</type>
      <name>getOpenMMVersion</name>
      <anchorfile>classOpenMM_1_1Platform.html</anchorfile>
      <anchor>a3a4a71844ddbdb2f09ae2e4f8c071bf7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>ContextImpl &amp;</type>
      <name>getContextImpl</name>
      <anchorfile>classOpenMM_1_1Platform.html</anchorfile>
      <anchor>ac06cb4edc595e730e4b52010b78a910a</anchor>
      <arglist>(Context &amp;context) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const ContextImpl &amp;</type>
      <name>getContextImpl</name>
      <anchorfile>classOpenMM_1_1Platform.html</anchorfile>
      <anchor>a3f5713987eef10cdb97f944fff29fc38</anchor>
      <arglist>(const Context &amp;context) const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; std::string &gt;</type>
      <name>platformProperties</name>
      <anchorfile>classOpenMM_1_1Platform.html</anchorfile>
      <anchor>a1efc8e2dff4fbbddf744dc6351b7a23f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OpenMM::XmlSerializer</name>
    <filename>classOpenMM_1_1XmlSerializer.html</filename>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>serialize</name>
      <anchorfile>classOpenMM_1_1XmlSerializer.html</anchorfile>
      <anchor>af9091c68915e297e5d355a5899ba41ad</anchor>
      <arglist>(const T *object, const std::string &amp;rootName, std::ostream &amp;stream)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static T *</type>
      <name>deserialize</name>
      <anchorfile>classOpenMM_1_1XmlSerializer.html</anchorfile>
      <anchor>aec3ce12d5d0fed0c963a7f8fdbc8e0f7</anchor>
      <arglist>(std::istream &amp;stream)</arglist>
    </member>
  </compound>
</tagfile>
